{"version":3,"sources":["serviceWorker.ts","model/DateRange.ts","model/Event.ts","config.ts","utils/enumToArray.ts","utils/compareDates.ts","utils/fetchEvents.ts","components/ErrorComponent.tsx","components/Form.tsx","components/LoadingComponent.tsx","components/EventPrice.tsx","utils/translate.ts","components/EventCodeParagraph.tsx","utils/capitalizeFirstLetter.tsx","components/EventDateComponent.tsx","components/EventTimeComponent.tsx","components/EventComponent.tsx","components/TalksPageEmail.tsx","utils/categorizeEvents.ts","components/TalksPage.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","DateRange","from","to","date","this","beginConstant","endConstant","fromConstant","constant","now","Date","forMonth","getFullYear","getMonth","Error","currentDate","month","year","ALL","CURRENT_MONTH","FROM_CURRENT_MONTH","EventType","EventPriceCurrency","EVENTS_CSV_URL","ConfigChecker","get","url","required","value","enumToArray","enumerable","Object","keys","map","key","filter","v","Event","data","name","topic","city","day","days","time","priceAmount","priceCurrency","codeName","codePercent","type","web","inMail","topParagraph","topParagraphOrder","c","number","parseInt","split","trim","isNaN","getDate","asType","includes","boolean","default","setDate","compareEventsbyDate","event1","event2","undefined","date1","date2","delta","error","console","warn","compareDates","dateToCompare","fetchEvents","a","async","fetch","toString","cache","response","text","dataString","papaparse","parse","header","object","emptyKeysAsUndefined","decapitalize","isNotEmpty","t","message","sort","ErrorComponent","children","className","Form","action","method","target","onSubmit","event","preventDefault","form","formData","FormData","alert","body","json","result","status","reset","htmlFor","defaultValue","id","LoadingComponent","EventPrice","price","isNullOrUndefined","Math","ceil","currency","CZK","EUR","translateCurrency","EventCodeParagraph","verbose","floor","capitalizeFirstLetter","word","substr","toUpperCase","EventDateComponent","monthString","moment","format","locale","dateString","replace","EventTimeComponent","timeString","EventComponent","href","rel","TalksPageEmail","props","events","range","categorizedEvents","eventsCategorized","eventOrError","push","eventsCategorizedFiltered","eventType","length","categorizeEvents","isIn","e","b","i","HACKATHON","CONFERENCE","MEETUP","WORKSHOP","translateEventType","item","TalksPage","state","fromConstants","loadEvents","setState","onChange","React","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6bae2b0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","export class DateRange {\r\n    constructor(public from?: Date, public to?: Date) {}\r\n\r\n    static fromConstants(beginConstant: RangeConstant, endConstant: RangeConstant): DateRange {\r\n        return new DateRange(DateRange.fromConstant(beginConstant).from, DateRange.fromConstant(endConstant).to);\r\n    }\r\n\r\n    static fromConstant(constant: RangeConstant): DateRange {\r\n        const now = new Date();\r\n\r\n        switch (constant) {\r\n            case 'NOW':\r\n                return new DateRange(now, now);\r\n\r\n            case 'CURRENT_MONTH':\r\n                return DateRange.forMonth(now);\r\n\r\n            case 'NEXT_MONTH':\r\n                return DateRange.forMonth(new Date(now.getFullYear(), now.getMonth() + 1, 1));\r\n\r\n            // TODO: Maybe better name for NEXT_NEXT_MONTH\r\n            // TODO: DRY\r\n            case 'NEXT_NEXT_MONTH':\r\n                return DateRange.forMonth(new Date(now.getFullYear(), now.getMonth() + 2, 1));\r\n\r\n            case 'INFINITY':\r\n                return new DateRange();\r\n\r\n            default:\r\n                throw new Error(`Unknown range constant \"${constant}\".`);\r\n        }\r\n    }\r\n\r\n    static forMonth(currentDate = new Date()): DateRange {\r\n        const month = currentDate.getMonth();\r\n        const year = currentDate.getFullYear();\r\n\r\n        const from = new Date(year, month, 1);\r\n        const to = new Date(year, month + 1, -1);\r\n\r\n        return new DateRange(from, to);\r\n    }\r\n\r\n    // TODO: Deprecated due to fromConstants, fromConstant\r\n    static ALL = new DateRange();\r\n    static CURRENT_MONTH = DateRange.forMonth();\r\n    static FROM_CURRENT_MONTH = new DateRange(DateRange.CURRENT_MONTH.from);\r\n\r\n    isIn(date: Date) {\r\n        if (this.from && this.from > date) {\r\n            return false;\r\n        }\r\n\r\n        if (this.to && this.to < date) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nexport type RangeConstant = 'NOW' | 'CURRENT_MONTH' | 'NEXT_MONTH' | 'NEXT_NEXT_MONTH' | 'INFINITY';\r\n\r\n/*/\r\nfor (const constant of ['NOW', 'CURRENT_MONTH', 'NEXT_MONTH', 'NEXT_NEXT_MONTH', 'INFINITY'] as RangeConstant[]) {\r\n    console.log(constant, DateRange.fromConstant(constant));\r\n}\r\n/**/\r\n","import { ConfigChecker, IConfigSource } from 'configchecker';\r\nimport { enumToArray } from '../utils/enumToArray';\r\n\r\nexport enum EventType {\r\n    CONFERENCE = 'CONFERENCE',\r\n    MEETUP = 'MEETUP',\r\n    WORKSHOP = 'WORKSHOP',\r\n    HACKATHON = 'HACKATHON',\r\n}\r\n\r\nexport enum EventPriceCurrency {\r\n    CZK,\r\n    EUR,\r\n}\r\n\r\n// TODO: Maybe better name because it colides with native browser Event class\r\nexport class Event {\r\n    //TODO: readonly id: number;\r\n    public name: string;\r\n    public topic?: string;\r\n    public city?: string;\r\n    public year?: number;\r\n    public month?: number;\r\n    public day?: number;\r\n    public days?: string;\r\n    public date?: Date;\r\n    public time?: string;\r\n    public priceAmount?: number;\r\n    public priceCurrency?: EventPriceCurrency;\r\n    public codeName?: string;\r\n    public codePercent?: number;\r\n    public type: EventType;\r\n    public web: URL;\r\n    public inMail: boolean;\r\n    public topParagraph?: string;\r\n    public topParagraphOrder: number;\r\n\r\n    constructor(data: IConfigSource) {\r\n        const c = ConfigChecker.from(data);\r\n\r\n        this.name = c.get('name').required().value;\r\n        this.topic = c.get('topic').value;\r\n        this.city = c.get('city').value;\r\n        this.year = c.get('year').number().value;\r\n        this.month = c.get('month').number().value;\r\n        this.days = c.get('days').value;\r\n        if (this.days) {\r\n            this.day = parseInt(this.days.split('-')[0].trim());\r\n        }\r\n\r\n        if (this.day && isNaN(this.day)) {\r\n            throw new Error(`Day parsed from \"${this.days}\" is NaN.`);\r\n        }\r\n\r\n        if (this.year && this.month && this.day) {\r\n            try {\r\n                this.date = new Date(this.year, this.month - 1, this.day);\r\n                if (isNaN(this.date.getDate())) throw new Error();\r\n            } catch {\r\n                throw new Error(`Cannot create a valie new Date(${this.year}, ${this.month} - 1, ${this.day});`);\r\n            }\r\n        }\r\n\r\n        this.time = c.get('time').value;\r\n        this.priceAmount = c.get('priceAmount').number().value; //.required()\r\n        // TODO: Configchecker should take number 0 as defined\r\n\r\n        this.priceCurrency = (c.get('priceCurrency').value as unknown) as EventPriceCurrency;\r\n        this.codeName = c.get('codeName').value;\r\n        this.codePercent = c.get('codePercent').number().value;\r\n\r\n        // TODO: Better\r\n        if (this.codePercent) this.codePercent = this.codePercent / 100;\r\n\r\n        this.type = c\r\n            .get('type')\r\n            .required()\r\n            .asType<EventType>().value;\r\n        // TODO: Configchecker native in asType\r\n        // TODO: Typescript Enum in Configchecker\r\n        if (!enumToArray(EventType).includes((this.type as unknown) as string)) {\r\n            throw new Error(`Wrong type \"${this.type}\".`);\r\n        }\r\n        this.web = c\r\n            .get('web')\r\n            .url()\r\n            .required().value;\r\n        this.inMail = c\r\n            .get('inMail')\r\n            .boolean()\r\n            .required().value;\r\n\r\n        this.topParagraph = c.get('topParagraph').value;\r\n\r\n        this.topParagraphOrder = c\r\n            .get('topParagraphOrder')\r\n            .number()\r\n            .default(999).value!;\r\n\r\n        //throw new Error(`Error test`);\r\n    }\r\n\r\n    /**\r\n     * Purpose of this method is to provide date only for comparing functions - so it can be wrong (for example can be shifted by a day) but roughly OK and everytime defined\r\n     * compared to Event.date which is everytime precise but can be undefined\r\n     * This getter is usefull when we have only a month and year of an event but not a precise day.\r\n     */\r\n    get dateToCompare(): Date {\r\n        if (this.date) {\r\n            return this.date;\r\n        } else if (this.year && this.month) {\r\n            const date = new Date(this.year, this.month - 1, 25 /*Some late day in the month*/);\r\n            return date;\r\n        } else {\r\n            const date = new Date();\r\n            date.setDate(date.getDate() + 1000 /*TODO: Some big constant*/);\r\n            return date;\r\n        }\r\n    }\r\n\r\n    /*static error(error: Error):Event{\r\n        return new Event();\r\n    }*/\r\n}\r\n","import { ConfigChecker } from 'configchecker';\r\n\r\n// TODO: Better\r\nconst config = ConfigChecker.from(\r\n    /*process.env*/\r\n    {\r\n        EVENTS_CSV_URL: `https://docs.google.com/spreadsheets/d/e/2PACX-1vRq0s15Wi8g4c61FOqIhpn0Lw4azPJdgQ3XmJ3uLDSCqQVs52nJa99YJjOGhl-XJZ713zCprzuYOpVu/pub?gid=0&single=true&output=csv`,\r\n    },\r\n);\r\n\r\n//export const PORT = config.get('PORT', 'Server port').number().default(3000).value;\r\nexport const EVENTS_CSV_URL = config\r\n    .get('EVENTS_CSV_URL')\r\n    .url()\r\n    .required().value; //TODO: use in all places that debugs something\r\n","export function enumToArray(enumerable: any): string[] {\r\n    let enumMembers: any[] = Object.keys(enumerable).map((key) => enumerable[key]);\r\n    let enumValues: string[] = enumMembers.filter((v) => typeof v === 'string');\r\n    return enumValues;\r\n}\r\n","import { Event } from '../model/Event';\r\n\r\ntype CompareResult = 1 | -1 | 0;\r\n\r\nexport function compareEventsbyDate(event1?: Event | string, event2?: Event | string): CompareResult {\r\n    if (typeof event1 === 'string') event1 = undefined;\r\n    if (typeof event2 === 'string') event2 = undefined;\r\n    return compareDates(event1 ? event1.dateToCompare : undefined, event2 ? event2.dateToCompare : undefined);\r\n}\r\n\r\nexport function compareDates(date1 = new Date(), date2 = new Date()): CompareResult {\r\n    try {\r\n        const delta = ((new Date(date2) as any) as number) - ((new Date(date1) as any) as number);\r\n\r\n        if (delta > 0) {\r\n            return -1;\r\n        } else if (delta < 0) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    } catch (error) {\r\n        console.warn(error);\r\n        return -1;\r\n    }\r\n}\r\n","import { EVENTS_CSV_URL } from './../config';\r\nimport { IConfigSource } from 'configchecker';\r\nimport { decapitalize, emptyKeysAsUndefined, isNotEmpty } from 'configchecker/lib/utils/object';\r\nimport papaparse from 'papaparse';\r\nimport { Event } from '../model/Event';\r\nimport { compareEventsbyDate } from './compareDates';\r\nimport { IEvents } from '../model/IEvents';\r\n\r\nexport async function fetchEvents(): Promise<IEvents> {\r\n    const response = await fetch(EVENTS_CSV_URL.toString(), { cache: 'reload' });\r\n    const dataString = await response.text();\r\n    const { data } = papaparse.parse(dataString, {\r\n        header: true,\r\n    });\r\n\r\n    //console.log('data', data);\r\n\r\n    return (data as IConfigSource[])\r\n        .map((object) =>\r\n            emptyKeysAsUndefined<string | undefined>(\r\n                object,\r\n                (value) => !['', 'write', 'NULL'].includes((value || '').trim()),\r\n            ),\r\n        )\r\n        .map(decapitalize)\r\n        .filter(isNotEmpty)\r\n        .filter((t) => t['inMail'])\r\n        .map((t) => {\r\n            try {\r\n                return new Event(t);\r\n            } catch (error) {\r\n                return error.message;\r\n                //return error as Error;//Event.error(error);\r\n            }\r\n        })\r\n        .sort(compareEventsbyDate);\r\n    //.filter(isEvent);\r\n}\r\n\r\n/*\r\nTODO: Remove or use\r\nfunction isEvent(t: any): t is Event {\r\n    return t instanceof Event;\r\n}\r\n*/\r\n","import * as React from 'react';\r\n\r\nexport function ErrorComponent({ children }: React.PropsWithChildren<{}>) {\r\n    return (\r\n        <>\r\n            <div className=\"error\">{children}</div>\r\n        </>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { IWPFromResponse } from '../model/IWPFromResponse';\r\n\r\nexport function Form() {\r\n    // TODO: To Config\r\n    return (\r\n        <>\r\n            <form\r\n                action=\"https://www.pavolhejny.com/wp-json/contact-form-7/v1/contact-forms/2466/feedback\"\r\n                method=\"post\"\r\n                target=\"_blank\"\r\n                onSubmit={async (event) => {\r\n                    event.preventDefault();\r\n                    const form = event.target as HTMLFormElement;\r\n                    const formData = new FormData(form);\r\n\r\n                    if (!formData.get('gdpr')) {\r\n                        alert(`Potřebujeme od Vás zaškrtnout souhlas se zpracováním osobních údajů.`);\r\n                        return;\r\n                    }\r\n\r\n                    try {\r\n                        const result = (await (\r\n                            await fetch(form.action, {\r\n                                method: 'POST',\r\n                                body: formData,\r\n                            })\r\n                        ).json()) as IWPFromResponse;\r\n\r\n                        if (result.status !== 'mail_sent') {\r\n                            throw new Error(result.message);\r\n                        }\r\n\r\n                        form.reset();\r\n                        alert(`Děkujeme, můžete se těšit na další email!`);\r\n                    } catch (error) {\r\n                        alert(error.message /*TODO: Better*/);\r\n                    }\r\n                }}\r\n            >\r\n                <input type=\"hidden\" name=\"source\" value={window.location.toString()} />\r\n\r\n                <div className=\"group\">\r\n                    <input type=\"text\" name=\"fullname\" className=\"field\" />\r\n                    <label htmlFor=\"name\">Vaše jméno:</label>\r\n                    <div className=\"bar\"></div>\r\n                </div>\r\n\r\n                <div className=\"group\">\r\n                    <input type=\"email\" name=\"email\" required defaultValue=\"@\" className=\"field\" />\r\n                    <label htmlFor=\"email\">E-mail: *</label>\r\n                    <div className=\"bar\"></div>\r\n                </div>\r\n\r\n                <div className=\"group\">\r\n                    <label>\r\n                        <input type=\"checkbox\" name=\"gdpr\" />\r\n                        Souhlasím se zpracováním osobních údajů\r\n                    </label>\r\n                </div>\r\n\r\n                {/* TODO: We need here some GDPR */}\r\n                <div className=\"center\">\r\n                    <input value=\"Přihlásit se \" type=\"submit\" id=\"submit\" name=\"submit\" className=\"button\" />\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n","import * as React from 'react';\r\n\r\nexport function LoadingComponent() {\r\n    return (\r\n        <>\r\n            <div className=\"loading\">Načítání...</div>\r\n        </>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { Event } from '../model/Event';\r\nimport { isNullOrUndefined } from 'util';\r\nimport { translateCurrency } from '../utils/translate';\r\n\r\ninterface IEventPriceProps {\r\n    event: Event;\r\n    price?: number;\r\n}\r\n\r\nexport function EventPrice({ event, price }: IEventPriceProps) {\r\n    if (!price) price = event.priceAmount;\r\n    if (isNullOrUndefined(price)) return <></>;\r\n    if (price === 0) return <>💸&nbsp;Zdarma</>;\r\n    return <>💸&nbsp;{`${Math.ceil(price * 100) / 100} ${translateCurrency(event.priceCurrency!)}`}</>;\r\n}\r\n","import { EventPriceCurrency, EventType } from './../model/Event';\r\n\r\nexport function translateCurrency(currency: EventPriceCurrency): string {\r\n    // TODO: Hardcoded\r\n    switch (currency) {\r\n        case 'CZK' as any:\r\n        case EventPriceCurrency.CZK:\r\n            return 'Kč';\r\n        case 'EUR' as any:\r\n        case EventPriceCurrency.EUR:\r\n            return '‎€';\r\n        default:\r\n            return currency;\r\n    }\r\n}\r\n\r\nexport function translateEventType(eventType: EventType): string {\r\n    // TODO: Plular\r\n    // TODO: Hardcoded\r\n    switch (eventType) {\r\n        case EventType.HACKATHON:\r\n            return 'Hackathony';\r\n        case EventType.CONFERENCE:\r\n            return '‎Konference';\r\n        case EventType.MEETUP:\r\n            return '‎Meetupy';\r\n        case EventType.WORKSHOP:\r\n            return '‎Workshopy';\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Event } from '../model/Event';\r\nimport { EventPrice } from './EventPrice';\r\n\r\ninterface IEventCodeParagraphProps {\r\n    event: Event;\r\n    verbose: boolean;\r\n}\r\n\r\nexport function EventCodeParagraph({ event, verbose }: IEventCodeParagraphProps) {\r\n    return (\r\n        <>\r\n            {event.codeName && event.codePercent && event.priceAmount && event.priceCurrency && (\r\n                <>\r\n                    <br />A s kódem <b>{event.codeName}</b> to budete mít o {Math.floor(event.codePercent * 100)}%\r\n                    levnější\r\n                    {verbose && (\r\n                        <>\r\n                            tzn. za <EventPrice {...{ event, price: event.priceAmount * (1 - event.codePercent) }} />\r\n                        </>\r\n                    )}\r\n                    .\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n","export function capitalizeFirstLetter(word: string): string {\r\n    return word.substr(0, 1).toUpperCase() + word.substr(1);\r\n}\r\n","import * as React from 'react';\r\nimport { Event } from '../model/Event';\r\nimport moment from 'moment';\r\nimport 'moment/locale/cs';\r\nimport { capitalizeFirstLetter } from '../utils/capitalizeFirstLetter';\r\n\r\ninterface EventDateComponentProps {\r\n    event: Event;\r\n}\r\n\r\nexport function EventDateComponent({ event }: EventDateComponentProps) {\r\n    const { date, year, month } = event;\r\n\r\n    if (date) {\r\n        try {\r\n            moment.locale('cs');\r\n            let dateString = moment(date).format('LLLL');\r\n            dateString = dateString.split('0:00')[0];\r\n            //TODO: More elegant way\r\n            dateString = dateString.replace('leden', 'Ledna');\r\n            dateString = dateString.replace('únor', 'Února');\r\n            dateString = dateString.replace('březen', 'Března');\r\n            dateString = dateString.replace('duben', 'Dubna');\r\n            dateString = dateString.replace('květen', 'Května');\r\n            dateString = dateString.replace('červen', 'Června');\r\n            dateString = dateString.replace('červenec', 'Července');\r\n            dateString = dateString.replace('srpen', 'Srpna');\r\n            dateString = dateString.replace('září', 'Září');\r\n            dateString = dateString.replace('říjen', 'Října');\r\n            dateString = dateString.replace('listopad', 'Listopadu');\r\n            dateString = dateString.replace('prosinec', 'Prosince');\r\n            dateString = capitalizeFirstLetter(dateString);\r\n            return <>📅&nbsp;{dateString}</>;\r\n        } catch (error) {\r\n            console.error(`Problem when parsing moment('${date}').format('LLLL'); See more below:`);\r\n            console.error(error);\r\n            return <></>;\r\n        }\r\n    } else if (year && month) {\r\n        let monthString = moment(month, 'M').format('MMMM');\r\n        monthString = capitalizeFirstLetter(monthString);\r\n        return (\r\n            <>\r\n                📅&nbsp;{monthString} {year}\r\n            </>\r\n        );\r\n    } else {\r\n        return <></>;\r\n    }\r\n}\r\n\r\ninterface EventTimeComponentProps {\r\n    time: string;\r\n}\r\n","import * as React from 'react';\r\nimport { Event } from '../model/Event';\r\nimport moment from 'moment';\r\nimport 'moment/locale/cs';\r\n\r\ninterface EventTimeComponentProps {\r\n    event: Event;\r\n}\r\n\r\nexport function EventTimeComponent({ event }: EventTimeComponentProps) {\r\n    const { time } = event;\r\n\r\n    if (!time) {\r\n        return <></>;\r\n    }\r\n\r\n    try {\r\n        moment.locale('cs');\r\n        let timeString = moment(time, 'hh A').format('LT');\r\n        if (timeString === 'Invalid date') {\r\n            throw new Error(`Time was parsed as \"Invalid date\".`);\r\n        }\r\n        return <>⏱️&nbsp;{timeString}</>;\r\n    } catch (error) {\r\n        console.error(`Problem when parsing moment('2010-10-20 ' + '${time}').format('LT'); See more below:`);\r\n        console.error(error);\r\n        return <></>;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Event } from '../model/Event';\r\nimport { EventPrice } from './EventPrice';\r\nimport { EventCodeParagraph } from './EventCodeParagraph';\r\nimport { EventDateComponent } from './EventDateComponent';\r\nimport { EventTimeComponent } from './EventTimeComponent';\r\n\r\ninterface IEventComponentProps {\r\n    event: Event;\r\n}\r\n\r\nexport function EventComponent({ event }: IEventComponentProps) {\r\n    return (\r\n        <span className={event.dateToCompare < new Date() ? 'past' : ''}>\r\n            {event.topParagraph ? '⭐' : ''}\r\n            <a href={event.web.toString()} target=\"_blank\" rel=\"nofolow noopener noreferrer\">\r\n                <b>{event.name}</b>\r\n                {event.topic ? ` – ${event.topic}` : ''}\r\n            </a>\r\n            <br />\r\n            <>🌆&nbsp;{event.city}</>\r\n            &nbsp;\r\n            <EventDateComponent {...{ event }} />\r\n            <EventTimeComponent {...{ event }} />\r\n            &nbsp;\r\n            <EventPrice {...{ event }} />\r\n            <EventCodeParagraph {...{ event, verbose: true }} />\r\n            {}\r\n            <br />\r\n            <br />\r\n            {}\r\n        </span>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { DateRange } from '../model/DateRange';\r\nimport { Event } from '../model/Event';\r\nimport { IEvents } from '../model/IEvents';\r\nimport { categorizeEvents } from '../utils/categorizeEvents';\r\nimport { translateEventType } from '../utils/translate';\r\nimport { ErrorComponent } from './ErrorComponent';\r\nimport { EventComponent } from './EventComponent';\r\nimport { EventCodeParagraph } from './EventCodeParagraph';\r\n\r\ninterface ITalksPageEmailProps {\r\n    range: DateRange;\r\n    events: IEvents;\r\n}\r\n\r\nexport function TalksPageEmail(props: ITalksPageEmailProps) {\r\n    const { events, range } = props;\r\n\r\n    const filteredEvents = events.filter((event) => (event instanceof Event ? range.isIn(event.dateToCompare) : true));\r\n\r\n    //console.log('filteredEvents', filteredEvents);\r\n    const categorizedEvents = categorizeEvents(filteredEvents);\r\n\r\n    return (\r\n        <>\r\n            <h2>{`📅 Konference / meetupy / hackathony – co se děje z IT / Startupové akce 🌆`}</h2>\r\n            Ahoj,\r\n            <br />\r\n            opět jsme dali dohromady seznam událostí, na které se vyplatí zajít:\r\n            <br />\r\n            {(events.filter((e) => e instanceof Event) as Event[])\r\n                .filter((e) => e.topParagraph)\r\n                .sort((a, b) => (a.topParagraphOrder > b.topParagraphOrder ? 1 : -1))\r\n                .map((event, i) => (\r\n                    <p key={i} className={event.dateToCompare < new Date() ? 'past' : ''}>\r\n                        {event.topParagraph}\r\n                        <EventCodeParagraph {...{ event, verbose: false }} />\r\n                    </p>\r\n                ))}\r\n            {Object.keys(categorizedEvents).map((type) => (\r\n                <div key={type}>\r\n                    <h2>{translateEventType(type as any)}</h2>\r\n                    <span>\r\n                        {categorizedEvents![type].map((item, key) =>\r\n                            item instanceof Event ? (\r\n                                <EventComponent {...{ event: item, key }} />\r\n                            ) : (\r\n                                <ErrorComponent {...{ key }}>{item}</ErrorComponent>\r\n                            ),\r\n                        )}\r\n                    </span>\r\n                </div>\r\n            ))}\r\n            <br />\r\n            <i>\r\n                PS: <b>Budeme rádi za vaše návrhy a připomínky</b>, můžete <b>odpovědět rovnou na email</b>.\r\n            </i>\r\n            {/*\r\n            <br />\r\n            PPS: Pokud už nechcete dostat další email, klikněte sem pro jejich odhlášení.\r\n            */}\r\n            <br />\r\n            <br />\r\n            <a href=\"https://www.pavolhejny.com/\">Pavol</a>\r\n            &nbsp;&amp;&nbsp;\r\n            <a href=\"https://www.linkedin.com/in/tereza-texlova/\">Tereza</a>\r\n        </>\r\n    );\r\n}\r\n","import { EventType } from './../model/Event';\r\nimport { IEvents } from '../model/IEvents';\r\nimport { Event } from '../model/Event';\r\nimport { enumToArray } from './enumToArray';\r\nimport { IEventsCategorized } from '../model/IEventsCategorized';\r\n\r\nexport function categorizeEvents(events: IEvents): IEventsCategorized {\r\n    const eventsCategorized: IEventsCategorized = {};\r\n\r\n    for (const eventType of enumToArray(EventType)) {\r\n        eventsCategorized[eventType] = [];\r\n    }\r\n\r\n    for (const eventOrError of events) {\r\n        let type: string;\r\n        if (eventOrError instanceof Event) {\r\n            type = eventOrError.type;\r\n        } else {\r\n            type = 'errors';\r\n        }\r\n\r\n        eventsCategorized[type] = eventsCategorized[type] || [];\r\n        eventsCategorized[type].push(eventOrError);\r\n    }\r\n\r\n    const eventsCategorizedFiltered: IEventsCategorized = {};\r\n\r\n    for (const eventType of Object.keys(eventsCategorized)) {\r\n        if (eventsCategorized[eventType].length > 0) {\r\n            eventsCategorizedFiltered[eventType] = eventsCategorized[eventType];\r\n        }\r\n    }\r\n\r\n    return eventsCategorizedFiltered;\r\n}\r\n","import * as React from 'react';\r\nimport { DateRange, RangeConstant } from '../model/DateRange';\r\nimport { IEvents } from '../model/IEvents';\r\nimport { fetchEvents } from '../utils/fetchEvents';\r\nimport { ErrorComponent } from './ErrorComponent';\r\nimport { Form } from './Form';\r\nimport { LoadingComponent } from './LoadingComponent';\r\nimport { TalksPageEmail } from './TalksPageEmail';\r\n\r\ninterface ITalksPageProps {}\r\n\r\ninterface ITalksPageState {\r\n    error: null | string;\r\n    range: DateRange;\r\n    events: null | IEvents;\r\n}\r\n\r\nexport class TalksPage extends React.Component<ITalksPageProps, ITalksPageState> {\r\n    state: ITalksPageState = {\r\n        error: null,\r\n        range: DateRange.fromConstants('CURRENT_MONTH', 'NEXT_MONTH'),\r\n        events: null,\r\n    };\r\n\r\n    constructor(props: ITalksPageProps) {\r\n        super(props);\r\n        this.loadEvents();\r\n    }\r\n\r\n    private async loadEvents() {\r\n        try {\r\n            const events = await fetchEvents();\r\n            //console.log('events', events);\r\n            this.setState({ events });\r\n        } catch (error) {\r\n            this.setState({ error: error.message });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"content\">\r\n                    <div className=\"front black\">\r\n                        <div className=\"inner\">\r\n                            <h1>Mějte přehled o nejzajímavějších událostech z IT &amp; startupového světa.</h1>\r\n                            <h2 className=\"font-light\">\r\n                                Dejte nám Vaší emailovou adresu a my Vám budeme pravidelně jednou za měsíc posílat co se\r\n                                děje:\r\n                            </h2>\r\n                            <Form />\r\n\r\n                            <h2 className=\"separator font-light\">\r\n                                A jak takový mail vypadá? Tady máte živou ukázku z rozpracovaného mailu\r\n                                <select\r\n                                    className={'font-light option-in-text'}\r\n                                    onChange={(event) => {\r\n                                        const [beginConstant, endConstant] = event.target.value.split(\r\n                                            '-',\r\n                                        ) as RangeConstant[];\r\n\r\n                                        const range = DateRange.fromConstants(beginConstant, endConstant);\r\n                                        /*console.log(\r\n                                            event.target.value,\r\n                                            DateRange.fromConstant(beginConstant),\r\n                                            DateRange.fromConstant(endConstant),\r\n                                            range,\r\n                                        );*/\r\n\r\n                                        this.setState({ range });\r\n                                    }}\r\n                                >\r\n                                    <option value=\"CURRENT_MONTH-NEXT_MONTH\">\r\n                                        na další měsíc + události tohoto měsíce:\r\n                                    </option>\r\n                                    <option value=\"NEXT_MONTH-NEXT_NEXT_MONTH\">na další měsíc:</option>\r\n                                    <option value=\"NOW-INFINITY\">\r\n                                        se všemi událostmi, co právě evidujeme do budoucna:\r\n                                    </option>\r\n                                    <option value=\"INFINITY-INFINITY\">se všemi událostmi, co právě evidujeme:</option>\r\n                                </select>\r\n                            </h2>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"letter white\">\r\n                        {/*\r\n                        TODO: Or make tabs - see bellow\r\n                        <div className=\"tab\" onClick={() => this.setState({ range: DateRange.CURRENT_MONTH })}>\r\n                            Aktuání měsíc\r\n                        </div>\r\n                        <div className=\"tab\" onClick={() => this.setState({ range: DateRange.ALL })}>\r\n                            Vše\r\n                        </div>\r\n                         */}\r\n\r\n                        <div className=\"inner\">\r\n                            {/*\r\n                            TODO: Here can be a selecotr of the months but firstly we need to add backend and better DB so it is not priority now.\r\n                            \r\n                            TODO: Or maybe like this:\r\n                            <select>\r\n                                <option>Aktuální měsíc</option>\r\n                                <option>Budoucí události</option>\r\n                                <option>Budoucí události tento měsíc</option>\r\n                                <option>Vše</option>\r\n                            </select>\r\n\r\n                            */}\r\n\r\n                            {this.state.error ? (\r\n                                <ErrorComponent>\r\n                                    <pre>{this.state.error}</pre>\r\n                                </ErrorComponent>\r\n                            ) : !this.state.events ? (\r\n                                <LoadingComponent />\r\n                            ) : (\r\n                                <TalksPageEmail {...{ events: this.state.events, range: this.state.range }} />\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <footer className=\"footer black\">{/*TODO:*/}</footer>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { TalksPage } from './components/TalksPage';\r\n\r\nReactDOM.render(<TalksPage />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}