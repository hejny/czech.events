{"version":3,"sources":["model/database/NewsletterContent.ts","model/database/EventNewsletter.ts","model/database/Newsletter.ts","model/database/Event.ts","model/database/EventCode.ts","utils/constructObjectFromJSON.ts","model/database/Subscriber.ts","api/ApiClient.ts","components/AboutPage.tsx","model/DateRange.ts","components/ErrorComponent.tsx","components/Form.tsx","components/LoadingComponent.tsx","utils/categorizeEvents.ts","utils/enumToArray.ts","components/EventPrice.tsx","utils/translate.ts","components/EventCodeParagraph.tsx","utils/capitalizeFirstLetter.tsx","components/EventDateComponent.tsx","components/EventTimeComponent.tsx","components/EventComponent.tsx","components/NewsletterContentsComponent.tsx","utils/eventTypeToNewsletterContentPosition.ts","utils/compareDates.ts","components/TalksPageEmail.tsx","components/TalksPage.tsx","serviceWorker.ts","EventsApp.tsx","index.tsx"],"names":["NewsletterContentPosition","EventNewsletter","Index","Entity","PrimaryGeneratedColumn","type","name","Column","enum","nullable","ManyToOne","Event","event","eventNewsletters","onDelete","onUpdate","JoinColumn","referencedColumnName","Newsletter","newsletter","OneToMany","eventNewsletter","NewsletterContent","newsletterContent","eager","EventType","EventPriceCurrency","EventVisibility","comment","newsletterContents","EventCode","length","precision","scale","eventCodes","unique","default","eventCode","this","days","parseInt","split","trim","year","month","day","date","Date","isNaN","getDate","setDate","constructObjectFromJSON","Class","data","instance","Object","assign","Subscriber","ApiClient","apiUrl","get","map","subscriber","post","path","fetch","response","json","responseData","method","headers","Accept","body","JSON","stringify","AboutPage","className","src","url","key","href","alt","download","DateRange","from","to","beginConstant","endConstant","fromConstant","constant","now","forMonth","getFullYear","getMonth","Error","currentDate","ErrorComponent","children","Form","props","onSubmit","a","async","preventDefault","form","target","formData","FormData","alert","email","fullname","source","window","location","toString","apiClient","postSubscriber","result","console","log","reset","message","defaultValue","htmlFor","required","defaultChecked","value","id","LoadingComponent","ALL","CURRENT_MONTH","FROM_CURRENT_MONTH","categorizeEvents","events","eventsCategorized","enumerable","keys","filter","v","enumToArray","eventOrError","push","eventsCategorizedFiltered","eventType","EventPrice","price","isNullOrUndefined","Math","ceil","currency","CZK","EUR","translateCurrency","priceCurrency","EventCodeParagraph","showCode","verbose","code","floor","capitalizeFirstLetter","word","substr","toUpperCase","toLowerCase","EventDateComponent","monthString","moment","format","replace","locale","dateString","error","EventTimeComponent","time","timeString","EventComponent","dateToCompare","web","rel","topic","city","NewsletterContentsComponent","position","sort","b","order","dangerouslySetInnerHTML","__html","html","join","SUBJECT","eventTypeToNewsletterContentPosition","CONFERENCE","HEAD_CONFERENCES","MEETUP","HEAD_MEETUPS","WORKSHOP","HEAD_WORKSHOPS","HACKATHON","HEAD_HACKATHONS","compareEventsbyDate","event1","event2","date1","date2","delta","warn","compareDates","TalksPageEmail","range","filteredEvents","isIn","categorizedEvents","HEAD","translateEventType","serializeId","BOTTOM","TalksPage","state","fromConstants","load","getEvents","setState","getNewsletter","onChange","React","Boolean","hostname","match","EventsApp","rootElement","history","run","createHashHistory","ReactDOM","render","exact","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f6e8ea91.chunk.js","sourcesContent":["import { Column, Entity, Index, JoinColumn, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { Newsletter } from './Newsletter';\r\nimport { Event } from './Event';\r\n\r\nexport enum NewsletterContentPosition {\r\n    SUBJECT = 'SUBJECT',\r\n    HEAD = 'HEAD',\r\n    HEAD_CONFERENCES = 'HEAD_CONFERENCES',\r\n    HEAD_MEETUPS = 'HEAD_MEETUPS',\r\n    HEAD_WORKSHOPS = 'HEAD_WORKSHOPS',\r\n    HEAD_HACKATHONS = 'HEAD_HACKATHONS',\r\n    BOTTOM = 'BOTTOM',\r\n}\r\n\r\n@Index('newsletter_id', ['newsletterId'], {})\r\n@Index('position', ['position'], {})\r\n@Entity('NewsletterContent')\r\nexport class NewsletterContent {\r\n    @PrimaryGeneratedColumn({ type: 'int', name: 'id' })\r\n    id: number;\r\n\r\n    @Column('int', { name: 'newsletter_id', nullable: true })\r\n    newsletterId: number;\r\n\r\n    @Column('int', { name: 'event_id', nullable: true, comment: 'Is the paragraph connected to some one event?' })\r\n    eventId: number;\r\n\r\n    @Column('enum', {\r\n        name: 'position',\r\n        enum: NewsletterContentPosition,\r\n    })\r\n    position: NewsletterContentPosition;\r\n\r\n    @Column('int', { name: 'order', nullable: true })\r\n    order: number | null;\r\n\r\n    @Column('text', { name: 'html' })\r\n    html: string;\r\n\r\n    @Column('text', { name: 'note', nullable: true })\r\n    note: string | null;\r\n\r\n    @ManyToOne(\r\n        () => Newsletter,\r\n        (newsletter) => newsletter.newsletterContents,\r\n        { onDelete: 'RESTRICT', onUpdate: 'RESTRICT' },\r\n    )\r\n    @JoinColumn([{ name: 'newsletter_id', referencedColumnName: 'id' }])\r\n    newsletter: Newsletter;\r\n\r\n    @ManyToOne(\r\n        () => Event,\r\n        (event) => event.newsletterContents,\r\n        { onDelete: 'RESTRICT', onUpdate: 'RESTRICT' },\r\n    )\r\n    @JoinColumn([{ name: 'event_id', referencedColumnName: 'id' }])\r\n    event: Event;\r\n}\r\n","import { Column, Entity, Index, JoinColumn, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { Event } from './Event';\r\nimport { Newsletter } from './Newsletter';\r\n\r\n// TODO: All enums to real TS enums\r\n@Index('event_id', ['eventId'], {})\r\n@Index('newsletter_id', ['newsletterId'], {})\r\n@Index('status', ['status'], {})\r\n@Entity('Event_Newsletter')\r\nexport class EventNewsletter {\r\n    @PrimaryGeneratedColumn({ type: 'int', name: 'id' })\r\n    id: number;\r\n\r\n    @Column('int', { name: 'event_id' })\r\n    eventId: number;\r\n\r\n    @Column('int', { name: 'newsletter_id' })\r\n    newsletterId: number;\r\n\r\n    @Column('enum', { name: 'status', enum: ['VISIBLE', 'HIDDEN'] })\r\n    status: 'VISIBLE' | 'HIDDEN';\r\n\r\n    @Column('text', { name: 'note', nullable: true })\r\n    note: string | null;\r\n\r\n    @ManyToOne(\r\n        () => Event,\r\n        (event) => event.eventNewsletters,\r\n        { onDelete: 'RESTRICT', onUpdate: 'RESTRICT' },\r\n    )\r\n    @JoinColumn([{ name: 'event_id', referencedColumnName: 'id' }])\r\n    event: Event;\r\n\r\n    @ManyToOne(\r\n        () => Newsletter,\r\n        (newsletter) => newsletter.eventNewsletters,\r\n        { onDelete: 'RESTRICT', onUpdate: 'RESTRICT' },\r\n    )\r\n    @JoinColumn([{ name: 'newsletter_id', referencedColumnName: 'id' }])\r\n    newsletter: Newsletter;\r\n}\r\n","import { Column, Entity, Index, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { EventNewsletter } from './EventNewsletter';\r\nimport { NewsletterContent } from './NewsletterContent';\r\n\r\n@Index('year', ['year'], {})\r\n@Index('month', ['month'], {})\r\n@Entity('Newsletter')\r\nexport class Newsletter {\r\n    @PrimaryGeneratedColumn({ type: 'int', name: 'id' })\r\n    id: number;\r\n\r\n    @Column('year', { name: 'year' })\r\n    year: number;\r\n\r\n    @Column('int', { name: 'month' })\r\n    month: number;\r\n\r\n    @Column('text', { name: 'note', nullable: true })\r\n    note: string | null;\r\n\r\n    @OneToMany(\r\n        () => EventNewsletter,\r\n        (eventNewsletter) => eventNewsletter.newsletter,\r\n    )\r\n    eventNewsletters: EventNewsletter[];\r\n\r\n    @OneToMany(\r\n        () => NewsletterContent,\r\n        (newsletterContent) => newsletterContent.newsletter,\r\n        { eager: true },\r\n    )\r\n    newsletterContents: NewsletterContent[];\r\n}\r\n","import { NewsletterContent } from './NewsletterContent';\r\nimport { Column, Entity, Index, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { EventCode } from './EventCode';\r\nimport { EventNewsletter } from './EventNewsletter';\r\n\r\nexport enum EventType {\r\n    CONFERENCE = 'CONFERENCE',\r\n    MEETUP = 'MEETUP',\r\n    WORKSHOP = 'WORKSHOP',\r\n    HACKATHON = 'HACKATHON',\r\n}\r\n\r\nexport enum EventPriceCurrency {\r\n    CZK = 'CZK',\r\n    EUR = 'EUR',\r\n}\r\n\r\nexport enum EventVisibility {\r\n    PENDING = 'PENDING',\r\n    VISIBLE = 'VISIBLE',\r\n    HIDDEN = 'HIDDEN',\r\n    FEATURED = 'FEATURED',\r\n}\r\n\r\n@Index('serializeId', ['serializeId'], { unique: true })\r\n@Index('name_topic', ['name', 'topic'], { unique: true })\r\n@Index('type', ['type'], {})\r\n@Index('city', ['city'], {})\r\n@Index('year', ['year'], {})\r\n@Index('month', ['month'], {})\r\n@Index('time', ['time'], {})\r\n@Index('price', ['price'], {})\r\n@Index('priceCurrency', ['priceCurrency'], {})\r\n@Index('visibility', ['visibility'], {})\r\n@Entity('Event')\r\nexport class Event {\r\n    @PrimaryGeneratedColumn({ type: 'int', name: 'id' })\r\n    id: number;\r\n\r\n    @Column('varchar', { name: 'serializeId', unique: true, length: 1000 })\r\n    serializeId: string;\r\n\r\n    @Column('varchar', { name: 'name', length: 300 })\r\n    name: string;\r\n\r\n    @Column('varchar', { name: 'topic', nullable: true, length: 500 })\r\n    topic: string | null;\r\n\r\n    @Column('enum', {\r\n        name: 'type',\r\n        enum: EventType,\r\n    })\r\n    type: EventType;\r\n\r\n    @Column('varchar', { name: 'web', nullable: true, length: 1000 })\r\n    web: string | null;\r\n\r\n    @Column('varchar', { name: 'city', nullable: true, length: 200 })\r\n    city: string | null;\r\n\r\n    @Column('year', { name: 'year', nullable: true })\r\n    year: number | null;\r\n\r\n    @Column('int', { name: 'month', nullable: true })\r\n    month: number | null;\r\n\r\n    @Column('varchar', { name: 'days', nullable: true, length: 5 })\r\n    days: string | null;\r\n\r\n    @Column('varchar', { name: 'time', nullable: true, length: 8 })\r\n    time: string | null;\r\n\r\n    @Column('int', { name: 'price', nullable: true })\r\n    price: number | null;\r\n\r\n    @Column('enum', {\r\n        name: 'priceCurrency',\r\n        nullable: true,\r\n        enum: EventPriceCurrency,\r\n    })\r\n    priceCurrency: EventPriceCurrency | null;\r\n\r\n    @Column('enum', {\r\n        name: 'visibility',\r\n        enum: EventVisibility,\r\n        default: () => \"'PENDING'\",\r\n    })\r\n    visibility: EventVisibility;\r\n\r\n    @Column('text', { name: 'note', nullable: true })\r\n    note: string | null;\r\n\r\n    @OneToMany(\r\n        () => EventCode,\r\n        (eventCode) => eventCode.event,\r\n        { eager: true },\r\n    )\r\n    eventCodes: EventCode[];\r\n\r\n    @OneToMany(\r\n        () => EventNewsletter,\r\n        (eventNewsletter) => eventNewsletter.event,\r\n    )\r\n    eventNewsletters: EventNewsletter[];\r\n\r\n    @OneToMany(\r\n        () => NewsletterContent,\r\n        (newsletterContent) => newsletterContent.event,\r\n        { eager: true },\r\n    )\r\n    newsletterContents: NewsletterContent[];\r\n\r\n    get day(): number | null {\r\n        if (this.days) {\r\n            return parseInt(this.days.split('-')[0].trim());\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    get date(): Date | null {\r\n        if (this.year && this.month && this.day) {\r\n            const date = new Date(this.year, this.month - 1, this.day);\r\n\r\n            if (!isNaN(date.getDate())) {\r\n                return date;\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Purpose of this method is to provide date only for comparing functions - so it can be wrong (for example can be shifted by a day) but roughly OK and everytime defined\r\n     * compared to Event.date which is everytime precise but can be undefined\r\n     * This getter is usefull when we have only a month and year of an event but not a precise day.\r\n     */\r\n    get dateToCompare(): Date {\r\n        if (this.date) {\r\n            return this.date;\r\n        } else if (this.year && this.month) {\r\n            const date = new Date(this.year, this.month - 1, 25 /*Some late day in the month*/);\r\n            return date;\r\n        } else {\r\n            const date = new Date();\r\n            date.setDate(date.getDate() + 1000 /*TODO: Some big constant*/);\r\n            return date;\r\n        }\r\n    }\r\n\r\n    /*static error(error: Error):Event{\r\n    return new Event();\r\n    }*/\r\n}\r\n","import { Column, Entity, Index, JoinColumn, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { Event } from './Event';\r\n\r\n@Index('event_id', ['eventId'], {})\r\n@Index('type', ['type'], {})\r\n@Index('value', ['value'], {})\r\n@Entity('EventCode')\r\nexport class EventCode {\r\n    @PrimaryGeneratedColumn({ type: 'int', name: 'id' })\r\n    id: number;\r\n\r\n    @Column('int', { name: 'event_id' })\r\n    eventId: number;\r\n\r\n    @Column('enum', { name: 'type', enum: ['DISCOUNT_PERCENT'] })\r\n    type: 'DISCOUNT_PERCENT';\r\n\r\n    @Column('varchar', { name: 'code', length: 200 })\r\n    code: string;\r\n\r\n    @Column('float', { name: 'value', precision: 10, scale: 2 })\r\n    value: number;\r\n\r\n    @Column('text', { name: 'note', nullable: true })\r\n    note: string | null;\r\n\r\n    @ManyToOne(\r\n        () => Event,\r\n        (event) => event.eventCodes,\r\n        { onDelete: 'RESTRICT', onUpdate: 'RESTRICT' },\r\n    )\r\n    @JoinColumn([{ name: 'event_id', referencedColumnName: 'id' }])\r\n    event: Event;\r\n}\r\n","type Instantiable = { new (...args: any[]): any };\r\n\r\n// TODO: Create AbscractApiClient library\r\nexport function constructObjectFromJSON<TClass extends Instantiable>(\r\n    Class: TClass,\r\n    data: Partial<InstanceType<TClass>>,\r\n) {\r\n    const instance = new Class();\r\n    Object.assign(instance, data);\r\n    return instance;\r\n}\r\n","import { Column, Entity, Index, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Index('email', ['email'], {})\r\n@Index('created', ['created'], {})\r\n@Index('active', ['active'], {})\r\n@Entity('Subscriber')\r\nexport class Subscriber {\r\n    @PrimaryGeneratedColumn({ type: 'int', name: 'id' })\r\n    id: number;\r\n\r\n    @Column('varchar', { name: 'email', length: 1000 })\r\n    email: string;\r\n\r\n    @Column('varchar', { name: 'fullname', nullable: true, length: 1000 })\r\n    fullname: string | null;\r\n\r\n    @Column('varchar', { name: 'source', nullable: true, length: 2000 })\r\n    source: string | null;\r\n\r\n    @Column('timestamp', { name: 'created', nullable: true })\r\n    created: Date | null;\r\n\r\n    @Column('smallint', { name: 'active', nullable: true, default: () => \"'1'\" })\r\n    active: number | null;\r\n}\r\n","import { Event } from '../model/database/Event';\r\nimport { constructObjectFromJSON } from '../utils/constructObjectFromJSON';\r\nimport { Subscriber } from '../model/database/Subscriber';\r\nimport { Newsletter } from '../model/database/Newsletter';\r\n\r\nexport class ApiClient {\r\n    constructor(private apiUrl: string) {}\r\n\r\n    async getAbout() {}\r\n\r\n    async getEvents(): Promise<Event[]> {\r\n        const data = await this.get(`/events`);\r\n        return data.map((data) => constructObjectFromJSON(Event, data));\r\n    }\r\n\r\n    async getNewsletter(year: number, month: number): Promise<Newsletter> {\r\n        const data = await this.get(`/newsletters/${year}/${month}`);\r\n        return constructObjectFromJSON(Newsletter, data);\r\n    }\r\n\r\n    async postSubscriber(subscriber: Subscriber): Promise<Subscriber> {\r\n        const data = await this.post(\r\n            `/subscribers`,\r\n            subscriber /* TODO: Should be subscriber data directly in request body or should it be wrapped in {subscriber:{...}} */,\r\n        );\r\n        return constructObjectFromJSON(Subscriber, data);\r\n    }\r\n\r\n    // TODO: Create AbscractApiClient library\r\n    // TODO: Generically typed\r\n    private async get(path: string /*TODO: Add option for query*/) {\r\n        const response = await fetch(`${this.apiUrl}${path}`);\r\n        const responseData = await response.json();\r\n        return responseData;\r\n    }\r\n\r\n    // TODO: Create AbscractApiClient library\r\n    // TODO: Generically typed\r\n    private async post(path: string, data: {} /*TODO: Maybe add option for query*/) {\r\n        const response = await fetch(`${this.apiUrl}${path}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data),\r\n        });\r\n        const responseData = await response.json();\r\n        return responseData;\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nexport function AboutPage() {\r\n    return (\r\n        <>\r\n            <div className=\"content about\">\r\n                <div className=\"front black\">\r\n                    <div className=\"inner\">\r\n                        {/* <h1>Czech.events</h1> */}\r\n\r\n                        {[\r\n                            {\r\n                                name: 'Tmavá verze',\r\n                                src: 'czech.events.black-logo.png',\r\n                            },\r\n\r\n                            {\r\n                                name: 'Světlá verze',\r\n                                src: 'czech.events.white-logo.png',\r\n                            },\r\n                        ].map(({ name, src }) => {\r\n                            const url = `https://czech.events/design/logos/${src}`;\r\n                            return (\r\n                                <div key={src} className=\"logo\">\r\n                                    <a href={url}>\r\n                                        <img src={url} alt=\"Czech.events logo\" />\r\n                                    </a>\r\n                                    {`${name} `}\r\n                                    <a href={url} download>\r\n                                        (Stáhnout)\r\n                                    </a>\r\n                                    <pre>\r\n                                        {`                                     \r\n<a href=\"https://czech.events/\">\r\n    <img src=\"${url}\" alt=\"Czech.events logo\" width=\"200\" />\r\n</a>`.trim()}\r\n                                    </pre>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","export class DateRange {\r\n    constructor(public from?: Date, public to?: Date) {}\r\n\r\n    static fromConstants(beginConstant: RangeConstant, endConstant: RangeConstant): DateRange {\r\n        return new DateRange(DateRange.fromConstant(beginConstant).from, DateRange.fromConstant(endConstant).to);\r\n    }\r\n\r\n    static fromConstant(constant: RangeConstant): DateRange {\r\n        const now = new Date();\r\n\r\n        switch (constant) {\r\n            case 'NOW':\r\n                return new DateRange(now, now);\r\n\r\n            case 'CURRENT_MONTH':\r\n                return DateRange.forMonth(now);\r\n\r\n            case 'NEXT_MONTH':\r\n                return DateRange.forMonth(new Date(now.getFullYear(), now.getMonth() + 1, 1));\r\n\r\n            // TODO: Maybe better name for NEXT_NEXT_MONTH\r\n            // TODO: DRY\r\n            case 'NEXT_NEXT_MONTH':\r\n                return DateRange.forMonth(new Date(now.getFullYear(), now.getMonth() + 2, 1));\r\n\r\n            case 'INFINITY':\r\n                return new DateRange();\r\n\r\n            default:\r\n                throw new Error(`Unknown range constant \"${constant}\".`);\r\n        }\r\n    }\r\n\r\n    static forMonth(currentDate = new Date()): DateRange {\r\n        const month = currentDate.getMonth();\r\n        const year = currentDate.getFullYear();\r\n\r\n        const from = new Date(year, month, 1);\r\n        const to = new Date(year, month + 1, -1);\r\n\r\n        return new DateRange(from, to);\r\n    }\r\n\r\n    // TODO: Deprecated due to fromConstants, fromConstant\r\n    static ALL = new DateRange();\r\n    static CURRENT_MONTH = DateRange.forMonth();\r\n    static FROM_CURRENT_MONTH = new DateRange(DateRange.CURRENT_MONTH.from);\r\n\r\n    isIn(date: Date) {\r\n        if (this.from && this.from > date) {\r\n            return false;\r\n        }\r\n\r\n        if (this.to && this.to < date) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nexport type RangeConstant = 'NOW' | 'CURRENT_MONTH' | 'NEXT_MONTH' | 'NEXT_NEXT_MONTH' | 'INFINITY';\r\n\r\n/*/\r\nfor (const constant of ['NOW', 'CURRENT_MONTH', 'NEXT_MONTH', 'NEXT_NEXT_MONTH', 'INFINITY'] as RangeConstant[]) {\r\n    console.log(constant, DateRange.fromConstant(constant));\r\n}\r\n/**/\r\n","import * as React from 'react';\r\n\r\nexport function ErrorComponent({ children }: React.PropsWithChildren<{}>) {\r\n    return (\r\n        <>\r\n            <div className=\"error\">{children}</div>\r\n        </>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { constructObjectFromJSON } from '../utils/constructObjectFromJSON';\r\nimport { Subscriber } from '../model/database/Subscriber';\r\nimport { ApiClient } from '../api/ApiClient';\r\n\r\ninterface IFormProps {\r\n    apiClient: ApiClient;\r\n}\r\n\r\nexport function Form(props: IFormProps) {\r\n    // TODO: To Config\r\n    return (\r\n        <>\r\n            <form\r\n                onSubmit={async (event) => {\r\n                    event.preventDefault();\r\n                    const form = event.target as HTMLFormElement;\r\n                    const formData = new FormData(form);\r\n\r\n                    if (!formData.get('gdpr')) {\r\n                        alert(`Potřebujeme od Vás zaškrtnout souhlas se zpracováním osobních údajů.`);\r\n                        return;\r\n                    }\r\n\r\n                    const subscriber = constructObjectFromJSON(Subscriber, {\r\n                        email: formData.get('email') as string,\r\n                        fullname: formData.get('fullname') as string,\r\n                        source: window.location.toString(),\r\n                    });\r\n\r\n                    try {\r\n                        const result = await props.apiClient.postSubscriber(subscriber);\r\n\r\n                        console.log('result', result);\r\n\r\n                        form.reset();\r\n                        alert(`Děkujeme, můžete se těšit na další email!`);\r\n                    } catch (error) {\r\n                        alert(error.message /*TODO: Better*/);\r\n                    }\r\n                }}\r\n            >\r\n                <div className=\"group\">\r\n                    <input type=\"text\" name=\"fullname\" className=\"field\" defaultValue=\"\" />\r\n                    <label htmlFor=\"name\">Vaše jméno:</label>\r\n                    <div className=\"bar\"></div>\r\n                </div>\r\n\r\n                <div className=\"group\">\r\n                    <input type=\"email\" name=\"email\" required defaultValue=\"@\" className=\"field\" />\r\n                    <label htmlFor=\"email\">E-mail: *</label>\r\n                    <div className=\"bar\"></div>\r\n                </div>\r\n\r\n                <div className=\"group\">\r\n                    <label>\r\n                        <input type=\"checkbox\" name=\"gdpr\" defaultChecked={false} />\r\n                        Souhlasím se zpracováním osobních údajů\r\n                    </label>\r\n                </div>\r\n\r\n                {/* TODO: We need here some GDPR */}\r\n                <div className=\"center\">\r\n                    <input value=\"Přihlásit se \" type=\"submit\" id=\"submit\" name=\"submit\" className=\"button\" />\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n","import * as React from 'react';\r\n\r\nexport function LoadingComponent() {\r\n    return (\r\n        <>\r\n            <div className=\"loading\">Načítání...</div>\r\n        </>\r\n    );\r\n}\r\n","import { EventType } from './../model/database/Event';\r\nimport { Event } from '../model/database/Event';\r\nimport { enumToArray } from './enumToArray';\r\nimport { IEventsCategorized } from '../model/IEventsCategorized';\r\n\r\nexport function categorizeEvents(events: Event[]): IEventsCategorized {\r\n    const eventsCategorized: IEventsCategorized = {};\r\n\r\n    for (const eventType of enumToArray(EventType)) {\r\n        eventsCategorized[eventType] = [];\r\n    }\r\n\r\n    for (const eventOrError of events) {\r\n        let type: string;\r\n        if (eventOrError instanceof Event) {\r\n            type = eventOrError.type;\r\n        } else {\r\n            type = 'errors';\r\n        }\r\n\r\n        eventsCategorized[type] = eventsCategorized[type] || [];\r\n        eventsCategorized[type].push(eventOrError);\r\n    }\r\n\r\n    const eventsCategorizedFiltered: IEventsCategorized = {};\r\n\r\n    for (const eventType of Object.keys(eventsCategorized)) {\r\n        if (eventsCategorized[eventType].length > 0) {\r\n            eventsCategorizedFiltered[eventType] = eventsCategorized[eventType];\r\n        }\r\n    }\r\n\r\n    return eventsCategorizedFiltered;\r\n}\r\n","export function enumToArray(enumerable: any): string[] {\r\n    let enumMembers: any[] = Object.keys(enumerable).map((key) => enumerable[key]);\r\n    let enumValues: string[] = enumMembers.filter((v) => typeof v === 'string');\r\n    return enumValues;\r\n}\r\n","import * as React from 'react';\r\nimport { Event } from '../model/database/Event';\r\nimport { isNullOrUndefined } from 'util';\r\nimport { translateCurrency } from '../utils/translate';\r\n\r\ninterface IEventPriceProps {\r\n    event: Event;\r\n    price?: number;\r\n}\r\n\r\n// TODO: Component name suffix to all components\r\nexport function EventPrice({ event, price }: IEventPriceProps) {\r\n    if (!price) price = event.price;\r\n    if (isNullOrUndefined(price)) return <></>;\r\n    if (price === 0) return <>💸&nbsp;Zdarma</>;\r\n    return <>💸&nbsp;{`${Math.ceil(price * 100) / 100} ${translateCurrency(event.priceCurrency!)}`}</>;\r\n}\r\n","import { EventType, EventPriceCurrency } from './../model/database/Event';\r\n\r\nexport function translateCurrency(currency: EventPriceCurrency): string {\r\n    // TODO: Hardcoded\r\n    switch (currency) {\r\n        case 'CZK' as any:\r\n        case EventPriceCurrency.CZK:\r\n            return 'Kč';\r\n        case 'EUR' as any:\r\n        case EventPriceCurrency.EUR:\r\n            return '‎€';\r\n        default:\r\n            return currency;\r\n    }\r\n}\r\n\r\nexport function translateEventType(eventType: EventType): string {\r\n    // TODO: Plular\r\n    // TODO: Hardcoded\r\n    switch (eventType) {\r\n        case EventType.HACKATHON:\r\n            return 'Hackathony';\r\n        case EventType.CONFERENCE:\r\n            return '‎Konference';\r\n        case EventType.MEETUP:\r\n            return '‎Meetupy';\r\n        case EventType.WORKSHOP:\r\n            return '‎Workshopy';\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Event } from '../model/database/Event';\r\nimport { EventPrice } from './EventPrice';\r\n\r\ninterface IEventCodeParagraphProps {\r\n    event: Event;\r\n    showCode: boolean;\r\n    verbose: boolean;\r\n}\r\n\r\nexport function EventCodeParagraph({ event, showCode, verbose }: IEventCodeParagraphProps) {\r\n    return (\r\n        <>\r\n            {event.eventCodes.map((eventCode, key) => (\r\n                <span {...{ key }}>\r\n                    <br />\r\n\r\n                    {showCode ? (\r\n                        <>\r\n                            A s kódem <b>{eventCode.code}</b> to budete mít o {Math.floor(eventCode.value * 100)}%\r\n                            levnější\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            S naším kódem, který budeme posílat v dalším emalu, to budete mít o{' '}\r\n                            {Math.floor(eventCode.value * 100)}% levnější\r\n                        </>\r\n                    )}\r\n\r\n                    {verbose && (\r\n                        <>\r\n                            , tzn. za <EventPrice {...{ event, price: event.price * (1 - eventCode.value) }} />\r\n                        </>\r\n                    )}\r\n                </span>\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n","export function capitalizeFirstLetter(word: string): string {\r\n    return word.substr(0, 1).toUpperCase() + word.substr(1).toLowerCase();\r\n}\r\n","import * as React from 'react';\r\nimport { Event } from '../model/database/Event';\r\nimport moment from 'moment';\r\nimport 'moment/locale/cs';\r\nimport { capitalizeFirstLetter } from '../utils/capitalizeFirstLetter';\r\n\r\ninterface EventDateComponentProps {\r\n    event: Event;\r\n}\r\n\r\nexport function EventDateComponent({ event }: EventDateComponentProps) {\r\n    const { date, year, month } = event;\r\n\r\n    if (date) {\r\n        try {\r\n            moment.locale('cs');\r\n            let dateString = moment(date).format('LLLL');\r\n            dateString = dateString.split('0:00')[0];\r\n            //TODO: More elegant way\r\n            dateString = dateString.replace('leden', 'ledna');\r\n            dateString = dateString.replace('únor', 'února');\r\n            dateString = dateString.replace('březen', 'března');\r\n            dateString = dateString.replace('duben', 'dubna');\r\n            dateString = dateString.replace('květen', 'května');\r\n            dateString = dateString.replace('červen', 'června');\r\n            dateString = dateString.replace('červnaec', 'červenec'); // This is typo in moment/locale/cs library. We can make an pull request to it but this is the quick local hotfix.\r\n            dateString = dateString.replace('červenec', 'července');\r\n            dateString = dateString.replace('srpen', 'srpna');\r\n            dateString = dateString.replace('září', 'září');\r\n            dateString = dateString.replace('říjen', 'října');\r\n            dateString = dateString.replace('listopad', 'listopadu');\r\n            dateString = dateString.replace('prosinec', 'prosince');\r\n            dateString = capitalizeFirstLetter(dateString);\r\n            return <>📅&nbsp;{dateString}</>;\r\n        } catch (error) {\r\n            console.error(`Problem when parsing moment('${date}').format('LLLL'); See more below:`);\r\n            console.error(error);\r\n            return <></>;\r\n        }\r\n    } else if (year && month) {\r\n        let monthString = moment(month, 'M').format('MMMM');\r\n        monthString = capitalizeFirstLetter(monthString);\r\n        monthString = monthString.replace('Červnaec', 'Červenec'); // This is typo in moment/locale/cs library. We can make an pull request to it but this is the quick local hotfix.\r\n        return (\r\n            <>\r\n                📅&nbsp;{monthString} {year}\r\n            </>\r\n        );\r\n    } else {\r\n        return <></>;\r\n    }\r\n}\r\n\r\ninterface EventTimeComponentProps {\r\n    time: string;\r\n}\r\n","import * as React from 'react';\r\nimport { Event } from '../model/database/Event';\r\nimport moment from 'moment';\r\nimport 'moment/locale/cs';\r\n\r\ninterface EventTimeComponentProps {\r\n    event: Event;\r\n}\r\n\r\nexport function EventTimeComponent({ event }: EventTimeComponentProps) {\r\n    const { time } = event;\r\n\r\n    if (!time) {\r\n        return <></>;\r\n    }\r\n\r\n    try {\r\n        moment.locale('cs');\r\n        let timeString = moment(time, 'hh A').format('LT');\r\n        if (timeString === 'Invalid date') {\r\n            throw new Error(`Time was parsed as \"Invalid date\".`);\r\n        }\r\n        return <>⏱️&nbsp;{timeString}</>;\r\n    } catch (error) {\r\n        console.error(`Problem when parsing moment('2010-10-20 ' + '${time}').format('LT'); See more below:`);\r\n        console.error(error);\r\n        return <></>;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Event } from '../model/database/Event';\r\nimport { EventPrice } from './EventPrice';\r\nimport { EventCodeParagraph } from './EventCodeParagraph';\r\nimport { EventDateComponent } from './EventDateComponent';\r\nimport { EventTimeComponent } from './EventTimeComponent';\r\n\r\ninterface IEventComponentProps {\r\n    event: Event;\r\n}\r\n\r\nexport function EventComponent({ event }: IEventComponentProps) {\r\n    return (\r\n        <span className={event.dateToCompare < new Date() ? 'past' : ''}>\r\n            {/*event.topParagraph ? '⭐' : ''*/}\r\n            <a href={event.web.toString()} target=\"_blank\" rel=\"nofolow noopener noreferrer\">\r\n                <b>{event.name}</b>\r\n                {event.topic ? ` – ${event.topic}` : ''}\r\n            </a>\r\n            <br />\r\n            <>🌆&nbsp;{event.city}</>\r\n            &nbsp;\r\n            <EventDateComponent {...{ event }} />\r\n            <EventTimeComponent {...{ event }} />\r\n            &nbsp;\r\n            <EventPrice {...{ event }} />\r\n            <EventCodeParagraph {...{ event, verbose: true, showCode: false }} />\r\n            {}\r\n            <br />\r\n            <br />\r\n            {}\r\n        </span>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { NewsletterContent, NewsletterContentPosition } from '../model/database/NewsletterContent';\r\n\r\ninterface INewsletterContentsComponentProps {\r\n    position: NewsletterContentPosition;\r\n    newsletterContents: NewsletterContent[];\r\n}\r\n\r\nexport function NewsletterContentsComponent({ newsletterContents, position }: INewsletterContentsComponentProps) {\r\n    return (\r\n        <>\r\n            {newsletterContents\r\n                .filter((newsletterContent) => newsletterContent.position === position)\r\n                .sort((a, b) => (a.order > b.order ? 1 : -1) /* TODO: Correct? */)\r\n                .map((newsletterContent, key) => (\r\n                    <div key={key}>\r\n                        <span dangerouslySetInnerHTML={{ __html: newsletterContent.html.split('\\n').join('<br/>') }} />\r\n                        {position !== NewsletterContentPosition.SUBJECT && (\r\n                            <>\r\n                                <br />\r\n                            </>\r\n                        )}\r\n                    </div>\r\n                ))}\r\n        </>\r\n    );\r\n}\r\n","import { NewsletterContentPosition } from '../model/database/NewsletterContent';\r\nimport { EventType } from '../model/database/Event';\r\n\r\nexport function eventTypeToNewsletterContentPosition(eventType: EventType): NewsletterContentPosition {\r\n    switch (eventType) {\r\n        case EventType.CONFERENCE:\r\n            return NewsletterContentPosition.HEAD_CONFERENCES;\r\n        case EventType.MEETUP:\r\n            return NewsletterContentPosition.HEAD_MEETUPS;\r\n        case EventType.WORKSHOP:\r\n            return NewsletterContentPosition.HEAD_WORKSHOPS;\r\n        case EventType.HACKATHON:\r\n            return NewsletterContentPosition.HEAD_HACKATHONS;\r\n        default:\r\n            throw new Error(`Can not convert \"${eventType}\" into NewsletterContentPosition.`);\r\n    }\r\n}\r\n","import { Event } from '../model/database/Event';\r\n\r\ntype CompareResult = 1 | -1 | 0;\r\n\r\nexport function compareEventsbyDate(event1?: Event, event2?: Event): CompareResult {\r\n    return compareDates(event1.dateToCompare, event2.dateToCompare);\r\n}\r\n\r\nexport function compareDates(date1: Date, date2: Date): CompareResult {\r\n    try {\r\n        const delta = ((new Date(date2) as any) as number) - ((new Date(date1) as any) as number);\r\n\r\n        if (delta > 0) {\r\n            return -1;\r\n        } else if (delta < 0) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    } catch (error) {\r\n        console.warn(error);\r\n        return -1;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { DateRange } from '../model/DateRange';\r\nimport { Event, EventType } from '../model/database/Event';\r\nimport { categorizeEvents } from '../utils/categorizeEvents';\r\nimport { translateEventType } from '../utils/translate';\r\nimport { EventComponent } from './EventComponent';\r\nimport { NewsletterContent, NewsletterContentPosition } from '../model/database/NewsletterContent';\r\nimport { NewsletterContentsComponent } from './NewsletterContentsComponent';\r\nimport { eventTypeToNewsletterContentPosition } from '../utils/eventTypeToNewsletterContentPosition';\r\nimport { compareEventsbyDate } from '../utils/compareDates';\r\nimport { Newsletter } from '../model/database/Newsletter';\r\n\r\ninterface ITalksPageEmailProps {\r\n    range: DateRange;\r\n    events: Event[];\r\n    newsletter: null | Newsletter;\r\n}\r\n\r\nexport function TalksPageEmail(props: ITalksPageEmailProps) {\r\n    const { events, range, newsletter } = props;\r\n\r\n    const filteredEvents = events\r\n        //.filter((event) => (event instanceof Event ? event.inMail : true))\r\n        .filter((event) => (event instanceof Event ? range.isIn(event.dateToCompare) : true))\r\n        .sort((a, b) => compareEventsbyDate(a, b));\r\n\r\n    //console.log('filteredEvents', filteredEvents);\r\n    const categorizedEvents = categorizeEvents(filteredEvents);\r\n\r\n    const newsletterContents: NewsletterContent[] = [];\r\n    if (newsletter) {\r\n        newsletterContents.push(...newsletter.newsletterContents);\r\n    }\r\n    for (const event of filteredEvents) {\r\n        newsletterContents.push(...event.newsletterContents);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>\r\n                {/*`📅 Konference / meetupy / hackathony – co se děje z IT / Startupové akce 🌆`*/}\r\n                <NewsletterContentsComponent {...{ newsletterContents, position: NewsletterContentPosition.SUBJECT }} />\r\n            </h2>\r\n            {/* Ahoj,\r\n            <br />\r\n            opět jsme dali dohromady seznam událostí, na které se vyplatí zajít:\r\n            <br /> */}\r\n            <NewsletterContentsComponent {...{ newsletterContents, position: NewsletterContentPosition.HEAD }} />\r\n            {Object.keys(categorizedEvents).map((type) => (\r\n                <div key={type}>\r\n                    <br />\r\n                    <h2>{translateEventType(type as any)}</h2>\r\n                    <NewsletterContentsComponent\r\n                        {...{ newsletterContents, position: eventTypeToNewsletterContentPosition(type as EventType) }}\r\n                    />\r\n                    <span>\r\n                        {categorizedEvents![type].map((event) => (\r\n                            <EventComponent {...{ event, key: event.serializeId }} />\r\n                        ))}\r\n                    </span>\r\n                </div>\r\n            ))}\r\n            <br /> <br />\r\n            <NewsletterContentsComponent {...{ newsletterContents, position: NewsletterContentPosition.BOTTOM }} />\r\n            {/* <i>\r\n                PS: <b>Budeme rádi za vaše návrhy a připomínky</b>, můžete <b>odpovědět rovnou na email</b>.<br />\r\n                PPS: E-mail posíláme na základě Vaší registrace na stránce{' '}\r\n                <a href=\"https://czech.events/?utm_source=mail&amp;utm_medium=referral&amp;utm_campaign=2020-02_unsubscribe\">\r\n                    czech.events\r\n                </a>\r\n                . Pokud už další email nechcete dostat, napište nám rychlou odpověď.\r\n            </i> */}\r\n            {/*\r\n            <br />\r\n            PPS: Pokud už nechcete dostat další email, klikněte sem pro jejich odhlášení.\r\n            */}\r\n            <br />\r\n            <br />\r\n            <a href=\"https://www.pavolhejny.com/?utm_source=czech.events-mail&amp;utm_medium=referral&amp;utm_campaign=signature\">\r\n                Pavol Hejný\r\n            </a>\r\n            &nbsp;&amp;&nbsp;\r\n            <a href=\"https://www.linkedin.com/in/tereza-texlova/\">Tereza Texlová</a>\r\n        </>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { DateRange, RangeConstant } from '../model/DateRange';\r\nimport { ErrorComponent } from './ErrorComponent';\r\nimport { Form } from './Form';\r\nimport { LoadingComponent } from './LoadingComponent';\r\nimport { TalksPageEmail } from './TalksPageEmail';\r\nimport { Event } from '../model/database/Event';\r\nimport { ApiClient } from '../api/ApiClient';\r\nimport { Newsletter } from '../model/database/Newsletter';\r\n\r\ninterface ITalksPageProps {\r\n    apiClient: ApiClient;\r\n}\r\n\r\ninterface ITalksPageState {\r\n    error: null | string;\r\n    range: DateRange;\r\n    events: null | Event[];\r\n    newsletter: null | Newsletter;\r\n}\r\n\r\nexport class TalksPage extends React.Component<ITalksPageProps, ITalksPageState> {\r\n    state: ITalksPageState = {\r\n        error: null,\r\n        range: DateRange.fromConstants('CURRENT_MONTH', 'NEXT_MONTH'),\r\n        events: null,\r\n        newsletter: null,\r\n    };\r\n\r\n    constructor(props: ITalksPageProps) {\r\n        super(props);\r\n        this.load();\r\n    }\r\n\r\n    private async load() {\r\n        try {\r\n            const events = await this.props.apiClient.getEvents();\r\n            //console.log('events', events);\r\n            this.setState({ events });\r\n\r\n            const newsletter = await this.props.apiClient.getNewsletter(2020, 2 /* TODO: Unhardcode */);\r\n            //console.log('newsletter', newsletter);\r\n            this.setState({ newsletter });\r\n        } catch (error) {\r\n            this.setState({ error: error.message });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"content\">\r\n                    <div className=\"front black\">\r\n                        <div className=\"inner\">\r\n                            <h1>Mějte přehled o nejzajímavějších událostech z IT &amp; startupového světa.</h1>\r\n                            {/*TODO: Semantically h2 is not very ideal here*/}\r\n                            <h2 className=\"font-light\">\r\n                                Dejte nám Vaší emailovou adresu a my Vám budeme pravidelně jednou za měsíc posílat co se\r\n                                děje:\r\n                            </h2>\r\n                            <Form {...{ apiClient: this.props.apiClient }} />\r\n\r\n                            {/*TODO: Semantically h2 is not very ideal here at all*/}\r\n                            <h2 className=\"separator font-light\">\r\n                                A jak takový mail vypadá? Tady máte živou ukázku z rozpracovaného mailu\r\n                                <select\r\n                                    className={'font-light option-in-text'}\r\n                                    onChange={(event) => {\r\n                                        const [beginConstant, endConstant] = event.target.value.split(\r\n                                            '-',\r\n                                        ) as RangeConstant[];\r\n\r\n                                        const range = DateRange.fromConstants(beginConstant, endConstant);\r\n                                        /*console.log(\r\n                                            event.target.value,\r\n                                            DateRange.fromConstant(beginConstant),\r\n                                            DateRange.fromConstant(endConstant),\r\n                                            range,\r\n                                        );*/\r\n\r\n                                        this.setState({ range });\r\n                                    }}\r\n                                >\r\n                                    <option value=\"CURRENT_MONTH-NEXT_MONTH\">\r\n                                        na další měsíc + události tohoto měsíce:\r\n                                    </option>\r\n                                    <option value=\"NEXT_MONTH-NEXT_NEXT_MONTH\">na další měsíc:</option>\r\n                                    <option value=\"NOW-INFINITY\">\r\n                                        se všemi událostmi, co právě evidujeme do budoucna:\r\n                                    </option>\r\n                                    <option value=\"INFINITY-INFINITY\">se všemi událostmi, co právě evidujeme:</option>\r\n                                </select>\r\n                            </h2>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"letter white\">\r\n                        {/*\r\n                        TODO: Or make tabs - see bellow\r\n                        <div className=\"tab\" onClick={() => this.setState({ range: DateRange.CURRENT_MONTH })}>\r\n                            Aktuání měsíc\r\n                        </div>\r\n                        <div className=\"tab\" onClick={() => this.setState({ range: DateRange.ALL })}>\r\n                            Vše\r\n                        </div>\r\n                         */}\r\n\r\n                        <div className=\"inner\">\r\n                            {/*\r\n                            TODO: Here can be a selecotr of the months but firstly we need to add backend and better DB so it is not priority now.\r\n                            \r\n                            TODO: Or maybe like this:\r\n                            <select>\r\n                                <option>Aktuální měsíc</option>\r\n                                <option>Budoucí události</option>\r\n                                <option>Budoucí události tento měsíc</option>\r\n                                <option>Vše</option>\r\n                            </select>\r\n\r\n                            */}\r\n\r\n                            {this.state.error ? (\r\n                                <ErrorComponent>\r\n                                    <pre>{this.state.error}</pre>\r\n                                </ErrorComponent>\r\n                            ) : !this.state.events ? (\r\n                                <LoadingComponent />\r\n                            ) : (\r\n                                <TalksPageEmail\r\n                                    {...{\r\n                                        events: this.state.events,\r\n                                        newsletter: this.state.newsletter,\r\n                                        range: this.state.range,\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import { createHashHistory, History } from 'history';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Route, Router, Switch } from 'react-router-dom';\r\nimport { ApiClient } from './api/ApiClient';\r\nimport { AboutPage } from './components/AboutPage';\r\nimport { TalksPage } from './components/TalksPage';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// TODO: Join app and createApp\r\nexport class EventsApp {\r\n    private apiClient: ApiClient;\r\n    private history: History;\r\n\r\n    constructor(private rootElement: HTMLDivElement, private apiUrl: string) {\r\n        console.log(`Starting EventsApp with apiUrl = \"${apiUrl}\".`);\r\n        this.run();\r\n    }\r\n\r\n    private async run() {\r\n        this.history = createHashHistory();\r\n        this.apiClient = new ApiClient(this.apiUrl);\r\n\r\n        ReactDOM.render(\r\n            <Router {...{ history: this.history }}>\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <TalksPage {...{ apiClient: this.apiClient }} />\r\n                    </Route>\r\n                    <Route exact path=\"/about\">\r\n                        <AboutPage />\r\n                    </Route>\r\n                </Switch>\r\n            </Router>,\r\n            this.rootElement,\r\n        );\r\n        // If you want your app to work offline and load faster, you can change\r\n        // unregister() to register() below. Note this comes with some pitfalls.\r\n        // Learn more about service workers: https://bit.ly/CRA-PWA\r\n        serviceWorker.unregister();\r\n    }\r\n}\r\n","import { EventsApp } from './EventsApp';\r\n\r\n(window as any).EventsApp = EventsApp;\r\n"],"sourceRoot":""}