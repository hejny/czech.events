{"version":3,"sources":["model/database/NewsletterContent.ts","model/database/EventCode.ts","model/database/EmailAttempt.ts","model/database/Email.ts","model/database/Event.ts","model/database/Newsletter.ts","model/database/EventNewsletter.ts","utils/constructObjectFromJSON.ts","model/database/Subscriber.ts","api/ApiClient.ts","components/AboutPage.tsx","model/DateRange.ts","components/ErrorComponent.tsx","components/Form.tsx","components/LoadingComponent.tsx","utils/categorizeEvents.ts","utils/enumToArray.ts","components/EventPrice.tsx","utils/translate.ts","components/EventCodeParagraph.tsx","utils/capitalizeFirstLetter.tsx","components/EventDateComponent.tsx","components/EventTimeComponent.tsx","components/EventComponent.tsx","components/NewsletterContentsComponent.tsx","utils/eventTypeToNewsletterContentPosition.ts","utils/compareDates.ts","components/TalksPageEmail.tsx","components/Partners.tsx","components/TalksPage.tsx","serviceWorker.ts","EventsApp.tsx","index.tsx"],"names":["NewsletterContentPosition","EventCode","Index","unique","Entity","PrimaryGeneratedColumn","type","name","Column","nullable","length","enum","precision","scale","ManyToOne","Event","event","eventCodes","onDelete","onUpdate","JoinColumn","referencedColumnName","EmailAttempt","unsigned","default","Email","email","emailAttempts","Newsletter","newsletter","emails","OneToMany","emailAttempt","EventType","EventPriceCurrency","EventVisibility","NewsletterContent","newsletterContents","EventNewsletter","eventNewsletter","newsletterContent","eager","eventNewsletters","eventCode","this","days","parseInt","split","trim","year","month","day","date","Date","isNaN","getDate","setDate","constructObjectFromJSON","Class","data","instance","Object","assign","Subscriber","schema","ApiClient","apiUrl","get","map","id","subscriber","post","path","fetch","response","json","responseData","method","headers","Accept","body","JSON","stringify","AboutPage","props","className","src","url","selfUrl","key","href","alt","download","DateRange","from","to","beginConstant","endConstant","fromConstant","constant","now","forMonth","getFullYear","getMonth","Error","currentDate","ErrorComponent","children","Form","onSubmit","a","async","preventDefault","form","target","formData","FormData","alert","fullname","source","window","location","toString","apiClient","postSubscriber","result","console","log","reset","message","defaultValue","htmlFor","required","defaultChecked","value","LoadingComponent","ALL","CURRENT_MONTH","FROM_CURRENT_MONTH","categorizeEvents","events","eventsCategorized","enumerable","keys","filter","v","enumToArray","eventOrError","push","eventsCategorizedFiltered","eventType","EventPrice","price","isNullOrUndefined","Math","ceil","currency","CZK","EUR","translateCurrency","priceCurrency","EventCodeParagraph","showCode","verbose","code","floor","capitalizeFirstLetter","word","substr","toUpperCase","toLowerCase","EventDateComponent","monthString","moment","format","replace","locale","dateString","error","EventTimeComponent","time","timeString","EventComponent","dateToCompare","web","rel","topic","city","NewsletterContentsComponent","position","sort","b","order","dangerouslySetInnerHTML","__html","html","join","SUBJECT","eventTypeToNewsletterContentPosition","CONFERENCE","HEAD_CONFERENCES","MEETUP","HEAD_MEETUPS","WORKSHOP","HEAD_WORKSHOPS","HACKATHON","HEAD_HACKATHONS","compareEventsbyDate","event1","event2","date1","date2","delta","warn","compareDates","TalksPageEmail","range","filteredEvents","isIn","categorizedEvents","HEAD","translateEventType","serializeId","BOTTOM","Partners","logoUrl","link","title","OPTIONS","desc","TalksPage","state","fromConstants","load","getEvents","setState","onChange","item","React","Boolean","hostname","match","EventsApp","rootElement","history","run","createHashHistory","ReactDOM","render","exact","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c042d71a.chunk.js","sourcesContent":["import { Column, Entity, Index, JoinColumn, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Newsletter } from './Newsletter';\nimport { Event } from './Event';\n\nexport enum NewsletterContentPosition {\n    SUBJECT = 'SUBJECT',\n    HEAD = 'HEAD',\n    HEAD_CONFERENCES = 'HEAD_CONFERENCES',\n    HEAD_MEETUPS = 'HEAD_MEETUPS',\n    HEAD_WORKSHOPS = 'HEAD_WORKSHOPS',\n    HEAD_HACKATHONS = 'HEAD_HACKATHONS',\n    BOTTOM = 'BOTTOM',\n}\n\n@Index('uuid', ['uuid'], { unique: true })\n@Index('newsletter_id', ['newsletter_id'], {})\n@Index('position', ['position'], {})\n@Index('event_id', ['event_id'], {})\n@Entity('NewsletterContent', {})\nexport class NewsletterContent {\n    @PrimaryGeneratedColumn({ type: 'int', name: 'id' })\n    id: number;\n\n    @Column('char', { name: 'uuid', nullable: true, unique: true, length: 36 })\n    uuid: string | null;\n\n    @Column('int', { name: 'newsletter_id', nullable: true })\n    newsletter_id: number | null;\n\n    @Column('int', { name: 'event_id', nullable: true })\n    event_id: number | null;\n\n    @Column('enum', {\n        name: 'position',\n        enum: NewsletterContentPosition,\n    })\n    position: NewsletterContentPosition;\n\n    @Column('int', { name: 'order', nullable: true })\n    order: number | null;\n\n    @Column('text', { name: 'html' })\n    html: string;\n\n    @Column('text', { name: 'note', nullable: true })\n    note: string | null;\n\n    @ManyToOne(\n        () => Newsletter,\n        (newsletter) => newsletter.newsletterContents,\n        { onDelete: 'RESTRICT', onUpdate: 'RESTRICT' },\n    )\n    @JoinColumn([{ name: 'newsletter_id', referencedColumnName: 'id' }])\n    newsletter: Newsletter;\n\n    @ManyToOne(\n        () => Event,\n        (event) => event.newsletterContents,\n        { onDelete: 'RESTRICT', onUpdate: 'RESTRICT' },\n    )\n    @JoinColumn([{ name: 'event_id', referencedColumnName: 'id' }])\n    event: Event;\n}\n","import { Column, Entity, Index, JoinColumn, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Event } from './Event';\n\n@Index('uuid', ['uuid'], { unique: true })\n@Index('event_id', ['event_id'], {})\n@Index('type', ['type'], {})\n@Index('value', ['value'], {})\n@Entity('EventCode', {})\nexport class EventCode {\n    @PrimaryGeneratedColumn({ type: 'int', name: 'id' })\n    id: number;\n\n    @Column('char', { name: 'uuid', nullable: true, unique: true, length: 36 })\n    uuid: string | null;\n\n    @Column('int', { name: 'event_id' })\n    event_id: number;\n\n    @Column('enum', { name: 'type', enum: ['DISCOUNT_PERCENT'] })\n    type: 'DISCOUNT_PERCENT';\n\n    @Column('varchar', { name: 'code', length: 200 })\n    code: string;\n\n    @Column('float', { name: 'value', precision: 10, scale: 2 })\n    value: number;\n\n    @Column('text', { name: 'note', nullable: true })\n    note: string | null;\n\n    @ManyToOne(\n        () => Event,\n        (event) => event.eventCodes,\n        { onDelete: 'RESTRICT', onUpdate: 'RESTRICT' },\n    )\n    @JoinColumn([{ name: 'event_id', referencedColumnName: 'id' }])\n    event: Event;\n}\n","import { Column, Entity, Index, JoinColumn, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Email } from './Email';\n\n@Index('Email_id', ['email_id'], {})\n@Index('Success', ['success'], {})\n@Index('Created', ['created'], {})\n@Entity('EmailAttempt', {})\nexport class EmailAttempt {\n    @PrimaryGeneratedColumn({ type: 'int', name: 'id', unsigned: true })\n    id: number;\n\n    @Column('int', { name: 'email_id' })\n    email_id: number;\n\n    @Column('tinyint', { name: 'success' })\n    success: boolean;\n\n    @Column('text', { name: 'message' })\n    message: string;\n\n    @Column('datetime', { name: 'created', default: () => 'CURRENT_TIMESTAMP' })\n    created: Date;\n\n    @ManyToOne(\n        () => Email,\n        (email) => email.emailAttempts,\n        { onDelete: 'RESTRICT', onUpdate: 'RESTRICT' },\n    )\n    @JoinColumn([{ name: 'email_id', referencedColumnName: 'id' }])\n    email: Email;\n}\n","import { Column, Entity, Index, JoinColumn, ManyToOne, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { Newsletter } from './Newsletter';\nimport { EmailAttempt } from './EmailAttempt';\n\n@Index('Flag', ['flag'], {})\n@Index('Created', ['created'], {})\n@Index('To', ['to'], {})\n@Index('From', ['from'], {})\n@Index('Subject', ['subject'], {})\n@Index('newsletter_id', ['newsletter_id'], {})\n@Entity('Email', {})\nexport class Email {\n    @PrimaryGeneratedColumn({ type: 'int', name: 'id' })\n    id: number;\n\n    @Column('char', { name: 'uuid', nullable: true, length: 36 })\n    uuid: string | null;\n\n    @Column('int', { name: 'newsletter_id', nullable: true })\n    newsletter_id: number | null;\n\n    @Column('varchar', { name: 'to', length: 255 })\n    to: string;\n\n    @Column('varchar', { name: 'from', length: 255 })\n    from: string;\n\n    @Column('varchar', { name: 'subject', length: 255 })\n    subject: string;\n\n    @Column('longtext', { name: 'body' })\n    body: string;\n\n    @Column('datetime', { name: 'created', default: () => 'CURRENT_TIMESTAMP' })\n    created: Date;\n\n    @Column('datetime', { name: 'send', default: () => 'CURRENT_TIMESTAMP' })\n    send: Date;\n\n    @Column('varchar', { name: 'flag', nullable: true, length: 200 })\n    flag: string | null;\n\n    @Column('text', { name: 'note', nullable: true })\n    note: string | null;\n\n    @ManyToOne(\n        () => Newsletter,\n        (newsletter) => newsletter.emails,\n        { onDelete: 'RESTRICT', onUpdate: 'RESTRICT' },\n    )\n    @JoinColumn([{ name: 'newsletter_id', referencedColumnName: 'id' }])\n    newsletter: Newsletter;\n\n    @OneToMany(\n        () => EmailAttempt,\n        (emailAttempt) => emailAttempt.email,\n    )\n    emailAttempts: EmailAttempt[];\n}\n","import { Column, Entity, Index, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { EventCode } from './EventCode';\nimport { EventNewsletter } from './EventNewsletter';\nimport { NewsletterContent } from './NewsletterContent';\n\nexport enum EventType {\n    CONFERENCE = 'CONFERENCE',\n    MEETUP = 'MEETUP',\n    WORKSHOP = 'WORKSHOP',\n    HACKATHON = 'HACKATHON',\n}\n\nexport enum EventPriceCurrency {\n    CZK = 'CZK',\n    EUR = 'EUR',\n}\n\nexport enum EventVisibility {\n    PENDING = 'PENDING',\n    VISIBLE = 'VISIBLE',\n    HIDDEN = 'HIDDEN',\n    FEATURED = 'FEATURED',\n}\n\n@Index('serializeId', ['serializeId'], { unique: true })\n@Index('name_topic', ['name', 'topic'], { unique: true })\n@Index('uuid', ['uuid'], { unique: true })\n@Index('type', ['type'], {})\n@Index('city', ['city'], {})\n@Index('year', ['year'], {})\n@Index('month', ['month'], {})\n@Index('time', ['time'], {})\n@Index('price', ['price'], {})\n@Index('priceCurrency', ['priceCurrency'], {})\n@Index('visibility', ['visibility'], {})\n@Entity('Event')\nexport class Event {\n    @PrimaryGeneratedColumn({ type: 'int', name: 'id' })\n    id: number;\n\n    @Column('char', { name: 'uuid', nullable: true, unique: true, length: 36 })\n    uuid: string | null;\n\n    @Column('varchar', { name: 'serializeId', unique: true, length: 1000 })\n    serializeId: string;\n\n    @Column('varchar', { name: 'name', length: 300 })\n    name: string;\n\n    @Column('varchar', { name: 'topic', nullable: true, length: 500 })\n    topic: string | null;\n\n    @Column('enum', {\n        name: 'type',\n        enum: EventType,\n    })\n    type: EventType;\n\n    @Column('varchar', { name: 'web', nullable: true, length: 1000 })\n    web: string | null;\n\n    @Column('varchar', { name: 'city', nullable: true, length: 200 })\n    city: string | null;\n\n    @Column('year', { name: 'year', nullable: true })\n    year: number | null;\n\n    @Column('int', { name: 'month', nullable: true })\n    month: number | null;\n\n    @Column('varchar', { name: 'days', nullable: true, length: 5 })\n    days: string | null;\n\n    @Column('varchar', { name: 'time', nullable: true, length: 8 })\n    time: string | null;\n\n    @Column('int', { name: 'price', nullable: true })\n    price: number | null;\n\n    @Column('enum', {\n        name: 'priceCurrency',\n        nullable: true,\n        enum: EventPriceCurrency,\n    })\n    priceCurrency: EventPriceCurrency | null;\n\n    @Column('enum', {\n        name: 'visibility',\n        enum: EventVisibility,\n        default: () => \"'PENDING'\",\n    })\n    visibility: EventVisibility;\n\n    @Column('text', { name: 'note', nullable: true })\n    note: string | null;\n\n    @OneToMany(\n        () => EventCode,\n        (eventCode) => eventCode.event,\n        { eager: true },\n    )\n    eventCodes: EventCode[];\n\n    @OneToMany(\n        () => EventNewsletter,\n        (eventNewsletter) => eventNewsletter.event,\n    )\n    eventNewsletters: EventNewsletter[];\n\n    @OneToMany(\n        () => NewsletterContent,\n        (newsletterContent) => newsletterContent.event,\n        { eager: true },\n    )\n    newsletterContents: NewsletterContent[];\n\n    get day(): number | null {\n        if (this.days) {\n            return parseInt(this.days.split('-')[0].trim());\n        } else {\n            return null;\n        }\n    }\n\n    get date(): Date | null {\n        if (this.year && this.month && this.day) {\n            const date = new Date(this.year, this.month - 1, this.day);\n\n            if (!isNaN(date.getDate())) {\n                return date;\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Purpose of this method is to provide date only for comparing functions - so it can be wrong (for example can be shifted by a day) but roughly OK and everytime defined\n     * compared to Event.date which is everytime precise but can be undefined\n     * This getter is usefull when we have only a month and year of an event but not a precise day.\n     */\n    get dateToCompare(): Date {\n        if (this.date) {\n            return this.date;\n        } else if (this.year && this.month) {\n            const date = new Date(this.year, this.month - 1, 25 /*Some late day in the month*/);\n            return date;\n        } else {\n            const date = new Date();\n            date.setDate(date.getDate() + 1000 /*TODO: Some big constant*/);\n            return date;\n        }\n    }\n\n    /*static error(error: Error):Event{\n  return new Event();\n  }*/\n}\n","import { Column, Entity, Index, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { Email } from './Email';\nimport { EventNewsletter } from './EventNewsletter';\nimport { NewsletterContent } from './NewsletterContent';\n\n@Index('uuid', ['uuid'], { unique: true })\n@Index('month', ['send'], {})\n@Entity('Newsletter', {})\nexport class Newsletter {\n    @PrimaryGeneratedColumn({ type: 'int', name: 'id' })\n    id: number;\n\n    @Column('char', { name: 'uuid', nullable: true, unique: true, length: 36 })\n    uuid: string | null;\n\n    @Column('varchar', { name: 'name', nullable: true, length: 200 })\n    name: string | null;\n\n    @Column('varchar', { name: 'from', length: 1000 })\n    from: string;\n\n    @Column('datetime', { name: 'send', default: () => 'CURRENT_TIMESTAMP' })\n    send: Date;\n\n    @Column('text', { name: 'note', nullable: true })\n    note: string | null;\n\n    @OneToMany(\n        () => Email,\n        (email) => email.newsletter,\n    )\n    emails: Email[];\n\n    @OneToMany(\n        () => EventNewsletter,\n        (eventNewsletter) => eventNewsletter.newsletter,\n    )\n    eventNewsletters: EventNewsletter[];\n\n    @OneToMany(\n        () => NewsletterContent,\n        (newsletterContent) => newsletterContent.newsletter,\n        { eager: true },\n    )\n    newsletterContents: NewsletterContent[];\n}\n","import { Column, Entity, Index, JoinColumn, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Event } from './Event';\nimport { Newsletter } from './Newsletter';\n\n// TODO: All enums to real TS enums\n@Index('event_id', ['event_id'], {})\n@Index('newsletter_id', ['newsletter_id'], {})\n@Index('status', ['status'], {})\n@Entity('Event_Newsletter', {})\nexport class EventNewsletter {\n    @PrimaryGeneratedColumn({ type: 'int', name: 'id' })\n    id: number;\n\n    @Column('int', { name: 'event_id' })\n    event_id: number;\n\n    @Column('int', { name: 'newsletter_id' })\n    newsletter_id: number;\n\n    @Column('enum', { name: 'status', enum: ['VISIBLE', 'HIDDEN'] })\n    status: 'VISIBLE' | 'HIDDEN';\n\n    @Column('text', { name: 'note', nullable: true })\n    note: string | null;\n\n    @ManyToOne(\n        () => Event,\n        (event) => event.eventNewsletters,\n        { onDelete: 'RESTRICT', onUpdate: 'RESTRICT' },\n    )\n    @JoinColumn([{ name: 'event_id', referencedColumnName: 'id' }])\n    event: Event;\n\n    @ManyToOne(\n        () => Newsletter,\n        (newsletter) => newsletter.eventNewsletters,\n        { onDelete: 'RESTRICT', onUpdate: 'RESTRICT' },\n    )\n    @JoinColumn([{ name: 'newsletter_id', referencedColumnName: 'id' }])\n    newsletter: Newsletter;\n}\n","type Instantiable = { new (...args: any[]): any };\r\n\r\n// TODO: Create AbscractApiClient library\r\nexport function constructObjectFromJSON<TClass extends Instantiable>(\r\n    Class: TClass,\r\n    data: Partial<InstanceType<TClass>>,\r\n) {\r\n    const instance = new Class();\r\n    Object.assign(instance, data);\r\n    return instance;\r\n}\r\n","import { Column, Entity, Index, PrimaryGeneratedColumn } from 'typeorm';\n\n@Index('uuid', ['uuid'], { unique: true })\n@Index('email', ['email'], {})\n@Index('created', ['created'], {})\n@Index('active', ['active'], {})\n@Entity('Subscriber', { schema: 'czechevents' })\nexport class Subscriber {\n    @PrimaryGeneratedColumn({ type: 'int', name: 'id' })\n    id: number;\n\n    @Column('char', { name: 'uuid', nullable: true, unique: true, length: 36 })\n    uuid: string | null;\n\n    @Column('varchar', { name: 'email', length: 1000 })\n    email: string;\n\n    @Column('varchar', { name: 'fullname', nullable: true, length: 1000 })\n    fullname: string | null;\n\n    @Column('varchar', { name: 'source', nullable: true, length: 2000 })\n    source: string | null;\n\n    @Column('datetime', { name: 'created', default: () => 'CURRENT_TIMESTAMP' })\n    created: Date;\n\n    @Column('smallint', { name: 'active', nullable: true, default: () => \"'1'\" })\n    active: number | null;\n}\n","import { Event } from '../model/database/Event';\r\nimport { constructObjectFromJSON } from '../utils/constructObjectFromJSON';\r\nimport { Subscriber } from '../model/database/Subscriber';\r\nimport { Newsletter } from '../model/database/Newsletter';\r\n\r\nexport class ApiClient {\r\n    constructor(private apiUrl: string) {}\r\n\r\n    async getAbout() {}\r\n\r\n    async getEvents(): Promise<Event[]> {\r\n        const data = await this.get(`/events`);\r\n        return data.map((data) => constructObjectFromJSON(Event, data));\r\n    }\r\n\r\n    async getNewsletters(): Promise<Newsletter[]> {\r\n        const data = await this.get(`/newsletters`);\r\n        return data.map((data) => constructObjectFromJSON(Newsletter, data));\r\n    }\r\n\r\n    async getNewsletter(id): Promise<Newsletter> {\r\n        const data = await this.get(`/newsletters/${id}`);\r\n        return constructObjectFromJSON(Newsletter, data);\r\n    }\r\n\r\n    async postSubscriber(subscriber: Subscriber): Promise<Subscriber> {\r\n        const data = await this.post(\r\n            `/subscribers`,\r\n            subscriber /* TODO: Should be subscriber data directly in request body or should it be wrapped in {subscriber:{...}} */,\r\n        );\r\n        return constructObjectFromJSON(Subscriber, data);\r\n    }\r\n\r\n    // TODO: Create AbscractApiClient library\r\n    // TODO: Generically typed\r\n    private async get(path: string /*TODO: Add option for query*/) {\r\n        const response = await fetch(`${this.apiUrl}${path}`);\r\n        const responseData = await response.json();\r\n        return responseData;\r\n    }\r\n\r\n    // TODO: Create AbscractApiClient library\r\n    // TODO: Generically typed\r\n    private async post(path: string, data: {} /*TODO: Maybe add option for query*/) {\r\n        const response = await fetch(`${this.apiUrl}${path}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data),\r\n        });\r\n        const responseData = await response.json();\r\n        return responseData;\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\ninterface IAboutPageProps {\r\n    selfUrl: string;\r\n}\r\n\r\nexport function AboutPage(props: IAboutPageProps) {\r\n    return (\r\n        <>\r\n            <div className=\"content about\">\r\n                <div className=\"front black\">\r\n                    <div className=\"inner\">\r\n                        {/* <h1>Czech.events</h1> */}\r\n\r\n                        {[\r\n                            {\r\n                                name: 'Tmavá verze',\r\n                                src: 'czech.events.black-logo.png',\r\n                            },\r\n\r\n                            {\r\n                                name: 'Světlá verze',\r\n                                src: 'czech.events.white-logo.png',\r\n                            },\r\n                        ].map(({ name, src }) => {\r\n                            const url = `${props.selfUrl}/design/logos/${src}`;\r\n                            return (\r\n                                <div key={src} className=\"logo\">\r\n                                    <a href={url}>\r\n                                        <img src={url} alt=\"Czech.events logo\" />\r\n                                    </a>\r\n                                    {`${name} `}\r\n                                    <a href={url} download>\r\n                                        (Stáhnout)\r\n                                    </a>\r\n                                    <pre>\r\n                                        {`                                     \r\n<a href=\"https://czech.events/\">\r\n    <img src=\"${url}\" alt=\"Czech.events logo\" width=\"200\" />\r\n</a>`.trim()}\r\n                                    </pre>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","export class DateRange {\r\n    constructor(public from?: Date, public to?: Date) {}\r\n\r\n    static fromConstants(beginConstant: RangeConstant, endConstant: RangeConstant): DateRange {\r\n        return new DateRange(DateRange.fromConstant(beginConstant).from, DateRange.fromConstant(endConstant).to);\r\n    }\r\n\r\n    static fromConstant(constant: RangeConstant): DateRange {\r\n        const now = new Date();\r\n\r\n        switch (constant) {\r\n            case 'NOW':\r\n                return new DateRange(now, now);\r\n\r\n            case 'CURRENT_MONTH':\r\n                return DateRange.forMonth(now);\r\n\r\n            case 'NEXT_MONTH':\r\n                return DateRange.forMonth(new Date(now.getFullYear(), now.getMonth() + 1, 1));\r\n\r\n            // TODO: Maybe better name for NEXT_NEXT_MONTH\r\n            // TODO: DRY\r\n            case 'NEXT_NEXT_MONTH':\r\n                return DateRange.forMonth(new Date(now.getFullYear(), now.getMonth() + 2, 1));\r\n\r\n            case 'INFINITY':\r\n                return new DateRange();\r\n\r\n            default:\r\n                throw new Error(`Unknown range constant \"${constant}\".`);\r\n        }\r\n    }\r\n\r\n    static forMonth(currentDate = new Date()): DateRange {\r\n        const month = currentDate.getMonth();\r\n        const year = currentDate.getFullYear();\r\n\r\n        const from = new Date(year, month, 1);\r\n        const to = new Date(year, month + 1, -1);\r\n\r\n        return new DateRange(from, to);\r\n    }\r\n\r\n    // TODO: Deprecated due to fromConstants, fromConstant\r\n    static ALL = new DateRange();\r\n    static CURRENT_MONTH = DateRange.forMonth();\r\n    static FROM_CURRENT_MONTH = new DateRange(DateRange.CURRENT_MONTH.from);\r\n\r\n    isIn(date: Date) {\r\n        if (this.from && this.from > date) {\r\n            return false;\r\n        }\r\n\r\n        if (this.to && this.to < date) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nexport type RangeConstant = 'NOW' | 'CURRENT_MONTH' | 'NEXT_MONTH' | 'NEXT_NEXT_MONTH' | 'INFINITY';\r\n\r\n/*/\r\nfor (const constant of ['NOW', 'CURRENT_MONTH', 'NEXT_MONTH', 'NEXT_NEXT_MONTH', 'INFINITY'] as RangeConstant[]) {\r\n    console.log(constant, DateRange.fromConstant(constant));\r\n}\r\n/**/\r\n","import * as React from 'react';\r\n\r\n// TODO: Deprecated remove\r\nexport function ErrorComponent({ children }: React.PropsWithChildren<{}>) {\r\n    return (\r\n        <>\r\n            <div className=\"error\">{children}</div>\r\n        </>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { constructObjectFromJSON } from '../utils/constructObjectFromJSON';\r\nimport { Subscriber } from '../model/database/Subscriber';\r\nimport { ApiClient } from '../api/ApiClient';\r\n\r\ninterface IFormProps {\r\n    apiClient: ApiClient;\r\n}\r\n\r\nexport function Form(props: IFormProps) {\r\n    // TODO: To Config\r\n    return (\r\n        <>\r\n            <form\r\n                onSubmit={async (event) => {\r\n                    event.preventDefault();\r\n                    const form = event.target as HTMLFormElement;\r\n                    const formData = new FormData(form);\r\n\r\n                    if (!formData.get('gdpr')) {\r\n                        alert(`Potřebujeme od Vás zaškrtnout souhlas se zpracováním osobních údajů.`);\r\n                        return;\r\n                    }\r\n\r\n                    const subscriber = constructObjectFromJSON(Subscriber, {\r\n                        email: formData.get('email') as string,\r\n                        fullname: formData.get('fullname') as string,\r\n                        source: window.location.toString(),\r\n                    });\r\n\r\n                    try {\r\n                        const result = await props.apiClient.postSubscriber(subscriber);\r\n\r\n                        console.log('result', result);\r\n\r\n                        form.reset();\r\n                        alert(`Děkujeme, můžete se těšit na další email!`);\r\n                    } catch (error) {\r\n                        alert(error.message /*TODO: Better*/);\r\n                    }\r\n                }}\r\n            >\r\n                <div className=\"group\">\r\n                    <input type=\"text\" name=\"fullname\" className=\"field\" defaultValue=\"\" />\r\n                    <label htmlFor=\"name\">Vaše jméno:</label>\r\n                    <div className=\"bar\"></div>\r\n                </div>\r\n\r\n                <div className=\"group\">\r\n                    <input type=\"email\" name=\"email\" required className=\"field\" />\r\n                    <label htmlFor=\"email\">E-mail: *</label>\r\n                    <div className=\"bar\"></div>\r\n                </div>\r\n\r\n                <div className=\"group checkbox\">\r\n                    <input type=\"checkbox\" name=\"gdpr\" defaultChecked={false} />\r\n                    <label id=\"gdpr\" htmlFor=\"gdpr\">\r\n                        Souhlasím se zpracováním osobních údajů\r\n                    </label>\r\n                </div>\r\n\r\n                {/* TODO: We need here some GDPR */}\r\n                <div className=\"center\">\r\n                    <input value=\"Přihlásit se \" type=\"submit\" id=\"submit\" name=\"submit\" className=\"button\" />\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n","import * as React from 'react';\r\n\r\nexport function LoadingComponent() {\r\n    return (\r\n        <>\r\n            <div className=\"loading\">Načítání...</div>\r\n        </>\r\n    );\r\n}\r\n","import { EventType } from './../model/database/Event';\r\nimport { Event } from '../model/database/Event';\r\nimport { enumToArray } from './enumToArray';\r\nimport { IEventsCategorized } from '../model/IEventsCategorized';\r\n\r\nexport function categorizeEvents(events: Event[]): IEventsCategorized {\r\n    const eventsCategorized: IEventsCategorized = {};\r\n\r\n    for (const eventType of enumToArray(EventType)) {\r\n        eventsCategorized[eventType] = [];\r\n    }\r\n\r\n    for (const eventOrError of events) {\r\n        let type: string;\r\n        if (eventOrError instanceof Event) {\r\n            type = eventOrError.type;\r\n        } else {\r\n            type = 'errors';\r\n        }\r\n\r\n        eventsCategorized[type] = eventsCategorized[type] || [];\r\n        eventsCategorized[type].push(eventOrError);\r\n    }\r\n\r\n    const eventsCategorizedFiltered: IEventsCategorized = {};\r\n\r\n    for (const eventType of Object.keys(eventsCategorized)) {\r\n        if (eventsCategorized[eventType].length > 0) {\r\n            eventsCategorizedFiltered[eventType] = eventsCategorized[eventType];\r\n        }\r\n    }\r\n\r\n    return eventsCategorizedFiltered;\r\n}\r\n","export function enumToArray(enumerable: any): string[] {\r\n    let enumMembers: any[] = Object.keys(enumerable).map((key) => enumerable[key]);\r\n    let enumValues: string[] = enumMembers.filter((v) => typeof v === 'string');\r\n    return enumValues;\r\n}\r\n","import * as React from 'react';\r\nimport { Event } from '../model/database/Event';\r\nimport { isNullOrUndefined } from 'util';\r\nimport { translateCurrency } from '../utils/translate';\r\n\r\ninterface IEventPriceProps {\r\n    event: Event;\r\n    price?: number;\r\n}\r\n\r\n// TODO: Component name suffix to all components\r\nexport function EventPrice({ event, price }: IEventPriceProps) {\r\n    if (!price) price = event.price;\r\n    if (isNullOrUndefined(price)) return <></>;\r\n    if (price === 0) return <>💸&nbsp;Zdarma</>;\r\n    return <>💸&nbsp;{`${Math.ceil(price * 100) / 100} ${translateCurrency(event.priceCurrency!)}`}</>;\r\n}\r\n","import { EventType, EventPriceCurrency } from './../model/database/Event';\r\n\r\nexport function translateCurrency(currency: EventPriceCurrency): string {\r\n    // TODO: Hardcoded\r\n    switch (currency) {\r\n        case 'CZK' as any:\r\n        case EventPriceCurrency.CZK:\r\n            return 'Kč';\r\n        case 'EUR' as any:\r\n        case EventPriceCurrency.EUR:\r\n            return '‎€';\r\n        default:\r\n            return currency;\r\n    }\r\n}\r\n\r\nexport function translateEventType(eventType: EventType): string {\r\n    // TODO: Plular\r\n    // TODO: Hardcoded\r\n    switch (eventType) {\r\n        case EventType.HACKATHON:\r\n            return 'Hackathony';\r\n        case EventType.CONFERENCE:\r\n            return '‎Konference';\r\n        case EventType.MEETUP:\r\n            return '‎Meetupy';\r\n        case EventType.WORKSHOP:\r\n            return '‎Workshopy';\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Event } from '../model/database/Event';\r\nimport { EventPrice } from './EventPrice';\r\n\r\ninterface IEventCodeParagraphProps {\r\n    event: Event;\r\n    showCode: boolean;\r\n    verbose: boolean;\r\n}\r\n\r\nexport function EventCodeParagraph({ event, showCode, verbose }: IEventCodeParagraphProps) {\r\n    return (\r\n        <>\r\n            {event.eventCodes.map((eventCode, key) => (\r\n                <span {...{ key }}>\r\n                    <br />\r\n\r\n                    {showCode ? (\r\n                        <>\r\n                            A s kódem <b>{eventCode.code}</b> to budete mít o {Math.floor(eventCode.value * 100)}%\r\n                            levnější\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            S naším kódem, který budeme posílat v dalším emalu, to budete mít o{' '}\r\n                            {Math.floor(eventCode.value * 100)}% levnější\r\n                        </>\r\n                    )}\r\n\r\n                    {verbose && (\r\n                        <>\r\n                            , tzn. za <EventPrice {...{ event, price: event.price * (1 - eventCode.value) }} />\r\n                        </>\r\n                    )}\r\n                </span>\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n","export function capitalizeFirstLetter(word: string): string {\r\n    return word.substr(0, 1).toUpperCase() + word.substr(1).toLowerCase();\r\n}\r\n","import * as React from 'react';\r\nimport { Event } from '../model/database/Event';\r\nimport moment from 'moment';\r\nimport 'moment/locale/cs';\r\nimport { capitalizeFirstLetter } from '../utils/capitalizeFirstLetter';\r\n\r\ninterface EventDateComponentProps {\r\n    event: Event;\r\n}\r\n\r\nexport function EventDateComponent({ event }: EventDateComponentProps) {\r\n    const { date, year, month } = event;\r\n\r\n    if (date) {\r\n        try {\r\n            moment.locale('cs');\r\n            let dateString = moment(date).format('LLLL');\r\n            dateString = dateString.split('0:00')[0];\r\n            //TODO: More elegant way\r\n            dateString = dateString.replace('leden', 'ledna');\r\n            dateString = dateString.replace('únor', 'února');\r\n            dateString = dateString.replace('březen', 'března');\r\n            dateString = dateString.replace('duben', 'dubna');\r\n            dateString = dateString.replace('květen', 'května');\r\n            dateString = dateString.replace('červen', 'června');\r\n            dateString = dateString.replace('červnaec', 'červenec'); // This is typo in moment/locale/cs library. We can make an pull request to it but this is the quick local hotfix.\r\n            dateString = dateString.replace('červenec', 'července');\r\n            dateString = dateString.replace('srpen', 'srpna');\r\n            dateString = dateString.replace('září', 'září');\r\n            dateString = dateString.replace('říjen', 'října');\r\n            dateString = dateString.replace('listopad', 'listopadu');\r\n            dateString = dateString.replace('prosinec', 'prosince');\r\n            dateString = capitalizeFirstLetter(dateString);\r\n            return <>📅&nbsp;{dateString}</>;\r\n        } catch (error) {\r\n            console.error(`Problem when parsing moment('${date}').format('LLLL'); See more below:`);\r\n            console.error(error);\r\n            return <></>;\r\n        }\r\n    } else if (year && month) {\r\n        let monthString = moment(month, 'M').format('MMMM');\r\n        monthString = capitalizeFirstLetter(monthString);\r\n        monthString = monthString.replace('Červnaec', 'Červenec'); // This is typo in moment/locale/cs library. We can make an pull request to it but this is the quick local hotfix.\r\n        return (\r\n            <>\r\n                📅&nbsp;{monthString} {year}\r\n            </>\r\n        );\r\n    } else {\r\n        return <></>;\r\n    }\r\n}\r\n\r\ninterface EventTimeComponentProps {\r\n    time: string;\r\n}\r\n","import * as React from 'react';\r\nimport { Event } from '../model/database/Event';\r\nimport moment from 'moment';\r\nimport 'moment/locale/cs';\r\n\r\ninterface EventTimeComponentProps {\r\n    event: Event;\r\n}\r\n\r\nexport function EventTimeComponent({ event }: EventTimeComponentProps) {\r\n    const { time } = event;\r\n\r\n    if (!time) {\r\n        return <></>;\r\n    }\r\n\r\n    try {\r\n        moment.locale('cs');\r\n        let timeString = moment(time, 'hh A').format('LT');\r\n        if (timeString === 'Invalid date') {\r\n            throw new Error(`Time was parsed as \"Invalid date\".`);\r\n        }\r\n        return <>⏱️&nbsp;{timeString}</>;\r\n    } catch (error) {\r\n        console.error(`Problem when parsing moment('2010-10-20 ' + '${time}').format('LT'); See more below:`);\r\n        console.error(error);\r\n        return <></>;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Event } from '../model/database/Event';\r\nimport { EventPrice } from './EventPrice';\r\nimport { EventCodeParagraph } from './EventCodeParagraph';\r\nimport { EventDateComponent } from './EventDateComponent';\r\nimport { EventTimeComponent } from './EventTimeComponent';\r\n\r\ninterface IEventComponentProps {\r\n    event: Event;\r\n}\r\n\r\nexport function EventComponent({ event }: IEventComponentProps) {\r\n    return (\r\n        <span className={event.dateToCompare < new Date() ? 'past' : ''}>\r\n            {/*event.topParagraph ? '⭐' : ''*/}\r\n            <a href={event.web.toString()} target=\"_blank\" rel=\"nofolow noopener noreferrer\">\r\n                <b>{event.name}</b>\r\n                {event.topic ? ` – ${event.topic}` : ''}\r\n            </a>\r\n            <br />\r\n            <>\r\n                🌆&nbsp;{event.city} {/* TODO: Plzeň 🐪 */}\r\n            </>\r\n            &nbsp;\r\n            <EventDateComponent {...{ event }} />\r\n            <EventTimeComponent {...{ event }} />\r\n            &nbsp;\r\n            <EventPrice {...{ event }} />\r\n            <EventCodeParagraph {...{ event, verbose: true, showCode: false }} />\r\n            {}\r\n            <br />\r\n            <br />\r\n            {}\r\n        </span>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { NewsletterContent, NewsletterContentPosition } from '../model/database/NewsletterContent';\r\n\r\ninterface INewsletterContentsComponentProps {\r\n    position: NewsletterContentPosition;\r\n    newsletterContents: NewsletterContent[];\r\n}\r\n\r\nexport function NewsletterContentsComponent({ newsletterContents, position }: INewsletterContentsComponentProps) {\r\n    return (\r\n        <>\r\n            {newsletterContents\r\n                .filter((newsletterContent) => newsletterContent.position === position)\r\n                .sort((a, b) => (a.order > b.order ? 1 : -1) /* TODO: Correct? */)\r\n                .map((newsletterContent, key) => (\r\n                    <div key={key}>\r\n                        <span dangerouslySetInnerHTML={{ __html: newsletterContent.html.split('\\n').join('<br/>') }} />\r\n                        {position !== NewsletterContentPosition.SUBJECT && (\r\n                            <>\r\n                                <br />\r\n                            </>\r\n                        )}\r\n                    </div>\r\n                ))}\r\n        </>\r\n    );\r\n}\r\n","import { NewsletterContentPosition } from '../model/database/NewsletterContent';\r\nimport { EventType } from '../model/database/Event';\r\n\r\nexport function eventTypeToNewsletterContentPosition(eventType: EventType): NewsletterContentPosition {\r\n    switch (eventType) {\r\n        case EventType.CONFERENCE:\r\n            return NewsletterContentPosition.HEAD_CONFERENCES;\r\n        case EventType.MEETUP:\r\n            return NewsletterContentPosition.HEAD_MEETUPS;\r\n        case EventType.WORKSHOP:\r\n            return NewsletterContentPosition.HEAD_WORKSHOPS;\r\n        case EventType.HACKATHON:\r\n            return NewsletterContentPosition.HEAD_HACKATHONS;\r\n        default:\r\n            throw new Error(`Can not convert \"${eventType}\" into NewsletterContentPosition.`);\r\n    }\r\n}\r\n","import { Event } from '../model/database/Event';\r\n\r\ntype CompareResult = 1 | -1 | 0;\r\n\r\nexport function compareEventsbyDate(event1?: Event, event2?: Event): CompareResult {\r\n    return compareDates(event1.dateToCompare, event2.dateToCompare);\r\n}\r\n\r\nexport function compareDates(date1: Date, date2: Date): CompareResult {\r\n    try {\r\n        const delta = ((new Date(date2) as any) as number) - ((new Date(date1) as any) as number);\r\n\r\n        if (delta > 0) {\r\n            return -1;\r\n        } else if (delta < 0) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    } catch (error) {\r\n        console.warn(error);\r\n        return -1;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { DateRange } from '../model/DateRange';\r\nimport { Event, EventType } from '../model/database/Event';\r\nimport { categorizeEvents } from '../utils/categorizeEvents';\r\nimport { translateEventType } from '../utils/translate';\r\nimport { EventComponent } from './EventComponent';\r\nimport { NewsletterContent, NewsletterContentPosition } from '../model/database/NewsletterContent';\r\nimport { NewsletterContentsComponent } from './NewsletterContentsComponent';\r\nimport { eventTypeToNewsletterContentPosition } from '../utils/eventTypeToNewsletterContentPosition';\r\nimport { compareEventsbyDate } from '../utils/compareDates';\r\nimport { Newsletter } from '../model/database/Newsletter';\r\n\r\ninterface ITalksPageEmailProps {\r\n    range: DateRange;\r\n    events: Event[];\r\n    newsletter: null | Newsletter;\r\n}\r\n\r\nexport function TalksPageEmail(props: ITalksPageEmailProps) {\r\n    const { events, range, newsletter } = props;\r\n\r\n    const filteredEvents = events\r\n        //.filter((event) => (event instanceof Event ? event.inMail : true))\r\n        .filter((event) => (event instanceof Event ? range.isIn(event.dateToCompare) : true))\r\n        .sort((a, b) => compareEventsbyDate(a, b));\r\n\r\n    //console.log('filteredEvents', filteredEvents);\r\n    const categorizedEvents = categorizeEvents(filteredEvents);\r\n\r\n    const newsletterContents: NewsletterContent[] = [];\r\n    if (newsletter) {\r\n        newsletterContents.push(...newsletter.newsletterContents);\r\n    }\r\n    for (const event of filteredEvents) {\r\n        newsletterContents.push(...event.newsletterContents);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>\r\n                {/*`📅 Konference / meetupy / hackathony – co se děje z IT / Startupové akce 🌆`*/}\r\n                <NewsletterContentsComponent {...{ newsletterContents, position: NewsletterContentPosition.SUBJECT }} />\r\n            </h2>\r\n            {/* Ahoj,\r\n            <br />\r\n            opět jsme dali dohromady seznam událostí, na které se vyplatí zajít:\r\n            <br /> */}\r\n            <NewsletterContentsComponent {...{ newsletterContents, position: NewsletterContentPosition.HEAD }} />\r\n            {Object.keys(categorizedEvents).map((type) => (\r\n                <div key={type}>\r\n                    <br />\r\n                    <h2>{translateEventType(type as any)}</h2>\r\n                    <NewsletterContentsComponent\r\n                        {...{ newsletterContents, position: eventTypeToNewsletterContentPosition(type as EventType) }}\r\n                    />\r\n                    <span>\r\n                        {categorizedEvents![type].map((event) => (\r\n                            <EventComponent {...{ event, key: event.serializeId }} />\r\n                        ))}\r\n                    </span>\r\n                </div>\r\n            ))}\r\n            <br /> <br />\r\n            <NewsletterContentsComponent {...{ newsletterContents, position: NewsletterContentPosition.BOTTOM }} />\r\n            {/* <i>\r\n                PS: <b>Budeme rádi za vaše návrhy a připomínky</b>, můžete <b>odpovědět rovnou na email</b>.<br />\r\n                PPS: E-mail posíláme na základě Vaší registrace na stránce{' '}\r\n                <a href=\"https://czech.events/?utm_source=mail&amp;utm_medium=referral&amp;utm_campaign=2020-02_unsubscribe\">\r\n                    czech.events\r\n                </a>\r\n                . Pokud už další email nechcete dostat, napište nám rychlou odpověď.\r\n            </i> */}\r\n            {/*\r\n            <br />\r\n            PPS: Pokud už nechcete dostat další email, klikněte sem pro jejich odhlášení.\r\n            */}\r\n            <br />\r\n            <br />\r\n            {/* TODO: Random shuffle */}\r\n            <a href=\"https://www.pavolhejny.com/?utm_source=czech.events-mail&amp;utm_medium=referral&amp;utm_campaign=signature\">\r\n                Pavol Hejný\r\n            </a>\r\n            &nbsp;&amp;&nbsp;\r\n            <a href=\"https://www.linkedin.com/in/tereza-texlova/\">Tereza Texlová</a>\r\n        </>\r\n    );\r\n}\r\n","import * as React from 'react';\r\n\r\ninterface IPartnersProps {\r\n    selfUrl: string;\r\n}\r\n\r\nexport function Partners(props: IPartnersProps) {\r\n    return (\r\n        <>\r\n            <div className=\"partners\">\r\n                <h2>Mediální partneři</h2>\r\n\r\n                {[\r\n                    // TODO: To some other file or even to DB\r\n                    {\r\n                        name: 'Startup Weekend | Prague',\r\n                        logoUrl: `${props.selfUrl}/design/logos/partners/startup-weekend-prague.png`,\r\n                        link: 'https://www.facebook.com/swprague/',\r\n                    },\r\n\r\n                    {\r\n                        name: 'Startup Weekend | Bratislava',\r\n                        logoUrl: `${props.selfUrl}/design/logos/partners/startup-weekend-bratislava.png`,\r\n                        link: 'https://www.facebook.com/StartupWeekendBratislava/',\r\n                    },\r\n                    {\r\n                        name: 'Undout Sleep Box',\r\n                        logoUrl: `${props.selfUrl}/design/logos/partners/undout.png`,\r\n                        link: 'https://undout.com/',\r\n                    },\r\n                    /*\r\n                    TODO:\r\n                    {\r\n                        name: 'CEEHACKS',\r\n                        logoUrl: `${props.selfUrl}/design/logos/partners/ceehacks.png`,\r\n                        link: 'https://www.ceehacks.com/',\r\n                    },\r\n                    {\r\n                        name: 'TechHeaven',\r\n                        logoUrl: `${props.selfUrl}/design/logos/partners/techheaven.svg`,\r\n                        link: 'https://techheaven.org/',\r\n                    },*/\r\n                    // TODO: CzechFuture tech\r\n                    // TODO: Random shuffle\r\n                ].map(({ name, logoUrl, link }) => {\r\n                    return (\r\n                        <div key={name} className=\"logo\">\r\n                            <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                <img src={logoUrl} title={name} alt={`${name} logo`} />\r\n                            </a>\r\n                            {/*`${name} `*/}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { DateRange, RangeConstant } from '../model/DateRange';\r\nimport { ErrorComponent } from './ErrorComponent';\r\nimport { Form } from './Form';\r\nimport { LoadingComponent } from './LoadingComponent';\r\nimport { TalksPageEmail } from './TalksPageEmail';\r\nimport { Event } from '../model/database/Event';\r\nimport { ApiClient } from '../api/ApiClient';\r\nimport { Newsletter } from '../model/database/Newsletter';\r\nimport { Partners } from './Partners';\r\n\r\ninterface ITalksPageProps {\r\n    selfUrl: string;\r\n    apiClient: ApiClient;\r\n}\r\n\r\ninterface ITalksPageState {\r\n    error: null | string;\r\n    range: DateRange;\r\n    events: null | Event[];\r\n    newsletter: null | Newsletter;\r\n}\r\n\r\nconst OPTIONS = [\r\n    {\r\n        value: 'CURRENT_MONTH-NEXT_MONTH',\r\n        desc: 'na další měsíc + události tohoto měsíce:',\r\n    },\r\n    {\r\n        value: 'NEXT_MONTH-NEXT_NEXT_MONTH',\r\n        desc: 'na další měsíc:',\r\n    },\r\n    {\r\n        value: 'NOW-INFINITY',\r\n        desc: 'se všemi událostmi, co právě evidujeme do budoucna:',\r\n    },\r\n    {\r\n        value: 'INFINITY-INFINITY',\r\n        desc: 'se všemi událostmi, co právě evidujeme:',\r\n    },\r\n];\r\n\r\nexport class TalksPage extends React.Component<ITalksPageProps, ITalksPageState> {\r\n    state: ITalksPageState = {\r\n        error: null,\r\n        range: DateRange.fromConstants('CURRENT_MONTH', 'NEXT_MONTH'),\r\n        events: null,\r\n        newsletter: null,\r\n    };\r\n\r\n    constructor(props: ITalksPageProps) {\r\n        super(props);\r\n        this.load();\r\n    }\r\n\r\n    private async load() {\r\n        try {\r\n            const events = await this.props.apiClient.getEvents();\r\n            //console.log('events', events);\r\n            this.setState({ events });\r\n\r\n            //const newsletter = await this.props.apiClient.getNewsletter(2020, 2 /* TODO: Unhardcode */);\r\n            //console.log('newsletter', newsletter);\r\n            //this.setState({ newsletter });\r\n        } catch (error) {\r\n            this.setState({ error: error.message });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"content\">\r\n                    <div className=\"front black\">\r\n                        <div className=\"inner\">\r\n                            <h1>Mějte přehled o nejzajímavějších událostech z IT &amp; startupového světa.</h1>\r\n                            {/*TODO: Semantically h2 is not very ideal here*/}\r\n                            <h2 className=\"font-light\">\r\n                                Dejte nám Vaší emailovou adresu a my Vám budeme pravidelně jednou za měsíc posílat co se\r\n                                děje:\r\n                            </h2>\r\n                            <Form {...{ apiClient: this.props.apiClient }} />\r\n\r\n                            {/*TODO: Semantically h2 is not very ideal here at all*/}\r\n                            <h2 className=\"line separator font-light\">\r\n                                A jak takový mail vypadá? Tady máte živou ukázku z rozpracovaného mailu\r\n                                <select\r\n                                    className={'font-light option-in-text'}\r\n                                    onChange={(event) => {\r\n                                        const [beginConstant, endConstant] = event.target.value.split(\r\n                                            '-',\r\n                                        ) as RangeConstant[];\r\n\r\n                                        const range = DateRange.fromConstants(beginConstant, endConstant);\r\n                                        /*console.log(\r\n                                            event.target.value,\r\n                                            DateRange.fromConstant(beginConstant),\r\n                                            DateRange.fromConstant(endConstant),\r\n                                            range,\r\n                                        );*/\r\n\r\n                                        this.setState({ range });\r\n                                    }}\r\n                                >\r\n                                    {OPTIONS.map((item) => (\r\n                                        <option value={item.value}>{item.desc}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </h2>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"letter white\">\r\n                        {/*\r\n                        TODO: Or make tabs - see bellow\r\n                        <div className=\"tab\" onClick={() => this.setState({ range: DateRange.CURRENT_MONTH })}>\r\n                            Aktuání měsíc\r\n                        </div>\r\n                        <div className=\"tab\" onClick={() => this.setState({ range: DateRange.ALL })}>\r\n                            Vše\r\n                        </div>\r\n                         */}\r\n\r\n                        <div className=\"inner\">\r\n                            {/*\r\n                            TODO: Here can be a selecotr of the months but firstly we need to add backend and better DB so it is not priority now.\r\n                            \r\n                            TODO: Or maybe like this:\r\n                            <select>\r\n                                <option>Aktuální měsíc</option>\r\n                                <option>Budoucí události</option>\r\n                                <option>Budoucí události tento měsíc</option>\r\n                                <option>Vše</option>\r\n                            </select>\r\n\r\n                            */}\r\n\r\n                            {this.state.error ? (\r\n                                <ErrorComponent>\r\n                                    <pre>{this.state.error}</pre>\r\n                                </ErrorComponent>\r\n                            ) : !this.state.events ? (\r\n                                <LoadingComponent />\r\n                            ) : (\r\n                                <TalksPageEmail\r\n                                    {...{\r\n                                        events: this.state.events,\r\n                                        newsletter: this.state.newsletter,\r\n                                        range: this.state.range,\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <Partners {...{ selfUrl: this.props.selfUrl }} />\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import { createHashHistory, History } from 'history';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Route, Router, Switch } from 'react-router-dom';\r\nimport { ApiClient } from './api/ApiClient';\r\nimport { AboutPage } from './components/AboutPage';\r\nimport { TalksPage } from './components/TalksPage';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Partners } from './components/Partners';\r\n\r\n// TODO: Join app and createApp\r\nexport class EventsApp {\r\n    private apiClient: ApiClient;\r\n    private history: History;\r\n\r\n    constructor(private rootElement: HTMLDivElement, private apiUrl: string, private selfUrl: string) {\r\n        console.log(`Starting EventsApp.`);\r\n        console.log('rootElement', rootElement);\r\n        console.log('apiUrl', apiUrl);\r\n        console.log('selfUrl', selfUrl);\r\n        this.run();\r\n    }\r\n\r\n    private async run() {\r\n        this.history = createHashHistory();\r\n        this.apiClient = new ApiClient(this.apiUrl);\r\n\r\n        ReactDOM.render(\r\n            <Router {...{ history: this.history }}>\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <TalksPage {...{ apiClient: this.apiClient, selfUrl: this.selfUrl }} />\r\n                    </Route>\r\n                    <Route exact path=\"/about\">\r\n                        <AboutPage {...{ selfUrl: this.selfUrl }} />\r\n                    </Route>\r\n                    <Route exact path=\"/partners\">\r\n                        <Partners {...{ selfUrl: this.selfUrl }} />\r\n                    </Route>\r\n                </Switch>\r\n            </Router>,\r\n            this.rootElement,\r\n        );\r\n        // If you want your app to work offline and load faster, you can change\r\n        // unregister() to register() below. Note this comes with some pitfalls.\r\n        // Learn more about service workers: https://bit.ly/CRA-PWA\r\n        serviceWorker.unregister();\r\n    }\r\n}\r\n","import { EventsApp } from './EventsApp';\r\n\r\n(window as any).EventsApp = EventsApp;\r\n"],"sourceRoot":""}