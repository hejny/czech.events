{"version":3,"sources":["serviceWorker.ts","model/Event.ts","config.ts","utils/enumToArray.ts","utils/compareDates.ts","utils/fetchEvents.ts","components/EventComponent.tsx","utils/translate.ts","components/LoadingComponent.tsx","components/ErrorComponent.tsx","components/Form.tsx","utils/categorizeEvents.ts","components/TalksPage.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","EventType","EventPriceCurrency","EVENTS_CSV_URL","ConfigChecker","from","get","url","required","value","enumToArray","enumerable","Object","keys","map","key","filter","v","Event","data","name","topic","city","year","month","day","days","date","time","priceAmount","priceCurrency","codeName","codePercent","type","web","inMail","c","this","number","parseInt","split","trim","isNaN","Error","Date","getDate","asType","includes","boolean","compareEventsbyDate","event1","event2","undefined","date1","date2","delta","error","console","warn","compareDates","fetchEvents","a","async","fetch","toString","cache","response","text","dataString","papaparse","parse","header","object","emptyKeysAsUndefined","decapitalize","isNotEmpty","t","message","sort","EventComponent","event","renderPrice","price","isNullOrUndefined","Math","ceil","currency","CZK","EUR","translateCurrency","href","target","rel","moment","locale","dateString","format","replace","substr","toUpperCase","showDate","showTime","floor","LoadingComponent","className","ErrorComponent","children","Form","action","method","id","defaultValue","onFocus","htmlFor","categorizeEvents","events","eventsCategorized","eventOrError","push","eventsCategorizedFiltered","eventType","length","TalksPage","props","state","categorizedEvents","loadEvents","setState","HACKATHON","CONFERENCE","MEETUP","WORKSHOP","translateEventType","item","React","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NAYoBA,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,ICd3BC,EAOAC,E,4DCCCC,EAREC,gBAAcC,KAEzB,CACIF,eAAe,qKAMlBG,IAAI,kBACJC,MACAC,WAAWC,M,wBCdT,SAASC,EAAYC,GAGxB,OAFyBC,OAAOC,KAAKF,GAAYG,KAAI,SAACC,GAAD,OAASJ,EAAWI,MAClCC,QAAO,SAACC,GAAD,MAAoB,kBAANA,M,SFCpDhB,K,wBAAAA,E,gBAAAA,E,oBAAAA,E,uBAAAA,M,cAOAC,O,aAAAA,I,cAAAA,M,KAKL,IAAMgB,EAmBT,WAAYC,GAAsB,yBAjB3BC,UAiB0B,OAhB1BC,WAgB0B,OAf1BC,UAe0B,OAd1BC,UAc0B,OAb1BC,WAa0B,OAZ1BC,SAY0B,OAX1BC,UAW0B,OAV1BC,UAU0B,OAT1BC,UAS0B,OAR1BC,iBAQ0B,OAP1BC,mBAO0B,OAN1BC,cAM0B,OAL1BC,iBAK0B,OAJ1BC,UAI0B,OAH1BC,SAG0B,OAF1BC,YAE0B,EAC7B,IAAMC,EAAIhC,gBAAcC,KAAKc,GAgB7B,GAdAkB,KAAKjB,KAAOgB,EAAE9B,IAAI,QAAQE,WAAWC,MACrC4B,KAAKhB,MAAQe,EAAE9B,IAAI,SAASG,MAC5B4B,KAAKf,KAAOc,EAAE9B,IAAI,QAAQG,MAC1B4B,KAAKd,KAAOa,EACP9B,IAAI,QACJgC,SACA9B,WAAWC,MAChB4B,KAAKb,MAAQY,EACR9B,IAAI,SACJgC,SACA9B,WAAWC,MAChB4B,KAAKX,KAAOU,EAAE9B,IAAI,QAAQE,WAAWC,MACrC4B,KAAKZ,IAAMc,SAASF,KAAKX,KAAKc,MAAM,KAAK,GAAGC,QAExCC,MAAML,KAAKZ,KACX,MAAM,IAAIkB,MAAJ,2BAA8BN,KAAKX,KAAnC,cAGV,IAEI,GADAW,KAAKV,KAAO,IAAIiB,KAAKP,KAAKd,KAAMc,KAAKb,MAAQ,EAAGa,KAAKZ,KACjDiB,MAAML,KAAKV,KAAKkB,WAAY,MAAM,IAAIF,MAC5C,SACE,MAAM,IAAIA,MAAJ,yCAA4CN,KAAKd,KAAjD,aAA0Dc,KAAKb,MAA/D,iBAA6Ea,KAAKZ,IAAlF,OAoBV,GAjBAY,KAAKT,KAAOQ,EAAE9B,IAAI,QAAQE,WAAWC,MACrC4B,KAAKR,YAAcO,EAAE9B,IAAI,eAAegC,SAAS7B,MAGjD4B,KAAKP,cAAiBM,EAAE9B,IAAI,iBAAiBG,MAC7C4B,KAAKN,SAAWK,EAAE9B,IAAI,YAAYG,MAClC4B,KAAKL,YAAcI,EAAE9B,IAAI,eAAegC,SAAS7B,MAG7C4B,KAAKL,cAAaK,KAAKL,YAAcK,KAAKL,YAAc,KAE5DK,KAAKJ,KAAOG,EACP9B,IAAI,QACJE,WACAsC,SAAoBrC,OAGpBC,EAAYT,GAAW8C,SAAUV,KAAKJ,MACvC,MAAM,IAAIU,MAAJ,sBAAyBN,KAAKJ,KAA9B,OAEVI,KAAKH,IAAME,EACN9B,IAAI,OACJC,MACAC,WAAWC,MAChB4B,KAAKF,OAASC,EACT9B,IAAI,UACJ0C,UACAxC,WAAWC,OGrFjB,SAASwC,EAAoBC,EAAyBC,GAGzD,MAFsB,kBAAXD,IAAqBA,OAASE,GACnB,kBAAXD,IAAqBA,OAASC,GAItC,WAA8E,IAAxDC,EAAuD,uDAA/C,IAAIT,KAAQU,EAAmC,uDAA3B,IAAIV,KACzD,IACI,IAAMW,EAAU,IAAIX,KAAKU,GAA8B,IAAIV,KAAKS,GAEhE,OAAIE,EAAQ,GACA,EACDA,EAAQ,EACR,EAEA,EAEb,MAAOC,GAEL,OADAC,QAAQC,KAAKF,IACL,GAhBLG,CAAaT,EAASA,EAAOvB,UAAOyB,EAAWD,EAASA,EAAOxB,UAAOyB,GCE1E,SAAeQ,IAAf,qBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACoBE,MAAM5D,EAAe6D,WAAY,CAAEC,MAAO,YAD9D,cACGC,EADH,kBAAAL,EAAA,MAEsBK,EAASC,QAF/B,cAEGC,EAFH,SAGcC,IAAUC,MAAMF,EAAY,CACzCG,QAAQ,IADJpD,EAHL,EAGKA,KAHL,kBASKA,EACHL,KAAI,SAAC0D,GAAD,OACDC,+BACID,GACA,SAAC/D,GAAD,OAAY,CAAC,GAAI,QAAS,QAAQsC,UAAUtC,GAAS,IAAIgC,cAGhE3B,IAAI4D,gBACJ1D,OAAO2D,cACP3D,QAAO,SAAC4D,GAAD,OAAOA,EAAC,UACf9D,KAAI,SAAC8D,GACF,IACI,OAAO,IAAI1D,EAAM0D,GACnB,MAAOpB,GACL,OAAOA,EAAMqB,YAIpBC,KAAK7B,IA3BP,qC,4BCCA,SAAS8B,EAAT,GAA0D,IAAhCC,EAA+B,EAA/BA,MACvBC,EAAc,SAACC,GACjB,OAAIC,4BAAkBD,GAAe,GACvB,IAAVA,EAAoB,0DACjB,6DAAcE,KAAKC,KAAa,IAARH,GAAe,IAAvC,YCZR,SAA2BI,GAC9B,OAAQA,GACJ,IAAK,MACL,KAAKpF,EAAmBqF,IACpB,MAAO,UACX,IAAK,MACL,KAAKrF,EAAmBsF,IACpB,MAAO,eACX,QACI,OAAOF,GDG0CG,CAAkBT,EAAMlD,kBAGjF,OACI,4BACI,qBAAG4D,KAAMV,EAAM9C,IAAI8B,WAAY2B,OAAO,SAASC,IAAI,+BAC/C,yBAAIZ,EAAM5D,MACT4D,EAAM3D,MAAN,kBAAoB2D,EAAM3D,OAAU,IAEzC,2BACA,mDAAW2D,EAAM1D,MANrB,OAQI,mDAyBZ,SAAkBK,GACd,IACIkE,IAAOC,OAAO,MACd,IAAIC,EAAaF,IAAOlE,GAAMqE,OAAO,QAKrC,OADAD,GADAA,GADAA,GADAA,EAAaA,EAAWvD,MAAM,QAAQ,IACdyD,QAAQ,WAAY,cACpBA,QAAQ,WAAY,aACpBC,OAAO,EAAG,GAAGC,cAAgBJ,EAAWG,OAAO,GAEzE,MAAO1C,GACL,MAAM,IAAIb,MAAJ,uCAA0ChB,EAA1C,wBAnCSyE,CAASpB,EAAMrD,OACzBqD,EAAMpD,MACH,uCAEI,mDAmCpB,SAAkBA,GACd,IAGI,OAFAiE,IAAOC,OAAO,MACGD,IAAO,cAAgBjE,GAAMoE,OAAO,MAEvD,MAAOxC,GACL,MAAM,IAAIb,MAAJ,uDAA0Df,EAA1D,sBAzCiByE,CAASrB,EAAMpD,QAZtC,OAgBI,gCAAGqD,EAAYD,EAAMnD,cACrB,gCACKmD,EAAMjD,UAAYiD,EAAMhD,aAAegD,EAAMnD,aAAemD,EAAMlD,eAC/D,gCACI,2BADJ,gBACoB,yBAAIkD,EAAMjD,UAD9B,2BAC4DqD,KAAKkB,MAA0B,IAApBtB,EAAMhD,aAD7E,mCAEsBiD,EAAYD,EAAMnD,aAAe,EAAImD,EAAMhD,cAFjE,MAOR,2BACA,4BE3CL,SAASuE,IACZ,OACI,gCACI,uBAAKC,UAAU,WAAf,8BCHL,SAASC,EAAT,GAAoE,IAA1CC,EAAyC,EAAzCA,SAC7B,OACI,gCACI,uBAAKF,UAAU,SAASE,ICH7B,SAASC,IAEZ,OACI,gCACI,wBAAMC,OAAO,8BAA8BC,OAAO,OAAOlB,OAAO,UAC5D,yBAAO1D,KAAK,SAASb,KAAK,UAAUX,MAAM,QAC1C,yBAAOwB,KAAK,SAASb,KAAK,YAAYX,MAAM,SAQ5C,uBAAK+F,UAAU,SACX,yBACIvE,KAAK,QACL6E,GAAG,QACH1F,KAAK,WACLZ,UAAQ,EACRuG,aAAa,IACbC,QAAS,SAAChC,OAUd,yBAAOiC,QAAQ,SAAf,YACA,uBAAKT,UAAU,SAGnB,uBAAKA,UAAU,UACX,yBAAO/F,MAAM,qCAAmBwB,KAAK,SAAS6E,GAAG,SAAS1F,KAAK,SAASoF,UAAU,cC7B/F,SAASU,EAAiBC,GAC7B,IAAMC,EAAwC,GADoB,uBAGlE,YAAwB1G,EAAYT,GAApC,+CAAgD,CAC5CmH,EAD4C,SACb,IAJ+B,6GAOlE,YAA2BD,EAA3B,+CAAmC,CAAC,IAAzBE,EAAwB,QAC3BpF,OAAY,EAOhBmF,EALInF,EADAoF,aAAwBnG,EACjBmG,EAAapF,KAEb,UAGemF,EAAkBnF,IAAS,GACrDmF,EAAkBnF,GAAMqF,KAAKD,IAhBiC,kFAqBlE,IAFA,IAAME,EAAgD,GAEtD,MAAwB3G,OAAOC,KAAKuG,GAApC,eAAwD,CAAnD,IAAMI,EAAS,KACZJ,EAAkBI,GAAWC,OAAS,IACtCF,EAA0BC,GAAaJ,EAAkBI,IAIjE,OAAOD,ECnBJ,IAAMG,EAAb,YAMI,WAAYC,GAAyB,IAAD,8BAChC,4CAAMA,KANVC,MAAyB,CACrBpE,MAAO,KACPqE,kBAAmB,MAKnB,EAAKC,aAF2B,EANxC,uLAciClE,KAdjC,OAckBuD,EAdlB,OAiBkBU,EAAoBX,EAAiBC,GAI3C9E,KAAK0F,SAAS,CAAEF,sBArB5B,gDAwBYxF,KAAK0F,SAAS,CAAEvE,MAAO,KAAMqB,UAxBzC,yFA4Bc,IAAD,OACL,OACI,gCACI,uBAAK2B,UAAU,WACX,uBAAKA,UAAU,eACX,sIACA,sBAAIA,UAAU,cAAd,qIAIA,gBAACG,EAAD,MAEA,sBAAIH,UAAU,wBAAd,gIAKJ,uBAAKA,UAAU,uBACX,0IAEA,yBACI,iCAEI,2BAFJ,4FASCnE,KAAKuF,MAAMpE,OACR,gBAACiD,EAAD,KACI,2BAAMpE,KAAKuF,MAAMpE,QAGvBnB,KAAKuF,MAAMC,kBAGTjH,OAAOC,KAAKwB,KAAKuF,MAAMC,mBAAmB/G,KAAI,SAACmB,GAAD,OAC1C,qBAAGlB,IAAKkB,GACJ,0BLtEjC,SAA4BuF,GAE/B,OAAQA,GACJ,KAAKvH,EAAU+H,UACX,MAAO,aACX,KAAK/H,EAAUgI,WACX,MAAO,mBACX,KAAKhI,EAAUiI,OACX,MAAO,gBACX,KAAKjI,EAAUkI,SACX,MAAO,mBK4D0BC,CAAmBnG,IACxB,4BACK,EAAK2F,MAAMC,kBAAmB5F,GAAMnB,KAAI,SAACuH,EAAMtH,GAAP,OACrCsH,aAAgBnH,EACZ,gBAAC6D,EAAmB,CAAEC,MAAOqD,EAAMtH,QAEnC,gBAAC0F,EAAmB,CAAE1F,OAAQsH,WAVlD,gBAAC9B,EAAD,MAiBJ,2BACA,2BAlCJ,OAmCQ,uFAnCR,sBAmC+D,gEAnC/D,IAoCI,2BApCJ,+GAyCJ,0BAAQC,UAAU,gBACd,qBAAGd,KAAK,2BAAR,SADJ,YAGI,qBAAGA,KAAK,+CAAR,iBA5FxB,GAA+B4C,aCX/BC,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,Sb2H/C,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAChCA,EAAaC,kB","file":"static/js/main.2ca003b0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import { ConfigChecker, IConfigSource } from 'configchecker';\nimport { enumToArray } from '../utils/enumToArray';\n\nexport enum EventType {\n    CONFERENCE = 'CONFERENCE',\n    MEETUP = 'MEETUP',\n    WORKSHOP = 'WORKSHOP',\n    HACKATHON = 'HACKATHON',\n}\n\nexport enum EventPriceCurrency {\n    CZK,\n    EUR,\n}\n\nexport class Event {\n    //TODO: readonly id: number;\n    public name: string;\n    public topic?: string;\n    public city?: string;\n    public year: number;\n    public month: number;\n    public day: number;\n    public days: string;\n    public date: Date;\n    public time?: string;\n    public priceAmount?: number;\n    public priceCurrency?: EventPriceCurrency;\n    public codeName?: string;\n    public codePercent?: number;\n    public type: EventType;\n    public web: URL;\n    public inMail: boolean;\n\n    constructor(data: IConfigSource) {\n        const c = ConfigChecker.from(data);\n\n        this.name = c.get('name').required().value;\n        this.topic = c.get('topic').value;\n        this.city = c.get('city').value;\n        this.year = c\n            .get('year')\n            .number()\n            .required().value;\n        this.month = c\n            .get('month')\n            .number()\n            .required().value;\n        this.days = c.get('days').required().value;\n        this.day = parseInt(this.days.split('-')[0].trim());\n\n        if (isNaN(this.day)) {\n            throw new Error(`Day parsed from \"${this.days}\" is NaN.`);\n        }\n\n        try {\n            this.date = new Date(this.year, this.month - 1, this.day);\n            if (isNaN(this.date.getDate())) throw new Error();\n        } catch {\n            throw new Error(`Cannot create a valie new Date(${this.year}, ${this.month} - 1, ${this.day});`);\n        }\n\n        this.time = c.get('time').required().value;\n        this.priceAmount = c.get('priceAmount').number().value; //.required()\n        // TODO: Configchecker should take number 0 as defined\n\n        this.priceCurrency = (c.get('priceCurrency').value as unknown) as EventPriceCurrency;\n        this.codeName = c.get('codeName').value;\n        this.codePercent = c.get('codePercent').number().value;\n\n        // TODO: Better\n        if (this.codePercent) this.codePercent = this.codePercent / 100;\n\n        this.type = c\n            .get('type')\n            .required()\n            .asType<EventType>().value;\n        // TODO: Configchecker native in asType\n        // TODO: Typescript Enum in Configchecker\n        if (!enumToArray(EventType).includes((this.type as unknown) as string)) {\n            throw new Error(`Wrong type \"${this.type}\".`);\n        }\n        this.web = c\n            .get('web')\n            .url()\n            .required().value;\n        this.inMail = c\n            .get('inMail')\n            .boolean()\n            .required().value;\n\n        //throw new Error(`Error test`);\n    }\n\n    /*static error(error: Error):Event{\n        return new Event();\n    }*/\n}\n","import { ConfigChecker } from 'configchecker';\n\n// TODO: Better\nconst config = ConfigChecker.from(\n    /*process.env*/\n    {\n        EVENTS_CSV_URL: `https://docs.google.com/spreadsheets/d/e/2PACX-1vRq0s15Wi8g4c61FOqIhpn0Lw4azPJdgQ3XmJ3uLDSCqQVs52nJa99YJjOGhl-XJZ713zCprzuYOpVu/pub?gid=0&single=true&output=csv`,\n    },\n);\n\n//export const PORT = config.get('PORT', 'Server port').number().default(3000).value;\nexport const EVENTS_CSV_URL = config\n    .get('EVENTS_CSV_URL')\n    .url()\n    .required().value; //TODO: use in all places that debugs something\n","export function enumToArray(enumerable: any): string[] {\n    let enumMembers: any[] = Object.keys(enumerable).map((key) => enumerable[key]);\n    let enumValues: string[] = enumMembers.filter((v) => typeof v === 'string');\n    return enumValues;\n}\n","import { Event } from '../model/Event';\n\ntype CompareResult = 1 | -1 | 0;\n\nexport function compareEventsbyDate(event1?: Event | string, event2?: Event | string): CompareResult {\n    if (typeof event1 === 'string') event1 = undefined;\n    if (typeof event2 === 'string') event2 = undefined;\n    return compareDates(event1 ? event1.date : undefined, event2 ? event2.date : undefined);\n}\n\nexport function compareDates(date1 = new Date(), date2 = new Date()): CompareResult {\n    try {\n        const delta = ((new Date(date2) as any) as number) - ((new Date(date1) as any) as number);\n\n        if (delta > 0) {\n            return -1;\n        } else if (delta < 0) {\n            return 1;\n        } else {\n            return 0;\n        }\n    } catch (error) {\n        console.warn(error);\n        return -1;\n    }\n}\n","import { EVENTS_CSV_URL } from './../config';\nimport { IConfigSource } from 'configchecker';\nimport { decapitalize, emptyKeysAsUndefined, isNotEmpty } from 'configchecker/lib/utils/object';\nimport papaparse from 'papaparse';\nimport { Event } from '../model/Event';\nimport { compareEventsbyDate } from './compareDates';\n\nexport type IEvents = (Event | string)[];\n\nexport async function fetchEvents(): Promise<IEvents> {\n    const response = await fetch(EVENTS_CSV_URL.toString(), { cache: 'reload' });\n    const dataString = await response.text();\n    const { data } = papaparse.parse(dataString, {\n        header: true,\n    });\n\n    //console.log('data', data);\n\n    return (data as IConfigSource[])\n        .map((object) =>\n            emptyKeysAsUndefined<string | undefined>(\n                object,\n                (value) => !['', 'write', 'NULL'].includes((value || '').trim()),\n            ),\n        )\n        .map(decapitalize)\n        .filter(isNotEmpty)\n        .filter((t) => t['inMail'])\n        .map((t) => {\n            try {\n                return new Event(t);\n            } catch (error) {\n                return error.message;\n                //return error as Error;//Event.error(error);\n            }\n        })\n        .sort(compareEventsbyDate);\n    //.filter(isEvent);\n}\n\n/*\nTODO: Remove or use\nfunction isEvent(t: any): t is Event {\n    return t instanceof Event;\n}\n*/\n","import * as React from 'react';\nimport { Event } from '../model/Event';\nimport moment from 'moment';\nimport { isNullOrUndefined } from 'util';\nimport { translateCurrency } from '../utils/translate';\n\ninterface IEventComponentProps {\n    event: Event;\n}\n\nexport function EventComponent({ event }: IEventComponentProps) {\n    const renderPrice = (price?: number) => {\n        if (isNullOrUndefined(price)) return '';\n        if (price === 0) return <>💸&nbsp;Zdarma</>;\n        return <>💸&nbsp;{`${Math.ceil(price * 100) / 100} ${translateCurrency(event.priceCurrency!)}`}</>;\n    };\n\n    return (\n        <span>\n            <a href={event.web.toString()} target=\"_blank\" rel=\"nofolow noopener noreferrer\">\n                <b>{event.name}</b>\n                {event.topic ? ` – ${event.topic}` : ''}\n            </a>\n            <br />\n            <>🌆&nbsp;{event.city}</>\n            &nbsp;\n            <>📅&nbsp;{showDate(event.date)}</>\n            {event.time && (\n                <>\n                    &nbsp;\n                    <>⏱️&nbsp;{showTime(event.time)}</>\n                </>\n            )}\n            &nbsp;\n            <>{renderPrice(event.priceAmount)}</>\n            <>\n                {event.codeName && event.codePercent && event.priceAmount && event.priceCurrency && (\n                    <>\n                        <br />A s kódem <b>{event.codeName}</b> to budeš mít o {Math.floor(event.codePercent * 100)}%\n                        levnější tzn. za {renderPrice(event.priceAmount * (1 - event.codePercent))}.\n                    </>\n                )}\n            </>\n            {}\n            <br />\n            <br />\n            {}\n        </span>\n    );\n}\n\nfunction showDate(date: Date): string {\n    try {\n        moment.locale('cs');\n        let dateString = moment(date).format('LLLL');\n        dateString = dateString.split('0:00')[0];\n        dateString = dateString.replace('listopad', 'Listopadu');\n        dateString = dateString.replace('prosinec', 'Prosince');\n        dateString = dateString.substr(0, 1).toUpperCase() + dateString.substr(1);\n        return dateString;\n    } catch (error) {\n        throw new Error(`Problem when parsing moment('${date}').format('LLLL');`);\n    }\n}\n\nfunction showTime(time: string): string {\n    try {\n        moment.locale('cs');\n        let timeString = moment('2010-10-20 ' + time).format('LT');\n        return timeString;\n    } catch (error) {\n        throw new Error(`Problem when parsing moment('2010-10-20 ' + '${time}').format('LT');`);\n    }\n}\n","import { EventPriceCurrency, EventType } from './../model/Event';\n\nexport function translateCurrency(currency: EventPriceCurrency): string {\n    switch (currency) {\n        case 'CZK' as any:\n        case EventPriceCurrency.CZK:\n            return 'Kč';\n        case 'EUR' as any:\n        case EventPriceCurrency.EUR:\n            return '‎€';\n        default:\n            return currency;\n    }\n}\n\nexport function translateEventType(eventType: EventType): string {\n    // TODO: Plular\n    switch (eventType) {\n        case EventType.HACKATHON:\n            return 'Hackathony';\n        case EventType.CONFERENCE:\n            return '‎Konference';\n        case EventType.MEETUP:\n            return '‎Meetupy';\n        case EventType.WORKSHOP:\n            return '‎Workshopy';\n    }\n}\n","import * as React from 'react';\n\nexport function LoadingComponent() {\n    return (\n        <>\n            <div className=\"loading\">Načítání...</div>\n        </>\n    );\n}\n","import * as React from 'react';\n\nexport function ErrorComponent({ children }: React.PropsWithChildren<{}>) {\n    return (\n        <>\n            <div className=\"error\">{children}</div>\n        </>\n    );\n}\n","import * as React from 'react';\n\nexport function Form() {\n    // TODO: To Config\n    return (\n        <>\n            <form action=\"https://www.pavolhejny.com/\" method=\"post\" target=\"_blank\">\n                <input type=\"hidden\" name=\"sp_list\" value=\"472\" />\n                <input type=\"hidden\" name=\"sendpress\" value=\"post\" />\n                {/*\n                <div className=\"group\">\n                    <input type=\"text\" id=\"name\" name=\"sp_firstname\" />\n                    <label htmlFor=\"name\">Name</label>\n                    <div className=\"bar\"></div>\n                </div>\n                */}\n                <div className=\"group\">\n                    <input\n                        type=\"email\"\n                        id=\"email\"\n                        name=\"sp_email\"\n                        required\n                        defaultValue=\"@\"\n                        onFocus={(event) => {\n                            /*console.log(event);\n                            const inputElement: HTMLInputElement = event.target as any;\n                            console.log(inputElement);\n                            console.log(inputElement.value);\n                            if (!inputElement.value) {\n                                inputElement.value = '@';\n                            }*/\n                        }}\n                    />\n                    <label htmlFor=\"email\">E-mail *</label>\n                    <div className=\"bar\"></div>\n                </div>\n                {/* TODO: We need here some GDPR */}\n                <div className=\"center\">\n                    <input value=\"📧 Přihlásit se \" type=\"submit\" id=\"submit\" name=\"submit\" className=\"button\" />\n                </div>\n            </form>\n        </>\n    );\n}\n","import { EventType } from './../model/Event';\nimport { IEvents } from './fetchEvents';\nimport { Event } from '../model/Event';\nimport { enumToArray } from './enumToArray';\n\nexport interface IEventsCategorized {\n    [eventType: string]: (string | Event)[];\n}\n\nexport function categorizeEvents(events: IEvents): IEventsCategorized {\n    const eventsCategorized: IEventsCategorized = {};\n\n    for (const eventType of enumToArray(EventType)) {\n        eventsCategorized[eventType] = [];\n    }\n\n    for (const eventOrError of events) {\n        let type: string;\n        if (eventOrError instanceof Event) {\n            type = eventOrError.type;\n        } else {\n            type = 'errors';\n        }\n\n        eventsCategorized[type] = eventsCategorized[type] || [];\n        eventsCategorized[type].push(eventOrError);\n    }\n\n    const eventsCategorizedFiltered: IEventsCategorized = {};\n\n    for (const eventType of Object.keys(eventsCategorized)) {\n        if (eventsCategorized[eventType].length > 0) {\n            eventsCategorizedFiltered[eventType] = eventsCategorized[eventType];\n        }\n    }\n\n    return eventsCategorizedFiltered;\n}\n","import * as React from 'react';\nimport { fetchEvents } from '../utils/fetchEvents';\nimport { EventComponent } from './EventComponent';\nimport { LoadingComponent } from './LoadingComponent';\nimport { ErrorComponent } from './ErrorComponent';\nimport { Event } from '../model/Event';\nimport { Form } from './Form';\nimport { translateEventType } from '../utils/translate';\nimport { IEventsCategorized, categorizeEvents } from '../utils/categorizeEvents';\n\ninterface ITalksPageProps {}\n\ninterface ITalksPageState {\n    error: null | string;\n    categorizedEvents: null | IEventsCategorized;\n}\n\nexport class TalksPage extends React.Component<ITalksPageProps, ITalksPageState> {\n    state: ITalksPageState = {\n        error: null,\n        categorizedEvents: null,\n    };\n\n    constructor(props: ITalksPageProps) {\n        super(props);\n        this.loadEvents();\n    }\n\n    private async loadEvents() {\n        try {\n            //const { id } = query;\n            const events = await fetchEvents();\n            //console.log('events', events);\n\n            const categorizedEvents = categorizeEvents(events);\n\n            //const events: any = [];\n\n            this.setState({ categorizedEvents });\n        } catch (error) {\n            //console.log('error', error);\n            this.setState({ error: error.message });\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <div className=\"content\">\n                    <div className=\"front black\">\n                        <h1>Máme přehled o nejzajímavějších událostech z IT &amp; startupového světa.</h1>\n                        <h2 className=\"font-light\">\n                            Dejte nám Vaší emailovou adresu a my Vám budeme pravidelně jednou za měsíc posílat co se\n                            děje:\n                        </h2>\n                        <Form />\n\n                        <h2 className=\"separator font-light\">\n                            A jak takový mail vypadá? Tady máte živou ukázku z rozpracovaného mailu na další měsíc:\n                        </h2>\n                    </div>\n\n                    <div className=\"event-wrapper white\">\n                        <h2>{`📅 Konference / meetupy / hackathony – co se děje z IT / Startupové akce 🌆`}</h2>\n\n                        <p>\n                            <p>\n                                Ahoj,\n                                <br />\n                                opět jsme dali dohromady seznam událostí, na které se vyplatí zajít.\n                            </p>\n                            {/*\n                        <p>Ve čtvrtek 7.11 se bude konat ...</p>\n                        <p>Ve čtvrtek 7.11 se bude konat ...</p>\n                        */}\n                            {this.state.error && (\n                                <ErrorComponent>\n                                    <pre>{this.state.error}</pre>\n                                </ErrorComponent>\n                            )}\n                            {!this.state.categorizedEvents ? (\n                                <LoadingComponent />\n                            ) : (\n                                Object.keys(this.state.categorizedEvents).map((type) => (\n                                    <p key={type}>\n                                        <h2>{translateEventType(type as any)}</h2>\n                                        <span>\n                                            {this.state.categorizedEvents![type].map((item, key) =>\n                                                item instanceof Event ? (\n                                                    <EventComponent {...{ event: item, key }} />\n                                                ) : (\n                                                    <ErrorComponent {...{ key }}>{item}</ErrorComponent>\n                                                ),\n                                            )}\n                                        </span>\n                                    </p>\n                                ))\n                            )}\n                            <br />\n                            <br />\n                            PS: <b>Budeme rádi za vaše návrhy a připomínky</b>, můžete <b>odpovědět rovnou na email</b>.\n                            <br />\n                            PPS: Pokud už nechcete dostat další email, klikněte sem pro jejich odhlášení.\n                        </p>\n                    </div>\n\n                    <footer className=\"footer black\">\n                        <a href=\"https://www.pavolhejny/\">Pavol</a>\n                        &nbsp;&amp;&nbsp;\n                        <a href=\"https://www.linkedin.com/in/tereza-texlova/\">Tereza</a>\n                    </footer>\n                </div>\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { TalksPage } from './components/TalksPage';\n\nReactDOM.render(<TalksPage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}