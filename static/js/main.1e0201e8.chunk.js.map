{"version":3,"sources":["model/database/NewsletterContent.ts","model/database/Event.ts","model/database/EventCode.ts","utils/constructObjectFromJSON.ts","model/database/Subscriber.ts","api/ApiClient.ts","components/AboutPage.tsx","model/DateRange.ts","components/ErrorComponent.tsx","components/Form.tsx","components/LoadingComponent.tsx","utils/array.ts","utils/categorizeEvents.ts","utils/enumToArray.ts","utils/compareDates.ts","components/NewsletterContentsComponent.tsx","utils/eventTypeToNewsletterContentPosition.ts","utils/translate.ts","components/EventPrice.tsx","components/EventCodeParagraph.tsx","utils/capitalizeFirstLetter.tsx","components/EventDateComponent.tsx","components/EventTimeComponent.tsx","components/EventComponent.tsx","components/NewsletterComponent.tsx","components/TalksPageEmail.tsx","utils/createNewsletter.tsx","components/Partners.tsx","components/TalksPage.tsx","serviceWorker.ts","EventsApp.tsx","index.tsx"],"names":["NewsletterContentPosition","EventType","EventPriceCurrency","EventVisibility","NewsletterContent","Index","Entity","PrimaryGeneratedColumn","type","name","Column","nullable","comment","enum","ManyToOne","Event","event","newsletterContents","onDelete","onUpdate","JoinColumn","referencedColumnName","EventCode","length","precision","scale","eventCodes","unique","default","OneToMany","eventCode","eager","newsletterContent","this","days","parseInt","split","trim","year","month","day","date","Date","isNaN","getDate","setDate","constructObjectFromJSON","Class","data","instance","Object","assign","Subscriber","ApiClient","apiUrl","get","map","subscriber","post","path","fetch","response","json","responseData","method","headers","Accept","body","JSON","stringify","AboutPage","props","className","src","url","selfUrl","href","alt","download","DateRange","from","to","beginConstant","endConstant","fromConstant","constant","now","forMonth","getFullYear","getMonth","Error","currentDate","ErrorComponent","children","Form","onSubmit","a","preventDefault","form","target","formData","FormData","alert","email","fullname","source","window","location","toString","apiClient","postSubscriber","result","console","log","reset","message","defaultValue","htmlFor","required","id","defaultChecked","value","LoadingComponent","ALL","CURRENT_MONTH","FROM_CURRENT_MONTH","shuffleArray","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","joinArray","delimiter","delimitedArray","item","push","categorizeEvents","events","enumerable","eventsCategorized","keys","key","filter","v","eventOrError","eventsCategorizedFiltered","eventType","compareEventsbyDate","event1","event2","date1","date2","delta","error","warn","compareDates","dateToCompare","NewsletterContentsComponent","position","sort","b","order","dangerouslySetInnerHTML","__html","html","join","SUBJECT","eventTypeToNewsletterContentPosition","CONFERENCE","HEAD_CONFERENCES","MEETUP","HEAD_MEETUPS","WORKSHOP","HEAD_WORKSHOPS","HACKATHON","HEAD_HACKATHONS","translateCurrency","currency","CZK","EUR","translateEventType","EventPrice","price","isNullOrUndefined","ceil","priceCurrency","EventCodeParagraph","showCode","verbose","code","capitalizeFirstLetter","word","substr","toUpperCase","toLowerCase","EventDateComponent","monthString","moment","format","replace","locale","dateString","EventTimeComponent","time","timeString","EventComponent","visibility","FEATURED","web","rel","topic","canceled","online","city","NewsletterComponent","newsletter","categorizedEvents","serializeId","TalksPageEmail","range","filteredEvents","isIn","createNewsletter","HEAD","BOTTOM","Partners","logoUrl","link","title","style","backgroundImage","styled","div","OPTIONS","desc","TalksPage","state","fromConstants","load","getEvents","setState","onChange","React","Boolean","hostname","match","EventsApp","rootElement","history","run","createHashHistory","ReactDOM","render","exact","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e0201e8.chunk.js","sourcesContent":["import { Column, Entity, Index, JoinColumn, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\n\nimport { Event } from './Event';\n\nexport enum NewsletterContentPosition {\n    SUBJECT = 'SUBJECT',\n    HEAD = 'HEAD',\n    HEAD_CONFERENCES = 'HEAD_CONFERENCES',\n    HEAD_MEETUPS = 'HEAD_MEETUPS',\n    HEAD_WORKSHOPS = 'HEAD_WORKSHOPS',\n    HEAD_HACKATHONS = 'HEAD_HACKATHONS',\n    BOTTOM = 'BOTTOM',\n}\n\n@Index('position', ['position'], {})\n@Entity('NewsletterContent')\nexport class NewsletterContent {\n    @PrimaryGeneratedColumn({ type: 'int', name: 'id' })\n    id: number;\n\n    @Column('int', { name: 'event_id', nullable: true, comment: 'Is the paragraph connected to some one event?' })\n    eventId: number;\n\n    @Column('enum', {\n        name: 'position',\n        enum: NewsletterContentPosition,\n    })\n    position: NewsletterContentPosition;\n\n    @Column('int', { name: 'order', nullable: true })\n    order: number | null;\n\n    @Column('text', { name: 'html' })\n    html: string;\n\n    @Column('text', { name: 'note', nullable: true })\n    note: string | null;\n\n    @ManyToOne(() => Event, (event) => event.newsletterContents, { onDelete: 'RESTRICT', onUpdate: 'RESTRICT' })\n    @JoinColumn([{ name: 'event_id', referencedColumnName: 'id' }])\n    event: Event;\n}\n","import { NewsletterContent } from './NewsletterContent';\nimport { Column, Entity, Index, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { EventCode } from './EventCode';\n\nexport enum EventType {\n    CONFERENCE = 'CONFERENCE',\n    MEETUP = 'MEETUP',\n    WORKSHOP = 'WORKSHOP',\n    HACKATHON = 'HACKATHON',\n}\n\nexport enum EventPriceCurrency {\n    CZK = 'CZK',\n    EUR = 'EUR',\n}\n\nexport enum EventVisibility {\n    PENDING = 'PENDING',\n    VISIBLE = 'VISIBLE',\n    HIDDEN = 'HIDDEN',\n    FEATURED = 'FEATURED',\n}\n\n@Index('serializeId', ['serializeId'], { unique: true })\n@Index('name_topic', ['name', 'topic'], { unique: true })\n@Index('type', ['type'], {})\n@Index('city', ['city'], {})\n@Index('year', ['year'], {})\n@Index('month', ['month'], {})\n@Index('time', ['time'], {})\n@Index('price', ['price'], {})\n@Index('priceCurrency', ['priceCurrency'], {})\n@Index('visibility', ['visibility'], {})\n@Index('created', ['created'], {})\n@Index('updated', ['updated'], {})\n@Index('canceled', ['canceled'], {})\n@Index('online', ['online'], {})\n@Entity('Event')\nexport class Event {\n    @PrimaryGeneratedColumn({ type: 'int', name: 'id' })\n    id: number;\n\n    @Column('varchar', { name: 'serializeId', unique: true, length: 1000 }) // TODO: This should be named just URL\n    serializeId: string;\n\n    @Column('varchar', { name: 'name', length: 300 })\n    name: string;\n\n    @Column('varchar', { name: 'topic', nullable: true, length: 500 })\n    topic: string | null;\n\n    @Column('enum', {\n        name: 'type',\n        enum: EventType,\n    })\n    type: EventType;\n\n    @Column('varchar', { name: 'web', nullable: true, length: 1000 })\n    web: string | null;\n\n    @Column('varchar', { name: 'city', nullable: true, length: 200 })\n    city: string | null;\n\n    @Column('year', { name: 'year', nullable: true })\n    year: number | null;\n\n    @Column('int', { name: 'month', nullable: true })\n    month: number | null;\n\n    @Column('varchar', { name: 'days', nullable: true, length: 5 })\n    days: string | null;\n\n    @Column('varchar', { name: 'time', nullable: true, length: 8 })\n    time: string | null;\n\n    @Column('int', { name: 'price', nullable: true })\n    price: number | null;\n\n    @Column('enum', {\n        name: 'priceCurrency',\n        nullable: true,\n        enum: EventPriceCurrency,\n    })\n    priceCurrency: EventPriceCurrency | null;\n\n    @Column('enum', {\n        name: 'visibility',\n        enum: EventVisibility,\n        default: () => \"'PENDING'\",\n    })\n    visibility: EventVisibility;\n\n    @Column('tinyint', { name: 'canceled', nullable: true })\n    canceled: number | null;\n\n    @Column('tinyint', { name: 'online', nullable: true })\n    online: number | null;\n\n    @Column('text', { name: 'note', nullable: true })\n    note: string | null;\n\n    @Column('timestamp', { name: 'created', default: () => 'CURRENT_TIMESTAMP' })\n    created: Date;\n\n    @Column('timestamp', { name: 'updated', default: () => 'CURRENT_TIMESTAMP' })\n    updated: Date;\n\n    @OneToMany(() => EventCode, (eventCode) => eventCode.event, { eager: true })\n    eventCodes: EventCode[];\n\n    @OneToMany(() => NewsletterContent, (newsletterContent) => newsletterContent.event, { eager: true })\n    newsletterContents: NewsletterContent[];\n\n    get day(): number | null {\n        if (this.days) {\n            return parseInt(this.days.split('-')[0].trim());\n        } else {\n            return null;\n        }\n    }\n\n    get date(): Date | null {\n        if (this.year && this.month && this.day) {\n            const date = new Date(this.year, this.month - 1, this.day);\n\n            if (!isNaN(date.getDate())) {\n                return date;\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Purpose of this method is to provide date only for comparing functions - so it can be wrong (for example can be shifted by a day) but roughly OK and everytime defined\n     * compared to Event.date which is everytime precise but can be undefined\n     * This getter is usefull when we have only a month and year of an event but not a precise day.\n     */\n    get dateToCompare(): Date {\n        if (this.date) {\n            return this.date;\n        } else if (this.year && this.month) {\n            const date = new Date(this.year, this.month - 1, 25 /*Some late day in the month*/);\n            return date;\n        } else {\n            const date = new Date();\n            date.setDate(date.getDate() + 1000 /*TODO: Some big constant*/);\n            return date;\n        }\n    }\n\n    /*static error(error: Error):Event{\n    return new Event();\n    }*/\n}\n","import { Column, Entity, Index, JoinColumn, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Event } from './Event';\n\n@Index('event_id', ['eventId'], {})\n@Index('type', ['type'], {})\n@Index('value', ['value'], {})\n@Entity('EventCode')\nexport class EventCode {\n    @PrimaryGeneratedColumn({ type: 'int', name: 'id' })\n    id: number;\n\n    @Column('int', { name: 'event_id' })\n    eventId: number;\n\n    @Column('enum', { name: 'type', enum: ['DISCOUNT_PERCENT'] })\n    type: 'DISCOUNT_PERCENT';\n\n    @Column('varchar', { name: 'code', length: 200 })\n    code: string;\n\n    @Column('float', { name: 'value', precision: 10, scale: 2 })\n    value: number;\n\n    @Column('text', { name: 'note', nullable: true })\n    note: string | null;\n\n    @ManyToOne(() => Event, (event) => event.eventCodes, { onDelete: 'RESTRICT', onUpdate: 'RESTRICT' })\n    @JoinColumn([{ name: 'event_id', referencedColumnName: 'id' }])\n    event: Event;\n}\n","type Instantiable = { new (...args: any[]): any };\n\n// TODO: Create AbscractApiClient library\nexport function constructObjectFromJSON<TClass extends Instantiable>(\n    Class: TClass,\n    data: Partial<InstanceType<TClass>>,\n) {\n    const instance = new Class();\n    Object.assign(instance, data);\n    return instance;\n}\n","import { Column, Entity, Index, PrimaryGeneratedColumn } from 'typeorm';\n\n@Index('email', ['email'], {})\n@Index('created', ['created'], {})\n@Index('active', ['active'], {})\n@Entity('Subscriber')\nexport class Subscriber {\n    @PrimaryGeneratedColumn({ type: 'int', name: 'id' })\n    id: number;\n\n    @Column('varchar', { name: 'email', length: 1000 })\n    email: string;\n\n    @Column('varchar', { name: 'fullname', nullable: true, length: 1000 })\n    fullname: string | null;\n\n    @Column('varchar', { name: 'source', nullable: true, length: 2000 })\n    source: string | null;\n\n    @Column('timestamp', { name: 'created', nullable: true })\n    created: Date | null;\n\n    @Column('smallint', { name: 'active', nullable: true, default: () => \"'1'\" })\n    active: number | null;\n}\n","import { Event } from '../model/database/Event';\nimport { constructObjectFromJSON } from '../utils/constructObjectFromJSON';\nimport { Subscriber } from '../model/database/Subscriber';\n\nexport class ApiClient {\n    constructor(private apiUrl: string) {}\n\n    async getAbout() {}\n\n    async getEvents(): Promise<Event[]> {\n        const data = await this.get(`/events`);\n        return data.map((data) => constructObjectFromJSON(Event, data));\n    }\n\n    async postSubscriber(subscriber: Subscriber): Promise<Subscriber> {\n        const data = await this.post(\n            `/subscribers`,\n            subscriber /* TODO: Should be subscriber data directly in request body or should it be wrapped in {subscriber:{...}} */,\n        );\n        return constructObjectFromJSON(Subscriber, data);\n    }\n\n    // TODO: Create AbscractApiClient library\n    // TODO: Generically typed\n    private async get(path: string /*TODO: Add option for query*/) {\n        const response = await fetch(`${this.apiUrl}${path}`);\n        const responseData = await response.json();\n        return responseData;\n    }\n\n    // TODO: Create AbscractApiClient library\n    // TODO: Generically typed\n    private async post(path: string, data: {} /*TODO: Maybe add option for query*/) {\n        const response = await fetch(`${this.apiUrl}${path}`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data),\n        });\n        const responseData = await response.json();\n        return responseData;\n    }\n}\n","import * as React from 'react';\n\ninterface IAboutPageProps {\n    selfUrl: string;\n}\n\nexport function AboutPage(props: IAboutPageProps) {\n    return (\n        <>\n            <div className=\"content about\">\n                <div className=\"front black\">\n                    <div className=\"inner\">\n                        {/* <h1>Czech.events</h1> */}\n\n                        {[\n                            {\n                                name: 'Tmavá verze',\n                                src: 'czech.events.black-logo.png',\n                            },\n\n                            {\n                                name: 'Světlá verze',\n                                src: 'czech.events.white-logo.png',\n                            },\n                        ].map(({ name, src }) => {\n                            const url = `${props.selfUrl}/design/logos/${src}`;\n                            return (\n                                <div key={src} className=\"logo\">\n                                    <a href={url}>\n                                        <img src={url} alt=\"Czech.events logo\" />\n                                    </a>\n                                    {`${name} `}\n                                    <a href={url} download>\n                                        (Stáhnout)\n                                    </a>\n                                    <pre>\n                                        {`                                     \n<a href=\"https://czech.events/\">\n    <img src=\"${url}\" alt=\"Czech.events logo\" width=\"200\" />\n</a>`.trim()}\n                                    </pre>\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n","export class DateRange {\n    constructor(public from?: Date, public to?: Date) {}\n\n    static fromConstants(beginConstant: RangeConstant, endConstant: RangeConstant): DateRange {\n        return new DateRange(DateRange.fromConstant(beginConstant).from, DateRange.fromConstant(endConstant).to);\n    }\n\n    static fromConstant(constant: RangeConstant): DateRange {\n        const now = new Date();\n\n        switch (constant) {\n            case 'NOW':\n                return new DateRange(now, now);\n\n            case 'CURRENT_MONTH':\n                return DateRange.forMonth(now);\n\n            case 'NEXT_MONTH':\n                return DateRange.forMonth(new Date(now.getFullYear(), now.getMonth() + 1, 1));\n\n            // TODO: Maybe better name for NEXT_NEXT_MONTH\n            // TODO: DRY\n            case 'NEXT_NEXT_MONTH':\n                return DateRange.forMonth(new Date(now.getFullYear(), now.getMonth() + 2, 1));\n\n            case 'INFINITY':\n                return new DateRange();\n\n            default:\n                throw new Error(`Unknown range constant \"${constant}\".`);\n        }\n    }\n\n    static forMonth(currentDate = new Date()): DateRange {\n        const month = currentDate.getMonth();\n        const year = currentDate.getFullYear();\n\n        const from = new Date(year, month, 1);\n        const to = new Date(year, month + 1, -1);\n\n        return new DateRange(from, to);\n    }\n\n    // TODO: Deprecated due to fromConstants, fromConstant\n    static ALL = new DateRange();\n    static CURRENT_MONTH = DateRange.forMonth();\n    static FROM_CURRENT_MONTH = new DateRange(DateRange.CURRENT_MONTH.from);\n\n    isIn(date: Date) {\n        if (this.from && this.from > date) {\n            return false;\n        }\n\n        if (this.to && this.to < date) {\n            return false;\n        }\n\n        return true;\n    }\n}\n\nexport type RangeConstant = 'NOW' | 'CURRENT_MONTH' | 'NEXT_MONTH' | 'NEXT_NEXT_MONTH' | 'INFINITY';\n\n/*/\nfor (const constant of ['NOW', 'CURRENT_MONTH', 'NEXT_MONTH', 'NEXT_NEXT_MONTH', 'INFINITY'] as RangeConstant[]) {\n    console.log(constant, DateRange.fromConstant(constant));\n}\n/**/\n","import * as React from 'react';\n\n// TODO: Deprecated remove\nexport function ErrorComponent({ children }: React.PropsWithChildren<{}>) {\n    return (\n        <>\n            <div className=\"error\">{children}</div>\n        </>\n    );\n}\n","import * as React from 'react';\nimport { constructObjectFromJSON } from '../utils/constructObjectFromJSON';\nimport { Subscriber } from '../model/database/Subscriber';\nimport { ApiClient } from '../api/ApiClient';\n\ninterface IFormProps {\n    apiClient: ApiClient;\n}\n\nexport function Form(props: IFormProps) {\n    // TODO: To Config\n    return (\n        <>\n            <form\n                onSubmit={async (event) => {\n                    event.preventDefault();\n                    const form = event.target as HTMLFormElement;\n                    const formData = new FormData(form);\n\n                    if (!formData.get('gdpr')) {\n                        alert(`Potřebujeme od Vás zaškrtnout souhlas se zpracováním osobních údajů.`);\n                        return;\n                    }\n\n                    const subscriber = constructObjectFromJSON(Subscriber, {\n                        email: formData.get('email') as string,\n                        fullname: formData.get('fullname') as string,\n                        source: window.location.toString(),\n                    });\n\n                    try {\n                        const result = await props.apiClient.postSubscriber(subscriber);\n\n                        console.log('result', result);\n\n                        form.reset();\n                        alert(`Děkujeme, můžete se těšit na další email!`);\n                    } catch (error) {\n                        alert(error.message /*TODO: Better*/);\n                    }\n                }}\n            >\n                <div className=\"group\">\n                    <input type=\"text\" name=\"fullname\" className=\"field\" defaultValue=\"\" />\n                    <label htmlFor=\"name\">Vaše jméno:</label>\n                    <div className=\"bar\"></div>\n                </div>\n\n                <div className=\"group\">\n                    <input type=\"email\" name=\"email\" defaultValue=\"@\" required className=\"field\" />\n                    <label htmlFor=\"email\">E-mail: *</label>\n                    <div className=\"bar\"></div>\n                </div>\n\n                <div className=\"group checkbox gdpr\">\n                    <input type=\"checkbox\" name=\"gdpr\" id=\"gdpr\" defaultChecked={false} />\n                    <label htmlFor=\"gdpr\">Souhlasím se zpracováním osobních údajů</label>\n                </div>\n\n                {/* TODO: We need here some GDPR */}\n                <div className=\"center\">\n                    <input value=\"Přihlásit se \" type=\"submit\" id=\"submit\" name=\"submit\" className=\"button\" />\n                </div>\n            </form>\n        </>\n    );\n}\n","import * as React from 'react';\n\nexport function LoadingComponent() {\n    return (\n        <>\n            <div className=\"loading\">Načítání...</div>\n        </>\n    );\n}\n","export function shuffleArray<T>(array: T[]): T[] {\n    array = [...array];\n    let currentIndex = array.length,\n        temporaryValue,\n        randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}\n\nexport function joinArray<T>(array: T[], delimiter: T): T[] {\n    const delimitedArray: T[] = [];\n\n    for (const item of array) {\n        if (delimitedArray.length) {\n            delimitedArray.push(delimiter);\n        }\n        delimitedArray.push(item);\n    }\n\n    return delimitedArray;\n}\n","import { EventType } from './../model/database/Event';\nimport { Event } from '../model/database/Event';\nimport { enumToArray } from './enumToArray';\nimport { IEventsCategorized } from '../model/IEventsCategorized';\n\nexport function categorizeEvents(events: Event[]): IEventsCategorized {\n    const eventsCategorized: IEventsCategorized = {};\n\n    for (const eventType of enumToArray(EventType)) {\n        eventsCategorized[eventType] = [];\n    }\n\n    for (const eventOrError of events) {\n        let type: string;\n        if (eventOrError instanceof Event) {\n            type = eventOrError.type;\n        } else {\n            type = 'errors';\n        }\n\n        eventsCategorized[type] = eventsCategorized[type] || [];\n        eventsCategorized[type].push(eventOrError);\n    }\n\n    const eventsCategorizedFiltered: IEventsCategorized = {};\n\n    for (const eventType of Object.keys(eventsCategorized)) {\n        if (eventsCategorized[eventType].length > 0) {\n            eventsCategorizedFiltered[eventType] = eventsCategorized[eventType];\n        }\n    }\n\n    return eventsCategorizedFiltered;\n}\n","export function enumToArray(enumerable: any): string[] {\n    let enumMembers: any[] = Object.keys(enumerable).map((key) => enumerable[key]);\n    let enumValues: string[] = enumMembers.filter((v) => typeof v === 'string');\n    return enumValues;\n}\n","import { Event } from '../model/database/Event';\n\ntype CompareResult = 1 | -1 | 0;\n\nexport function compareEventsbyDate(event1?: Event, event2?: Event): CompareResult {\n    return compareDates(event1.dateToCompare, event2.dateToCompare);\n}\n\nexport function compareDates(date1: Date, date2: Date): CompareResult {\n    try {\n        const delta = ((new Date(date2) as any) as number) - ((new Date(date1) as any) as number);\n\n        if (delta > 0) {\n            return -1;\n        } else if (delta < 0) {\n            return 1;\n        } else {\n            return 0;\n        }\n    } catch (error) {\n        console.warn(error);\n        return -1;\n    }\n}\n","import * as React from 'react';\nimport { NewsletterContent, NewsletterContentPosition } from '../model/database/NewsletterContent';\n\ninterface INewsletterContentsComponentProps {\n    position: NewsletterContentPosition;\n    newsletterContents: NewsletterContent[];\n}\n\nexport function NewsletterContentsComponent({ newsletterContents, position }: INewsletterContentsComponentProps) {\n    return (\n        <>\n            {newsletterContents\n                .filter((newsletterContent) => newsletterContent.position === position)\n                .sort((a, b) => (a.order > b.order ? 1 : -1) /* TODO: Correct? */)\n                .map((newsletterContent, key) => (\n                    <div key={key}>\n                        <span dangerouslySetInnerHTML={{ __html: newsletterContent.html.split('\\n').join('<br/>') }} />\n                        {position !== NewsletterContentPosition.SUBJECT && (\n                            <>\n                                <br />\n                            </>\n                        )}\n                    </div>\n                ))}\n        </>\n    );\n}\n","import { NewsletterContentPosition } from '../model/database/NewsletterContent';\nimport { EventType } from '../model/database/Event';\n\nexport function eventTypeToNewsletterContentPosition(eventType: EventType): NewsletterContentPosition {\n    switch (eventType) {\n        case EventType.CONFERENCE:\n            return NewsletterContentPosition.HEAD_CONFERENCES;\n        case EventType.MEETUP:\n            return NewsletterContentPosition.HEAD_MEETUPS;\n        case EventType.WORKSHOP:\n            return NewsletterContentPosition.HEAD_WORKSHOPS;\n        case EventType.HACKATHON:\n            return NewsletterContentPosition.HEAD_HACKATHONS;\n        default:\n            throw new Error(`Can not convert \"${eventType}\" into NewsletterContentPosition.`);\n    }\n}\n","import { EventType, EventPriceCurrency } from './../model/database/Event';\n\nexport function translateCurrency(currency: EventPriceCurrency): string {\n    // TODO: Hardcoded\n    switch (currency) {\n        case 'CZK' as any:\n        case EventPriceCurrency.CZK:\n            return 'Kč';\n        case 'EUR' as any:\n        case EventPriceCurrency.EUR:\n            return '‎€';\n        default:\n            return currency;\n    }\n}\n\nexport function translateEventType(eventType: EventType): string {\n    // TODO: Plular\n    // TODO: Hardcoded\n    switch (eventType) {\n        case EventType.HACKATHON:\n            return 'Hackathony';\n        case EventType.CONFERENCE:\n            return '‎Konference';\n        case EventType.MEETUP:\n            return '‎Meetupy';\n        case EventType.WORKSHOP:\n            return '‎Workshopy';\n    }\n}\n","import * as React from 'react';\nimport { Event } from '../model/database/Event';\nimport { isNullOrUndefined } from 'util';\nimport { translateCurrency } from '../utils/translate';\n\ninterface IEventPriceProps {\n    event: Event;\n    price?: number;\n}\n\n// TODO: Component name suffix to all components\nexport function EventPrice({ event, price }: IEventPriceProps) {\n    if (!price) price = event.price;\n    if (isNullOrUndefined(price)) return <></>;\n    if (price === 0) return <>💸&nbsp;Zdarma</>;\n    return <>💸&nbsp;{`${Math.ceil(price * 100) / 100} ${translateCurrency(event.priceCurrency!)}`}</>;\n}\n","import * as React from 'react';\nimport { Event } from '../model/database/Event';\nimport { EventPrice } from './EventPrice';\n\ninterface IEventCodeParagraphProps {\n    event: Event;\n    showCode: boolean;\n    verbose: boolean;\n}\n\nexport function EventCodeParagraph({ event, showCode, verbose }: IEventCodeParagraphProps) {\n    return (\n        <>\n            {event.eventCodes.map((eventCode, key) => (\n                <span {...{ key }}>\n                    <br />\n\n                    {showCode ? (\n                        <>\n                            A s kódem <b>{eventCode.code}</b> to budete mít o {Math.floor(eventCode.value * 100)}%\n                            levnější\n                        </>\n                    ) : (\n                        <>\n                            S naším kódem, který budeme posílat v dalším emalu, to budete mít o{' '}\n                            {Math.floor(eventCode.value * 100)}% levnější\n                        </>\n                    )}\n\n                    {verbose && (\n                        <>\n                            , tzn. za <EventPrice {...{ event, price: event.price * (1 - eventCode.value) }} />\n                        </>\n                    )}\n                </span>\n            ))}\n        </>\n    );\n}\n","export function capitalizeFirstLetter(word: string): string {\n    return word.substr(0, 1).toUpperCase() + word.substr(1).toLowerCase();\n}\n","import 'moment/locale/cs';\n\nimport moment from 'moment';\nimport * as React from 'react';\n\nimport { Event } from '../model/database/Event';\nimport { capitalizeFirstLetter } from '../utils/capitalizeFirstLetter';\n\ninterface EventDateComponentProps {\n    event: Event;\n}\n\nexport function EventDateComponent({ event }: EventDateComponentProps) {\n    const { date, year, month } = event;\n\n    if (date) {\n        try {\n            moment.locale('cs');\n            let dateString = moment(date).format('LLLL');\n            dateString = dateString.split('0:00')[0];\n            //TODO: More elegant way\n            dateString = dateString.replace('leden', 'ledna');\n            dateString = dateString.replace('únor', 'února');\n            dateString = dateString.replace('březen', 'března');\n            dateString = dateString.replace('duben', 'dubna');\n            dateString = dateString.replace('květen', 'května');\n            dateString = dateString.replace('červen', 'června');\n            dateString = dateString.replace('červnaec', 'červenec'); // This is typo in moment/locale/cs library. We can make an pull request to it but this is the quick local hotfix.\n            dateString = dateString.replace('červenec', 'července');\n            dateString = dateString.replace('srpen', 'srpna');\n            dateString = dateString.replace('září', 'září');\n            dateString = dateString.replace('říjen', 'října');\n            dateString = dateString.replace('listopad', 'listopadu');\n            dateString = dateString.replace('prosinec', 'prosince');\n            dateString = capitalizeFirstLetter(dateString);\n            return <>📅&nbsp;{dateString}</>;\n        } catch (error) {\n            console.error(`Problem when parsing moment('${date}').format('LLLL'); See more below:`);\n            console.error(error);\n            return <></>;\n        }\n    } else if (year && month) {\n        let monthString = moment(month, 'M').format('MMMM');\n        monthString = capitalizeFirstLetter(monthString);\n        monthString = monthString.replace('Červnaec', 'Červenec'); // This is typo in moment/locale/cs library. We can make an pull request to it but this is the quick local hotfix.\n        return (\n            <>\n                📅&nbsp;{monthString} {year}\n            </>\n        );\n    } else {\n        return <></>;\n    }\n}\n\ninterface EventTimeComponentProps {\n    time: string;\n}\n","import * as React from 'react';\nimport { Event } from '../model/database/Event';\nimport moment from 'moment';\nimport 'moment/locale/cs';\n\ninterface EventTimeComponentProps {\n    event: Event;\n}\n\nexport function EventTimeComponent({ event }: EventTimeComponentProps) {\n    const { time } = event;\n\n    if (!time) {\n        return <></>;\n    }\n\n    try {\n        moment.locale('cs');\n        let timeString = moment(time, 'hh:mm').format('LT');\n        if (timeString === 'Invalid date') {\n            throw new Error(`Time was parsed as \"Invalid date\".`);\n        }\n        return <>⏱️&nbsp;{timeString}</>;\n    } catch (error) {\n        console.error(`Problem when parsing moment('2010-10-20 ' + '${time}').format('LT'); See more below:`);\n        console.error(error);\n        return <></>;\n    }\n}\n","import * as React from 'react';\nimport { Event, EventVisibility } from '../model/database/Event';\nimport { EventPrice } from './EventPrice';\nimport { EventCodeParagraph } from './EventCodeParagraph';\nimport { EventDateComponent } from './EventDateComponent';\nimport { EventTimeComponent } from './EventTimeComponent';\n\ninterface IEventComponentProps {\n    event: Event;\n}\n\nexport function EventComponent({ event }: IEventComponentProps) {\n    return (\n        <span className={`${event.dateToCompare < new Date() ? 'past' : ''}`}>\n            {event.visibility === EventVisibility.FEATURED ? '⭐' : ''}\n            <a href={event.web.toString()} target=\"_blank\" rel=\"nofolow noopener noreferrer\">\n                <b>{event.name}</b>\n                {event.topic ? ` – ${event.topic}` : ''}\n            </a>\n            <br />\n            {event.canceled === 1 && <>🚫&nbsp;Zrušeno&nbsp;</>}\n            {event.online === 1 && <>🌍&nbsp;Online&nbsp;</>}\n            {event.city && (\n                <>\n                    🌆&nbsp;{event.city}&nbsp;{/* TODO: Plzeň místo 🌆 dát jako easter egg 🐪 */}\n                </>\n            )}\n            <EventDateComponent {...{ event }} />\n            <EventTimeComponent {...{ event }} />\n            &nbsp;\n            <EventPrice {...{ event }} />\n            <EventCodeParagraph {...{ event, verbose: true, showCode: false }} />\n            {}\n            <br />\n            <br />\n            {}\n        </span>\n    );\n}\n","import * as React from 'react';\nimport { EventType } from '../model/database/Event';\nimport { INewsletter } from '../model/INewsletter';\nimport { eventTypeToNewsletterContentPosition } from '../utils/eventTypeToNewsletterContentPosition';\nimport { translateEventType } from '../utils/translate';\nimport { EventComponent } from './EventComponent';\nimport { NewsletterContentsComponent } from './NewsletterContentsComponent';\n\n// TODO: Remove @deprecated import { Newsletter } from '../model/database/Newsletter';\n\ninterface INewsletterComponentProps {\n    newsletter: INewsletter;\n}\n\nexport function NewsletterComponent(props: INewsletterComponentProps) {\n    const { categorizedEvents, newsletterContents } = props.newsletter;\n\n    return (\n        <>\n            {Object.keys(categorizedEvents).map((type) => (\n                <div key={type}>\n                    <br />\n                    <h2>{translateEventType(type as any)}</h2>\n                    <NewsletterContentsComponent\n                        {...{ newsletterContents, position: eventTypeToNewsletterContentPosition(type as EventType) }}\n                    />\n                    <span>\n                        {categorizedEvents![type].map((event) => (\n                            <EventComponent {...{ event, key: event.serializeId }} />\n                        ))}\n                    </span>\n                </div>\n            ))}\n        </>\n    );\n}\n","import * as React from 'react';\n\nimport { Event } from '../model/database/Event';\nimport { NewsletterContentPosition } from '../model/database/NewsletterContent';\nimport { DateRange } from '../model/DateRange';\nimport { joinArray, shuffleArray } from '../utils/array';\nimport { createNewsletter } from '../utils/createNewsletter';\nimport { NewsletterContentsComponent } from './NewsletterContentsComponent';\nimport { NewsletterComponent } from './NewsletterComponent';\n\n// TODO: Remove @deprecated import { Newsletter } from '../model/database/Newsletter';\n\ninterface ITalksPageEmailProps {\n    range: DateRange;\n    events: Event[];\n    // TODO: Remove @deprecated newsletter: null | Newsletter;\n}\n\nexport function TalksPageEmail(props: ITalksPageEmailProps) {\n    const newsletter = createNewsletter(props);\n    const { newsletterContents } = newsletter;\n\n    return (\n        <>\n            <h2>\n                {/*`📅 Konference / meetupy / hackathony – co se děje z IT / Startupové akce 🌆`*/}\n                <NewsletterContentsComponent {...{ newsletterContents, position: NewsletterContentPosition.SUBJECT }} />\n            </h2>\n            Ahoj,\n            <br />\n            opět jsme dali dohromady seznam událostí, na které se vyplatí zajít:\n            <br />\n            <NewsletterContentsComponent {...{ newsletterContents, position: NewsletterContentPosition.HEAD }} />\n            <NewsletterComponent {...{ newsletter }} />\n            <br /> <br />\n            <NewsletterContentsComponent {...{ newsletterContents, position: NewsletterContentPosition.BOTTOM }} />\n            {/* <i>\n                PS: <b>Budeme rádi za vaše návrhy a připomínky</b>, můžete <b>odpovědět rovnou na email</b>.<br />\n                PPS: E-mail posíláme na základě Vaší registrace na stránce{' '}\n                <a href=\"https://czech.events/?utm_source=mail&amp;utm_medium=referral&amp;utm_campaign=2020-02_unsubscribe\">\n                    czech.events\n                </a>\n                . Pokud už další email nechcete dostat, napište nám rychlou odpověď.\n            </i> */}\n            {/*\n            <br />\n            PPS: Pokud už nechcete dostat další email, klikněte sem pro jejich odhlášení.\n            */}\n            <br />\n            <br />\n            {joinArray(\n                shuffleArray([\n                    <>\n                        <a href=\"https://www.pavolhejny.com/?utm_source=czech.events-mail&amp;utm_medium=referral&amp;utm_campaign=signature\">\n                            Pavol Hejný\n                        </a>\n                    </>,\n                    <>\n                        <a href=\"https://www.linkedin.com/in/tereza-texlova/\">Tereza Texlová</a>\n                    </>,\n                ]),\n                <>&nbsp;&amp;&nbsp;</>,\n            )}\n        </>\n    );\n}\n","import { Event } from '../model/database/Event';\nimport { NewsletterContent } from '../model/database/NewsletterContent';\nimport { INewsletter } from '../model/INewsletter';\nimport { DateRange } from '../model/DateRange';\nimport { categorizeEvents } from '../utils/categorizeEvents';\nimport { compareEventsbyDate } from '../utils/compareDates';\n\nexport function createNewsletter({ events, range }: { events: Event[]; range: DateRange }): INewsletter {\n    const filteredEvents = events\n        //.filter((event) => (event instanceof Event ? event.inMail : true))\n        .filter((event) => (event instanceof Event ? range.isIn(event.dateToCompare) : true))\n        .sort((a, b) => compareEventsbyDate(a, b));\n\n    const categorizedEvents = categorizeEvents(filteredEvents);\n\n    const newsletterContents: NewsletterContent[] = [];\n    for (const event of filteredEvents) {\n        newsletterContents.push(...event.newsletterContents);\n    }\n\n    return { categorizedEvents, newsletterContents };\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\n\nimport { shuffleArray } from '../utils/array';\n\ninterface IPartnersProps {\n    selfUrl: string;\n}\n\nexport function Partners(props: IPartnersProps) {\n    return (\n        <>\n            <div className=\"partners\">\n                <h2>Mediální partneři</h2>\n\n                {shuffleArray([\n                    // TODO: To some other file or even to DB\n                    {\n                        name: 'Startup Weekend Prague',\n                        logoUrl: `${props.selfUrl}/design/logos/partners/startup-weekend-prague.png`,\n                        link: 'https://www.facebook.com/swprague/',\n                    },\n\n                    {\n                        name: 'Startup Weekend Bratislava',\n                        logoUrl: `${props.selfUrl}/design/logos/partners/startup-weekend-bratislava.png`,\n                        link: 'https://www.facebook.com/StartupWeekendBratislava/',\n                    },\n                    {\n                        name: 'Undout Sleep Box',\n                        logoUrl: `${props.selfUrl}/design/logos/partners/undout.png`,\n                        link: 'https://undout.com/',\n                    },\n                    {\n                        name: 'HackPrague',\n                        logoUrl: `${props.selfUrl}/design/logos/partners/hackprague.svg`,\n                        link: 'https://hackprague.com/',\n                    },\n                    {\n                        name: 'StartupBox',\n                        logoUrl: `${props.selfUrl}/design/logos/partners/startupbox.png`,\n                        link: 'https://www.startupbox.cz/',\n                    },\n                    /*\n                    TODO:\n                    {\n                        name: 'CEEHACKS',\n                        logoUrl: `${props.selfUrl}/design/logos/partners/ceehacks.png`,\n                        link: 'https://www.ceehacks.com/',\n                    },\n                    {\n                        name: 'TechHeaven',\n                        logoUrl: `${props.selfUrl}/design/logos/partners/techheaven.svg`,\n                        link: 'https://techheaven.org/',\n                    },*/\n                    // TODO: CzechFuture tech\n                    // TODO: Random shuffle\n                ]).map(({ name, logoUrl, link }) => {\n                    return (\n                        <a\n                            href={`${link}?utm_source=czech.events&amp;utm_medium=referral&amp;utm_campaign=partners`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            title={name}\n                        >\n                            <div key={name} className=\"logo\" style={{ backgroundImage: `url(${logoUrl})` }}>\n                                {/* <img src={logoUrl} title={name} alt={`${name} logo`} /> */}\n                                {/*`${name} `*/}\n                            </div>\n                        </a>\n                    );\n                })}\n            </div>\n        </>\n    );\n}\n\nconst PartnersDiv = styled.div`\n    text-align: center;\n    font-family: Arial, Helvetica, sans-serif, 'Montserrat', serif;\n    color: rgb(212, 212, 212);\n    padding: 2em;\n    /* padding-top: 0; */\n\n    h2 {\n        font-size: 1.5rem;\n        font-family: 'Montserrat', serif;\n    }\n\n    .logo {\n        margin: 20px;\n        border-radius: 5px;\n        display: inline-block;\n        width: 100px;\n        height: 100px;\n        color: white;\n        background-size: contain;\n        background-repeat: no-repeat;\n        background-position: center;\n    }\n\n    /*\n    .logo img {\n        display: block;\n        max-width: 100px;\n        max-height: 100px;\n    }\n    */\n`;\n","import * as React from 'react';\nimport { DateRange, RangeConstant } from '../model/DateRange';\nimport { ErrorComponent } from './ErrorComponent';\nimport { Form } from './Form';\nimport { LoadingComponent } from './LoadingComponent';\nimport { TalksPageEmail } from './TalksPageEmail';\nimport { Event } from '../model/database/Event';\nimport { ApiClient } from '../api/ApiClient';\n// TODO: Remove @deprecated import { Newsletter } from '../model/database/Newsletter';\nimport { Partners } from './Partners';\n\ninterface ITalksPageProps {\n    selfUrl: string;\n    apiClient: ApiClient;\n}\n\ninterface ITalksPageState {\n    error: null | string;\n    range: DateRange;\n    events: null | Event[];\n    // TODO: Remove @deprecated newsletter: null | Newsletter;\n}\n\nconst OPTIONS = [\n    {\n        value: 'CURRENT_MONTH-NEXT_MONTH',\n        desc: 'na další měsíc + události tohoto měsíce:',\n    },\n    {\n        value: 'NEXT_MONTH-NEXT_NEXT_MONTH',\n        desc: 'na další měsíc:',\n    },\n    {\n        value: 'NOW-INFINITY',\n        desc: 'se všemi událostmi, co právě evidujeme do budoucna:',\n    },\n    {\n        value: 'INFINITY-INFINITY',\n        desc: 'se všemi událostmi, co právě evidujeme:',\n    },\n];\n\nexport class TalksPage extends React.Component<ITalksPageProps, ITalksPageState> {\n    state: ITalksPageState = {\n        error: null,\n        range: DateRange.fromConstants('CURRENT_MONTH', 'NEXT_MONTH'),\n        events: null,\n        // TODO: Remove @deprecated newsletter: null,\n    };\n\n    constructor(props: ITalksPageProps) {\n        super(props);\n        this.load();\n    }\n\n    private async load() {\n        try {\n            const events = await this.props.apiClient.getEvents();\n            //console.log('events', events);\n            this.setState({ events });\n\n            // TODO: Remove @deprecated const newsletter = await this.props.apiClient.getNewsletter(2020, 2 /* TODO: Unhardcode */);\n            // TODO: Remove @deprecated //console.log('newsletter', newsletter);\n            // TODO: Remove @deprecated this.setState({ newsletter });\n        } catch (error) {\n            this.setState({ error: error.message });\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <div className=\"content\">\n                    <div className=\"front black\">\n                        <div className=\"inner\">\n                            <h1>Mějte přehled o nejzajímavějších událostech z IT &amp; startupového světa.</h1>\n                            {/*TODO: Semantically h2 is not very ideal here*/}\n                            <h2 className=\"font-light\">\n                                Dejte nám Vaší emailovou adresu a my Vám budeme pravidelně jednou za měsíc posílat co se\n                                děje:\n                            </h2>\n                            <Form {...{ apiClient: this.props.apiClient }} />\n\n                            {/*TODO: Semantically h2 is not very ideal here at all*/}\n                            <h2 className=\"line separator font-light\">\n                                A jak takový mail vypadá? Tady máte živou ukázku z rozpracovaného mailu\n                                <select\n                                    className={'font-light option-in-text'}\n                                    onChange={(event) => {\n                                        const [beginConstant, endConstant] = event.target.value.split(\n                                            '-',\n                                        ) as RangeConstant[];\n\n                                        const range = DateRange.fromConstants(beginConstant, endConstant);\n                                        /*console.log(\n                                            event.target.value,\n                                            DateRange.fromConstant(beginConstant),\n                                            DateRange.fromConstant(endConstant),\n                                            range,\n                                        );*/\n\n                                        this.setState({ range });\n                                    }}\n                                >\n                                    {OPTIONS.map((item) => (\n                                        <option value={item.value}>{item.desc}</option>\n                                    ))}\n                                </select>\n                            </h2>\n                        </div>\n                    </div>\n\n                    <div className=\"letter white\">\n                        {/*\n                        TODO: Or make tabs - see bellow\n                        <div className=\"tab\" onClick={() => this.setState({ range: DateRange.CURRENT_MONTH })}>\n                            Aktuání měsíc\n                        </div>\n                        <div className=\"tab\" onClick={() => this.setState({ range: DateRange.ALL })}>\n                            Vše\n                        </div>\n                         */}\n\n                        <div className=\"inner\">\n                            {/*\n                            TODO: Here can be a selecotr of the months but firstly we need to add backend and better DB so it is not priority now.\n                            \n                            TODO: Or maybe like this:\n                            <select>\n                                <option>Aktuální měsíc</option>\n                                <option>Budoucí události</option>\n                                <option>Budoucí události tento měsíc</option>\n                                <option>Vše</option>\n                            </select>\n\n                            */}\n\n                            {this.state.error ? (\n                                <ErrorComponent>\n                                    <pre>{this.state.error}</pre>\n                                </ErrorComponent>\n                            ) : !this.state.events ? (\n                                <LoadingComponent />\n                            ) : (\n                                <TalksPageEmail\n                                    {...{\n                                        events: this.state.events,\n                                        // TODO: Remove @deprecated newsletter: this.state.newsletter,\n                                        range: this.state.range,\n                                    }}\n                                />\n                            )}\n                        </div>\n                    </div>\n\n                    <Partners {...{ selfUrl: this.props.selfUrl }} />\n                </div>\n            </>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import { createHashHistory, History } from 'history';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, Router, Switch } from 'react-router-dom';\nimport { ApiClient } from './api/ApiClient';\nimport { AboutPage } from './components/AboutPage';\nimport { TalksPage } from './components/TalksPage';\nimport * as serviceWorker from './serviceWorker';\nimport { Partners } from './components/Partners';\n\n// TODO: In some time suddenly occures \"Failed to fetch\" in the\n\n// TODO: Join app and createApp\n\nexport class EventsApp {\n    private apiClient: ApiClient;\n    private history: History;\n\n    constructor(private rootElement: HTMLDivElement, private apiUrl: string, private selfUrl: string) {\n        console.log(`Starting EventsApp.`);\n        console.log('rootElement', rootElement);\n        console.log('apiUrl', apiUrl);\n        console.log('selfUrl', selfUrl);\n        this.run();\n    }\n\n    private async run() {\n        this.history = createHashHistory();\n        this.apiClient = new ApiClient(this.apiUrl);\n\n        ReactDOM.render(\n            <Router {...{ history: this.history }}>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <TalksPage {...{ apiClient: this.apiClient, selfUrl: this.selfUrl }} />\n                    </Route>\n                    <Route exact path=\"/about\">\n                        <AboutPage {...{ selfUrl: this.selfUrl }} />\n                    </Route>\n                    <Route exact path=\"/partners\">\n                        <Partners {...{ selfUrl: this.selfUrl }} />\n                    </Route>\n                </Switch>\n            </Router>,\n            this.rootElement,\n        );\n        // If you want your app to work offline and load faster, you can change\n        // unregister() to register() below. Note this comes with some pitfalls.\n        // Learn more about service workers: https://bit.ly/CRA-PWA\n        serviceWorker.unregister();\n    }\n}\n","import { EventsApp } from './EventsApp';\nimport './style/index.css';\nimport './style/newsletter.css';\n\n(window as any).EventsApp = EventsApp;\n"],"sourceRoot":""}