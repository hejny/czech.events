{"version":3,"sources":["../node_modules/typeorm/node_modules/tslib/tslib.es6.js","../../../browser/src/driver/Query.ts","../../../browser/src/platform/BrowserDisabledDriversDummy.ts","../node_modules/react/jsx-runtime.js","../../../../browser/src/schema-builder/table/Table.ts","../node_modules/react/index.js","../../../browser/src/naming-strategy/DefaultNamingStrategy.ts","../../../browser/src/error/CannotExecuteNotConnectedError.ts","../../../browser/src/error/CannotConnectAlreadyConnectedError.ts","../../../browser/src/error/EntityMetadataNotFoundError.ts","../../../browser/src/migration/Migration.ts","../../../browser/src/migration/MigrationExecutor.ts","../../../browser/src/error/MissingPrimaryColumnError.ts","../../../browser/src/error/CircularRelationsError.ts","../../../browser/src/util/DepGraph.ts","../../../browser/src/error/DataTypeNotSupportedError.ts","../../../browser/src/error/NoConnectionOptionError.ts","../../../browser/src/error/InitializedRelationError.ts","../../../browser/src/metadata-builder/EntityMetadataValidator.ts","../../../browser/src/error/QueryRunnerProviderAlreadyReleasedError.ts","../../../browser/src/error/NoNeedToReleaseEntityManagerError.ts","../../../browser/src/repository/Repository.ts","../../../browser/src/repository/TreeRepository.ts","../../../browser/src/error/FindRelationsNotFoundError.ts","../../../browser/src/find-options/FindOptionsUtils.ts","../../../../browser/src/query-builder/transformer/PlainObjectToNewEntityTransformer.ts","../../../../browser/src/query-builder/transformer/PlainObjectToDatabaseEntityTransformer.ts","../../../browser/src/error/CustomRepositoryNotFoundError.ts","../../../browser/src/error/CustomRepositoryDoesNotHaveEntityError.ts","../../../browser/src/repository/AbstractRepository.ts","../../../browser/src/error/CustomRepositoryCannotInheritRepositoryError.ts","../../../browser/src/error/RepositoryNotFoundError.ts","../../../browser/src/error/RepositoryNotTreeError.ts","../../../browser/src/repository/RepositoryFactory.ts","../../../browser/src/error/TreeRepositoryNotSupportedError.ts","../../../browser/src/error/MustBeEntityError.ts","../../../browser/src/persistence/SubjectTopoligicalSorter.ts","../../../browser/src/persistence/SubjectChangedColumnsComputer.ts","../../../browser/src/error/SubjectWithoutIdentifierError.ts","../../../browser/src/error/SubjectRemovedAndUpdatedError.ts","../../../../browser/src/persistence/tree/NestedSetSubjectExecutor.ts","../../../browser/src/error/CannotAttachTreeChildrenEntityError.ts","../../../../browser/src/persistence/tree/ClosureSubjectExecutor.ts","../../../../browser/src/persistence/tree/MaterializedPathSubjectExecutor.ts","../../../browser/src/persistence/SubjectExecutor.ts","../../../browser/src/error/CannotDetermineEntityError.ts","../../../browser/src/persistence/Subject.ts","../../../../browser/src/persistence/subject-builder/OneToManySubjectBuilder.ts","../../../../browser/src/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.ts","../../../../browser/src/persistence/subject-builder/ManyToManySubjectBuilder.ts","../../../browser/src/persistence/SubjectDatabaseEntityLoader.ts","../../../../browser/src/persistence/subject-builder/CascadesSubjectBuilder.ts","../../../browser/src/persistence/EntityPersistExecutor.ts","../../../browser/src/entity-manager/EntityManager.ts","../../../browser/src/entity-manager/SqljsEntityManager.ts","../../../browser/src/entity-manager/EntityManagerFactory.ts","../../../browser/src/error/MissingDriverError.ts","../../../../browser/src/driver/cordova/CordovaQueryRunner.ts","../../../../browser/src/driver/cordova/CordovaDriver.ts","../../../../browser/src/driver/react-native/ReactNativeQueryRunner.ts","../../../../browser/src/driver/react-native/ReactNativeDriver.ts","../../../../browser/src/driver/expo/ExpoQueryRunner.ts","../../../../browser/src/driver/expo/ExpoDriver.ts","../../../../browser/src/driver/aurora-data-api-pg/AuroraDataApiPostgresQueryRunner.ts","../../../../browser/src/driver/postgres/PostgresQueryRunner.ts","../../../../browser/src/driver/aurora-data-api-pg/AuroraDataApiPostgresDriver.ts","../../../browser/src/driver/DriverFactory.ts","../../../browser/src/platform/BrowserDirectoryExportedClassesLoader.ts","../../browser/src/container.ts","../../../browser/src/metadata/IndexMetadata.ts","../../../browser/src/metadata/RelationMetadata.ts","../../../browser/src/metadata/EmbeddedMetadata.ts","../../../browser/src/metadata/RelationIdMetadata.ts","../../../browser/src/metadata/RelationCountMetadata.ts","../../../../browser/src/metadata/types/EventListenerTypes.ts","../../../browser/src/metadata-builder/MetadataUtils.ts","../../../browser/src/metadata/ForeignKeyMetadata.ts","../../../browser/src/metadata-builder/JunctionEntityMetadataBuilder.ts","../../../browser/src/metadata-builder/ClosureJunctionEntityMetadataBuilder.ts","../../../browser/src/metadata/UniqueMetadata.ts","../../../browser/src/metadata-builder/RelationJoinColumnBuilder.ts","../../../browser/src/metadata/EntityListenerMetadata.ts","../../../browser/src/metadata/CheckMetadata.ts","../../../browser/src/metadata/ExclusionMetadata.ts","../../../browser/src/metadata-builder/EntityMetadataBuilder.ts","../../../browser/src/metadata-args/MetadataArgsStorage.ts","../../../browser/src/entity-schema/EntitySchemaTransformer.ts","../../../browser/src/connection/ConnectionMetadataBuilder.ts","../../../browser/src/logger/SimpleConsoleLogger.ts","../../../browser/src/logger/AdvancedConsoleLogger.ts","../../../browser/src/platform/BrowserFileLoggerDummy.ts","../../../browser/src/logger/DebugLogger.ts","../../../browser/src/logger/LoggerFactory.ts","../../../browser/src/cache/RedisQueryResultCache.ts","../../../browser/src/cache/DbQueryResultCache.ts","../../../browser/src/cache/QueryResultCacheFactory.ts","../../../browser/src/query-builder/RelationLoader.ts","../../../browser/src/query-builder/RelationIdLoader.ts","../../../browser/src/connection/Connection.ts","../../../browser/src/error/ConnectionNotFoundError.ts","../../../browser/src/error/AlreadyHasActiveConnectionError.ts","../../../browser/src/connection/ConnectionManager.ts","../../../browser/src/error/ColumnTypeUndefinedError.ts","../../../browser/src/platform/BrowserConnectionOptionsReaderDummy.ts","../../../../browser/src/decorator/columns/Column.ts","../../../../browser/src/decorator/columns/PrimaryGeneratedColumn.ts","../../../browser/src/error/PrimaryColumnCannotBeNullableError.ts","../../../../browser/src/decorator/relations/JoinColumn.ts","../../../../browser/src/decorator/relations/ManyToOne.ts","../../../../browser/src/decorator/relations/OneToMany.ts","../../../../browser/src/decorator/entity/Entity.ts","../../../browser/src/error/CannotReflectMethodParameterTypeError.ts","../../../browser/src/decorator/Index.ts","../../../browser/src/repository/BaseEntity.ts","../../browser/src/index.ts","../../../browser/src/util/OrmUtils.ts","../../../browser/src/subscriber/BroadcasterResult.ts","../../../browser/src/util/DateUtils.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js","../../../../browser/src/driver/sqlserver/SqlServerDriver.ts","../../../../browser/src/driver/oracle/OracleDriver.ts","../../../../browser/src/schema-builder/table/TableColumn.ts","../../../browser/src/platform/BrowserPlatformTools.ts","../../../browser/src/find-options/FindOperator.ts","../../../../browser/src/schema-builder/table/TableUnique.ts","../../../../browser/src/schema-builder/table/TableIndex.ts","../../../../browser/src/schema-builder/table/TableForeignKey.ts","../../../browser/src/error/QueryRunnerAlreadyReleasedError.ts","../../../../browser/src/driver/sqlite-abstract/AbstractSqliteDriver.ts","../../../browser/src/driver/DriverUtils.ts","../../../../browser/src/schema-builder/view/View.ts","../../../../browser/src/schema-builder/table/TableCheck.ts","../../../../browser/src/driver/sqlserver/MssqlParameter.ts","../../../../browser/src/driver/sap/SapDriver.ts","../../../browser/src/util/ObjectUtils.ts","../../modules/HistoryContext.js","../../modules/createNameContext.js","../../modules/RouterContext.js","../../modules/Router.js","../../modules/MemoryRouter.js","../../modules/Lifecycle.js","../../modules/matchPath.js","../../modules/Route.js","../../modules/StaticRouter.js","../../modules/Switch.js","../../modules/hooks.js","../../../browser/src/error/TransactionNotStartedError.ts","../../../browser/src/util/ApplyValueTransformers.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/@babel/runtime/helpers/esm/extends.js","../../../browser/src/error/QueryFailedError.ts","../../../browser/src/subscriber/Broadcaster.ts","../../../browser/src/metadata/ColumnMetadata.ts","../../../browser/src/error/CannotCreateEntityIdMapError.ts","../../../browser/src/metadata/EntityMetadata.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../../../browser/src/error/DriverPackageNotInstalledError.ts","../../../browser/src/query-builder/Alias.ts","../../../browser/src/query-builder/QueryExpressionMap.ts","../../../browser/src/query-builder/QueryBuilder.ts","../../../browser/src/error/TransactionAlreadyStartedError.ts","../../../../browser/src/driver/sqljs/SqljsDriver.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","../../src/constants.js","../../src/sheet/Tag.js","../../src/sheet/Sheet.js","../../src/utils/isStaticRules.js","../../src/models/Keyframes.js","../../src/models/StyledComponent.js","../../src/models/GlobalStyle.js","../../src/models/ServerStyleSheet.js","../node_modules/resolve-pathname/esm/resolve-pathname.js","../node_modules/value-equal/esm/value-equal.js","../node_modules/history/esm/history.js","../../../browser/src/error/DriverOptionNotSetError.ts","../../../browser/src/util/StringUtils.ts","../../../browser/src/query-builder/QueryBuilderUtils.ts","../node_modules/tiny-invariant/dist/tiny-invariant.esm.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../../../../browser/src/schema-builder/table/TableExclusion.ts","../../../browser/src/util/RandomGenerator.ts","../node_modules/node-libs-browser/node_modules/buffer/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../../../../browser/src/driver/sqlite-abstract/AbstractSqliteQueryRunner.ts","../../../browser/src/entity-schema/EntitySchema.ts","../../../browser/src/driver/SqlInMemory.ts","../../../browser/src/query-runner/BaseQueryRunner.ts","../node_modules/debug/src/browser.js","../../../browser/src/schema-builder/RdbmsSchemaBuilder.ts","../../../browser/src/error/ReturningStatementNotSupportedError.ts","../node_modules/moment/moment.js","../node_modules/safe-buffer/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/inherits/inherits_browser.js","../node_modules/sha.js/hash.js","../../../../browser/src/query-builder/result/UpdateResult.ts","../../../browser/src/error/PessimisticLockTransactionRequiredError.ts","../../../browser/src/error/NoVersionOrUpdateDateColumnError.ts","../../../browser/src/error/OptimisticLockVersionMismatchError.ts","../../../browser/src/error/OptimisticLockCanNotBeUsedError.ts","../../../../browser/src/query-builder/relation-id/RelationIdLoader.ts","../../../../browser/src/query-builder/relation-id/RelationIdMetadataToAttributeTransformer.ts","../../../../browser/src/query-builder/relation-count/RelationCountLoader.ts","../../../../browser/src/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.ts","../../../browser/src/error/LockNotSupportedOnGivenDriverError.ts","../../../browser/src/error/OffsetWithoutLimitNotSupportedError.ts","../../../browser/src/query-builder/SelectQueryBuilder.ts","../../../../browser/src/query-builder/relation-id/RelationIdAttribute.ts","../../../../browser/src/query-builder/relation-count/RelationCountAttribute.ts","../../../browser/src/query-builder/ReturningResultsEntityUpdator.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../../../../browser/src/schema-builder/util/TableUtils.ts","../../../../browser/src/query-builder/result/InsertResult.ts","../node_modules/react-is/index.js","../node_modules/prop-types/index.js","../../../browser/src/error/UpdateValuesMissingError.ts","../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/process/browser.js","../node_modules/webpack/buildin/global.js","../../../browser/src/query-builder/Brackets.ts","../../../../browser/src/find-options/operator/In.ts","../../../../browser/src/query-builder/result/DeleteResult.ts","../../../browser/src/error/ConnectionIsNotSetError.ts","../../../browser/src/error/EntityNotFoundError.ts","../../../browser/src/query-builder/JoinAttribute.ts","../../../browser/src/error/EntityColumnNotFound.ts","../../../browser/src/error/LimitOnUpdateNotSupportedError.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/object-assign/index.js","../../../browser/src/query-builder/UpdateQueryBuilder.ts","../../../browser/src/query-builder/DeleteQueryBuilder.ts","../../../browser/src/query-builder/RelationUpdater.ts","../../../browser/src/query-builder/RelationRemover.ts","../../../browser/src/query-builder/RelationQueryBuilder.ts","../../../browser/src/error/InsertValuesMissingError.ts","../../../browser/src/query-builder/InsertQueryBuilder.ts","../../modules/BrowserRouter.js","../../modules/HashRouter.js","../../modules/utils/locationUtils.js","../../modules/Link.js","../../modules/NavLink.js","../node_modules/mini-create-react-context/dist/esm/index.js","../node_modules/react-router/node_modules/path-to-regexp/index.js","../node_modules/@emotion/memoize/dist/memoize.browser.esm.js","../node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js","../node_modules/sha.js/sha256.js","../node_modules/sha.js/sha512.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/arrayLikeToArray.js","../node_modules/moment/locale/cs.js","../../../browser/src/error/MissingDeleteDateColumnError.ts","../../../browser/src/query-builder/SoftDeleteQueryBuilder.ts","../node_modules/react-dom/index.js","../node_modules/sha.js/index.js","../../../../browser/src/driver/sqlserver/SqlServerQueryRunner.ts","../../../../browser/src/driver/sap/SapQueryRunner.ts","../../../../browser/src/driver/oracle/OracleQueryRunner.ts","../../../../browser/src/driver/sqljs/SqljsQueryRunner.ts","../../../../browser/src/driver/nativescript/NativescriptDriver.ts","../../../../browser/src/driver/nativescript/NativescriptQueryRunner.ts","../../../../browser/src/query-builder/transformer/RawSqlResultsToEntityTransformer.ts","../node_modules/shallowequal/index.js","../node_modules/@emotion/stylis/dist/stylis.browser.esm.js","../node_modules/@emotion/unitless/dist/unitless.browser.esm.js","../node_modules/util/util.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/regenerator-runtime/runtime.js","../node_modules/react/cjs/react.production.min.js","../node_modules/react-dom/cjs/react-dom.production.min.js","../node_modules/scheduler/index.js","../node_modules/scheduler/cjs/scheduler.production.min.js","../node_modules/typeorm/node_modules/reflect-metadata/Reflect.js","../node_modules/sha.js/sha.js","../node_modules/base64-js/index.js","../node_modules/ieee754/index.js","../node_modules/isarray/index.js","../node_modules/sha.js/sha1.js","../node_modules/sha.js/sha224.js","../node_modules/sha.js/sha384.js","../node_modules/debug/src/common.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/nonIterableSpread.js","../node_modules/ms/index.js","../node_modules/react-is/cjs/react-is.production.min.js","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/react-router/node_modules/isarray/index.js","../node_modules/util/support/isBufferBrowser.js","../node_modules/util/node_modules/inherits/inherits_browser.js","../node_modules/webpack/buildin/module.js"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","r","ar","error","__spread","concat","query","parameters","module","exports","require","options","columns","indices","foreignKeys","uniques","checks","exclusions","justCreated","name","map","column","index","foreignKey","unique","check","exclusion","undefined","engine","filter","clone","Table","constraint","addColumn","removeColumn","foundColumn","find","c","splice","indexOf","addUniqueConstraint","uniqueConstraint","columnNames","uniqueColumn","isUnique","removeUniqueConstraint","removedUnique","foundUnique","addCheckConstraint","checkConstraint","removeCheckConstraint","removedCheck","foundCheck","addExclusionConstraint","exclusionConstraint","removeExclusionConstraint","removedExclusion","foundExclusion","addForeignKey","removeForeignKey","removedForeignKey","fk","addIndex","isMysql","removeIndex","tableIndex","some","ind","findColumnByName","findColumnIndices","columnName","findColumnForeignKeys","findColumnUniques","findColumnChecks","entityMetadata","driver","buildTableName","tableName","schema","database","createTableColumnOptions","synchronize","nestedSetColumnNames","left","right","materializedPathColumnName","targetName","userSpecifiedName","closureJunctionTableName","originalClosureTableName","propertyName","customName","embeddedPrefixes","join","relationName","primaryKeyName","tableOrName","clonedColumnNames","sort","key","replace","RandomGenerator","sha1","substr","uniqueConstraintName","relationConstraintName","where","defaultConstraintName","foreignKeyName","_referencedTablePath","_referencedColumnNames","indexName","checkConstraintName","expression","exclusionConstraintName","joinColumnName","referencedColumnName","joinTableName","firstTableName","secondTableName","firstPropertyName","secondPropertyName","joinTableColumnDuplicationPrefix","joinTableColumnName","joinTableInverseColumnName","prefixTableName","prefix","eagerJoinRelationAlias","alias","propertyPath","connectionName","CannotExecuteNotConnectedError","message","Error","CannotConnectAlreadyConnectedError","target","EntityMetadataNotFoundError","EntitySchema","id","timestamp","instance","connection","queryRunner","transaction","migrationsTableName","migrationsTable","executeMigration","migration","withQueryRunner","createMigrationsTableIfNotExist","up","insertExecutedMigration","getAllMigrations","getMigrations","getExecutedMigrations","loadExecutedMigrations","getPendingMigrations","allMigrations","executedMigrations","executedMigration","insertMigration","catch","deleteMigration","deleteExecutedMigration","showMigrations","hasUnappliedMigrations","createQueryRunner","logger","logSchemaBuild","release","executePendingMigrations","lastTimeExecutedMigration","getLatestTimestampMigration","successMigrations","pendingMigrations","Date","toString","transactionStartedByUs","isTransactionActive","startTransaction","commitTransaction","rollbackTransaction","undoLastMigration","getLatestExecutedMigration","migrationToRevert","down","hasTable","createTable","type","normalizeType","mappedDataTypes","migrationId","isGenerated","generationStrategy","isPrimary","isNullable","migrationTimestamp","migrationName","databaseConnection","db","collection","toArray","manager","createQueryBuilder","select","orderBy","escape","from","getRawMany","migrationRaw","Migration","parseInt","migrations","migrationClassName","isNaN","checkForDuplicateMigrations","a","migrationNames","duplicates","Set","sortedMigrations","values","SqlServerDriver","MssqlParameter","insert","into","execute","conditions","deleteOne","qb","delete","andWhere","setParameters","callback","MissingPrimaryColumnError","path","CircularRelationsError","createDFS","edges","leavesOnly","currentPath","visited","DFS","currentNode","forEach","node","nodes","outgoingEdges","incomingEdges","addNode","data","hasNode","removeNode","edgeList","keys","idx","getNodeData","setNodeData","addDependency","to","removeDependency","dependenciesOf","dependantsOf","overallOrder","self","dataType","DataTypeNotSupportedError","optionName","NoConnectionOptionError","relation","InitializedRelationError","validateMany","entityMetadatas","validate","validateDependencies","validateEagerRelations","allEntityMetadatas","primaryColumns","isJunction","inheritancePattern","tableType","discriminatorColumn","discriminatorValue","sameDiscriminatorValueEntityMetadata","metadata","inheritanceTree","parent","relationCounts","relationCount","isManyToOne","isOneToOne","normalizedColumn","supportedDataTypes","withLengthColumnTypes","entityInstance","relations","isManyToMany","isOneToMany","persistenceEnabled","relationInitializedValue","getEntityValue","isArray","isCascadeRemove","inverseRelation","eagerRelations","graph","DepGraph","relationsWithJoinColumns","inverseEntityMetadata","err","isEager","QueryRunnerProviderAlreadyReleasedError","NoNeedToReleaseEntityManagerError","hasId","entity","getId","plainEntityLikeOrPlainEntityLikes","merge","mergeIntoEntity","entityLikes","preload","entityLike","save","entityOrEntities","remove","softRemove","recover","update","criteria","partialEntity","softDelete","restore","count","optionsOrConditions","findAndCount","findByIds","ids","findOne","maybeOptions","findOneOrFail","clear","increment","decrement","findTrees","findRoots","roots","all","root","findDescendantsTree","parentPropertyName","namingStrategy","treeParentRelation","getMany","findDescendants","createDescendantsQueryBuilder","getRawAndEntities","entitiesAndScalars","relationMaps","createRelationMaps","raw","buildChildrenEntityTree","entities","countDescendants","getCount","closureTableAlias","treeType","joinCondition","closureJunctionTable","descendantColumns","referencedColumn","whereCondition","ancestorColumns","innerJoin","nestedSetLeftColumn","nestedSetRightColumn","joinColumns","joinColumn","parameterName","subQuery","materializedPathColumn","whereInIds","getEntityIdMap","setNativeParameters","expressionMap","nativeParameters","AbstractSqliteDriver","getQuery","findAncestors","createAncestorsQueryBuilder","findAncestorsTree","buildParentEntityTree","countAncestors","rawResults","rawResult","givenDatabaseName","databaseName","parentId","prepareHydratedValue","childProperty","treeChildrenRelation","parentEntityId","childRelationMaps","relationMap","childIds","has","childEntity","parentProperty","entityId","parentRelationMap","parentEntity","notFoundRelations","FindRelationsNotFoundError","isFindOneOptions","obj","possibleOptions","order","cache","lock","loadRelationIds","loadEagerRelations","withDeleted","isFindManyOptions","skip","take","extractFindManyOptionsAlias","object","applyFindManyOptionsOrConditionsToQueryBuilder","applyOptionsToQueryBuilder","useTransaction","mainAlias","hasMetadata","findColumnWithPropertyPath","String","addSelect","addOrderBy","allRelations","applyRelationsRecursively","leftJoin","leftJoinAndSelect","innerJoinAndSelect","milliseconds","mode","setLock","version","loadAllRelationIds","matchedBaseRelations","RegExp","match","findRelationWithPropertyPath","relationAlias","maxAliasLength","selection","relMetadata","joinEagerRelations","joinAttributes","entityOrProperty","transform","newEntity","getLazyRelationsPromiseValue","groupAndTransform","nonVirtualColumns","objectColumnValue","setEntityValue","entityRelatedValue","objectRelatedValue","objectRelatedValueItem","objectRelatedValueEntity","entityRelatedValueItem","compareEntities","plainEntity","parentLoadMapItem","getEntityIdMixedMap","loadMapItems","item","addLoadMap","newLoadMap","fillEntities","loadMapItem","groupByTargetIds","groups","group","plainObject","hasAllPrimaryKeys","loadMap","LoadMap","LoadMapItem","extractRelationValuesFromEntity","targetWithIds","mainLoadMapItem","repository","CustomRepositoryNotFoundError","Function","CustomRepositoryDoesNotHaveEntityError","getCustomRepositoryTarget","getRepository","getTreeRepository","createQueryBuilderFor","getRepositoryFor","getTreeRepositoryFor","customRepository","entityRepositoryMetadataArgs","getMetadataArgsStorage","entityRepositories","CustomRepositoryCannotInheritRepositoryError","entityClass","RepositoryNotFoundError","RepositoryNotTreeError","TreeRepositoryNotSupportedError","operation","wrongValue","MustBeEntityError","subjects","metadatas","getUniqueMetadatas","direction","sortedSubjects","junctionSubjects","subject","removeAlreadySorted","nonNullableDependencies","getNonNullableDependencies","sortedNonNullableEntityTargets","toposort","reverse","sortedEntityTarget","entityTargetSubjects","otherDependencies","getDependencies","sortedOtherEntityTargets","reduce","dependencies","arr","res","len","edge","uniqueNodes","cursor","sorted","visit","predecessors","JSON","stringify","outgoing","preds","child","compute","computeDiffColumns","computeDiffRelationalColumns","isVirtual","isDiscriminator","changeMap","changeMaps","entityValue","databaseEntity","databaseValue","relationMetadata","normalizedValue","DateUtils","mixedDateToDateString","mixedDateToTimeString","mixedDateToUtcDatetimeString","OrmUtils","deepCompare","simpleArrayToString","simpleEnumToString","simpleJsonToString","transformer","ApplyValueTransformers","transformTo","diffColumns","allSubjects","relatedEntity","relatedEntityRelationIdMap","getRelationIdMap","databaseRelatedEntityRelationIdMap","compareIds","diffRelations","valueSubject","mustBeInserted","SubjectWithoutIdentifierError","SubjectRemovedAndUpdatedError","getTableName","tablePath","leftColumnName","rightColumnName","parentSubject","insertedValueSet","parentNsRight","getRawOne","mergeDeep","createValueMap","split","entityName","CannotAttachTreeChildrenEntityError","closureJunctionInsertMap","identifier","updateEntity","callListeners","ancestorColumnNames","descendantColumnNames","childEntityIds1","createParameter","parentPath","insertedEntityId","set","hasExecutableOperations","insertSubjects","updateSubjects","removeSubjects","softRemoveSubjects","recoverSubjects","recompute","broadcasterResult","listeners","broadcastBeforeEventsForAll","promises","executeInsertOperations","executeUpdateOperations","executeRemoveOperations","executeSoftRemoveOperations","executeRecoverOperations","updateSpecialColumnsInPersistedEntities","broadcastAfterEventsForAll","mustBeUpdated","mustBeRemoved","BroadcasterResult","broadcaster","broadcastBeforeInsertEvent","broadcastBeforeUpdateEvent","broadcastBeforeRemoveEvent","broadcastAfterInsertEvent","broadcastAfterUpdateEvent","broadcastAfterRemoveEvent","groupBulkSubjects","groupedInsertSubjects","groupedInsertSubjectKeys","groupName","bulkInsertMaps","bulkInsertSubjects","singleInsertSubjects","createDateColumn","updateDateColumn","createValueSetAndPopChangeMap","OracleDriver","SapDriver","identifiers","generatedMap","generatedMaps","reload","insertResult","preparedValue","objectIdColumn","updateMap","updateQueryBuilder","whereEntity","updateResult","groupedRemoveSubjects","groupedRemoveSubjectKeys","deleteMaps","deleteDateColumn","softDeleteQueryBuilder","updateSpecialColumnsInInsertedAndUpdatedEntities","primaryColumn","relationIds","relationId","setValue","childEntityMetadatas","updatedRelationMaps","updatedRelationMap","groupingAllowed","isReturningSqlSupported","CannotDetermineEntityError","entityWithFulfilledIds","databaseEntityLoaded","canBeInserted","canBeUpdated","canBeSoftRemoved","canBeRecovered","changeMapsWithoutValues","changeSet","valueMap","Subject","build","oneToManyRelations","buildForSubjectRelation","relatedEntityDatabaseRelationIds","relatedEntities","relatedPersistedEntityRelationIds","relationIdMap","relatedEntitySubject","relatedDatabaseEntityRelationId","EntityMetadata","difference","removedRelatedEntityRelationId","removedRelatedEntitySubject","orphanedRowAction","oneToOneRelations","isOwning","relatedEntityDatabaseRelationId","operateSubject","manyToManyRelations","buildForAllRemoval","junctionSubject","junctionEntityMetadata","buildJunctionIdentifier","databaseRelatedEntityIds","databaseRelatedEntityRelationId","ownerValue","inverseValue","ownerColumns","inverseColumns","changedInverseEntityRelationIds","existRelationId","changedRelationId","removedEntityRelationId","ownerEntityMap","inverseEntityMap","load","operationType","groupByEntityTargets","subjectGroup","allIds","loadRelationPropertyPaths","findOptions","disableMixedMap","findByPersistEntityLike","entityTarget","operatedEntity","relationEntity","relationEntityMetadata","isCascadeInsert","isCascadeUpdate","isCascadeSoftRemove","isCascadeRecover","alreadyExistRelationEntitySubject","relationEntitySubject","entitiesInChunks","chunk","getMetadata","cascadesSubjectBuilder","executors","executorsWithExecutableOperations","executor","isTransactionStartedByUs","repositories","plainObjectToEntityTransformer","PlainObjectToNewEntityTransformer","ObjectUtils","isolationOrRunInTransaction","runInTransactionParam","isolation","runInTransaction","isReleased","targetOrEntity","maybeEntity","plainObjectOrObjects","plainEntityLike","transformedEntity","maybeEntityOrOptions","getManyAndCount","andWhereInIds","idOrOptionsOrConditions","passedId","ensureEntityIdMap","getOne","EntityNotFoundError","clearTable","Number","reduceRight","newRepository","treeSupport","getMongoRepository","getCustomRepository","entityRepositoryInstance","loadDatabase","fileNameOrLocalStorageOrData","saveDatabase","fileNameOrLocalStorage","exportDatabase","export","SqljsDriver","driverType","MissingDriverError","Broadcaster","QueryRunnerAlreadyReleasedError","ok","fail","connect","logQuery","queryStartTime","executeSql","maxQueryExecutionTime","queryExecutionTime","logQuerySlow","insertId","resultSet","rows","logQueryError","QueryFailedError","parametrize","objectLiteral","startIndex","AbstractSqliteQueryRunner","DriverOptionNotSetError","location","loadDependencies","disconnect","close","createDatabaseConnection","extra","sqlite","openDatabase","window","sqlitePlugin","DriverPackageNotInstalledError","TransactionAlreadyStartedError","beforeBroadcastResult","broadcastBeforeTransactionStartEvent","afterBroadcastResult","broadcastAfterTransactionStartEvent","TransactionNotStartedError","broadcastBeforeTransactionCommitEvent","broadcastAfterTransactionCommitEvent","broadcastBeforeTransactionRollbackEvent","broadcastAfterTransactionRollbackEvent","_db","tsx","client","databaseConnectionPromise","isReplicated","obtainSlaveConnection","connectedQueryRunners","releaseCallback","obtainMasterConnection","isolationLevel","records","onErrorCallback","removeListener","on","queryEndTime","command","rowCount","stream","onEnd","onError","QueryStream","loadStreamDependency","getDatabases","getSchemas","hasDatabase","hasSchema","parsedTableName","parseTableName","sql","hasColumn","createDatabase","ifNotExist","dropDatabase","ifExist","createSchema","executeQueries","Query","dropSchema","schemaPath","isCascade","table","createForeignKeys","createIndices","upQueries","downQueries","hasEnumType","createEnumTypeSql","dropEnumTypeSql","createTableSql","dropTableSql","dropForeignKeySql","createIndexSql","dropIndexSql","dropTable","dropForeignKeys","dropIndices","getCachedTable","createView","view","createViewSql","insertViewDefinitionSql","dropViewSql","deleteViewDefinitionSql","dropView","viewName","View","getCachedView","renameTable","oldTableOrName","newTableName","newTable","oldTable","oldTableName","schemaName","escapePath","oldPkName","newPkName","newUniqueName","extractSchema","newIndexName","newForeignKeyName","referencedTableName","referencedColumnNames","enumColumns","getEnumTypeName","oldEnumType","enumTypeSchema","enumTypeName","buildEnumName","clonedTable","buildCreateColumnSql","pkName","columnIndex","TableUnique","comment","escapeComment","replaceCachedTable","addColumns","renameColumn","oldTableColumnOrName","newTableColumnOrName","oldColumn","TableColumn","newColumn","changeColumn","dropColumn","seqName","buildSequenceName","newSeqName","oldTableColumn","precision","scale","createFullType","isArraysEqual","enum","enumName","arraySuffix","oldEnumName","oldEnumNameWithoutSchema","enumTypeBeforeColumnChange","default","upType","downType","spatialFeatureType","toLowerCase","srid","changeColumns","changedColumns","columnOrName","columnCheck","dropCheckConstraintSql","createCheckConstraintSql","columnUnique","dropUniqueConstraintSql","createUniqueConstraintSql","enumType","escapedEnumName","dropColumns","createPrimaryKey","createPrimaryKeySql","dropPrimaryKeySql","updatePrimaryKeys","columnNamesString","dropPrimaryKey","createUniqueConstraint","createUniqueConstraints","uniqueConstraints","dropUniqueConstraint","uniqueOrName","u","dropUniqueConstraints","createCheckConstraint","createCheckConstraints","checkConstraints","dropCheckConstraint","checkOrName","TableCheck","dropCheckConstraints","createExclusionConstraint","createExclusionConstraintSql","dropExclusionConstraintSql","createExclusionConstraints","exclusionConstraints","dropExclusionConstraint","exclusionOrName","TableExclusion","dropExclusionConstraints","createForeignKey","createForeignKeySql","dropForeignKey","foreignKeyOrName","TableForeignKey","createIndex","dropIndex","indexOrName","TableIndex","clearDatabase","schemas","schemaNamesString","selectViewDropsQuery","dropViewQueries","q","selectTableDropsQuery","dropTableQueries","dropEnumTypes","loadViews","viewNames","getTypeormMetadataTableName","currentSchemaQuery","currentSchema","viewsCondition","dbView","loadTables","tableNames","tablesCondition","tablesSql","columnsSql","constraintsCondition","constraintsSql","indicesSql","foreignKeysCondition","hasSupportForPartitionedTables","hasRelispartitionColumn","foreignKeysSql","dbTables","dbColumns","dbConstraints","dbIndices","dbForeignKeys","dbTable","getSchemaFromKey","dbObject","tableFullName","dbColumn","columnConstraints","dbConstraint","tableColumn","isDefaultColumnPrecision","isDefaultColumnScale","results","geometryColumnSql","geographyColumnSql","exec","isDefaultColumnLength","isConstraintComposite","test","charset","collation","tableUniqueConstraints","uniq","dbC","tableCheckConstraints","tableExclusionConstraints","substring","tableForeignKeyConstraints","dbForeignKey","dbFk","onDelete","onUpdate","deferrable","tableIndexConstraints","dbIndex","isSpatial","every","spatialTypes","isFulltext","columnDefinitions","uniquesSql","checksSql","exclusionsSql","it","tableOrPath","materializedClause","materialized","splittedName","trim","getQueryAndParameters","viewOrPath","schemaNames","selectDropsQuery","dropQueries","enumValues","uniqueName","checkName","exclusionName","disableEscape","skipSchema","Math","max","withSchema","toOld","uuidGenerator","BaseQueryRunner","DataApiDriver","region","secretArn","resourceArn","serviceConfigOptions","formatOptions","pg","executeQuery","afterConnect","checkMetadataForExtensions","extensionsMetadata","hasExtensions","enableExtensions","NativescriptDriver","importClassesFromDirectories","directories","formats","userContainer","userContainerOptions","defaultContainer","instances","get","someClass","getFromContainer","fallback","fallbackOnErrors","columnNamesWithOrderingMap","embeddedMetadata","args","spatial","fulltext","parser","isSparse","sparse","isBackground","background","expireAfterSeconds","givenName","givenColumnNames","columnPropertyPaths","propertiesMap","columnWithSameName","relationWithSameName","isWithJoinColumn","updatedMap","databasePath","isTreeParent","isTreeChildren","isLazy","isOneToOneOwner","isOneToOneNotOwner","isManyToManyOwner","isManyToManyNotOwner","inverseJoinColumns","relationType","inverseSideProperty","givenInverseSidePropertyFactory","cascade","primary","nullable","eager","persistence","referencedColumns","getValueMap","ensureRelationIdMap","embeddedObject","propertyNames","shift","parentPropertyNames","embeddedMetadatas","embeddedMetadataTree","buildPropertyPath","registerForeignKeys","registerJunctionEntityMetadata","buildInverseSidePropertyPath","ownerEntityPropertiesMap","embeddeds","parentPrefixes","columnsFromTree","relationsFromTree","listenersFromTree","indicesFromTree","uniquesFromTree","relationIdsFromTree","relationCountsFromTree","customPrefix","embedded","buildPrefix","buildParentPropertyNames","buildParentPrefixes","buildEmbeddedMetadataTree","buildColumnsFromTree","buildRelationsFromTree","buildListenersFromTree","buildIndicesFromTree","buildUniquesFromTree","buildRelationIdsFromTree","buildRelationCountsFromTree","buildPartialPrefix","prefixes","parentEmbeddedMetadata","relationNameOrFactory","queryBuilderFactory","inverseEntity","AFTER_LOAD","BEFORE_INSERT","AFTER_INSERT","BEFORE_UPDATE","AFTER_UPDATE","BEFORE_REMOVE","AFTER_REMOVE","getInheritanceTree","tree","getPrototypeOf","proto","isInherited","target1","target2","filterByTarget","array","classes","referencedEntityMetadata","referencedTablePath","joinTable","collectReferencedColumns","inverseReferencedColumns","collectInverseReferencedColumns","tableNameWithoutPrefix","junctionColumns","joinColumnArgs","ColumnMetadata","width","zerofill","unsigned","inverseJunctionColumns","inverseReferencedColumn","changeDuplicatedColumnNames","ownColumns","ForeignKeyMetadata","ownIndices","IndexMetadata","hasAnyReferencedColumnName","hasInverseJoinColumns","hasAnyInverseReferencedColumnName","junctionColumn","inverseJunctionColumn","junctionColumnName","inverseJunctionColumnName","parentClosureEntityMetadata","treeOptions","closureTableName","closureType","ancestorColumnName","descendantColumnName","treeLevelColumn","treeLevel","collectColumns","UniqueMetadata","manyToOneWithoutJoinColumn","hasJoinColumnWithoutAnyReferencedColumnName","joinColumnMetadataArg","relationalColumn","registerColumn","isAllowed","callEntityEmbeddedMethod","propertyPaths","metadataArgsStorage","junctionEntityMetadataBuilder","closureJunctionEntityMetadataBuilder","relationJoinColumnBuilder","entityClasses","filterTables","tables","tableArgs","createEntityMetadata","computeParentEntityMetadata","childMetadata","MetadataUtils","computeEntityMetadataStep1","computeEntityMetadataStep2","computeInverseProperties","filterJoinColumns","ownUniques","findJoinTable","hasNonNullableRelations","closureJunctionEntityMetadata","createKeysForTableInheritance","relationLoader","enableLazyLoad","generated","findGenerated","strategy","singleTableChildrenTargets","tableInheritance","findInheritanceType","tableTree","findTree","pattern","filterSingleTableChildren","parentEntityMetadata","allEntityMetadata","entityInheritance","findDiscriminatorValue","createEmbeddedsRecursively","filterEmbeddeds","filterColumns","otherEntityMetadata","materializedPath","nestedSetLeft","nestedSetRight","ownRelations","filterRelations","filterRelationIds","RelationIdMetadata","filterRelationCounts","RelationCountMetadata","ownListeners","filterListeners","EntityListenerMetadata","filterChecks","CheckMetadata","filterExclusions","ExclusionMetadata","filterIndices","filterUniques","embeddedArgs","targets","subEmbedded","allEmbeddeds","lazyRelations","manyToOneRelations","ownerOneToOneRelations","ownerManyToManyRelations","afterLoadListeners","listener","EventListenerTypes","afterInsertListeners","afterUpdateListeners","afterRemoveListeners","beforeInsertListeners","beforeUpdateListeners","beforeRemoveListeners","hasMultiplePrimaryKeys","generatedColumns","hasUUIDGeneratedColumns","versionColumn","createPropertiesMap","inverseSidePropertyPath","foundRelation","trees","transactionEntityManagers","transactionRepositories","namingStrategies","entitySubscribers","generations","joinTables","entityListeners","inheritances","discriminatorValues","filterByTargetAndWithoutDuplicateProperties","filterByTargetAndWithoutDuplicateEmbeddedProperties","filterSubscribers","filterNamingStrategies","filterTransactionEntityManagers","transactionEm","methodName","filterTransactionRepository","inheritance","newArray","newItem","entitySchema","tableMetadata","createDate","updateDate","deleteDate","treeChildrenCount","objectId","columnAgrs","readonly","asExpression","generatedType","hstoreType","generationArgs","relationSchema","lazy","inverseSide","treeParent","treeChildren","joinColumnsOptions","joinColumnOption","inverseJoinColumn","indexAgrs","uniqueAgrs","checkAgrs","exclusionArgs","buildMigrations","migrationClasses","migrationClass","buildSubscribers","subscribers","subscriberClasses","allSubscriberClasses","buildEntityMetadatas","entityClassesOrSchemas","entitySchemas","allEntityClasses","slice","decoratorEntityMetadatas","metadataArgsStorageFromSchema","schemaEntityMetadatas","stringifyParams","console","log","time","logMigration","level","info","warn","logInfo","highlightSql","logError","logWarn","debugQueryLog","debugQueryError","debugQuerySlow","debugSchemaBuild","debugMigration","debugLog","debugInfo","debugWarn","enabled","SimpleConsoleLogger","clientType","redis","loadRedis","cacheOptions","createClient","Cluster","startupNodes","quit","getFromCache","parse","isExpired","savedCache","duration","getTime","storeInCache","flushdb","deleteKey","del","cacheTableName","queryResultCacheTable","getQueryRunner","cacheId","cacheIdentifier","cacheTime","cacheDuration","cacheQuery","cacheResult","insertedValues","condition","provider","loadManyToOneOrOneToOneOwner","loadOneToManyOrOneToOneNotOwner","loadManyToManyOwner","loadManyToManyNotOwner","joinAliasName","setParameter","entityIndex","paramName","aliasName","joinAlias","joinColumnConditions","inverseJoinColumnConditions","dataIndex","promiseIndex","resolveIndex","setData","setPromise","defineProperty","loader","configurable","relationOrTarget","relationNameOrEntities","entitiesOrRelatedEntities","maybeRelatedEntities","loadForManyToMany","loadForManyToOneAndOneToOneOwner","loadForOneToManyAndOneToOneNotOwner","loadManyToManyRelationIdsAndGroup","entitiesOrEntities","relatedEntityOrEntities","isMany","related","junctionMetadata","condition1","condition2","joinColumnIndex","logging","createEntityManager","queryResultCache","relationIdLoader","isConnected","buildMetadatas","migrationsRun","runMigrations","migrationsTransactionMode","dropBeforeSync","createSchemaBuilder","migrationExecutor","findMetadata","usedQueryRunner","entityOrRunner","SelectQueryBuilder","getManyToManyMetadata","relationPropertyPath","connectionMetadataBuilder","entityMetadataValidator","getDatabaseName","DriverUtils","buildDriverOptions","replication","master","ConnectionNotFoundError","AlreadyHasActiveConnectionError","connections","existConnection","read","ColumnTypeUndefinedError","Column","typeOrOptions","reflectMetadataType","Reflect","PrimaryGeneratedColumn","strategyOrOptions","PrimaryColumnCannotBeNullableError","JoinColumn","optionsOrOptionsArray","ManyToOne","typeFunctionOrTarget","inverseSideOrOptions","reflectedType","OneToMany","Entity","nameOrOptions","withoutRowid","CannotReflectMethodParameterTypeError","Index","nameOrFieldsOrOptions","maybeFieldsOrOptions","fields","clsOrObject","base","newestEntity","useConnection","usedConnection","getConnection","globalScope","getGlobalVariable","typeormMetadataArgsStorage","getConnectionManager","size","ceil","splitClassesAndStrings","clsesAndStrings","cls","str","groupBy","propertyCallback","groupedArray","grouped","items","criteriaOrProperty","uniqueArray","found","uniqueItem","isObject","sources","source","Map","Buffer","l","leftChain","rightChain","compare2Objects","firstId","secondId","toBoolean","zipObject","arr1","arr2","element","x","equals","isPrototypeOf","normalizeHydratedDate","mixedDate","formatZerolessValue","getFullYear","getMonth","getDate","mixedDateToDate","toUtc","useMilliseconds","date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","setUTCMilliseconds","skipSeconds","getHours","getMinutes","getSeconds","mixedTimeToDate","hours","minutes","seconds","setHours","setMinutes","setSeconds","mixedTimeToString","mixedDateToDatetimeString","finalValue","formatMilliseconds","getMilliseconds","stringToSimpleArray","stringToSimpleJson","stringToSimpleEnum","columnMetadata","_initializerDefineProperty","property","descriptor","context","enumerable","writable","initializer","_applyDecoratedDescriptor","decorators","desc","decorator","slaves","withPrecisionColumnTypes","withScaleColumnTypes","createDateDefault","updateDateDefault","deleteDateNullable","metadataType","metadataDatabase","metadataSchema","metadataTable","metadataName","metadataValue","dataTypeDefaults","slave","createPool","closePool","pool","escapeQueryWithParameters","escapedParameters","parameter","fullName","preparePersistentValue","Boolean","transformFrom","normalizeDefault","defaultValue","normalizeIsUnique","uq","getColumnLength","random","floor","createGeneratedMap","findColumnWithDatabaseName","findChangedColumns","tableColumns","columnMetadatas","lowerDefaultValueIfNessesary","disableOutputReturning","isUUIDGenerationSupported","isFullTextColumnTypeSupported","parametrizeValue","normalizedType","parametrizeMap","newMap","buildTableVariableDeclaration","mssql","credentials","connectionOptions","connectionTimeout","requestTimeout","server","host","user","username","password","port","domain","useUTC","ConnectionPool","poolErrorHandler","errorHandler","oracle","outFormat","OBJECT","fetchAsString","CLOB","fetchAsBuffer","BLOB","columnTypeToNativeParameter","NUMBER","STRING","DATE","connectString","sid","global","pathNormalize","pathStr","pathExtname","pathResolve","fileExist","dotenv","getEnvVariable","readFileSync","filename","appendFileSync","writeFile","highlightJson","json","warning","useParameter","multipleParameters","getSql","objectLiteralParameters","_type","_value","_useParameter","_multipleParameters","_getSql","_objectLiteralParameters","FindOperator","uniqueMetadata","indexMetadata","builtParameters","entityNum","generatedColumn","buildOptions","url","urlDriverOptions","parseConnectionUrl","useSid","buildColumnAlias","columnAliasName","firstSlashes","preBase","secondSlash","afterBase","lastAtSign","lastIndexOf","usernameAndPassword","hostAndPort","firstColon","decodeURIComponent","tableMetadataArgs","checkMetadata","params","dbParams","hostName","userName","encrypt","sslValidateCertificate","validateCertificate","cert","ca","min","checkInterval","maxWaitingRequests","idleTimeout","eventEmitter","promise","hanaNullComapatibleDefault","getOwnPropertyNames","prop","historyContext","createContext","createNamedContext","Router","props","computeRootMatch","isExact","pathname","componentDidMount","_pendingLocation","componentWillUnmount","unlisten","render","RouterContext","history","state","staticContext","HistoryContext","children","React","Component","cacheCount","matchPath","exact","strict","sensitive","matched","cacheKey","pathCache","regexp","pathToRegexp","compilePath","end","memo","Route","component","addLeadingSlash","stripBasename","basename","createURL","createPath","staticHandler","invariant","noop","Switch","computedMatch","transformedValue","_transformer","_extends","driverError","executionResult","subscriber","isAllowedSubscriber","beforeInsert","updatedColumns","updatedRelations","beforeUpdate","beforeRemove","afterInsert","beforeTransactionStart","afterTransactionStart","beforeTransactionCommit","afterTransactionCommit","beforeTransactionRollback","afterTransactionRollback","afterUpdate","afterRemove","broadcastLoadEventsForAll","afterLoad","listenTo","isSelect","isInsert","isUpdate","isTreeLevel","isCreateDate","isUpdateDate","isDeleteDate","isVersion","isObjectId","isNestedSetLeft","isNestedSetRight","isMaterializedPath","createDatePrecision","updateDatePrecision","deleteDatePrecision","useDatabaseName","getEntityValueMap","submap","propertyAliasName","buildDatabaseName","buildDatabasePath","databaseNameWithoutPrefixes","CannotCreateEntityIdMapError","objectExample","isClosureJunction","ret","newObject","skipNulls","idMap","firstEntity","secondEntity","firstEntityIdMap","secondEntityIdMap","findColumnWithPropertyName","findColumnsWithPropertyPath","hasEmbeddedWithPropertyPath","findEmbeddedWithPropertyPath","relationsAndValues","subValue","getInverseEntityMetadata","childEntityMetadata","createPropertyPath","paths","subPaths","firstIdMaps","secondIdMaps","firstIdMap","secondIdMap","entityPrefix","givenTableName","separator","segmentLength","buildTablePath","buildSchemaPath","_classCallCheck","Constructor","driverName","packageName","_metadata","queryEntity","aliases","queryType","selects","selectDistinct","selectDistinctOn","extraReturningColumns","onConflict","onIgnore","relationIdAttributes","relationCountAttributes","wheres","havings","orderBys","groupBys","disableEscaping","enableRelationIdValues","extraAppendedAndWhereCondition","aliasNamePrefixingEnabled","insertColumns","whereEntities","setMainAlias","createAlias","findAliasByName","findColumnByAliasExpression","aliasExpression","QueryExpressionMap","valuesSet","returning","JoinAttribute","RelationIdAttribute","RelationCountAttribute","having","limit","offset","lockMode","lockVersion","of","connectionOrQueryBuilder","QueryBuilder","selectionAliasName","SelectQueryBuilderCls","InsertQueryBuilderCls","InsertQueryBuilder","entityOrTableNameUpdateSet","maybeUpdateSet","updateSet","createFromAlias","UpdateQueryBuilderCls","UpdateQueryBuilder","DeleteQueryBuilderCls","DeleteQueryBuilder","SoftDeleteQueryBuilderCls","SoftDeleteQueryBuilder","entityTargetOrPropertyPath","maybePropertyPath","RelationQueryBuilderCls","RelationQueryBuilder","hasRelation","parentQueryBuilder","getParameters","printSql","obtainQueryRunner","autoSave","setQueryRunner","getMainTableName","isSubquery","subQueryBuilder","subquery","replacePropertyNames","statement","escapeRegExp","replaceAliasNamePrefix","replacementAliasNamePrefix","replacements","propertyKey","replacementKeys","createComment","createWhereExpression","conditionsArray","createWhereExpressionString","createReturningExpression","getReturningColumns","columnsExpression","dir","BIND_OUT","createWhereIdsExpression","normalized","computeWhereParameter","In","parameterIndex","whereStrings","whereSubStrings","secondIndex","whereString","Brackets","whereQueryBuilder","whereFactory","andConditions","whereIndex","propertyIndex","EntityColumnNotFound","aliasPath","parameterValue","parameterBaseCount","startsWith","realParameterValue","realParameterValueIndex","computeFindOperatorExpression","operator","autoSaveCallback","checkIfFileOrLocalStorageExists","createDatabaseConnectionWithImport","localStorageContent","useLocalForage","localforage","getItem","localStorage","content","databaseArray","setItem","Database","sqlJsConfig","SQL","_taggedTemplateLiteral","strings","freeze","defineProperties","insertRule","names","flatten","isAbsolute","charAt","spliceOne","list","k","resolvePathname","hasTrailingSlash","toParts","fromParts","isToAbs","isFromAbs","mustEndAbs","last","part","unshift","valueOf","valueEqual","aValue","bValue","stripLeadingSlash","hasBasename","stripTrailingSlash","search","hash","createLocation","currentLocation","hashIndex","searchIndex","parsePath","decodeURI","URIError","locationsAreEqual","createTransitionManager","prompt","setPrompt","nextPrompt","confirmTransitionTo","action","getUserConfirmation","appendListener","fn","isActive","notifyListeners","_len","_key","canUseDOM","document","createElement","getConfirmation","confirm","PopStateEvent","HashChangeEvent","getHistoryState","createBrowserHistory","globalHistory","canUseHistory","ua","navigator","userAgent","supportsHistory","needsHashChangeListener","_props","_props$forceRefresh","forceRefresh","_props$getUserConfirm","_props$keyLength","keyLength","getDOMLocation","historyState","_ref","_window$location","createKey","transitionManager","setState","nextState","handlePopState","event","isExtraneousPopstateEvent","handlePop","handleHashChange","forceNextPop","fromLocation","toLocation","toIndex","allKeys","fromIndex","delta","go","revertPop","initialLocation","createHref","listenerCount","checkDOMListeners","addEventListener","removeEventListener","isBlocked","href","pushState","prevIndex","nextKeys","replaceState","goBack","goForward","block","unblock","listen","HashChangeEvent$1","HashPathCoders","hashbang","encodePath","decodePath","noslash","slash","stripHash","getHashPath","replaceHashPath","createHashHistory","_props$hashType","hashType","_HashPathCoders$hashT","ignorePath","encodedPath","prevLocation","allPaths","baseTag","querySelector","getAttribute","pushHashPath","nextPaths","clamp","lowerBound","upperBound","createMemoryHistory","_props$initialEntries","initialEntries","_props$initialIndex","initialIndex","entries","entry","nextIndex","nextEntries","canGo","camelCase","firstCapital","p1","p2","toUpperCase","snakeCase","titleCase","txt","shorten","input","termLength","acc","val","segmentTerms","shortSegment","term","hashFunction","hashedInput","digest","isAliasProperty","_setPrototypeOf","_inheritsLoose","subClass","superClass","asyncGeneratorStep","gen","_next","_throw","arg","_asyncToGenerator","exclusionMetadata","blockstart","j","A","B","C","D","E","temp","_rotLeft","_cvtHex","W","H0","H1","H2","H3","H4","strLen","encodeURIComponent","wordArray","charCodeAt","uuid4","base64","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","Uint8Array","encodingOrOffset","allocUnsafe","ArrayBuffer","byteOffset","byteLength","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","write","fromString","isBuffer","checked","copy","buffer","fromObject","assertSize","isView","loweredCase","utf8ToBytes","base64ToBytes","slowToString","start","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","arrayIndexOf","indexSize","arrLength","valLength","buf","readUInt16BE","foundIndex","hexWrite","remaining","parsed","utf8Write","blitBuffer","asciiWrite","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","fromByteArray","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","typedArraySupport","poolSize","_augment","species","fill","allocUnsafeSlow","_isBuffer","compare","pos","swap16","swap32","swap64","inspect","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","out","toHex","bytes","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","stringtrim","base64clean","src","dst","_defineProperties","_createClass","protoProps","staticProps","loadedTables","clearSqlMemory","recreateTable","changedTable","changedColumnSet","originalColumn","viewNamesString","tableNamesString","dbIndicesDef","autoIncrementColumnName","tableSql","autoIncrementIndex","comma","bracket","enumMatch","fullType","col","re","matches","ownForeignKeys","fkName","tableUniquePromises","dbIndexName","indexInfos","indexColumns","indexInfo1","indexInfo2","indexInfo","indexColumn","indicesPromises","indexDef","dbIndexDef","hasAutoIncrement","skipPrimary","migrateData","newColumnNames","oldColumnNames","loadedViews","sqlMemoryMode","sqlInMemory","SqlInMemory","getTable","getTables","getView","viewPath","getViews","viewPaths","enableSqlMemory","disableSqlMemory","getMemorySql","executeMemoryUpSql","executeMemoryDownSql","foundViews","foundTables","foundTable","loadedTable","isColumnChanged","checkDefault","checkComment","formatArgs","useColors","namespace","humanize","diff","color","lastC","namespaces","storage","removeItem","process","DEBUG","__nwjs","documentElement","style","WebkitAppearance","firebug","exception","$1","localstorage","destroy","warned","colors","debug","formatters","tablePaths","entityToSyncMetadatas","viewEntityToSyncMetadatas","createTypeormMetadataTable","executeSchemaSyncOperationsInProperOrder","dropOldViews","dropOldForeignKeys","dropOldIndices","dropOldChecks","dropOldExclusions","dropCompositeUniqueConstraints","renameColumns","createNewTables","dropRemovedColumns","addNewColumns","updateExistColumns","createNewIndices","createNewChecks","createNewExclusions","createCompositeUniqueConstraints","createViews","tableForeignKeysToDrop","tableForeignKey","metadataFK","metadataForeignKey","foreignKeysMatch","renameTables","renamedMetadataColumns","renamedTableColumns","renamedColumn","oldChecks","tableCheck","compositeUniques","tableUnique","oldExclusions","tableExclusion","fullTableName","fullViewName","viewExpression","metadataExpression","droppedTableColumns","newColumnMetadatas","newTableColumnOptions","metadataColumnsToTableColumnOptions","newTableColumns","option","primaryMetadataColumns","changedPrimaryColumns","primaryMetadataColumn","changedColumn","dropColumnReferencedForeignKeys","dropColumnCompositeIndices","dropColumnCompositeUniques","newAndOldTableColumns","newIndices","newChecks","newExclusions","newKeys","foreignKeyMetadata","tablesWithFK","columnForeignKey","dependForeignKeys","dependForeignKey","tableWithFK","relatedIndices","relatedUniques","typeormMetadataTable","ReturningStatementNotSupportedError","hookCallback","hooks","setHookCallback","hasOwnProp","isObjectEmpty","isUndefined","isNumber","isDate","extend","createUTC","format","locale","createLocalOrUTC","utc","defaultParsingFlags","empty","unusedTokens","unusedInput","overflow","charsLeftOver","nullInput","invalidEra","invalidMonth","invalidFormat","userInvalidated","iso","parsedDateParts","era","meridiem","rfc2822","weekdayMismatch","getParsingFlags","_pf","isValid","_isValid","flags","parsedParts","isNowValid","_d","invalidWeekday","_strict","bigHour","isFrozen","createInvalid","NaN","fun","momentProperties","updateInProgress","copyConfig","_isAMomentObject","_i","_f","_l","_tzm","_isUTC","_offset","_locale","Moment","config","updateOffset","isMoment","msg","suppressDeprecationWarnings","deprecate","firstTime","deprecationHandler","stack","deprecations","deprecateSimple","isFunction","_config","_dayOfMonthOrdinalParseLenient","_dayOfMonthOrdinalParse","_ordinalParse","mergeConfigs","parentConfig","childConfig","Locale","defaultCalendar","sameDay","nextDay","nextWeek","lastDay","lastWeek","sameElse","calendar","mom","now","output","_calendar","zeroFill","number","targetLength","forceSign","absNumber","abs","zerosToFill","formattingTokens","localFormattingTokens","formatFunctions","formatTokenFunctions","addFormatToken","token","padded","ordinal","func","localeData","removeFormattingTokens","makeFormatFunction","formatMoment","expandFormat","invalidDate","replaceLongDateFormatTokens","longDateFormat","lastIndex","defaultLongDateFormat","LTS","LT","L","LL","LLL","LLLL","_longDateFormat","formatUpper","tok","defaultInvalidDate","_invalidDate","defaultOrdinal","defaultDayOfMonthOrdinalParse","_ordinal","defaultRelativeTime","future","past","ss","mm","h","hh","dd","w","ww","M","MM","yy","relativeTime","withoutSuffix","isFuture","_relativeTime","pastFuture","addUnitAlias","unit","shorthand","lowerCase","normalizeUnits","normalizeObjectUnits","inputObject","normalizedProp","normalizedInput","priorities","addUnitPriority","priority","getPrioritizedUnits","unitsObj","isLeapYear","year","absFloor","toInt","argumentForCoercion","coercedNumber","makeGetSet","keepTime","set$1","month","daysInMonth","stringGet","stringSet","prioritized","regexes","match1","match2","match3","match4","match6","match1to2","match3to4","match5to6","match1to3","match1to4","match1to6","matchUnsigned","matchSigned","matchOffset","matchShortOffset","matchTimestamp","matchWord","addRegexToken","regex","strictRegex","isStrict","getParseRegexForToken","unescapeFormat","regexEscape","p3","p4","tokens","addParseToken","addWeekParseToken","_w","addTimeToArrayFromToken","_a","YEAR","MONTH","HOUR","MINUTE","SECOND","MILLISECOND","WEEK","WEEKDAY","mod","modMonth","monthsShort","months","monthsShortRegex","monthsRegex","monthsParse","defaultLocaleMonths","defaultLocaleMonthsShort","MONTHS_IN_FORMAT","defaultMonthsShortRegex","defaultMonthsRegex","localeMonths","_months","isFormat","localeMonthsShort","_monthsShort","handleStrictParse","monthName","ii","llc","toLocaleLowerCase","_monthsParse","_longMonthsParse","_shortMonthsParse","localeMonthsParse","_monthsParseExact","setMonth","dayOfMonth","getSetMonth","getDaysInMonth","computeMonthsParse","_monthsShortStrictRegex","_monthsShortRegex","_monthsStrictRegex","_monthsRegex","cmpLenRev","shortPieces","longPieces","mixedPieces","daysInYear","parseTwoDigitYear","getSetYear","getIsLeapYear","ms","setFullYear","createUTCDate","UTC","setUTCFullYear","firstWeekOffset","dow","doy","fwd","getUTCDay","dayOfYearFromWeeks","week","weekday","resYear","resDayOfYear","dayOfYear","weekOfYear","resWeek","weekOffset","weeksInYear","weekOffsetNext","localeWeek","_week","defaultLocaleWeek","localeFirstDayOfWeek","localeFirstDayOfYear","getSetWeek","add","getSetISOWeek","parseWeekday","weekdaysParse","parseIsoWeekday","shiftWeekdays","ws","weekdaysMin","weekdaysShort","weekdays","weekdaysMinRegex","weekdaysShortRegex","weekdaysRegex","defaultLocaleWeekdays","defaultLocaleWeekdaysShort","defaultLocaleWeekdaysMin","defaultWeekdaysRegex","defaultWeekdaysShortRegex","defaultWeekdaysMinRegex","localeWeekdays","_weekdays","day","localeWeekdaysShort","_weekdaysShort","localeWeekdaysMin","_weekdaysMin","handleStrictParse$1","weekdayName","_weekdaysParse","_shortWeekdaysParse","_minWeekdaysParse","localeWeekdaysParse","_weekdaysParseExact","_fullWeekdaysParse","getSetDayOfWeek","getDay","getSetLocaleDayOfWeek","getSetISODayOfWeek","computeWeekdaysParse","_weekdaysStrictRegex","_weekdaysRegex","_weekdaysShortStrictRegex","_weekdaysShortRegex","_weekdaysMinStrictRegex","_weekdaysMinRegex","minp","shortp","longp","minPieces","hFormat","kFormat","lowercase","matchMeridiem","_meridiemParse","localeIsPM","kInput","_isPm","isPM","_meridiem","pos1","pos2","defaultLocaleMeridiemParse","getSetHour","localeMeridiem","isLower","globalLocale","baseConfig","dayOfMonthOrdinalParse","meridiemParse","locales","localeFamilies","commonPrefix","minl","normalizeLocale","chooseLocale","loadLocale","oldLocale","_abbr","aliasedRequire","getSetGlobalLocale","getLocale","defineLocale","abbr","parentLocale","updateLocale","tmpLocale","listLocales","checkOverflow","_overflowDayOfYear","_overflowWeeks","_overflowWeekday","extendedIsoRegex","basicIsoRegex","tzRegex","isoDates","isoTimes","aspNetJsonRegex","obsOffsets","UT","GMT","EDT","EST","CDT","CST","MDT","MST","PDT","PST","configFromISO","allowTime","dateFormat","timeFormat","tzFormat","configFromStringAndFormat","extractFromRFC2822Strings","yearStr","monthStr","dayStr","hourStr","minuteStr","secondStr","untruncateYear","preprocessRFC2822","checkWeekday","weekdayStr","parsedInput","calculateOffset","obsOffset","militaryOffset","numOffset","hm","configFromRFC2822","parsedArray","setUTCMinutes","configFromString","createFromInputFallback","defaults","currentDateArray","nowValue","_useUTC","configFromArray","currentDate","expectedWeekday","yearToUse","dayOfYearFromWeekInfo","_dayOfYear","_nextDay","weekYear","weekdayOverflow","curWeek","GG","createLocal","gg","ISO_8601","RFC_2822","skipped","stringLength","totalParsedInputLength","meridiemFixWrap","erasConvertYear","hour","isPm","meridiemHour","configFromStringAndArray","tempConfig","bestMoment","scoreToBeat","currentScore","validFormatFound","bestFormatIsValid","score","configFromObject","dayOrDate","minute","second","millisecond","createFromConfig","prepareConfig","preparse","configFromInput","isUTC","prototypeMin","other","prototypeMax","pickBy","moments","ordering","isDurationValid","unitHasDecimal","parseFloat","isValid$1","createInvalid$1","createDuration","Duration","years","quarters","quarter","weeks","isoWeek","days","_milliseconds","_days","_data","_bubble","isDuration","absRound","round","compareArrays","array1","array2","dontConvert","lengthDiff","diffs","utcOffset","sign","offsetFromString","chunkOffset","matcher","parts","cloneWithOffset","model","setTime","local","getDateOffset","getTimezoneOffset","getSetOffset","keepLocalTime","keepMinutes","localAdjust","_changeInProgress","addSubtract","getSetZone","setOffsetToUTC","setOffsetToLocal","subtract","setOffsetToParsedOffset","tZone","hasAlignedHourOffset","isDaylightSavingTime","isDaylightSavingTimeShifted","_isDSTShifted","isLocal","isUtcOffset","isUtc","aspNetRegex","isoRegex","diffRes","parseIso","momentsDifference","inp","positiveMomentsDifference","isAfter","isBefore","createAdder","period","tmp","isAdding","invalid","isString","isMomentInput","isNumberOrStringArray","isMomentInputObject","objectTest","propertyTest","properties","arrayTest","dataTypeTest","isCalendarSpec","getCalendarFormat","myMoment","calendar$1","sod","startOf","calendarFormat","localInput","endOf","isBetween","inclusivity","localFrom","localTo","isSame","inputMs","isSameOrAfter","isSameOrBefore","asFloat","zoneDelta","monthDiff","wholeMonthDiff","anchor","toISOString","keepOffset","toDate","datetime","suffix","zone","inputString","defaultFormatUtc","defaultFormat","postformat","fromNow","toNow","newLocaleData","lang","MS_PER_SECOND","MS_PER_MINUTE","MS_PER_HOUR","MS_PER_400_YEARS","mod$1","dividend","divisor","localStartOfDate","utcStartOfDate","startOfDate","isoWeekday","unix","toObject","isValid$2","parsingFlags","invalidAt","creationData","localeEras","eras","_eras","since","until","localeErasParse","eraName","narrow","localeErasConvertYear","getEraName","getEraNarrow","getEraAbbr","getEraYear","erasNameRegex","computeErasParse","_erasNameRegex","_erasRegex","erasAbbrRegex","_erasAbbrRegex","erasNarrowRegex","_erasNarrowRegex","matchEraAbbr","matchEraName","matchEraNarrow","matchEraYearOrdinal","_eraYearOrdinalRegex","abbrPieces","namePieces","narrowPieces","addWeekYearFormatToken","getter","getSetWeekYear","getSetWeekYearHelper","getSetISOWeekYear","getISOWeeksInYear","getISOWeeksInISOWeekYear","isoWeekYear","getWeeksInYear","weekInfo","getWeeksInWeekYear","weeksTarget","setWeekAll","dayOfYearData","getSetQuarter","erasParse","eraYearOrdinalParse","getSetDayOfMonth","getSetDayOfYear","getSetMinute","getSetMillisecond","getSetSecond","parseMs","getZoneAbbr","getZoneName","createUnix","createInZone","parseZone","preParsePostFormat","for","eraNarrow","eraAbbr","eraYear","isoWeeks","weeksInWeekYear","isoWeeksInYear","isoWeeksInISOWeekYear","isDST","zoneAbbr","zoneName","dates","isDSTShifted","proto$1","get$1","field","setter","listMonthsImpl","listWeekdaysImpl","localeSorted","listMonths","listMonthsShort","listWeekdays","listWeekdaysShort","listWeekdaysMin","firstDayOfYear","firstDayOfWeek","langData","mathAbs","addSubtract$1","add$1","subtract$1","absCeil","bubble","monthsFromDays","monthsToDays","daysToMonths","as","valueOf$1","makeAs","asMilliseconds","asSeconds","asMinutes","asHours","asDays","asWeeks","asMonths","asQuarters","asYears","clone$1","get$2","makeGetter","thresholds","substituteTimeAgo","relativeTime$1","posNegDuration","getSetRelativeTimeRounding","roundingFunction","getSetRelativeTimeThreshold","threshold","argWithSuffix","argThresholds","withSuffix","th","abs$1","toISOString$1","totalSign","ymSign","daysSign","hmsSign","total","toFixed","proto$2","toIsoString","relativeTimeRounding","relativeTimeThreshold","HTML5_FMT","DATETIME_LOCAL","DATETIME_LOCAL_SECONDS","DATETIME_LOCAL_MS","TIME","TIME_SECONDS","TIME_MS","factory","copyProps","SafeBuffer","_createForOfIteratorHelper","allowArrayLike","F","_e","normalCompletion","didErr","_e2","_objectWithoutPropertiesLoose","excluded","sourceKeys","ctor","superCtor","super_","TempCtor","Hash","blockSize","finalSize","_block","_finalSize","_blockSize","enc","accum","assigned","remainder","_update","rem","bits","lowBits","highBits","_hash","PessimisticLockTransactionRequiredError","NoVersionOrUpdateDateColumnError","expectedVersion","actualVersion","OptimisticLockVersionMismatchError","OptimisticLockCanNotBeUsedError","rawEntities","relationIdAttr","rawEntity","parentAlias","relationIdAttribute","junctionAlias","inverseSideTableName","joinInverseSideMetadata","junctionTableName","mappedColumns","mappedColumn","attribute","metadataToAttribute","parentAliasName","mapToProperty","onlyUnique","relationCountAttr","inverseSideTable","inverseSideTableAlias","inverseSidePropertyName","referenceColumnValues","relationCountAttribute","addGroupBy","inverseJoinColumnName","firstJunctionColumn","secondJunctionColumn","vals","LockNotSupportedOnGivenDriverError","OffsetWithoutLimitNotSupportedError","createSelectExpression","createJoinExpression","createGroupByExpression","createHavingExpression","createOrderByExpression","createLimitOffsetExpression","createLockExpression","distinct","distinctOn","addFrom","innerJoinAndMapMany","innerJoinAndMapOne","leftJoinAndMapMany","leftJoinAndMapOne","loadRelationIdAndMap","aliasNameOrOptions","loadRelationCountAndMap","orWhere","orWhereInIds","andHaving","orHaving","nulls","normalizeNumber","loadRawResults","executeEntitiesAndRawResults","getOneOrFail","executeCountQuery","entitiesAndRaw","releaseFn","enabledOrMillisecondsOrId","maybeMilliseconds","setOption","isMappingMany","joinAttribute","isSubQuery","allSelects","excludedSelects","buildEscapedEntityColumnSelects","findEntityColumnSelects","excludedSelect","froms","createSelectDistinctExpression","joinAttr","destinationTableName","destinationTableAlias","appendedCondition","destinationJoin","junctionCondition","destinationCondition","allOrderBys","hasMainAlias","nonSelectedPrimaryColumns","selectionPath","legacySpatialSupport","virtual","mainSelect","computeCountExpression","distinctAlias","countSql","relationCountLoader","createOrderByCombinedWithSelectExpression","querySelects","columnAlias","paramKey","mergeExpressionMap","rawRelationIdResults","rawRelationCountResults","RawSqlResultsToEntityTransformer","broadcastResult","selectString","orderCriteria","criteriaParts","orderByObject","queryId","savedQueryResultCacheOptions","alwaysEnabled","num","queryExpressionMap","newRaw","rawItem","rawItemIndex","returningColumns","getUpdationReturningColumns","loadedReturningColumns","insertionColumns","getInsertionReturningColumns","uuid","entityIds","needToCheckGenerated","_unsupportedIterableToArray","minLen","UpdateValuesMissingError","reactIs","REACT_STATICS","childContextTypes","contextType","contextTypes","defaultProps","displayName","getDefaultProps","getDerivedStateFromError","getDerivedStateFromProps","mixins","propTypes","KNOWN_STATICS","caller","callee","arity","MEMO_STATICS","TYPE_STATICS","getStatics","isMemo","ForwardRef","Memo","getOwnPropertySymbols","getOwnPropertyDescriptor","objectPrototype","hoistNonReactStatics","targetComponent","sourceComponent","blacklist","inheritedComponent","targetStatics","sourceStatics","_arrayLikeToArray","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","nextTick","title","browser","env","argv","versions","addListener","once","off","removeAllListeners","emit","prependListener","prependOnceListener","binding","cwd","chdir","umask","dbType","ConnectionIsNotSetError","criteriaString","stringifyCriteria","isSelectedEvaluated","relationEvaluated","isSelectedCache","getValue","relationCache","relationOwnerSelection","bind","LimitOnUpdateNotSupportedError","_toConsumableArray","arrayLikeToArray","iter","unsupportedIterableToArray","propIsEnumerable","propertyIsEnumerable","test1","test2","test3","letter","shouldUseNative","symbols","createUpdateExpression","createLimitExpression","declareSql","selectOutputSql","returningResultsEntityUpdator","updateSql","statements","affected","affectedRows","changes","entityIdMap","getValueSet","updateColumnAndValues","newParameters","parametersCount","geomFromText","whereExpression","returningExpression","createDeleteExpression","deleteResult","queryBuilder","relationValue","ofs","ofIndex","firstColumnValues","firstColumnVal","secondColumnVal","inserted","valueIndex","firstColumnValIndex","secondColumnValIndex","addAndRemove","added","removed","loadOne","loadMany","InsertValuesMissingError","createInsertExpression","valueSets","getValueSets","InsertResult","valueSet","ReturningResultsEntityUpdator","insertSql","orIgnore","orUpdate","conflict_target","conflict","overwrite","valuesExpression","createValuesExpression","createColumnNamesExpression","getInsertedColumns","valueSetIndex","insertionIndex","resolveToLocation","normalizeToLocation","forwardRefShim","forwardRef","LinkAnchor","innerRef","navigate","onClick","rest","ex","isModifiedEvent","forwardedRef","Link","method","ariaCurrent","activeClassName","activeStyle","classNameProp","className","isActiveProp","locationProp","styleProp","escapedPath","classnames","joinClassnames","MAX_SIGNED_31_BIT_INT","commonjsGlobal","globalThis","createEventEmitter","handlers","handler","newValue","changedBits","calculateChangedBits","_Provider$childContex","_Consumer$contextType","contextProp","getUniqueId","Provider","_Component","_this","emitter","_proto","getChildContext","componentWillReceiveProps","nextProps","oldValue","PropTypes","isRequired","Consumer","_Component2","_this2","observedBits","_proto2","isarray","compile","tokensToFunction","tokensToRegExp","PATH_REGEXP","defaultDelimiter","delimiter","escaped","capture","modifier","asterisk","partial","repeat","optional","escapeGroup","escapeString","encodeURIComponentPretty","encodeURI","opts","encode","pretty","segment","attachKeys","route","endsWithDelimiter","regexpToRegexp","arrayToRegexp","stringToRegexp","memoize","reactPropsRegex","inherits","K","Sha256","init","ch","z","maj","sigma0","sigma1","gamma0","_b","_c","_g","_h","T1","T2","H","Sha512","Ch","xl","Gamma0","Gamma0l","Gamma1","Gamma1l","getCarry","_ah","_bh","_ch","_dh","_eh","_fh","_gh","_hh","_al","_bl","_cl","_dl","_el","_fl","_gl","_hl","ah","bh","dh","eh","fh","gh","al","bl","cl","dl","el","fl","gl","hl","xh","gamma0l","gamma1","gamma1l","Wi7h","Wi7l","Wi16h","Wi16l","Wil","Wih","majh","majl","sigma0h","sigma0l","sigma1h","sigma1l","Kih","Kil","chh","chl","t1l","t1h","t2l","t2h","writeInt64BE","moment","plural","translate","monthsStrictRegex","monthsShortStrictRegex","longMonthsParse","shortMonthsParse","MissingDeleteDateColumnError","UpdateResult","checkDCE","__REACT_DEVTOOLS_GLOBAL_HOOK__","algorithm","Algorithm","sha","sha224","sha256","sha384","sha512","queryResponsibilityChain","transactionCallback","begin","convertIsolationLevel","commit","rollback","waitingPromise","waitingOkay","otherWaitingPromises","Request","mssqlParameter","mssqlParameterToNativeParameter","resolveChain","waitingPromiseIndex","recordset","rowsAffected","request","upQuery","dbName","getCurrentDatabase","currentDB","buildForeignKeyName","defaultName","newCheckName","oldDefaultName","newDefaultName","allViewsSql","allViewsResults","viewResult","allTablesSql","allTablesResults","tablesResult","dropFkQueries","dropQuery","getCurrentSchema","currentDatabase","extractTableSchemaAndName","dbNames","identityColumnsSql","dbIdentityColumns","dbCollations","defaultCollation","dbCollation","columnCheckConstraints","isEnumRegexp","enumValueRegexp","removeParenthesisFromDefault","joinedFkName","normalizedDefault","skipIdentity","createDefault","Bit","BigInt","Decimal","Float","Int","Money","Numeric","SmallInt","SmallMoney","Real","TinyInt","Char","NChar","Text","Ntext","VarChar","NVarChar","Xml","Time","DateTime","DateTime2","DateTimeOffset","SmallDateTime","UniqueIdentifier","Variant","Binary","VarBinary","Image","UDT","RowVersion","ISOLATION_LEVEL","READ_UNCOMMITTED","REPEATABLE_READ","SERIALIZABLE","READ_COMMITTED","setAutoCommit","prepare","exist","referencedForeignKeySql","referencedForeignKeys","referencedForeignKeyTableMapping","mapping","addColumnSql","dropColumnSql","uniqueIndex","indicesCondition","columnUniqueIndex","hasIgnoredIndex","isUniqueIndexExist","isUniqueConstraintExist","indexType","outBinds","executionOptions","autoCommit","newTableOrName","defaultUp","defaultDown","nullableUp","nullableDown","getAsObject","free","readOnly","multithreading","migrate","iosFlags","androidFlags","resultType","RESULTSASOBJECT","execSQL","isInsertQuery","transformRawResultsGroup","keyValue","discriminatorMetadata","hasColumns","transformColumns","hasRelations","transformJoins","hasRelationIds","transformRelationIds","hasRelationCounts","transformRelationCounts","hasData","isSelected","mapToPropertyParentAlias","mapToPropertyPropertyName","rawSqlResults","rawRelationIdResult","createValueMapFromJoinColumns","idMaps","entityPrimaryIds","extractEntityPrimaryIds","mapToPropertyPropertyPath","rawRelationCountResult","referenceColumnName","referenceColumnValue","rawSqlResult","relationIdRawResult","objA","objB","compareContext","keysA","keysB","bHasOwnProperty","valueA","valueB","stylis_min","I","J","G","N","O","X","da","ea","fa","Y","ha","Q","ia","Z","ja","ka","aa","ba","la","ma","R","na","oa","S","U","use","T","unitlessKeys","animationIterationCount","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridRow","gridRowEnd","gridRowSpan","gridRowStart","gridColumn","gridColumnEnd","gridColumnSpan","gridColumnStart","msGridRow","msGridRowSpan","msGridColumn","msGridColumnSpan","fontWeight","lineHeight","opacity","orphans","tabSize","widows","zIndex","zoom","WebkitLineClamp","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","getOwnPropertyDescriptors","descriptors","formatRegExp","objects","isNull","noDeprecation","throwDeprecation","traceDeprecation","trace","debugEnviron","debugs","ctx","seen","stylize","stylizeNoColor","depth","isBoolean","showHidden","_extend","customInspect","stylizeWithColor","formatValue","styleType","styles","recurseTimes","primitive","simple","formatPrimitive","visibleKeys","arrayToHash","isError","formatError","isRegExp","braces","toUTCString","formatProperty","formatArray","prev","cur","numLinesEst","reduceToSingleString","line","objectToString","pad","debuglog","NODE_DEBUG","pid","isNullOrUndefined","isSymbol","isPrimitive","origin","kCustomPromisifiedSymbol","callbackifyOnRejected","reason","cb","newReason","promisify","original","promiseResolve","promiseReject","custom","callbackify","callbackified","maybeCb","rej","_getPrototypeOf","_typeof","_possibleConstructorReturn","ReferenceError","_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","Super","NewTarget","_slicedToArray","_n","_s","_inherits","runtime","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","Context","_invoke","GenStateSuspendedStart","GenStateExecuting","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","_sent","dispatchException","abrupt","record","tryCatch","GenStateSuspendedYield","makeInvokeMethod","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","invoke","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","resultName","nextLoc","pushTryEntry","locs","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isGeneratorFunction","genFun","mark","awrap","async","skipTempReset","stop","rootRecord","rval","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Fragment","StrictMode","Profiler","Suspense","isMounted","enqueueForceUpdate","enqueueReplaceState","enqueueSetState","refs","updater","isReactComponent","forceUpdate","isPureReactComponent","current","ref","__self","__source","$$typeof","_owner","_status","_result","ReactCurrentDispatcher","ReactCurrentBatchConfig","transition","ReactCurrentOwner","IsSomeRendererActing","Children","only","PureComponent","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","cloneElement","_calculateChangedBits","_currentValue","_currentValue2","_threadCount","_context","createFactory","createRef","isValidElement","_payload","_init","useCallback","useContext","useDebugValue","useEffect","useImperativeHandle","useLayoutEffect","useMemo","useReducer","useRef","useState","acceptsBooleans","attributeName","attributeNamespace","mustUseProperty","sanitizeURL","removeEmptyString","pa","qa","removeAttribute","setAttribute","setAttributeNS","xlinkHref","ra","sa","ta","wa","xa","ya","za","Aa","Ba","Ca","Da","Ea","Fa","Ga","Ha","Ia","Ja","Ma","Ka","La","Na","Oa","Pa","prepareStackTrace","Qa","tag","_render","Ra","Sa","Ta","nodeName","Va","_valueTracker","stopTracking","Ua","Wa","Xa","activeElement","Ya","defaultChecked","_wrapperState","initialChecked","Za","initialValue","controlled","$a","ab","bb","ownerDocument","eb","fb","selected","defaultSelected","disabled","gb","dangerouslySetInnerHTML","hb","ib","jb","textContent","kb","lb","mb","nb","ob","namespaceURI","innerHTML","firstChild","removeChild","appendChild","MSApp","execUnsafeLocalFunction","pb","lastChild","nodeType","nodeValue","gridArea","lineClamp","rb","sb","tb","setProperty","ub","menuitem","area","br","embed","hr","img","keygen","link","meta","param","track","wbr","vb","wb","is","xb","srcElement","correspondingUseElement","parentNode","yb","zb","Ab","Bb","Cb","stateNode","Db","Eb","Fb","Gb","Hb","Ib","Jb","Kb","Lb","Mb","Ob","Pb","Qb","Rb","Sb","Tb","Ub","Vb","Wb","Xb","Zb","alternate","return","$b","memoizedState","dehydrated","ac","cc","sibling","bc","dc","ec","fc","gc","hc","ic","jc","kc","lc","mc","nc","oc","pc","qc","rc","blockedOn","domEventName","eventSystemFlags","nativeEvent","targetContainers","sc","pointerId","tc","vc","wc","lanePriority","unstable_runWithPriority","hydrate","containerInfo","xc","yc","zc","Ac","Bc","unstable_scheduleCallback","unstable_NormalPriority","Cc","Dc","Ec","animationend","animationiteration","animationstart","transitionend","Fc","Gc","Hc","animation","Ic","Jc","Kc","Lc","Mc","Nc","Oc","Pc","Qc","unstable_now","Rc","Uc","pendingLanes","expiredLanes","suspendedLanes","pingedLanes","Vc","entangledLanes","entanglements","Wc","Xc","Yc","Zc","$c","eventTimes","clz32","bd","cd","LN2","unstable_UserBlockingPriority","ed","fd","gd","hd","uc","jd","kd","ld","md","nd","od","keyCode","charCode","pd","qd","rd","_reactName","_targetInst","currentTarget","isDefaultPrevented","defaultPrevented","returnValue","isPropagationStopped","preventDefault","stopPropagation","cancelBubble","persist","isPersistent","wd","xd","yd","sd","eventPhase","bubbles","cancelable","timeStamp","isTrusted","td","ud","detail","vd","Ad","screenX","screenY","clientX","clientY","pageX","pageY","ctrlKey","shiftKey","altKey","metaKey","getModifierState","zd","button","buttons","relatedTarget","fromElement","toElement","movementX","movementY","Bd","Dd","dataTransfer","Fd","Hd","animationName","elapsedTime","pseudoElement","Jd","clipboardData","Ld","Md","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","Nd","8","9","12","13","16","17","18","19","20","27","32","33","34","35","36","37","38","39","40","45","46","112","113","114","115","116","117","118","119","120","121","122","123","144","145","224","Od","Alt","Control","Meta","Shift","Pd","Rd","which","Td","height","pressure","tangentialPressure","tiltX","tiltY","twist","pointerType","Vd","touches","targetTouches","changedTouches","Xd","Zd","deltaX","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode","$d","ae","be","documentMode","ce","de","ee","fe","ge","he","ie","le","email","range","tel","text","me","ne","oe","pe","qe","se","te","ue","ve","we","xe","ye","ze","oninput","Ae","detachEvent","Be","Ce","attachEvent","De","Ee","Fe","He","Ie","Je","Ke","Le","nextSibling","Me","contains","compareDocumentPosition","Ne","HTMLIFrameElement","contentWindow","Oe","contentEditable","Pe","Qe","Re","Se","Te","Ue","selectionStart","selectionEnd","anchorNode","defaultView","getSelection","anchorOffset","focusNode","focusOffset","Ve","We","Xe","Ye","Ze","Yb","$e","af","bf","cf","df","passive","Nb","ef","ff","parentWindow","gf","hf","je","char","ke","jf","kf","lf","mf","autoFocus","nf","__html","pf","qf","rf","sf","previousSibling","tf","vf","wf","xf","yf","zf","Af","Bf","Cf","Df","Ef","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","Ff","Gf","Hf","If","Jf","__reactInternalMemoizedMergedChildContext","Kf","Lf","Mf","Nf","Of","Pf","unstable_cancelCallback","Qf","unstable_shouldYield","Rf","unstable_requestPaint","Sf","Tf","unstable_getCurrentPriorityLevel","Uf","unstable_ImmediatePriority","Vf","Wf","Xf","unstable_LowPriority","Yf","unstable_IdlePriority","Zf","$f","ag","bg","cg","dg","eg","fg","hg","ig","jg","kg","lg","mg","ng","og","qg","rg","sg","childLanes","tg","firstContext","lanes","ug","vg","responders","wg","xg","updateQueue","baseState","firstBaseUpdate","lastBaseUpdate","shared","pending","effects","yg","zg","eventTime","lane","payload","Ag","Bg","Cg","Dg","Eg","Fg","Gg","Kg","_reactInternals","Hg","Ig","Jg","Lg","shouldComponentUpdate","Mg","Ng","UNSAFE_componentWillReceiveProps","Og","getSnapshotBeforeUpdate","UNSAFE_componentWillMount","componentWillMount","Pg","Qg","_stringRef","Rg","Sg","lastEffect","nextEffect","firstEffect","Tg","Ug","elementType","Vg","implementation","Wg","Xg","Yg","Zg","$g","tagName","ih","memoizedProps","revealOrder","jh","kh","lh","mh","nh","oh","pendingProps","ph","qh","rh","sh","uh","_workInProgressVersionPrimary","vh","wh","yh","zh","Ah","Bh","Dh","Eh","Fh","Gh","Hh","baseQueue","Ih","Jh","Kh","lastRenderedReducer","eagerReducer","eagerState","lastRenderedState","dispatch","Lh","Mh","_getVersion","_source","mutableReadLanes","Nh","getSnapshot","subscribe","setSnapshot","Oh","Ph","Qh","Rh","deps","Sh","Th","Uh","Vh","Wh","Xh","Yh","Zh","$h","ai","bi","ci","di","readContext","useDeferredValue","useTransition","useMutableSource","useOpaqueIdentifier","unstable_isNewReconciler","uf","ei","fi","gi","ji","ki","li","mi","baseLanes","ni","oi","pi","UNSAFE_componentWillUpdate","componentWillUpdate","componentDidUpdate","qi","ri","pendingContext","Bi","Di","Ei","si","retryLane","ti","unstable_avoidThisFallback","ui","unstable_expectedLoadTime","vi","wi","xi","yi","zi","isBackwards","rendering","renderingStartTime","tail","tailMode","Ai","Fi","Gi","wasMultiple","multiple","onclick","createElementNS","createTextNode","V","Hi","Ii","Ji","Ki","Li","Mi","Ni","Oi","WeakMap","Pi","Qi","Ri","Si","componentDidCatch","Ti","componentStack","Ui","WeakSet","Vi","Wi","Xi","__reactInternalSnapshotBeforeUpdate","Yi","Zi","$i","focus","aj","display","bj","onCommitFiberUnmount","cj","dj","ej","fj","gj","hj","insertBefore","_reactRootContainer","ij","jj","kj","lj","mj","nj","oj","pj","qj","rj","sj","tj","uj","vj","wj","ck","xj","yj","zj","Aj","Bj","Cj","Dj","Ej","Fj","Gj","Hj","Ij","Jj","Sc","Kj","Lj","Mj","callbackNode","expirationTimes","callbackPriority","Tc","Nj","Oj","Pj","Qj","Rj","Sj","Tj","finishedWork","finishedLanes","Uj","timeoutHandle","Wj","Xj","pingCache","Yj","Zj","va","ak","bk","dk","rangeCount","focusedElem","selectionRange","ek","createRange","setStart","removeAllRanges","addRange","setEnd","scrollLeft","top","scrollTop","onCommitFiberRoot","gk","ik","pendingChildren","jk","mutableSourceEagerHydrationData","kk","lk","mk","nk","qk","hydrationOptions","mutableSources","_internalRoot","rk","tk","hasAttribute","sk","uk","hk","unstable_observedBits","unmount","querySelectorAll","form","Vj","vk","Events","wk","findFiberByHostInstance","bundleType","rendererPackageName","xk","rendererConfig","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","setSuspenseHandler","scheduleUpdate","currentDispatcherRef","findHostInstanceByFiber","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","yk","isDisabled","supportsFiber","inject","createPortal","findDOMNode","flushSync","unmountComponentAtNode","unstable_batchedUpdates","unstable_createPortal","unstable_renderSubtreeIntoContainer","performance","MessageChannel","unstable_forceFrameRate","cancelAnimationFrame","requestAnimationFrame","port2","port1","onmessage","postMessage","sortIndex","startTime","expirationTime","priorityLevel","unstable_Profiling","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_next","unstable_pauseExecution","delay","unstable_wrapCallback","exporter","makeExporter","previous","supportsSymbol","toPrimitiveSymbol","toPrimitive","supportsCreate","supportsProto","downLevel","HashMap","MakeDictionary","functionPrototype","usePolyfill","_Map","CreateMapPolyfill","_Set","CreateSetPolyfill","Metadata","CreateWeakMapPolyfill","decorate","attributes","IsUndefined","IsArray","IsConstructor","DecorateConstructor","IsObject","IsNull","DecorateProperty","ToPropertyKey","metadataKey","IsPropertyKey","OrdinaryDefineOwnMetadata","defineMetadata","OrdinaryHasMetadata","hasOwnMetadata","OrdinaryHasOwnMetadata","OrdinaryGetMetadata","getOwnMetadata","OrdinaryGetOwnMetadata","getMetadataKeys","OrdinaryMetadataKeys","getOwnMetadataKeys","OrdinaryOwnMetadataKeys","deleteMetadata","metadataMap","GetOrCreateMetadataMap","targetMetadata","decorated","Create","MetadataKey","OrdinaryGetPrototypeOf","ToBoolean","MetadataValue","ownKeys","parentKeys","ownKeys_1","parentKeys_1","GetIterator","IteratorStep","nextValue","IteratorValue","IteratorClose","Type","IsSymbol","ToPrimitive","PreferredType","hint","exoticToPrim","GetMethod","OrdinaryToPrimitive","toString_1","IsCallable","toString_2","argument","ToString","iterResult","prototypeProto","cacheSentinel","arraySentinel","MapIterator","selector","_index","_keys","_values","_selector","throw","_cacheKey","_cacheIndex","_find","getKey","getEntry","_map","UUID_SIZE","rootKey","CreateUniqueKey","GetOrCreateWeakMapTable","CreateUUID","FillRandomBytes","GenRandomBytes","crypto","getRandomValues","msCrypto","byte","Sha","rotl30","ft","b64","lens","getLens","validLen","placeHoldersLen","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","maxChunkLength","len2","encodeChunk","lookup","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","rt","Sha1","rotl5","Sha224","SHA512","Sha384","createDebug","prevTime","enableOverride","curr","coerce","formatter","logFn","selectColor","newDebug","toNamespace","disable","skips","enable","arrayWithoutHoles","iterableToArray","nonIterableSpread","msAbs","isPlural","long","fmtLong","fmtShort","AsyncMode","ConcurrentMode","ContextConsumer","ContextProvider","Element","Lazy","Portal","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isPortal","isProfiler","isStrictMode","isSuspense","isValidElementType","typeOf","jsx","jsxs","ReactPropTypesSecret","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","propName","componentName","propFullName","secret","getShim","ReactPropTypes","bool","symbol","any","arrayOf","instanceOf","objectOf","oneOf","oneOfType","shape","checkPropTypes","webpackPolyfill"],"mappings":"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","file":"static/js/2.87f24cb5.chunk.js","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * This class stores query and its parameters\n */\nexport class Query {\n    constructor(public query: string, public parameters?: any[]) {\n\n    }\n}\n","/**\n * Dummy driver classes for replacement via `package.json` in browser builds.\n * Using those classes reduces the build size by one third.\n *\n * If we don't include those dummy classes (and just disable the driver import\n * with `false` in `package.json`) typeorm will throw an error on runtime and\n * during webpack builds even if those driver are not used.\n */\n\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class MongoDriver {}\n\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class MongoQueryRunner {}\n\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class MongoEntityManager {}\n\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class MongoRepository {}\n\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class PostgresDriver {}\n\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class AuroraDataApiDriver {}\n\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class CockroachDriver {}\n\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class AuroraDataApiPostgresDriver {}\n\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class SqlServerDriver {}\n\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class SapDriver {}\n\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class MysqlDriver {}\n\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class OracleDriver {}\n\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class SqliteDriver {}\n\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class BetterSqlite3Driver {}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","import {TableColumn} from \"./TableColumn\";\nimport {TableIndex} from \"./TableIndex\";\nimport {TableForeignKey} from \"./TableForeignKey\";\nimport {Driver} from \"../../driver/Driver\";\nimport {TableOptions} from \"../options/TableOptions\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {TableUtils} from \"../util/TableUtils\";\nimport {TableUnique} from \"./TableUnique\";\nimport {TableCheck} from \"./TableCheck\";\nimport {TableExclusion} from \"./TableExclusion\";\n\n/**\n * Table in the database represented in this class.\n */\nexport class Table {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Contains database name, schema name and table name.\n     * E.g. \"myDB\".\"mySchema\".\"myTable\"\n     */\n    name: string;\n\n    /**\n     * Table columns.\n     */\n    columns: TableColumn[] = [];\n\n    /**\n     * Table indices.\n     */\n    indices: TableIndex[] = [];\n\n    /**\n     * Table foreign keys.\n     */\n    foreignKeys: TableForeignKey[] = [];\n\n    /**\n     * Table unique constraints.\n     */\n    uniques: TableUnique[] = [];\n\n    /**\n     * Table check constraints.\n     */\n    checks: TableCheck[] = [];\n\n    /**\n     * Table exclusion constraints.\n     */\n    exclusions: TableExclusion[] = [];\n\n    /**\n     * Indicates if table was just created.\n     * This is needed, for example to check if we need to skip primary keys creation\n     * for new tables.\n     */\n    justCreated: boolean = false;\n\n    /**\n     * Table engine.\n     */\n    engine?: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options?: TableOptions) {\n        if (options) {\n            this.name = options.name;\n\n            if (options.columns)\n                this.columns = options.columns.map(column => new TableColumn(column));\n\n            if (options.indices)\n                this.indices = options.indices.map(index => new TableIndex(index));\n\n            if (options.foreignKeys)\n                this.foreignKeys = options.foreignKeys.map(foreignKey => new TableForeignKey(foreignKey));\n\n            if (options.uniques)\n                this.uniques = options.uniques.map(unique => new TableUnique(unique));\n\n            if (options.checks)\n                this.checks = options.checks.map(check => new TableCheck(check));\n\n            if (options.exclusions)\n                this.exclusions = options.exclusions.map(exclusion => new TableExclusion(exclusion));\n\n            if (options.justCreated !== undefined)\n                this.justCreated = options.justCreated;\n\n            this.engine = options.engine;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    get primaryColumns(): TableColumn[] {\n        return this.columns.filter(column => column.isPrimary);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this table to a new table with all properties cloned.\n     */\n    clone(): Table {\n        return new Table(<TableOptions>{\n            name: this.name,\n            columns: this.columns.map(column => column.clone()),\n            indices: this.indices.map(constraint => constraint.clone()),\n            foreignKeys: this.foreignKeys.map(constraint => constraint.clone()),\n            uniques: this.uniques.map(constraint => constraint.clone()),\n            checks: this.checks.map(constraint => constraint.clone()),\n            exclusions: this.exclusions.map(constraint => constraint.clone()),\n            justCreated: this.justCreated,\n            engine: this.engine,\n        });\n    }\n\n    /**\n     * Add column and creates its constraints.\n     */\n    addColumn(column: TableColumn): void {\n        this.columns.push(column);\n    }\n\n    /**\n     * Remove column and its constraints.\n     */\n    removeColumn(column: TableColumn): void {\n        const foundColumn = this.columns.find(c => c.name === column.name);\n        if (foundColumn)\n            this.columns.splice(this.columns.indexOf(foundColumn), 1);\n    }\n\n    /**\n     * Adds unique constraint.\n     */\n    addUniqueConstraint(uniqueConstraint: TableUnique): void {\n        this.uniques.push(uniqueConstraint);\n        if (uniqueConstraint.columnNames.length === 1) {\n            const uniqueColumn = this.columns.find(column => column.name === uniqueConstraint.columnNames[0]);\n            if (uniqueColumn)\n                uniqueColumn.isUnique = true;\n        }\n    }\n\n    /**\n     * Removes unique constraint.\n     */\n    removeUniqueConstraint(removedUnique: TableUnique): void {\n        const foundUnique = this.uniques.find(unique => unique.name === removedUnique.name);\n        if (foundUnique) {\n            this.uniques.splice(this.uniques.indexOf(foundUnique), 1);\n            if (foundUnique.columnNames.length === 1) {\n                const uniqueColumn = this.columns.find(column => column.name === foundUnique.columnNames[0]);\n                if (uniqueColumn)\n                    uniqueColumn.isUnique = false;\n            }\n        }\n    }\n\n    /**\n     * Adds check constraint.\n     */\n    addCheckConstraint(checkConstraint: TableCheck): void {\n        this.checks.push(checkConstraint);\n    }\n\n    /**\n     * Removes check constraint.\n     */\n    removeCheckConstraint(removedCheck: TableCheck): void {\n        const foundCheck = this.checks.find(check => check.name === removedCheck.name);\n        if (foundCheck) {\n            this.checks.splice(this.checks.indexOf(foundCheck), 1);\n        }\n    }\n\n    /**\n     * Adds exclusion constraint.\n     */\n    addExclusionConstraint(exclusionConstraint: TableExclusion): void {\n        this.exclusions.push(exclusionConstraint);\n    }\n\n    /**\n     * Removes exclusion constraint.\n     */\n    removeExclusionConstraint(removedExclusion: TableExclusion): void {\n        const foundExclusion = this.exclusions.find(exclusion => exclusion.name === removedExclusion.name);\n        if (foundExclusion) {\n            this.exclusions.splice(this.exclusions.indexOf(foundExclusion), 1);\n        }\n    }\n\n    /**\n     * Adds foreign keys.\n     */\n    addForeignKey(foreignKey: TableForeignKey): void {\n        this.foreignKeys.push(foreignKey);\n    }\n\n    /**\n     * Removes foreign key.\n     */\n    removeForeignKey(removedForeignKey: TableForeignKey): void {\n        const fk = this.foreignKeys.find(foreignKey => foreignKey.name === removedForeignKey.name);\n        if (fk)\n            this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1);\n    }\n\n    /**\n     * Adds index.\n     */\n    addIndex(index: TableIndex, isMysql: boolean = false): void {\n        this.indices.push(index);\n\n        // in Mysql unique indices and unique constraints are the same thing\n        // if index is unique and have only one column, we mark this column as unique\n        if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n            const column = this.columns.find(c => c.name === index.columnNames[0]);\n            if (column)\n                column.isUnique = true;\n        }\n    }\n\n    /**\n     * Removes index.\n     */\n    removeIndex(tableIndex: TableIndex, isMysql: boolean = false): void {\n        const index = this.indices.find(index => index.name === tableIndex.name);\n        if (index) {\n            this.indices.splice(this.indices.indexOf(index), 1);\n\n            // in Mysql unique indices and unique constraints are the same thing\n            // if index is unique and have only one column, we move `unique` attribute from its column\n            if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n                const column = this.columns.find(c => c.name === index.columnNames[0]);\n                if (column)\n                    column.isUnique = this.indices.some(ind => ind.columnNames.length === 1 && ind.columnNames[0] === column.name && !!index.isUnique);\n            }\n        }\n    }\n\n    findColumnByName(name: string): TableColumn|undefined {\n        return this.columns.find(column => column.name === name);\n    }\n\n    /**\n     * Returns all column indices.\n     */\n    findColumnIndices(column: TableColumn): TableIndex[] {\n        return this.indices.filter(index => {\n           return !!index.columnNames.find(columnName => columnName === column.name);\n        });\n    }\n\n    /**\n     * Returns all column foreign keys.\n     */\n    findColumnForeignKeys(column: TableColumn): TableForeignKey[] {\n        return this.foreignKeys.filter(foreignKey => {\n            return !!foreignKey.columnNames.find(columnName => columnName === column.name);\n        });\n    }\n\n    /**\n     * Returns all column uniques.\n     */\n    findColumnUniques(column: TableColumn): TableUnique[] {\n        return this.uniques.filter(unique => {\n            return !!unique.columnNames.find(columnName => columnName === column.name);\n        });\n    }\n\n    /**\n     * Returns all column checks.\n     */\n    findColumnChecks(column: TableColumn): TableCheck[] {\n        return this.checks.filter(check => {\n            return !!check.columnNames!.find(columnName => columnName === column.name);\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates table from a given entity metadata.\n     */\n    static create(entityMetadata: EntityMetadata, driver: Driver): Table {\n        const options: TableOptions = {\n            name: driver.buildTableName(entityMetadata.tableName, entityMetadata.schema, entityMetadata.database),\n            engine: entityMetadata.engine,\n            columns: entityMetadata.columns\n                .filter(column => column)\n                .map(column => TableUtils.createTableColumnOptions(column, driver)),\n            indices: entityMetadata.indices\n                .filter(index => index.synchronize === true)\n                .map(index => TableIndex.create(index)),\n            uniques: entityMetadata.uniques.map(unique => TableUnique.create(unique)),\n            checks: entityMetadata.checks.map(check => TableCheck.create(check)),\n            exclusions: entityMetadata.exclusions.map(exclusion => TableExclusion.create(exclusion)),\n        };\n\n        return new Table(options);\n    }\n\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","import {NamingStrategyInterface} from \"./NamingStrategyInterface\";\nimport {RandomGenerator} from \"../util/RandomGenerator\";\nimport {camelCase, snakeCase, titleCase} from \"../util/StringUtils\";\nimport {Table} from \"../schema-builder/table/Table\";\n\n/**\n * Naming strategy that is used by default.\n */\nexport class DefaultNamingStrategy implements NamingStrategyInterface {\n\n    /**\n     * Normalizes table name.\n     *\n     * @param targetName Name of the target entity that can be used to generate a table name.\n     * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\n     */\n    tableName(targetName: string, userSpecifiedName: string|undefined): string {\n        return userSpecifiedName ? userSpecifiedName : snakeCase(targetName);\n    }\n\n    /**\n     * Creates a table name for a junction table of a closure table.\n     *\n     * @param originalClosureTableName Name of the closure table which owns this junction table.\n     */\n    closureJunctionTableName(originalClosureTableName: string): string {\n        return originalClosureTableName + \"_closure\";\n    }\n\n    columnName(propertyName: string, customName: string, embeddedPrefixes: string[]): string {\n        const name = customName || propertyName;\n        \n        if (embeddedPrefixes.length)\n            return camelCase(embeddedPrefixes.join(\"_\")) + titleCase(name);\n\n        return name;\n    }\n\n    relationName(propertyName: string): string {\n        return propertyName;\n    }\n\n    primaryKeyName(tableOrName: Table|string, columnNames: string[]): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        return \"PK_\" + RandomGenerator.sha1(key).substr(0, 27);\n    }\n\n    uniqueConstraintName(tableOrName: Table|string, columnNames: string[]): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        return \"UQ_\" + RandomGenerator.sha1(key).substr(0, 27);\n    }\n\n    relationConstraintName(tableOrName: Table|string, columnNames: string[], where?: string): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        if (where)\n            key += `_${where}`;\n\n        return \"REL_\" + RandomGenerator.sha1(key).substr(0, 26);\n    }\n\n    defaultConstraintName(tableOrName: Table|string, columnName: string): string {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${columnName}`;\n        return \"DF_\" + RandomGenerator.sha1(key).substr(0, 27);\n    }\n\n    foreignKeyName(tableOrName: Table|string, columnNames: string[], _referencedTablePath?: string, _referencedColumnNames?: string[]): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        return \"FK_\" + RandomGenerator.sha1(key).substr(0, 27);\n    }\n\n    indexName(tableOrName: Table|string, columnNames: string[], where?: string): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        if (where)\n            key += `_${where}`;\n\n        return \"IDX_\" + RandomGenerator.sha1(key).substr(0, 26);\n    }\n\n    checkConstraintName(tableOrName: Table|string, expression: string): string {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${expression}`;\n        return \"CHK_\" + RandomGenerator.sha1(key).substr(0, 26);\n    }\n\n    exclusionConstraintName(tableOrName: Table|string, expression: string): string {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${expression}`;\n        return \"XCL_\" + RandomGenerator.sha1(key).substr(0, 26);\n    }\n\n    joinColumnName(relationName: string, referencedColumnName: string): string {\n        return camelCase(relationName + \"_\" + referencedColumnName);\n    }\n\n    joinTableName(firstTableName: string,\n                  secondTableName: string,\n                  firstPropertyName: string,\n                  secondPropertyName: string): string {\n        return snakeCase(firstTableName + \"_\" + firstPropertyName.replace(/\\./gi, \"_\") + \"_\" + secondTableName);\n    }\n\n    joinTableColumnDuplicationPrefix(columnName: string, index: number): string {\n        return columnName + \"_\" + index;\n    }\n\n    joinTableColumnName(tableName: string, propertyName: string, columnName?: string): string {\n        return camelCase(tableName + \"_\" + (columnName ? columnName : propertyName));\n    }\n\n    joinTableInverseColumnName(tableName: string, propertyName: string, columnName?: string): string {\n        return this.joinTableColumnName(tableName, propertyName, columnName);\n    }\n\n    /**\n     * Adds globally set prefix to the table name.\n     * This method is executed no matter if prefix was set or not.\n     * Table name is either user's given table name, either name generated from entity target.\n     * Note that table name comes here already normalized by #tableName method.\n     */\n    prefixTableName(prefix: string, tableName: string): string {\n        return prefix + tableName;\n    }\n\n    eagerJoinRelationAlias(alias: string, propertyPath: string): string {\n        return alias + \"_\" + propertyPath.replace(\".\", \"_\");\n    }\n\n    nestedSetColumnNames = { left: \"nsleft\", right: \"nsright\" };\n    materializedPathColumnName = \"mpath\";\n}\n","/**\n * Thrown when consumer tries to execute operation allowed only if connection is opened.\n */\nexport class CannotExecuteNotConnectedError extends Error {\n    name = \"CannotExecuteNotConnectedError\";\n\n    constructor(connectionName: string) {\n        super();\n        Object.setPrototypeOf(this, CannotExecuteNotConnectedError.prototype);\n        this.message = `Cannot execute operation on \"${connectionName}\" connection because connection is not yet established.`;\n    }\n\n}","/**\n * Thrown when consumer tries to connect when he already connected.\n */\nexport class CannotConnectAlreadyConnectedError extends Error {\n    name = \"CannotConnectAlreadyConnectedError\";\n\n    constructor(connectionName: string) {\n        super();\n        Object.setPrototypeOf(this, CannotConnectAlreadyConnectedError.prototype);\n        this.message = `Cannot create a \"${connectionName}\" connection because connection to the database already established.`;\n    }\n\n}","import {EntityTarget} from \"../common/EntityTarget\";\nimport {EntitySchema} from \"../index\";\n\n/**\n */\nexport class EntityMetadataNotFoundError extends Error {\n    name = \"EntityMetadataNotFound\";\n\n    constructor(target: EntityTarget<any>) {\n        super();\n        Object.setPrototypeOf(this, EntityMetadataNotFoundError.prototype);\n        let targetName: string;\n        if (target instanceof EntitySchema) {\n            targetName = target.options.name;\n        } else if (typeof target === \"function\") {\n            targetName = target.name;\n        } else if (typeof target === \"object\" && \"name\" in target) {\n            targetName = target.name;\n        } else {\n            targetName = target;\n        }\n        this.message = `No metadata for \"${targetName}\" was found.`;\n    }\n\n}\n","import {MigrationInterface} from \"./MigrationInterface\";\n\n/**\n * Represents entity of the migration in the database.\n */\nexport class Migration {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Migration id.\n     * Indicates order of the executed migrations.\n     */\n    id: number|undefined;\n\n    /**\n     * Timestamp of the migration.\n     */\n    timestamp: number;\n\n    /**\n     * Name of the migration (class name).\n     */\n    name: string;\n\n    /**\n     * Migration instance that needs to be run.\n     */\n    instance?: MigrationInterface;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(id: number|undefined, timestamp: number, name: string, instance?: MigrationInterface) {\n        this.id = id;\n        this.timestamp = timestamp;\n        this.name = name;\n        this.instance = instance;\n    }\n\n}","import {Table} from \"../schema-builder/table/Table\";\nimport {Connection} from \"../connection/Connection\";\nimport {Migration} from \"./Migration\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {MssqlParameter} from \"../driver/sqlserver/MssqlParameter\";\nimport {SqlServerConnectionOptions} from \"../driver/sqlserver/SqlServerConnectionOptions\";\nimport {PostgresConnectionOptions} from \"../driver/postgres/PostgresConnectionOptions\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {MongoQueryRunner} from \"../driver/mongodb/MongoQueryRunner\";\n\n/**\n * Executes migrations: runs pending and reverts previously executed migrations.\n */\nexport class MigrationExecutor {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates how migrations should be run in transactions.\n     *   all: all migrations are run in a single transaction\n     *   none: all migrations are run without a transaction\n     *   each: each migration is run in a separate transaction\n     */\n    transaction: \"all\" | \"none\" | \"each\" = \"all\";\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    private readonly migrationsTable: string;\n    private readonly migrationsTableName: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection,\n                protected queryRunner?: QueryRunner) {\n\n        const options = <SqlServerConnectionOptions|PostgresConnectionOptions>this.connection.driver.options;\n        this.migrationsTableName = connection.options.migrationsTableName || \"migrations\";\n        this.migrationsTable = this.connection.driver.buildTableName(this.migrationsTableName, options.schema, options.database);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Tries to execute a single migration given.\n     */\n    public async executeMigration(migration: Migration): Promise<Migration> {\n        return this.withQueryRunner(async (queryRunner) => {\n            await this.createMigrationsTableIfNotExist(queryRunner);\n            await (migration.instance as any).up(queryRunner);\n            await this.insertExecutedMigration(queryRunner, migration);\n\n            return migration;\n        });\n    }\n\n    /**\n     * Returns an array of all migrations.\n     */\n    public async getAllMigrations(): Promise<Migration[]> {\n        return Promise.resolve(this.getMigrations());\n    }\n\n    /**\n     * Returns an array of all executed migrations.\n     */\n    public async getExecutedMigrations(): Promise<Migration[]> {\n        return this.withQueryRunner(async queryRunner => {\n            await this.createMigrationsTableIfNotExist(queryRunner);\n\n            return await this.loadExecutedMigrations(queryRunner);\n        });\n    }\n\n    /**\n     * Returns an array of all pending migrations.\n     */\n    public async getPendingMigrations(): Promise<Migration[]> {\n        const allMigrations = await this.getAllMigrations();\n        const executedMigrations = await this.getExecutedMigrations();\n\n        return allMigrations.filter(migration =>\n            !executedMigrations.find(\n                executedMigration =>\n                    executedMigration.name === migration.name\n            )\n        );\n    }\n\n    /**\n     * Inserts an executed migration.\n     */\n    public insertMigration(migration: Migration): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this.withQueryRunner(queryRunner => {\n                this.insertExecutedMigration(queryRunner, migration)\n                    .then(resolve)\n                    .catch(reject);\n            });\n        });\n    }\n\n    /**\n     * Deletes an executed migration.\n     */\n    public deleteMigration(migration: Migration): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this.withQueryRunner(queryRunner => {\n                this.deleteExecutedMigration(queryRunner, migration)\n                    .then(resolve)\n                    .catch(reject);\n            });\n        });\n    }\n\n    /**\n     * Lists all migrations and whether they have been executed or not\n     * returns true if there are unapplied migrations\n     */\n    async showMigrations(): Promise<boolean> {\n        let hasUnappliedMigrations = false;\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n        // create migrations table if its not created yet\n        await this.createMigrationsTableIfNotExist(queryRunner);\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations(queryRunner);\n\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations();\n\n        for (const migration of allMigrations) {\n            const executedMigration = executedMigrations.find(executedMigration => executedMigration.name === migration.name);\n\n            if (executedMigration) {\n                this.connection.logger.logSchemaBuild(` [X] ${migration.name}`);\n            } else {\n                hasUnappliedMigrations = true;\n                this.connection.logger.logSchemaBuild(` [ ] ${migration.name}`);\n            }\n        }\n\n        // if query runner was created by us then release it\n        if (!this.queryRunner) {\n            await queryRunner.release();\n        }\n\n        return hasUnappliedMigrations;\n    }\n\n    /**\n     * Executes all pending migrations. Pending migrations are migrations that are not yet executed,\n     * thus not saved in the database.\n     */\n    async executePendingMigrations(): Promise<Migration[]> {\n\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n        // create migrations table if its not created yet\n        await this.createMigrationsTableIfNotExist(queryRunner);\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations(queryRunner);\n\n        // get the time when last migration was executed\n        let lastTimeExecutedMigration = this.getLatestTimestampMigration(executedMigrations);\n\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations();\n\n        // variable to store all migrations we did successefuly\n        const successMigrations: Migration[] = [];\n\n        // find all migrations that needs to be executed\n        const pendingMigrations = allMigrations.filter(migration => {\n            // check if we already have executed migration\n            const executedMigration = executedMigrations.find(executedMigration => executedMigration.name === migration.name);\n            if (executedMigration)\n                return false;\n\n            // migration is new and not executed. now check if its timestamp is correct\n            // if (lastTimeExecutedMigration && migration.timestamp < lastTimeExecutedMigration.timestamp)\n            //     throw new Error(`New migration found: ${migration.name}, however this migration's timestamp is not valid. Migration's timestamp should not be older then migrations already executed in the database.`);\n\n            // every check is passed means that migration was not run yet and we need to run it\n            return true;\n        });\n\n        // if no migrations are pending then nothing to do here\n        if (!pendingMigrations.length) {\n            this.connection.logger.logSchemaBuild(`No migrations are pending`);\n            // if query runner was created by us then release it\n            if (!this.queryRunner)\n                await queryRunner.release();\n            return [];\n        }\n\n        // log information about migration execution\n        this.connection.logger.logSchemaBuild(`${executedMigrations.length} migrations are already loaded in the database.`);\n        this.connection.logger.logSchemaBuild(`${allMigrations.length} migrations were found in the source code.`);\n        if (lastTimeExecutedMigration)\n            this.connection.logger.logSchemaBuild(`${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp).toString()}.`);\n        this.connection.logger.logSchemaBuild(`${pendingMigrations.length} migrations are new migrations that needs to be executed.`);\n\n        // start transaction if its not started yet\n        let transactionStartedByUs = false;\n        if (this.transaction === \"all\" && !queryRunner.isTransactionActive) {\n            await queryRunner.startTransaction();\n            transactionStartedByUs = true;\n        }\n\n        // run all pending migrations in a sequence\n        try {\n            for (const migration of pendingMigrations) {\n                if (this.transaction === \"each\" && !queryRunner.isTransactionActive) {\n                    await queryRunner.startTransaction();\n                    transactionStartedByUs = true;\n                }\n\n                await migration.instance!.up(queryRunner)\n                    .then(async () => { // now when migration is executed we need to insert record about it into the database\n                        await this.insertExecutedMigration(queryRunner, migration);\n                        // commit transaction if we started it\n                        if (this.transaction === \"each\" && transactionStartedByUs)\n                            await queryRunner.commitTransaction();\n                    })\n                    .then(() => { // informative log about migration success\n                        successMigrations.push(migration);\n                        this.connection.logger.logSchemaBuild(`Migration ${migration.name} has been executed successfully.`);\n                    });\n            }\n\n            // commit transaction if we started it\n            if (this.transaction === \"all\" && transactionStartedByUs)\n                await queryRunner.commitTransaction();\n\n        } catch (err) { // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try { // we throw original error even if rollback thrown an error\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n\n            throw err;\n\n        } finally {\n\n            // if query runner was created by us then release it\n            if (!this.queryRunner)\n                await queryRunner.release();\n        }\n        return successMigrations;\n\n    }\n\n    /**\n     * Reverts last migration that were run.\n     */\n    async undoLastMigration(): Promise<void> {\n\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n\n        // create migrations table if its not created yet\n        await this.createMigrationsTableIfNotExist(queryRunner);\n\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations(queryRunner);\n\n        // get the time when last migration was executed\n        let lastTimeExecutedMigration = this.getLatestExecutedMigration(executedMigrations);\n\n        // if no migrations found in the database then nothing to revert\n        if (!lastTimeExecutedMigration) {\n            this.connection.logger.logSchemaBuild(`No migrations was found in the database. Nothing to revert!`);\n            return;\n        }\n\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations();\n\n        // find the instance of the migration we need to remove\n        const migrationToRevert = allMigrations.find(migration => migration.name === lastTimeExecutedMigration!.name);\n\n        // if no migrations found in the database then nothing to revert\n        if (!migrationToRevert)\n            throw new Error(`No migration ${lastTimeExecutedMigration.name} was found in the source code. Make sure you have this migration in your codebase and its included in the connection options.`);\n\n        // log information about migration execution\n        this.connection.logger.logSchemaBuild(`${executedMigrations.length} migrations are already loaded in the database.`);\n        this.connection.logger.logSchemaBuild(`${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp).toString()}.`);\n        this.connection.logger.logSchemaBuild(`Now reverting it...`);\n\n        // start transaction if its not started yet\n        let transactionStartedByUs = false;\n        if ((this.transaction !== \"none\") && !queryRunner.isTransactionActive) {\n            await queryRunner.startTransaction();\n            transactionStartedByUs = true;\n        }\n\n        try {\n            await migrationToRevert.instance!.down(queryRunner);\n            await this.deleteExecutedMigration(queryRunner, migrationToRevert);\n            this.connection.logger.logSchemaBuild(`Migration ${migrationToRevert.name} has been reverted successfully.`);\n\n            // commit transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.commitTransaction();\n\n        } catch (err) { // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try { // we throw original error even if rollback thrown an error\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n\n            throw err;\n\n        } finally {\n\n            // if query runner was created by us then release it\n            if (!this.queryRunner)\n                await queryRunner.release();\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates table \"migrations\" that will store information about executed migrations.\n     */\n    protected async createMigrationsTableIfNotExist(queryRunner: QueryRunner): Promise<void> {\n        // If driver is mongo no need to create\n        if (this.connection.driver instanceof MongoDriver) {\n            return;\n        }\n        const tableExist = await queryRunner.hasTable(this.migrationsTable); // todo: table name should be configurable\n        if (!tableExist) {\n            await queryRunner.createTable(new Table(\n                {\n                    name: this.migrationsTable,\n                    columns: [\n                        {\n                            name: \"id\",\n                            type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.migrationId}),\n                            isGenerated: true,\n                            generationStrategy: \"increment\",\n                            isPrimary: true,\n                            isNullable: false\n                        },\n                        {\n                            name: \"timestamp\",\n                            type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.migrationTimestamp}),\n                            isPrimary: false,\n                            isNullable: false\n                        },\n                        {\n                            name: \"name\",\n                            type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.migrationName}),\n                            isNullable: false\n                        },\n                    ]\n                },\n            ));\n        }\n    }\n\n    /**\n     * Loads all migrations that were executed and saved into the database (sorts by id).\n     */\n    protected async loadExecutedMigrations(queryRunner: QueryRunner): Promise<Migration[]> {\n        if (this.connection.driver instanceof MongoDriver) {\n            const mongoRunner = queryRunner as MongoQueryRunner;\n            return await mongoRunner.databaseConnection\n            .db(this.connection.driver.database!)\n            .collection(this.migrationsTableName)\n            .find<Migration>()\n            .sort({\"_id\": -1})\n            .toArray();\n        } else {\n            const migrationsRaw: ObjectLiteral[] = await this.connection.manager\n            .createQueryBuilder(queryRunner)\n            .select()\n            .orderBy(this.connection.driver.escape(\"id\"), \"DESC\")\n            .from(this.migrationsTable, this.migrationsTableName)\n            .getRawMany();\n            return migrationsRaw.map(migrationRaw => {\n                return new Migration(parseInt(migrationRaw[\"id\"]), parseInt(migrationRaw[\"timestamp\"]), migrationRaw[\"name\"]);\n            });\n        }\n    }\n\n    /**\n     * Gets all migrations that setup for this connection.\n     */\n    protected getMigrations(): Migration[] {\n        const migrations = this.connection.migrations.map(migration => {\n            const migrationClassName = migration.name || (migration.constructor as any).name;\n            const migrationTimestamp = parseInt(migrationClassName.substr(-13), 10);\n            if (!migrationTimestamp || isNaN(migrationTimestamp)) {\n                throw new Error(`${migrationClassName} migration name is wrong. Migration class name should have a JavaScript timestamp appended.`);\n            }\n\n            return new Migration(undefined, migrationTimestamp, migrationClassName, migration);\n        });\n\n        this.checkForDuplicateMigrations(migrations);\n\n        // sort them by timestamp\n        return migrations.sort((a, b) => a.timestamp - b.timestamp);\n    }\n\n    protected checkForDuplicateMigrations(migrations: Migration[]) {\n        const migrationNames = migrations.map(migration => migration.name);\n        const duplicates = Array.from(new Set(migrationNames.filter((migrationName, index) => migrationNames.indexOf(migrationName) < index)));\n        if (duplicates.length > 0) {\n            throw Error(`Duplicate migrations: ${duplicates.join(\", \")}`);\n        }\n    }\n\n    /**\n     * Finds the latest migration (sorts by timestamp) in the given array of migrations.\n     */\n    protected getLatestTimestampMigration(migrations: Migration[]): Migration|undefined {\n        const sortedMigrations = migrations.map(migration => migration).sort((a, b) => (a.timestamp - b.timestamp) * -1);\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\n    }\n\n    /**\n     * Finds the latest migration in the given array of migrations.\n     * PRE: Migration array must be sorted by descending id.\n     */\n    protected getLatestExecutedMigration(sortedMigrations: Migration[]): Migration|undefined {\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\n    }\n\n    /**\n     * Inserts new executed migration's data into migrations table.\n     */\n    protected async insertExecutedMigration(queryRunner: QueryRunner, migration: Migration): Promise<void> {\n        const values: ObjectLiteral = {};\n        if (this.connection.driver instanceof SqlServerDriver) {\n            values[\"timestamp\"] = new MssqlParameter(migration.timestamp, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }) as any);\n            values[\"name\"] = new MssqlParameter(migration.name, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }) as any);\n        } else {\n            values[\"timestamp\"] = migration.timestamp;\n            values[\"name\"] = migration.name;\n        }\n        if (this.connection.driver instanceof MongoDriver) {\n            const mongoRunner = queryRunner as MongoQueryRunner;\n            await mongoRunner.databaseConnection.db(this.connection.driver.database!).collection(this.migrationsTableName).insert(values);\n        } else {\n            const qb = queryRunner.manager.createQueryBuilder();\n            await qb.insert()\n                .into(this.migrationsTable)\n                .values(values)\n                .execute();\n        }\n    }\n\n    /**\n     * Delete previously executed migration's data from the migrations table.\n     */\n    protected async deleteExecutedMigration(queryRunner: QueryRunner, migration: Migration): Promise<void> {\n\n        const conditions: ObjectLiteral = {};\n        if (this.connection.driver instanceof SqlServerDriver) {\n            conditions[\"timestamp\"] = new MssqlParameter(migration.timestamp, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }) as any);\n            conditions[\"name\"] = new MssqlParameter(migration.name, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }) as any);\n        } else {\n            conditions[\"timestamp\"] = migration.timestamp;\n            conditions[\"name\"] = migration.name;\n        }\n\n        if (this.connection.driver instanceof MongoDriver) {\n            const mongoRunner = queryRunner as MongoQueryRunner;\n            await mongoRunner.databaseConnection.db(this.connection.driver.database!).collection(this.migrationsTableName).deleteOne(conditions);\n        } else {\n            const qb = queryRunner.manager.createQueryBuilder();\n            await qb.delete()\n                .from(this.migrationsTable)\n                .where(`${qb.escape(\"timestamp\")} = :timestamp`)\n                .andWhere(`${qb.escape(\"name\")} = :name`)\n                .setParameters(conditions)\n                .execute();\n        }\n\n    }\n\n    protected async withQueryRunner<T extends any>(callback: (queryRunner: QueryRunner) => T) {\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n\n        try {\n            return callback(queryRunner);\n        } finally {\n            if (!this.queryRunner) {\n                await queryRunner.release();\n            }\n        }\n    }\n}\n","import {EntityMetadata} from \"../metadata/EntityMetadata\";\n\n/**\n */\nexport class MissingPrimaryColumnError extends Error {\n    name = \"MissingPrimaryColumnError\";\n\n    constructor(entityMetadata: EntityMetadata) {\n        super();\n        Object.setPrototypeOf(this, MissingPrimaryColumnError.prototype);\n        this.message = `Entity \"${entityMetadata.name}\" does not have a primary column. Primary column is required to ` +\n            `have in all your entities. Use @PrimaryColumn decorator to add a primary column to your entity.`;\n    }\n\n}","/**\n * Thrown when circular relations detected with nullable set to false.\n */\nexport class CircularRelationsError extends Error {\n    name = \"CircularRelationsError\";\n\n    constructor(path: string) {\n        super();\n        Object.setPrototypeOf(this, CircularRelationsError.prototype);\n        this.message = `Circular relations detected: ${path}. To resolve this issue you need to set nullable: true somewhere in this dependency structure.`;\n    }\n\n}\n","/**\n * This source code is from https://github.com/jriecken/dependency-graph\n * Just added \"any\" types here, wrapper everything into exported class.\n * We cant use a package itself because we want to package \"everything-in-it\" for the frontend users of TypeORM.\n */\n\n/**\n * A simple dependency graph\n */\n\n/**\n * Helper for creating a Depth-First-Search on\n * a set of edges.\n *\n * Detects cycles and throws an Error if one is detected.\n *\n * @param edges The set of edges to DFS through\n * @param leavesOnly Whether to only return \"leaf\" nodes (ones who have no edges)\n * @param result An array in which the results will be populated\n */\nfunction createDFS(edges: any, leavesOnly: any, result: any) {\n    let currentPath: any[] = [];\n    let visited: any = {};\n    return function DFS(currentNode: any) {\n        visited[currentNode] = true;\n        currentPath.push(currentNode);\n        edges[currentNode].forEach(function (node: any) {\n            if (!visited[node]) {\n                DFS(node);\n            } else if (currentPath.indexOf(node) >= 0) {\n                currentPath.push(node);\n                throw new Error(`Dependency Cycle Found: ${currentPath.join(\" -> \")}`);\n            }\n        });\n        currentPath.pop();\n        if ((!leavesOnly || edges[currentNode].length === 0) && result.indexOf(currentNode) === -1) {\n            result.push(currentNode);\n        }\n    };\n}\n\n\nexport class DepGraph {\n    nodes: any = {};\n    outgoingEdges: any = {}; // Node -> [Dependency Node]\n    incomingEdges: any = {}; // Node -> [Dependant Node]\n\n    /**\n     * Add a node to the dependency graph. If a node already exists, this method will do nothing.\n     */\n    addNode(node: any, data?: any) {\n        if (!this.hasNode(node)) {\n            // Checking the arguments length allows the user to add a node with undefined data\n            if (arguments.length === 2) {\n                this.nodes[node] = data;\n            } else {\n                this.nodes[node] = node;\n            }\n            this.outgoingEdges[node] = [];\n            this.incomingEdges[node] = [];\n        }\n    }\n\n    /**\n     * Remove a node from the dependency graph. If a node does not exist, this method will do nothing.\n     */\n    removeNode(node: any) {\n        if (this.hasNode(node)) {\n            delete this.nodes[node];\n            delete this.outgoingEdges[node];\n            delete this.incomingEdges[node];\n            [this.incomingEdges, this.outgoingEdges].forEach(function (edgeList) {\n                Object.keys(edgeList).forEach(function (key: any) {\n                    let idx = edgeList[key].indexOf(node);\n                    if (idx >= 0) {\n                        edgeList[key].splice(idx, 1);\n                    }\n                }, this);\n            });\n        }\n    }\n\n    /**\n     * Check if a node exists in the graph\n     */\n    hasNode(node: any) {\n        return this.nodes.hasOwnProperty(node);\n    }\n\n    /**\n     * Get the data associated with a node name\n     */\n    getNodeData(node: any) {\n        if (this.hasNode(node)) {\n            return this.nodes[node];\n        } else {\n            throw new Error(`Node does not exist: ${node}`);\n        }\n    }\n\n    /**\n     * Set the associated data for a given node name. If the node does not exist, this method will throw an error\n     */\n    setNodeData(node: any, data: any) {\n        if (this.hasNode(node)) {\n            this.nodes[node] = data;\n        } else {\n            throw new Error(`Node does not exist: ${node}`);\n        }\n    }\n\n    /**\n     * Add a dependency between two nodes. If either of the nodes does not exist,\n     * an Error will be thrown.\n     */\n    addDependency(from: any, to: any) {\n        if (!this.hasNode(from)) {\n            throw new Error(`Node does not exist: ${from}`);\n        }\n        if (!this.hasNode(to)) {\n            throw new Error(`Node does not exist: ${to}`);\n        }\n        if (this.outgoingEdges[from].indexOf(to) === -1) {\n            this.outgoingEdges[from].push(to);\n        }\n        if (this.incomingEdges[to].indexOf(from) === -1) {\n            this.incomingEdges[to].push(from);\n        }\n        return true;\n    }\n\n    /**\n     * Remove a dependency between two nodes.\n     */\n    removeDependency(from: any, to: any) {\n        let idx: any;\n        if (this.hasNode(from)) {\n            idx = this.outgoingEdges[from].indexOf(to);\n            if (idx >= 0) {\n                this.outgoingEdges[from].splice(idx, 1);\n            }\n        }\n\n        if (this.hasNode(to)) {\n            idx = this.incomingEdges[to].indexOf(from);\n            if (idx >= 0) {\n                this.incomingEdges[to].splice(idx, 1);\n            }\n        }\n    }\n\n    /**\n     * Get an array containing the nodes that the specified node depends on (transitively).\n     *\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\n     *\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned\n     * in the array.\n     */\n    dependenciesOf(node: any, leavesOnly: any) {\n        if (this.hasNode(node)) {\n            let result: any[] = [];\n            let DFS = createDFS(this.outgoingEdges, leavesOnly, result);\n            DFS(node);\n            let idx = result.indexOf(node);\n            if (idx >= 0) {\n                result.splice(idx, 1);\n            }\n            return result;\n        }\n        else {\n            throw new Error(`Node does not exist: ${node}`);\n        }\n    }\n\n    /**\n     * get an array containing the nodes that depend on the specified node (transitively).\n     *\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\n     *\n     * If `leavesOnly` is true, only nodes that do not have any dependants will be returned in the array.\n     */\n    dependantsOf(node: any, leavesOnly: any) {\n        if (this.hasNode(node)) {\n            let result: any[] = [];\n            let DFS = createDFS(this.incomingEdges, leavesOnly, result);\n            DFS(node);\n            let idx = result.indexOf(node);\n            if (idx >= 0) {\n                result.splice(idx, 1);\n            }\n            return result;\n        } else {\n            throw new Error(`Node does not exist: ${node}`);\n        }\n    }\n\n    /**\n     * Construct the overall processing order for the dependency graph.\n     *\n     * Throws an Error if the graph has a cycle.\n     *\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned.\n     */\n    overallOrder(leavesOnly?: any) {\n        let self = this;\n        let result: any[] = [];\n        let keys = Object.keys(this.nodes);\n        if (keys.length === 0) {\n            return result; // Empty graph\n        } else {\n            // Look for cycles - we run the DFS starting at all the nodes in case there\n            // are several disconnected subgraphs inside this dependency graph.\n            let CycleDFS = createDFS(this.outgoingEdges, false, []);\n            keys.forEach(function (n: any) {\n                CycleDFS(n);\n            });\n\n            let DFS = createDFS(this.outgoingEdges, leavesOnly, result);\n            // Find all potential starting points (nodes with nothing depending on them) an\n            // run a DFS starting at these points to get the order\n            keys.filter(function (node) {\n                return self.incomingEdges[node].length === 0;\n            }).forEach(function (n) {\n                DFS(n);\n            });\n\n            return result;\n        }\n    }\n\n}","import {ColumnType} from \"../driver/types/ColumnTypes\";\nimport {DatabaseType} from \"../driver/types/DatabaseType\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\n\nexport class DataTypeNotSupportedError extends Error {\n    name = \"DataTypeNotSupportedError\";\n\n    constructor(column: ColumnMetadata, dataType: ColumnType, database?: DatabaseType) {\n        super();\n        Object.setPrototypeOf(this, DataTypeNotSupportedError.prototype);\n        const type = typeof dataType === \"string\" ? dataType : (<any>dataType).name;\n        this.message = `Data type \"${type}\" in \"${column.entityMetadata.targetName}.${column.propertyName}\" is not supported by \"${database}\" database.`;\n    }\n\n}","/**\n * Thrown when some option is not set in the connection options.\n */\nexport class NoConnectionOptionError extends Error {\n\n    constructor(optionName: string) {\n        super();\n        Object.setPrototypeOf(this, NoConnectionOptionError.prototype);\n        this.message = `Option \"${optionName}\" is not set in your connection options, please define \"${optionName}\" option in your connection options or ormconfig.json`;\n    }\n\n}","import {RelationMetadata} from \"../metadata/RelationMetadata\";\n\n/**\n * Thrown when relation has array initialized which is forbidden my ORM.\n *\n * @see https://github.com/typeorm/typeorm/issues/1319\n * @see http://typeorm.io/#/relations-faq/avoid-relation-property-initializers\n */\nexport class InitializedRelationError extends Error {\n\n    constructor(relation: RelationMetadata) {\n        super();\n        Object.setPrototypeOf(this, InitializedRelationError.prototype);\n        this.message = `Array initializations are not allowed in entity relations. ` +\n                        `Please remove array initialization (= []) from \"${relation.entityMetadata.targetName}#${relation.propertyPath}\". ` +\n                        `This is ORM requirement to make relations to work properly. Refer docs for more information.`;\n    }\n\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {MissingPrimaryColumnError} from \"../error/MissingPrimaryColumnError\";\nimport {CircularRelationsError} from \"../error/CircularRelationsError\";\nimport {DepGraph} from \"../util/DepGraph\";\nimport {Driver} from \"../driver/Driver\";\nimport {DataTypeNotSupportedError} from \"../error/DataTypeNotSupportedError\";\nimport {ColumnType} from \"../driver/types/ColumnTypes\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {NoConnectionOptionError} from \"../error/NoConnectionOptionError\";\nimport {InitializedRelationError} from \"../error/InitializedRelationError\";\nimport {AuroraDataApiDriver} from \"../driver/aurora-data-api/AuroraDataApiDriver\";\n\n/// todo: add check if there are multiple tables with the same name\n/// todo: add checks when generated column / table names are too long for the specific driver\n// todo: type in function validation, inverse side function validation\n// todo: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: check if multiple tree parent metadatas in validator\n// todo: tree decorators can be used only on closure table (validation)\n// todo: throw error if parent tree metadata was not specified in a closure table\n\n// todo: MetadataArgsStorage: type in function validation, inverse side function validation\n// todo: MetadataArgsStorage: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: MetadataArgsStorage: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: MetadataArgsStorage: check for duplicate targets too since this check has been removed too\n// todo: check if relation decorator contains primary: true and nullable: true\n// todo: check column length, precision. scale\n// todo: MySQL index can be unique or spatial or fulltext\n\n/**\n * Validates built entity metadatas.\n */\nexport class EntityMetadataValidator {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Validates all given entity metadatas.\n     */\n    validateMany(entityMetadatas: EntityMetadata[], driver: Driver) {\n        entityMetadatas.forEach(entityMetadata => this.validate(entityMetadata, entityMetadatas, driver));\n        this.validateDependencies(entityMetadatas);\n        this.validateEagerRelations(entityMetadatas);\n    }\n\n    /**\n     * Validates given entity metadata.\n     */\n    validate(entityMetadata: EntityMetadata, allEntityMetadatas: EntityMetadata[], driver: Driver) {\n\n        // check if table metadata has an id\n        if (!entityMetadata.primaryColumns.length && !entityMetadata.isJunction)\n            throw new MissingPrimaryColumnError(entityMetadata);\n\n        // validate if table is using inheritance it has a discriminator\n        // also validate if discriminator values are not empty and not repeated\n        if (entityMetadata.inheritancePattern === \"STI\" || entityMetadata.tableType === \"entity-child\") {\n            if (!entityMetadata.discriminatorColumn)\n                throw new Error(`Entity ${entityMetadata.name} using single-table inheritance, it should also have a discriminator column. Did you forget to put discriminator column options?`);\n\n            if (typeof entityMetadata.discriminatorValue === \"undefined\")\n                throw new Error(`Entity ${entityMetadata.name} has an undefined discriminator value. Discriminator value should be defined.`);\n\n            const sameDiscriminatorValueEntityMetadata = allEntityMetadatas.find(metadata => {\n                return metadata !== entityMetadata\n                    && (metadata.inheritancePattern === \"STI\" || metadata.tableType === \"entity-child\")\n                    && metadata.discriminatorValue === entityMetadata.discriminatorValue\n                    && metadata.inheritanceTree.some(parent => entityMetadata.inheritanceTree.indexOf(parent) !== -1);\n            });\n            if (sameDiscriminatorValueEntityMetadata)\n                throw new Error(`Entities ${entityMetadata.name} and ${sameDiscriminatorValueEntityMetadata.name} have the same discriminator values. Make sure they are different while using the @ChildEntity decorator.`);\n        }\n\n        entityMetadata.relationCounts.forEach(relationCount => {\n            if (relationCount.relation.isManyToOne || relationCount.relation.isOneToOne)\n                throw new Error(`Relation count can not be implemented on ManyToOne or OneToOne relations.`);\n        });\n\n        if (!(driver instanceof MongoDriver)) {\n            entityMetadata.columns.forEach(column => {\n                const normalizedColumn = driver.normalizeType(column) as ColumnType;\n                if (driver.supportedDataTypes.indexOf(normalizedColumn) === -1)\n                    throw new DataTypeNotSupportedError(column, normalizedColumn, driver.options.type);\n                if (column.length && driver.withLengthColumnTypes.indexOf(normalizedColumn) === -1)\n                    throw new Error(`Column ${column.propertyName} of Entity ${entityMetadata.name} does not support length property.`);\n            });\n        }\n\n        if (driver instanceof MysqlDriver || driver instanceof AuroraDataApiDriver) {\n            const generatedColumns = entityMetadata.columns.filter(column => column.isGenerated && column.generationStrategy !== \"uuid\");\n            if (generatedColumns.length > 1)\n                throw new Error(`Error in ${entityMetadata.name} entity. There can be only one auto-increment column in MySql table.`);\n        }\n\n        // for mysql we are able to not define a default selected database, instead all entities can have their database\n        // defined in their decorators. To make everything work either all entities must have database define and we\n        // can live without database set in the connection options, either database in the connection options must be set\n        if (driver instanceof MysqlDriver) {\n            const metadatasWithDatabase = allEntityMetadatas.filter(metadata => metadata.database);\n            if (metadatasWithDatabase.length === 0 && !driver.database)\n                throw new NoConnectionOptionError(\"database\");\n        }\n\n        if (driver instanceof SqlServerDriver) {\n            const charsetColumns = entityMetadata.columns.filter(column => column.charset);\n            if (charsetColumns.length > 1)\n                throw new Error(`Character set specifying is not supported in Sql Server`);\n        }\n\n        // check if relations are all without initialized properties\n        const entityInstance = entityMetadata.create();\n        entityMetadata.relations.forEach(relation => {\n            if (relation.isManyToMany || relation.isOneToMany) {\n\n                // we skip relations for which persistence is disabled since initialization in them cannot harm somehow\n                if (relation.persistenceEnabled === false)\n                    return;\n\n                // get entity relation value and check if its an array\n                const relationInitializedValue = relation.getEntityValue(entityInstance);\n                if (Array.isArray(relationInitializedValue))\n                    throw new InitializedRelationError(relation);\n            }\n        });\n\n        // validate relations\n        entityMetadata.relations.forEach(relation => {\n\n            // check join tables:\n            // using JoinTable is possible only on one side of the many-to-many relation\n            // todo(dima): fix\n            // if (relation.joinTable) {\n            //     if (!relation.isManyToMany)\n            //         throw new UsingJoinTableIsNotAllowedError(entityMetadata, relation);\n\n            //     // if there is inverse side of the relation, then check if it does not have join table too\n            //     if (relation.hasInverseSide && relation.inverseRelation.joinTable)\n            //         throw new UsingJoinTableOnlyOnOneSideAllowedError(entityMetadata, relation);\n            // }\n\n            // check join columns:\n            // using JoinColumn is possible only on one side of the relation and on one-to-one, many-to-one relation types\n            // first check if relation is one-to-one or many-to-one\n            // todo(dima): fix\n            /*if (relation.joinColumn) {\n\n                // join column can be applied only on one-to-one and many-to-one relations\n                if (!relation.isOneToOne && !relation.isManyToOne)\n                    throw new UsingJoinColumnIsNotAllowedError(entityMetadata, relation);\n\n                // if there is inverse side of the relation, then check if it does not have join table too\n                if (relation.hasInverseSide && relation.inverseRelation.joinColumn && relation.isOneToOne)\n                    throw new UsingJoinColumnOnlyOnOneSideAllowedError(entityMetadata, relation);\n\n                // check if join column really has referenced column\n                if (relation.joinColumn && !relation.joinColumn.referencedColumn)\n                    throw new Error(`Join column does not have referenced column set`);\n\n            }\n\n            // if its a one-to-one relation and JoinColumn is missing on both sides of the relation\n            // or its one-side relation without JoinColumn we should give an error\n            if (!relation.joinColumn && relation.isOneToOne && (!relation.hasInverseSide || !relation.inverseRelation.joinColumn))\n                throw new MissingJoinColumnError(entityMetadata, relation);*/\n\n            // if its a many-to-many relation and JoinTable is missing on both sides of the relation\n            // or its one-side relation without JoinTable we should give an error\n            // todo(dima): fix it\n            // if (!relation.joinTable && relation.isManyToMany && (!relation.hasInverseSide || !relation.inverseRelation.joinTable))\n            //     throw new MissingJoinTableError(entityMetadata, relation);\n\n\n            // todo: validate if its one-to-one and side which does not have join column MUST have inverse side\n            // todo: validate if its many-to-many and side which does not have join table MUST have inverse side\n            // todo: if there is a relation, and inverse side is specified only on one side, shall we give error\n            // todo: with message like: \"Inverse side is specified only on one side of the relationship. Specify on other side too to prevent confusion\".\n            // todo: add validation if there two entities with the same target, and show error message with description of the problem (maybe file was renamed/moved but left in output directory)\n            // todo: check if there are multiple columns on the same column applied.\n            // todo: check column type if is missing in relational databases (throw new Error(`Column type of ${type} cannot be determined.`);)\n            // todo: include driver-specific checks. for example in mongodb empty prefixes are not allowed\n            // todo: if multiple columns with same name - throw exception, including cases when columns are in embeds with same prefixes or without prefix at all\n            // todo: if multiple primary key used, at least one of them must be unique or @Index decorator must be set on entity\n            // todo: check if entity with duplicate names, some decorators exist\n\n\n        });\n\n        // make sure cascade remove is not set for both sides of relationships (can be set in OneToOne decorators)\n        entityMetadata.relations.forEach(relation => {\n            const isCircularCascadeRemove = relation.isCascadeRemove && relation.inverseRelation && relation.inverseRelation!.isCascadeRemove;\n            if (isCircularCascadeRemove)\n                throw new Error(`Relation ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseRelation!.entityMetadata.name}#${relation.inverseRelation!.propertyName} both has cascade remove set. ` +\n                    `This may lead to unexpected circular removals. Please set cascade remove only from one side of relationship.`);\n        }); // todo: maybe better just deny removal from one to one relation without join column?\n\n        entityMetadata.eagerRelations.forEach(relation => {\n\n        });\n    }\n\n    /**\n     * Validates dependencies of the entity metadatas.\n     */\n    protected validateDependencies(entityMetadatas: EntityMetadata[]) {\n\n        const graph = new DepGraph();\n        entityMetadatas.forEach(entityMetadata => {\n            graph.addNode(entityMetadata.name);\n        });\n        entityMetadatas.forEach(entityMetadata => {\n            entityMetadata.relationsWithJoinColumns\n                .filter(relation => !relation.isNullable)\n                .forEach(relation => {\n                    graph.addDependency(entityMetadata.name, relation.inverseEntityMetadata.name);\n                });\n        });\n        try {\n            graph.overallOrder();\n\n        } catch (err) {\n            throw new CircularRelationsError(err.toString().replace(\"Error: Dependency Cycle Found: \", \"\"));\n        }\n    }\n\n    /**\n     * Validates eager relations to prevent circular dependency in them.\n     */\n    protected validateEagerRelations(entityMetadatas: EntityMetadata[]) {\n        entityMetadatas.forEach(entityMetadata => {\n            entityMetadata.eagerRelations.forEach(relation => {\n                if (relation.inverseRelation && relation.inverseRelation.isEager)\n                    throw new Error(`Circular eager relations are disallowed. ` +\n                        `${entityMetadata.targetName}#${relation.propertyPath} contains \"eager: true\", and its inverse side ` +\n                        `${relation.inverseEntityMetadata.targetName}#${relation.inverseRelation.propertyPath} contains \"eager: true\" as well.` +\n                        ` Remove \"eager: true\" from one side of the relation.`);\n            });\n        });\n    }\n\n}\n","/**\n * Thrown when consumer tries to use query runner from query runner provider after it was released.\n */\nexport class QueryRunnerProviderAlreadyReleasedError extends Error {\n    name = \"QueryRunnerProviderAlreadyReleasedError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, QueryRunnerProviderAlreadyReleasedError.prototype);\n        this.message = `Database connection provided by a query runner was already released, cannot continue to use its querying methods anymore.`;\n    }\n\n}","/**\n * Thrown when consumer tries to release entity manager that does not use single database connection.\n */\nexport class NoNeedToReleaseEntityManagerError extends Error {\n    name = \"NoNeedToReleaseEntityManagerError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, NoNeedToReleaseEntityManagerError.prototype);\n        this.message = `Entity manager is not using single database connection and cannot be released. ` +\n            `Only entity managers created by connection#createEntityManagerWithSingleDatabaseConnection ` +\n            `methods have a single database connection and they should be released.`;\n    }\n\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\nimport {DeepPartial} from \"../common/DeepPartial\";\nimport {SaveOptions} from \"./SaveOptions\";\nimport {RemoveOptions} from \"./RemoveOptions\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {DeleteResult} from \"../query-builder/result/DeleteResult\";\nimport {UpdateResult} from \"../query-builder/result/UpdateResult\";\nimport {InsertResult} from \"../query-builder/result/InsertResult\";\nimport {QueryDeepPartialEntity} from \"../query-builder/QueryPartialEntity\";\nimport {ObjectID} from \"../driver/mongodb/typings\";\nimport {FindConditions} from \"../find-options/FindConditions\";\n\n/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\nexport class Repository<Entity extends ObjectLiteral> {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity Manager used by this repository.\n     */\n    readonly manager: EntityManager;\n\n    /**\n     * Entity metadata of the entity current repository manages.\n     */\n    readonly metadata: EntityMetadata;\n\n    /**\n     * Query runner provider used for this repository.\n     */\n    readonly queryRunner?: QueryRunner;\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder(alias?: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\n        return this.manager.createQueryBuilder<Entity>(this.metadata.target as any, alias || this.metadata.targetName, queryRunner || this.queryRunner);\n    }\n\n    /**\n     * Returns object that is managed by this repository.\n     * If this repository manages entity from schema,\n     * then it returns a name of that schema instead.\n     */\n    get target(): Function|string {\n        return this.metadata.target;\n    }\n\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    hasId(entity: Entity): boolean {\n        return this.manager.hasId(this.metadata.target, entity);\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: Entity): any {\n        return this.manager.getId(this.metadata.target, entity);\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    create(): Entity;\n\n    /**\n     * Creates new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that are present in entity schema.\n     */\n    create(entityLikeArray: DeepPartial<Entity>[]): Entity[];\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that are present in entity schema.\n     */\n    create(entityLike: DeepPartial<Entity>): Entity;\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create(plainEntityLikeOrPlainEntityLikes?: DeepPartial<Entity>|DeepPartial<Entity>[]): Entity|Entity[] {\n        return this.manager.create<any>(this.metadata.target as any, plainEntityLikeOrPlainEntityLikes as any);\n    }\n\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    merge(mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity {\n        return this.manager.merge(this.metadata.target as any, mergeIntoEntity, ...entityLikes);\n    }\n\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    preload(entityLike: DeepPartial<Entity>): Promise<Entity|undefined> {\n        return this.manager.preload(this.metadata.target as any, entityLike);\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(entities: T[], options: SaveOptions & { reload: false }): Promise<T[]>;\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(entities: T[], options?: SaveOptions): Promise<(T & Entity)[]>;\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(entity: T, options: SaveOptions & { reload: false }): Promise<T>;\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(entity: T, options?: SaveOptions): Promise<T & Entity>;\n\n    /**\n     * Saves one or many given entities.\n     */\n    save<T extends DeepPartial<Entity>>(entityOrEntities: T|T[], options?: SaveOptions): Promise<T|T[]> {\n        return this.manager.save<Entity, T>(this.metadata.target as any, entityOrEntities as any, options);\n    }\n\n    /**\n     * Removes a given entities from the database.\n     */\n    remove(entities: Entity[], options?: RemoveOptions): Promise<Entity[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove(entity: Entity, options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes one or many given entities.\n     */\n    remove(entityOrEntities: Entity|Entity[], options?: RemoveOptions): Promise<Entity|Entity[]> {\n        return this.manager.remove(this.metadata.target as any, entityOrEntities as any, options);\n    }\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<T extends DeepPartial<Entity>>(entities: T[], options: SaveOptions & { reload: false }): Promise<T[]>;\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<T extends DeepPartial<Entity>>(entities: T[], options?: SaveOptions): Promise<(T & Entity)[]>;\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<T extends DeepPartial<Entity>>(entity: T, options: SaveOptions & { reload: false }): Promise<T>;\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<T extends DeepPartial<Entity>>(entity: T, options?: SaveOptions): Promise<T & Entity>;\n\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    softRemove<T extends DeepPartial<Entity>>(entityOrEntities: T|T[], options?: SaveOptions): Promise<T|T[]> {\n        return this.manager.softRemove<Entity, T>(this.metadata.target as any, entityOrEntities as any, options);\n    }\n\n    /**\n     * Recovers all given entities in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(entities: T[], options: SaveOptions & { reload: false }): Promise<T[]>;\n\n    /**\n     * Recovers all given entities in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(entities: T[], options?: SaveOptions): Promise<(T & Entity)[]>;\n\n    /**\n     * Recovers a given entity in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(entity: T, options: SaveOptions & { reload: false }): Promise<T>;\n\n    /**\n     * Recovers a given entity in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(entity: T, options?: SaveOptions): Promise<T & Entity>;\n\n    /**\n     * Recovers one or many given entities.\n     */\n    recover<T extends DeepPartial<Entity>>(entityOrEntities: T|T[], options?: SaveOptions): Promise<T|T[]> {\n        return this.manager.recover<Entity, T>(this.metadata.target as any, entityOrEntities as any, options);\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     */\n    insert(entity: QueryDeepPartialEntity<Entity>|(QueryDeepPartialEntity<Entity>[])): Promise<InsertResult> {\n        return this.manager.insert(this.metadata.target as any, entity);\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    update(criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindConditions<Entity>, partialEntity: QueryDeepPartialEntity<Entity>): Promise<UpdateResult> {\n        return this.manager.update(this.metadata.target as any, criteria as any, partialEntity);\n    }\n\n    /**\n     * Deletes entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    delete(criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindConditions<Entity>): Promise<DeleteResult> {\n        return this.manager.delete(this.metadata.target as any, criteria as any);\n    }\n\n    /**\n     * Records the delete date of entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient SOFT-DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    softDelete(criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindConditions<Entity>): Promise<UpdateResult> {\n        return this.manager.softDelete(this.metadata.target as any, criteria as any);\n    }\n\n    /**\n     * Restores entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient SOFT-DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    restore(criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindConditions<Entity>): Promise<UpdateResult> {\n        return this.manager.restore(this.metadata.target as any, criteria as any);\n    }\n\n    /**\n     * Counts entities that match given options.\n     */\n    count(options?: FindManyOptions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    count(conditions?: FindConditions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given find options or conditions.\n     */\n    count(optionsOrConditions?: FindManyOptions<Entity>|FindConditions<Entity>): Promise<number> {\n        return this.manager.count(this.metadata.target as any, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities that match given options.\n     */\n    find(options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find(conditions?: FindConditions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    find(optionsOrConditions?: FindManyOptions<Entity>|FindConditions<Entity>): Promise<Entity[]> {\n        return this.manager.find(this.metadata.target as any, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(options?: FindManyOptions<Entity>): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(conditions?: FindConditions<Entity>): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(optionsOrConditions?: FindManyOptions<Entity>|FindConditions<Entity>): Promise<[ Entity[], number ]> {\n        return this.manager.findAndCount(this.metadata.target as any, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    findByIds(ids: any[], options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities by ids.\n     * Optionally conditions can be applied.\n     */\n    findByIds(ids: any[], conditions?: FindConditions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    findByIds(ids: any[], optionsOrConditions?: FindManyOptions<Entity>|FindConditions<Entity>): Promise<Entity[]> {\n        return this.manager.findByIds(this.metadata.target as any, ids, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    findOne(id?: string|number|Date|ObjectID, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    findOne(options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne(conditions?: FindConditions<Entity>, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne(optionsOrConditions?: string|number|Date|ObjectID|FindOneOptions<Entity>|FindConditions<Entity>, maybeOptions?: FindOneOptions<Entity>): Promise<Entity|undefined> {\n        return this.manager.findOne(this.metadata.target as any, optionsOrConditions as any, maybeOptions);\n    }\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    findOneOrFail(id?: string|number|Date|ObjectID, options?: FindOneOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    findOneOrFail(options?: FindOneOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOneOrFail(conditions?: FindConditions<Entity>, options?: FindOneOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOneOrFail(optionsOrConditions?: string|number|Date|ObjectID|FindOneOptions<Entity>|FindConditions<Entity>, maybeOptions?: FindOneOptions<Entity>): Promise<Entity> {\n        return this.manager.findOneOrFail(this.metadata.target as any, optionsOrConditions as any, maybeOptions);\n    }\n\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        return this.manager.query(query, parameters);\n    }\n\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    clear(): Promise<void> {\n        return this.manager.clear(this.metadata.target);\n    }\n\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    increment(conditions: FindConditions<Entity>, propertyPath: string, value: number | string): Promise<UpdateResult> {\n        return this.manager.increment(this.metadata.target, conditions, propertyPath, value);\n    }\n\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    decrement(conditions: FindConditions<Entity>, propertyPath: string, value: number | string): Promise<UpdateResult> {\n        return this.manager.decrement(this.metadata.target, conditions, propertyPath, value);\n    }\n\n}\n","import {Repository} from \"./Repository\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {AbstractSqliteDriver} from \"../driver/sqlite-abstract/AbstractSqliteDriver\";\n\n/**\n * Repository with additional functions to work with trees.\n *\n * @see Repository\n */\nexport class TreeRepository<Entity> extends Repository<Entity> {\n\n    // todo: implement moving\n    // todo: implement removing\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets complete trees for all roots in the table.\n     */\n    async findTrees(): Promise<Entity[]> {\n        const roots = await this.findRoots();\n        await Promise.all(roots.map(root => this.findDescendantsTree(root)));\n        return roots;\n    }\n\n    /**\n     * Roots are entities that have no ancestors. Finds them all.\n     */\n    findRoots(): Promise<Entity[]> {\n        const escapeAlias = (alias: string) => this.manager.connection.driver.escape(alias);\n        const escapeColumn = (column: string) => this.manager.connection.driver.escape(column);\n        const parentPropertyName = this.manager.connection.namingStrategy.joinColumnName(\n          this.metadata.treeParentRelation!.propertyName, this.metadata.primaryColumns[0].propertyName\n        );\n\n        return this.createQueryBuilder(\"treeEntity\")\n            .where(`${escapeAlias(\"treeEntity\")}.${escapeColumn(parentPropertyName)} IS NULL`)\n            .getMany();\n    }\n\n    /**\n     * Gets all children (descendants) of the given entity. Returns them all in a flat array.\n     */\n    findDescendants(entity: Entity): Promise<Entity[]> {\n        return this\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getMany();\n    }\n\n    /**\n     * Gets all children (descendants) of the given entity. Returns them in a tree - nested into each other.\n     */\n    findDescendantsTree(entity: Entity): Promise<Entity> {\n        // todo: throw exception if there is no column of this relation?\n        return this\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getRawAndEntities()\n            .then(entitiesAndScalars => {\n                const relationMaps = this.createRelationMaps(\"treeEntity\", entitiesAndScalars.raw);\n                this.buildChildrenEntityTree(entity, entitiesAndScalars.entities, relationMaps);\n                return entity;\n            });\n    }\n\n    /**\n     * Gets number of descendants of the entity.\n     */\n    countDescendants(entity: Entity): Promise<number> {\n        return this\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getCount();\n    }\n\n    /**\n     * Creates a query builder used to get descendants of the entities in a tree.\n     */\n    createDescendantsQueryBuilder(alias: string, closureTableAlias: string, entity: Entity): SelectQueryBuilder<Entity> {\n\n        // create shortcuts for better readability\n        const escape = (alias: string) => this.manager.connection.driver.escape(alias);\n\n        if (this.metadata.treeType === \"closure-table\") {\n\n            const joinCondition = this.metadata.closureJunctionTable.descendantColumns.map(column => {\n                return escape(closureTableAlias) + \".\" + escape(column.propertyPath) + \" = \" + escape(alias) + \".\" + escape(column.referencedColumn!.propertyPath);\n            }).join(\" AND \");\n\n            const parameters: ObjectLiteral = {};\n            const whereCondition = this.metadata.closureJunctionTable.ancestorColumns.map(column => {\n                parameters[column.referencedColumn!.propertyName] = column.referencedColumn!.getEntityValue(entity);\n                return escape(closureTableAlias) + \".\" + escape(column.propertyPath) + \" = :\" + column.referencedColumn!.propertyName;\n            }).join(\" AND \");\n\n            return this\n                .createQueryBuilder(alias)\n                .innerJoin(this.metadata.closureJunctionTable.tableName, closureTableAlias, joinCondition)\n                .where(whereCondition)\n                .setParameters(parameters);\n\n        } else if (this.metadata.treeType === \"nested-set\") {\n\n            const whereCondition = alias + \".\" + this.metadata.nestedSetLeftColumn!.propertyPath + \" BETWEEN \" +\n                \"joined.\" + this.metadata.nestedSetLeftColumn!.propertyPath + \" AND joined.\" + this.metadata.nestedSetRightColumn!.propertyPath;\n            const parameters: ObjectLiteral = {};\n            const joinCondition = this.metadata.treeParentRelation!.joinColumns.map(joinColumn => {\n                const parameterName = joinColumn.referencedColumn!.propertyPath.replace(\".\", \"_\");\n                parameters[parameterName] = joinColumn.referencedColumn!.getEntityValue(entity);\n                return \"joined.\" + joinColumn.referencedColumn!.propertyPath + \" = :\" + parameterName;\n            }).join(\" AND \");\n\n            return this\n                .createQueryBuilder(alias)\n                .innerJoin(this.metadata.targetName, \"joined\", whereCondition)\n                .where(joinCondition, parameters);\n\n        } else if (this.metadata.treeType === \"materialized-path\") {\n            return this\n                .createQueryBuilder(alias)\n                .where(qb => {\n                    const subQuery = qb.subQuery()\n                        .select(`${this.metadata.targetName}.${this.metadata.materializedPathColumn!.propertyPath}`, \"path\")\n                        .from(this.metadata.target, this.metadata.targetName)\n                        .whereInIds(this.metadata.getEntityIdMap(entity));\n\n                    qb.setNativeParameters(subQuery.expressionMap.nativeParameters);\n                    if (this.manager.connection.driver instanceof AbstractSqliteDriver) {\n                        return `${alias}.${this.metadata.materializedPathColumn!.propertyPath} LIKE ${subQuery.getQuery()} || '%'`;\n                    } else {\n                        return `${alias}.${this.metadata.materializedPathColumn!.propertyPath} LIKE CONCAT(${subQuery.getQuery()}, '%')`;\n                    }\n                });\n        }\n\n        throw new Error(`Supported only in tree entities`);\n    }\n\n    /**\n     * Gets all parents (ancestors) of the given entity. Returns them all in a flat array.\n     */\n    findAncestors(entity: Entity): Promise<Entity[]> {\n        return this\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getMany();\n    }\n\n    /**\n     * Gets all parents (ancestors) of the given entity. Returns them in a tree - nested into each other.\n     */\n    findAncestorsTree(entity: Entity): Promise<Entity> {\n        // todo: throw exception if there is no column of this relation?\n        return this\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getRawAndEntities()\n            .then(entitiesAndScalars => {\n                const relationMaps = this.createRelationMaps(\"treeEntity\", entitiesAndScalars.raw);\n                this.buildParentEntityTree(entity, entitiesAndScalars.entities, relationMaps);\n                return entity;\n            });\n    }\n\n    /**\n     * Gets number of ancestors of the entity.\n     */\n    countAncestors(entity: Entity): Promise<number> {\n        return this\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getCount();\n    }\n\n    /**\n     * Creates a query builder used to get ancestors of the entities in the tree.\n     */\n    createAncestorsQueryBuilder(alias: string, closureTableAlias: string, entity: Entity): SelectQueryBuilder<Entity> {\n\n        // create shortcuts for better readability\n        // const escape = (alias: string) => this.manager.connection.driver.escape(alias);\n\n        if (this.metadata.treeType === \"closure-table\") {\n            const joinCondition = this.metadata.closureJunctionTable.ancestorColumns.map(column => {\n                return closureTableAlias + \".\" + column.propertyPath + \" = \" + alias + \".\" + column.referencedColumn!.propertyPath;\n            }).join(\" AND \");\n\n            const parameters: ObjectLiteral = {};\n            const whereCondition = this.metadata.closureJunctionTable.descendantColumns.map(column => {\n                parameters[column.referencedColumn!.propertyName] = column.referencedColumn!.getEntityValue(entity);\n                return closureTableAlias + \".\" + column.propertyPath + \" = :\" + column.referencedColumn!.propertyName;\n            }).join(\" AND \");\n\n            return this\n                .createQueryBuilder(alias)\n                .innerJoin(this.metadata.closureJunctionTable.tableName, closureTableAlias, joinCondition)\n                .where(whereCondition)\n                .setParameters(parameters);\n\n        } else if (this.metadata.treeType === \"nested-set\") {\n\n            const joinCondition = \"joined.\" + this.metadata.nestedSetLeftColumn!.propertyPath + \" BETWEEN \" +\n                alias + \".\" + this.metadata.nestedSetLeftColumn!.propertyPath + \" AND \" + alias + \".\" + this.metadata.nestedSetRightColumn!.propertyPath;\n            const parameters: ObjectLiteral = {};\n            const whereCondition = this.metadata.treeParentRelation!.joinColumns.map(joinColumn => {\n                const parameterName = joinColumn.referencedColumn!.propertyPath.replace(\".\", \"_\");\n                parameters[parameterName] = joinColumn.referencedColumn!.getEntityValue(entity);\n                return \"joined.\" + joinColumn.referencedColumn!.propertyPath + \" = :\" + parameterName;\n            }).join(\" AND \");\n\n            return this\n                .createQueryBuilder(alias)\n                .innerJoin(this.metadata.targetName, \"joined\", joinCondition)\n                .where(whereCondition, parameters);\n\n\n        } else if (this.metadata.treeType === \"materialized-path\") {\n            // example: SELECT * FROM category category WHERE (SELECT mpath FROM `category` WHERE id = 2) LIKE CONCAT(category.mpath, '%');\n            return this\n                .createQueryBuilder(alias)\n                .where(qb => {\n                    const subQuery = qb.subQuery()\n                        .select(`${this.metadata.targetName}.${this.metadata.materializedPathColumn!.propertyPath}`, \"path\")\n                        .from(this.metadata.target, this.metadata.targetName)\n                        .whereInIds(this.metadata.getEntityIdMap(entity));\n\n                    qb.setNativeParameters(subQuery.expressionMap.nativeParameters);\n                    if (this.manager.connection.driver instanceof AbstractSqliteDriver) {\n                        return `${subQuery.getQuery()} LIKE ${alias}.${this.metadata.materializedPathColumn!.propertyPath} || '%'`;\n\n                    } else {\n                        return `${subQuery.getQuery()} LIKE CONCAT(${alias}.${this.metadata.materializedPathColumn!.propertyPath}, '%')`;\n                    }\n                });\n        }\n\n        throw new Error(`Supported only in tree entities`);\n    }\n\n    /**\n     * Moves entity to the children of then given entity.\n     *\n    move(entity: Entity, to: Entity): Promise<void> {\n        return Promise.resolve();\n    } */\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected createRelationMaps(alias: string, rawResults: any[]): { id: any, parentId: any }[] {\n        return rawResults.map(rawResult => {\n            const joinColumn = this.metadata.treeParentRelation!.joinColumns[0];\n            // fixes issue #2518, default to databaseName property when givenDatabaseName is not set\n            const joinColumnName = joinColumn.givenDatabaseName || joinColumn.databaseName;\n            const id = rawResult[alias + \"_\" + this.metadata.primaryColumns[0].databaseName];\n            const parentId = rawResult[alias + \"_\" + joinColumnName];\n            return {\n                id: this.manager.connection.driver.prepareHydratedValue(id, this.metadata.primaryColumns[0]),\n                parentId: this.manager.connection.driver.prepareHydratedValue(parentId, joinColumn),\n            };\n        });\n    }\n\n    protected buildChildrenEntityTree(entity: any, entities: any[], relationMaps: { id: any, parentId: any }[]): void {\n        const childProperty = this.metadata.treeChildrenRelation!.propertyName;\n        const parentEntityId = this.metadata.primaryColumns[0].getEntityValue(entity);\n        const childRelationMaps = relationMaps.filter(relationMap => relationMap.parentId === parentEntityId);\n        const childIds = new Set(childRelationMaps.map(relationMap => relationMap.id));\n        entity[childProperty] = entities.filter(entity => childIds.has(entity[this.metadata.primaryColumns[0].propertyName]));\n        entity[childProperty].forEach((childEntity: any) => {\n            this.buildChildrenEntityTree(childEntity, entities, relationMaps);\n        });\n    }\n\n    protected buildParentEntityTree(entity: any, entities: any[], relationMaps: { id: any, parentId: any }[]): void {\n        const parentProperty = this.metadata.treeParentRelation!.propertyName;\n        const entityId = this.metadata.primaryColumns[0].getEntityValue(entity);\n        const parentRelationMap = relationMaps.find(relationMap => relationMap.id === entityId);\n        const parentEntity = entities.find(entity => {\n            if (!parentRelationMap)\n                return false;\n\n            return entity[this.metadata.primaryColumns[0].propertyName] === parentRelationMap.parentId;\n        });\n        if (parentEntity) {\n            entity[parentProperty] = parentEntity;\n            this.buildParentEntityTree(entity[parentProperty], entities, relationMaps);\n        }\n    }\n\n}\n","/**\n * Thrown when relations specified in the find options were not found in the entities.\n*/\nexport class FindRelationsNotFoundError extends Error {\n\n    constructor(notFoundRelations: string[]) {\n        super();\n        Object.setPrototypeOf(this, FindRelationsNotFoundError.prototype);\n        if (notFoundRelations.length === 1) {\n            this.message = `Relation \"${notFoundRelations[0]}\" was not found; please check if it is correct and really exists in your entity.`;\n        } else {\n            this.message = `Relations ${notFoundRelations.map(relation => `\"${relation}\"`).join(\", \")} were not found; please check if relations are correct and they exist in your entities.`;\n        }\n    }\n\n}\n","import {FindManyOptions} from \"./FindManyOptions\";\nimport {FindOneOptions} from \"./FindOneOptions\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {FindRelationsNotFoundError} from \"../error/FindRelationsNotFoundError\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {shorten} from \"../util/StringUtils\";\n\n/**\n * Utilities to work with FindOptions.\n */\nexport class FindOptionsUtils {\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if given object is really instance of FindOneOptions interface.\n     */\n    static isFindOneOptions<Entity = any>(obj: any): obj is FindOneOptions<Entity> {\n        const possibleOptions: FindOneOptions<Entity> = obj;\n        return possibleOptions &&\n                (\n                    Array.isArray(possibleOptions.select) ||\n                    possibleOptions.where instanceof Object ||\n                    typeof possibleOptions.where === \"string\" ||\n                    Array.isArray(possibleOptions.relations) ||\n                    possibleOptions.join instanceof Object ||\n                    possibleOptions.order instanceof Object ||\n                    possibleOptions.cache instanceof Object ||\n                    typeof possibleOptions.cache === \"boolean\" ||\n                    typeof possibleOptions.cache === \"number\" ||\n                    possibleOptions.lock instanceof Object ||\n                    possibleOptions.loadRelationIds instanceof Object ||\n                    typeof possibleOptions.loadRelationIds === \"boolean\" ||\n                    typeof possibleOptions.loadEagerRelations === \"boolean\" ||\n                    typeof possibleOptions.withDeleted === \"boolean\" ||\n                    typeof possibleOptions.transaction === \"boolean\"\n                );\n    }\n\n    /**\n     * Checks if given object is really instance of FindManyOptions interface.\n     */\n    static isFindManyOptions<Entity = any>(obj: any): obj is FindManyOptions<Entity> {\n        const possibleOptions: FindManyOptions<Entity> = obj;\n        return possibleOptions && (\n            this.isFindOneOptions(possibleOptions) ||\n            typeof (possibleOptions as FindManyOptions<any>).skip === \"number\" ||\n            typeof (possibleOptions as FindManyOptions<any>).take === \"number\" ||\n            typeof (possibleOptions as FindManyOptions<any>).skip === \"string\" ||\n            typeof (possibleOptions as FindManyOptions<any>).take === \"string\"\n        );\n    }\n\n    /**\n     * Checks if given object is really instance of FindOptions interface.\n     */\n    static extractFindManyOptionsAlias(object: any): string|undefined {\n        if (this.isFindManyOptions(object) && object.join)\n            return object.join.alias;\n\n        return undefined;\n    }\n\n    /**\n     * Applies give find many options to the given query builder.\n     */\n    static applyFindManyOptionsOrConditionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindManyOptions<T>|Partial<T>|undefined): SelectQueryBuilder<T> {\n        if (this.isFindManyOptions(options))\n            return this.applyOptionsToQueryBuilder(qb, options);\n\n        if (options)\n            return qb.where(options);\n\n        return qb;\n    }\n\n    /**\n     * Applies give find options to the given query builder.\n     */\n    static applyOptionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindOneOptions<T>|FindManyOptions<T>|undefined): SelectQueryBuilder<T> {\n\n        // if options are not set then simply return query builder. This is made for simplicity of usage.\n        if (!options || (!this.isFindOneOptions(options) && !this.isFindManyOptions(options)))\n            return qb;\n\n        if (options.transaction === true) {\n            qb.expressionMap.useTransaction = true;\n        }\n\n        if (!qb.expressionMap.mainAlias || !qb.expressionMap.mainAlias.hasMetadata)\n            return qb;\n\n        const metadata = qb.expressionMap.mainAlias!.metadata;\n\n        // apply all options from FindOptions\n        if (options.select) {\n            qb.select([]);\n            options.select.forEach(select => {\n                if (!metadata.findColumnWithPropertyPath(String(select)))\n                    throw new Error(`${select} column was not found in the ${metadata.name} entity.`);\n\n                qb.addSelect(qb.alias + \".\" + select);\n            });\n        }\n\n        if (options.where)\n            qb.where(options.where);\n\n        if ((options as FindManyOptions<T>).skip)\n            qb.skip((options as FindManyOptions<T>).skip!);\n\n        if ((options as FindManyOptions<T>).take)\n            qb.take((options as FindManyOptions<T>).take!);\n\n        if (options.order)\n            Object.keys(options.order).forEach(key => {\n                const order = ((options as FindOneOptions<T>).order as any)[key as any];\n\n                if (!metadata.findColumnWithPropertyPath(key))\n                    throw new Error(`${key} column was not found in the ${metadata.name} entity.`);\n\n                switch (order) {\n                    case 1:\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\n                        break;\n                    case -1:\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\n                        break;\n                    case \"ASC\":\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\n                        break;\n                    case \"DESC\":\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\n                        break;\n                }\n            });\n\n        if (options.relations) {\n            const allRelations = options.relations.map(relation => relation);\n            this.applyRelationsRecursively(qb, allRelations, qb.expressionMap.mainAlias!.name, qb.expressionMap.mainAlias!.metadata, \"\");\n            // recursive removes found relations from allRelations array\n            // if there are relations left in this array it means those relations were not found in the entity structure\n            // so, we give an exception about not found relations\n            if (allRelations.length > 0)\n                throw new FindRelationsNotFoundError(allRelations);\n        }\n\n        if (options.join) {\n            if (options.join.leftJoin)\n                Object.keys(options.join.leftJoin).forEach(key => {\n                    qb.leftJoin(options.join!.leftJoin![key], key);\n                });\n\n            if (options.join.innerJoin)\n                Object.keys(options.join.innerJoin).forEach(key => {\n                    qb.innerJoin(options.join!.innerJoin![key], key);\n                });\n\n            if (options.join.leftJoinAndSelect)\n                Object.keys(options.join.leftJoinAndSelect).forEach(key => {\n                    qb.leftJoinAndSelect(options.join!.leftJoinAndSelect![key], key);\n                });\n\n            if (options.join.innerJoinAndSelect)\n                Object.keys(options.join.innerJoinAndSelect).forEach(key => {\n                    qb.innerJoinAndSelect(options.join!.innerJoinAndSelect![key], key);\n                });\n        }\n\n        if (options.cache) {\n            if (options.cache instanceof Object) {\n                const cache = options.cache as { id: any, milliseconds: number };\n                qb.cache(cache.id, cache.milliseconds);\n            } else {\n                qb.cache(options.cache);\n            }\n        }\n\n        if (options.lock) {\n            if (options.lock.mode === \"optimistic\") {\n                qb.setLock(options.lock.mode, options.lock.version as any);\n            } else if (options.lock.mode === \"pessimistic_read\" || options.lock.mode === \"pessimistic_write\" || options.lock.mode === \"dirty_read\" || options.lock.mode === \"pessimistic_partial_write\" || options.lock.mode === \"pessimistic_write_or_fail\") {\n                qb.setLock(options.lock.mode);\n            }\n        }\n\n        if (options.withDeleted) {\n            qb.withDeleted();\n        }\n\n        if (options.loadRelationIds === true) {\n            qb.loadAllRelationIds();\n\n        } else if (options.loadRelationIds instanceof Object) {\n            qb.loadAllRelationIds(options.loadRelationIds as any);\n        }\n\n        return qb;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Adds joins for all relations and sub-relations of the given relations provided in the find options.\n     */\n    protected static applyRelationsRecursively(qb: SelectQueryBuilder<any>, allRelations: string[], alias: string, metadata: EntityMetadata, prefix: string): void {\n\n        // find all relations that match given prefix\n        let matchedBaseRelations: string[] = [];\n        if (prefix) {\n            const regexp = new RegExp(\"^\" + prefix.replace(\".\", \"\\\\.\") + \"\\\\.\");\n            matchedBaseRelations = allRelations\n                .filter(relation => relation.match(regexp))\n                .map(relation => relation.replace(regexp, \"\"))\n                .filter(relation => metadata.findRelationWithPropertyPath(relation));\n        } else {\n            matchedBaseRelations = allRelations.filter(relation => metadata.findRelationWithPropertyPath(relation));\n        }\n\n        // go through all matched relations and add join for them\n        matchedBaseRelations.forEach(relation => {\n\n            // generate a relation alias\n            let relationAlias: string = alias + \"__\" + relation;\n            // shorten it if needed by the driver\n            if (qb.connection.driver.maxAliasLength && relationAlias.length > qb.connection.driver.maxAliasLength) {\n                relationAlias = shorten(relationAlias);\n            }\n\n            // add a join for the found relation\n            const selection = alias + \".\" + relation;\n            qb.leftJoinAndSelect(selection, relationAlias);\n\n            // join the eager relations of the found relation\n            const relMetadata = metadata.relations.find(metadata => metadata.propertyName === relation);\n            if (relMetadata) {\n                this.joinEagerRelations(qb, relationAlias, relMetadata.inverseEntityMetadata);\n            }\n\n            // remove added relations from the allRelations array, this is needed to find all not found relations at the end\n            allRelations.splice(allRelations.indexOf(prefix ? prefix + \".\" + relation : relation), 1);\n\n            // try to find sub-relations\n            const join = qb.expressionMap.joinAttributes.find(join => join.entityOrProperty === selection);\n            this.applyRelationsRecursively(qb, allRelations, join!.alias.name, join!.metadata!, prefix ? prefix + \".\" + relation : relation);\n        });\n    }\n\n    public static joinEagerRelations(qb: SelectQueryBuilder<any>, alias: string, metadata: EntityMetadata) {\n        metadata.eagerRelations.forEach(relation => {\n            const relationAlias = qb.connection.namingStrategy.eagerJoinRelationAlias(alias, relation.propertyPath);\n            qb.leftJoinAndSelect(alias + \".\" + relation.propertyPath, relationAlias);\n            this.joinEagerRelations(qb, relationAlias, relation.inverseEntityMetadata);\n        });\n    }\n\n}\n","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\n\n/**\n * Transforms plain old javascript object\n * Entity is constructed based on its entity metadata.\n */\nexport class PlainObjectToNewEntityTransformer {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    transform<T>(newEntity: T, object: ObjectLiteral, metadata: EntityMetadata, getLazyRelationsPromiseValue: boolean = false): T {\n        // console.log(\"groupAndTransform entity:\", newEntity);\n        // console.log(\"groupAndTransform object:\", object);\n        this.groupAndTransform(newEntity, object, metadata, getLazyRelationsPromiseValue);\n        // console.log(\"result:\", newEntity);\n        return newEntity;\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated\n     * we need to group our result and we must have some unique id (primary key in our case)\n     */\n    private groupAndTransform(entity: ObjectLiteral, object: ObjectLiteral, metadata: EntityMetadata, getLazyRelationsPromiseValue: boolean = false): void {\n\n        // console.log(\"groupAndTransform entity:\", entity);\n        // console.log(\"groupAndTransform object:\", object);\n\n        // copy regular column properties from the given object\n        metadata.nonVirtualColumns.forEach(column => {\n            const objectColumnValue = column.getEntityValue(object);\n            if (objectColumnValue !== undefined)\n                column.setEntityValue(entity, objectColumnValue);\n        });\n\n        // // copy relation properties from the given object\n        if (metadata.relations.length) {\n            metadata.relations.forEach(relation => {\n\n                let entityRelatedValue = relation.getEntityValue(entity);\n                const objectRelatedValue = relation.getEntityValue(object, getLazyRelationsPromiseValue);\n                if (objectRelatedValue === undefined)\n                    return;\n\n                if (relation.isOneToMany || relation.isManyToMany) {\n                    if (!Array.isArray(objectRelatedValue))\n                        return;\n\n                    if (!entityRelatedValue) {\n                        entityRelatedValue = [];\n                        relation.setEntityValue(entity, entityRelatedValue);\n                    }\n\n                    objectRelatedValue.forEach(objectRelatedValueItem => {\n\n                        // check if we have this item from the merging object in the original entity we merge into\n                        let objectRelatedValueEntity = (entityRelatedValue as any[]).find(entityRelatedValueItem => {\n                            return relation.inverseEntityMetadata.compareEntities(objectRelatedValueItem, entityRelatedValueItem);\n                        });\n\n                        // if such item already exist then merge new data into it, if its not we create a new entity and merge it into the array\n                        if (!objectRelatedValueEntity) {\n                            objectRelatedValueEntity = relation.inverseEntityMetadata.create();\n                            entityRelatedValue.push(objectRelatedValueEntity);\n                        }\n\n                        this.groupAndTransform(objectRelatedValueEntity, objectRelatedValueItem, relation.inverseEntityMetadata, getLazyRelationsPromiseValue);\n                    });\n\n                } else {\n\n                    // if related object isn't an object (direct relation id for example)\n                    // we just set it to the entity relation, we don't need anything more from it\n                    // however we do it only if original entity does not have this relation set to object\n                    // to prevent full overriding of objects\n                    if (!(objectRelatedValue instanceof Object)) {\n                        if (!(entityRelatedValue instanceof Object))\n                            relation.setEntityValue(entity, objectRelatedValue);\n                        return;\n                    }\n\n                    if (!entityRelatedValue) {\n                        entityRelatedValue = relation.inverseEntityMetadata.create();\n                        relation.setEntityValue(entity, entityRelatedValue);\n                    }\n\n                    this.groupAndTransform(entityRelatedValue, objectRelatedValue, relation.inverseEntityMetadata, getLazyRelationsPromiseValue);\n                }\n            });\n        }\n    }\n\n}\n","import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n */\nclass LoadMapItem {\n\n    entity?: ObjectLiteral;\n    plainEntity: ObjectLiteral;\n    metadata: EntityMetadata;\n    parentLoadMapItem?: LoadMapItem;\n    relation?: RelationMetadata;\n\n    constructor(plainEntity: ObjectLiteral,\n                metadata: EntityMetadata,\n                parentLoadMapItem?: LoadMapItem,\n                relation?: RelationMetadata) {\n        this.plainEntity = plainEntity;\n        this.metadata = metadata;\n        this.parentLoadMapItem = parentLoadMapItem;\n        this.relation = relation;\n    }\n\n    get target(): Function|string {\n        return this.metadata.target;\n    }\n\n    get id(): any {\n        return this.metadata.getEntityIdMixedMap(this.plainEntity);\n    }\n\n}\n\nclass LoadMap {\n\n    loadMapItems: LoadMapItem[] = [];\n\n    get mainLoadMapItem(): LoadMapItem|undefined {\n        return this.loadMapItems.find(item => !item.relation && !item.parentLoadMapItem);\n    }\n\n    addLoadMap(newLoadMap: LoadMapItem) {\n        const item = this.loadMapItems.find(item => item.target === newLoadMap.target && item.id === newLoadMap.id);\n        if (!item)\n            this.loadMapItems.push(newLoadMap);\n    }\n\n    fillEntities(target: Function|string, entities: any[]) {\n        entities.forEach(entity => {\n            const item = this.loadMapItems.find(loadMapItem => {\n                return loadMapItem.target === target && loadMapItem.metadata.compareEntities(entity, loadMapItem.plainEntity);\n            });\n            if (item)\n                item.entity = entity;\n        });\n    }\n\n    groupByTargetIds(): { target: Function|string, ids: any[] }[] {\n        const groups: { target: Function|string, ids: any[] }[] = [];\n        this.loadMapItems.forEach(loadMapItem => {\n            let group = groups.find(group => group.target === loadMapItem.target);\n            if (!group) {\n                group = { target: loadMapItem.target, ids: [] };\n                groups.push(group);\n            }\n\n            group.ids.push(loadMapItem.id);\n        });\n        return groups;\n    }\n\n}\n\n/**\n * Transforms plain old javascript object\n * Entity is constructed based on its entity metadata.\n */\nexport class PlainObjectToDatabaseEntityTransformer {\n\n    constructor(private manager: EntityManager) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    async transform(plainObject: ObjectLiteral, metadata: EntityMetadata): Promise<ObjectLiteral|undefined> {\n\n        // if plain object does not have id then nothing to load really\n        if (!metadata.hasAllPrimaryKeys(plainObject))\n            return Promise.reject(\"Given object does not have a primary column, cannot transform it to database entity.\");\n\n        // create a special load map that will hold all metadata that will be used to operate with entities easily\n        const loadMap = new LoadMap();\n        const fillLoadMap = (entity: ObjectLiteral, entityMetadata: EntityMetadata, parentLoadMapItem?: LoadMapItem, relation?: RelationMetadata) => {\n            const item = new LoadMapItem(entity, entityMetadata, parentLoadMapItem, relation);\n            loadMap.addLoadMap(item);\n\n            entityMetadata\n                .extractRelationValuesFromEntity(entity, metadata.relations)\n                .filter(value => value !== null && value !== undefined)\n                .forEach(([relation, value, inverseEntityMetadata]) => fillLoadMap(value, inverseEntityMetadata, item, relation));\n        };\n        fillLoadMap(plainObject, metadata);\n        // load all entities and store them in the load map\n        await Promise.all(loadMap.groupByTargetIds().map(targetWithIds => { // todo: fix type hinting\n            return this.manager\n                .findByIds<ObjectLiteral>(targetWithIds.target as any, targetWithIds.ids)\n                .then(entities => loadMap.fillEntities(targetWithIds.target, entities));\n        }));\n\n        // go through each item in the load map and set their entity relationship using metadata stored in load map\n        loadMap.loadMapItems.forEach(loadMapItem => {\n            if (!loadMapItem.relation ||\n                !loadMapItem.entity ||\n                !loadMapItem.parentLoadMapItem ||\n                !loadMapItem.parentLoadMapItem.entity)\n                return;\n\n            if (loadMapItem.relation.isManyToMany || loadMapItem.relation.isOneToMany) {\n                if (!loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName])\n                    loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = [];\n                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName].push(loadMapItem.entity);\n\n            } else {\n                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = loadMapItem.entity;\n            }\n        });\n\n        return loadMap.mainLoadMapItem ? loadMap.mainLoadMapItem.entity : undefined;\n    }\n\n}","/**\n * Thrown if custom repository was not found.\n */\nexport class CustomRepositoryNotFoundError extends Error {\n    name = \"CustomRepositoryNotFoundError\";\n\n    constructor(repository: any) {\n        super();\n        Object.setPrototypeOf(this, CustomRepositoryNotFoundError.prototype);\n        this.message = `Custom repository ${repository instanceof Function ? repository.name : repository.constructor.name } was not found. ` +\n            `Did you forgot to put @EntityRepository decorator on it?`;\n    }\n\n}","/**\n * Thrown if custom repositories that extend AbstractRepository classes does not have managed entity.\n */\nexport class CustomRepositoryDoesNotHaveEntityError extends Error {\n    name = \"CustomRepositoryDoesNotHaveEntityError\";\n\n    constructor(repository: any) {\n        super();\n        Object.setPrototypeOf(this, CustomRepositoryDoesNotHaveEntityError.prototype);\n        this.message = `Custom repository ${repository instanceof Function ? repository.name : repository.constructor.name} does not have managed entity. ` +\n            `Did you forget to specify entity for it @EntityRepository(MyEntity)? `;\n    }\n\n}","import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {Repository} from \"./Repository\";\nimport {TreeRepository} from \"./TreeRepository\";\nimport {EntityTarget} from \"../common/EntityTarget\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {CustomRepositoryDoesNotHaveEntityError} from \"../error/CustomRepositoryDoesNotHaveEntityError\";\nimport {getMetadataArgsStorage} from \"../index\";\nimport {CustomRepositoryNotFoundError} from \"../error/CustomRepositoryNotFoundError\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\n\n/**\n * Provides abstract class for custom repositories that do not inherit from original orm Repository.\n * Contains all most-necessary methods to simplify code in the custom repository.\n * All methods are protected thus not exposed and it allows to create encapsulated custom repository.\n *\n * @experimental\n */\nexport class AbstractRepository<Entity extends ObjectLiteral> {\n\n    // -------------------------------------------------------------------------\n    // Protected Methods Set Dynamically\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets entity manager that allows to perform repository operations with any entity.\n     */\n    protected manager: EntityManager;\n\n    // -------------------------------------------------------------------------\n    // Protected Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets the original ORM repository for the entity that is managed by this repository.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected get repository(): Repository<Entity> {\n        const target = this.getCustomRepositoryTarget(this as any);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n\n        return this.manager.getRepository<Entity>(target);\n    }\n\n    /**\n     * Gets the original ORM tree repository for the entity that is managed by this repository.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected get treeRepository(): TreeRepository<Entity> {\n        const target = this.getCustomRepositoryTarget(this as any);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n\n        return this.manager.getTreeRepository<Entity>(target);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query builder for the repository's entity that can be used to build a sql query.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected createQueryBuilder(alias: string): SelectQueryBuilder<Entity> {\n        const target = this.getCustomRepositoryTarget(this.constructor);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n\n        return this.manager.getRepository<Entity>(target).createQueryBuilder(alias);\n    }\n\n    /**\n     * Creates a new query builder for the given entity that can be used to build a sql query.\n     */\n    protected createQueryBuilderFor<T>(entity: ObjectType<T>, alias: string): SelectQueryBuilder<T> {\n        return this.getRepositoryFor(entity).createQueryBuilder(alias);\n    }\n\n    /**\n     * Gets the original ORM repository for the given entity class.\n     */\n    protected getRepositoryFor<T>(entity: ObjectType<T>): Repository<T> {\n        return this.manager.getRepository(entity);\n    }\n\n    /**\n     * Gets the original ORM tree repository for the given entity class.\n     */\n    protected getTreeRepositoryFor<T>(entity: ObjectType<T>): TreeRepository<T> {\n        return this.manager.getTreeRepository(entity);\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets custom repository's managed entity.\n     * If given custom repository does not manage any entity then undefined will be returned.\n     */\n    private getCustomRepositoryTarget(customRepository: any): EntityTarget<any>|undefined {\n        const entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.find(repository => {\n            return repository.target === (customRepository instanceof Function ? customRepository : (customRepository as any).constructor);\n        });\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError(customRepository);\n\n        return entityRepositoryMetadataArgs.entity;\n    }\n\n}\n","/**\n * Thrown if custom repository inherits Repository class however entity is not set in @EntityRepository decorator.\n */\nexport class CustomRepositoryCannotInheritRepositoryError extends Error {\n    name = \"CustomRepositoryCannotInheritRepositoryError\";\n\n    constructor(repository: any) {\n        super();\n        Object.setPrototypeOf(this, CustomRepositoryCannotInheritRepositoryError.prototype);\n        this.message = `Custom entity repository ${repository instanceof Function ? repository.name : repository.constructor.name} ` +\n            ` cannot inherit Repository class without entity being set in the @EntityRepository decorator.`;\n    }\n\n}","import {EntityTarget} from \"../common/EntityTarget\";\nimport {EntitySchema} from \"../index\";\n\n/**\n * Thrown when repository for the given class is not found.\n */\nexport class RepositoryNotFoundError extends Error {\n    name = \"RepositoryNotFoundError\";\n\n    constructor(connectionName: string, entityClass: EntityTarget<any>) {\n        super();\n        Object.setPrototypeOf(this, RepositoryNotFoundError.prototype);\n        let targetName: string;\n        if (entityClass instanceof EntitySchema) {\n            targetName = entityClass.options.name;\n        } else if (typeof entityClass === \"function\") {\n            targetName = entityClass.name;\n        } else if (typeof entityClass === \"object\" && \"name\" in entityClass) {\n            targetName = entityClass.name;\n        } else {\n            targetName = entityClass;\n        }\n        this.message = `No repository for \"${targetName}\" was found. Looks like this entity is not registered in ` +\n            `current \"${connectionName}\" connection?`;\n    }\n\n}\n","import {EntityTarget} from \"../common/EntityTarget\";\nimport {EntitySchema} from \"../index\";\n\n/**\n * Thrown when repository for the given class is not found.\n */\nexport class RepositoryNotTreeError extends Error {\n    name = \"RepositoryNotTreeError\";\n\n    constructor(entityClass: EntityTarget<any>) {\n        super();\n        Object.setPrototypeOf(this, RepositoryNotTreeError.prototype);\n        let targetName: string;\n        if (entityClass instanceof EntitySchema) {\n            targetName = entityClass.options.name;\n        } else if (typeof entityClass === \"function\") {\n            targetName = entityClass.name;\n        } else if (typeof entityClass === \"object\" && \"name\" in entityClass) {\n            targetName = entityClass.name;\n        } else {\n            targetName = entityClass;\n        }\n        this.message = `Repository of the \"${targetName}\" class is not a TreeRepository. Try to apply @Tree decorator on your entity.`;\n    }\n\n}\n","import {TreeRepository} from \"./TreeRepository\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Repository} from \"./Repository\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {MongoRepository} from \"./MongoRepository\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\n\n/**\n * Factory used to create different types of repositories.\n */\nexport class RepositoryFactory {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a repository.\n     */\n    create(manager: EntityManager, metadata: EntityMetadata, queryRunner?: QueryRunner): Repository<any> {\n\n        if (metadata.treeType) {\n            // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n            // however we need these properties for internal work of the class\n            const repository = new TreeRepository<any>();\n            Object.assign(repository, {\n                manager: manager,\n                metadata: metadata,\n                queryRunner: queryRunner,\n            });\n            return repository;\n\n        } else {\n            // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n            // however we need these properties for internal work of the class\n            let repository: Repository<any>;\n            if (manager.connection.driver instanceof MongoDriver) {\n                repository = new MongoRepository();\n            } else {\n                repository = new Repository<any>();\n            }\n            Object.assign(repository, {\n                manager: manager,\n                metadata: metadata,\n                queryRunner: queryRunner,\n            });\n\n            return repository;\n        }\n    }\n\n}","import {Driver} from \"../driver/Driver\";\n\nexport class TreeRepositoryNotSupportedError extends Error {\n    name = \"TreeRepositoryNotSupportedError\";\n\n    constructor(driver: Driver) {\n        super();\n        Object.setPrototypeOf(this, TreeRepositoryNotSupportedError.prototype);\n        this.message = `Tree repositories are not supported in ${driver.options.type} driver.`;\n    }\n\n}","/**\n * Thrown when method expects entity but instead something else is given.\n */\nexport class MustBeEntityError extends Error {\n    name = \"MustBeEntityError\";\n\n    constructor(operation: string, wrongValue: any) {\n        super();\n        Object.setPrototypeOf(this, MustBeEntityError.prototype);\n        this.message = `Cannot ${operation}, given value must be an entity, instead \"${wrongValue}\" is given.`;\n    }\n\n}","import {Subject} from \"./Subject\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\n\n/**\n * Orders insert or remove subjects in proper order (using topological sorting)\n * to make sure insert or remove operations are executed in a proper order.\n */\nexport class SubjectTopoligicalSorter {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Insert subjects needs to be sorted.\n     */\n    subjects: Subject[];\n\n    /**\n     * Unique list of entity metadatas of this subject.\n     */\n    metadatas: EntityMetadata[];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(subjects: Subject[]) {\n        this.subjects = [...subjects]; // copy subjects to prevent changing of sent array\n        this.metadatas = this.getUniqueMetadatas(this.subjects);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Sorts (orders) subjects in their topological order.\n     */\n    sort(direction: \"insert\"|\"delete\"): Subject[] {\n\n        // if there are no metadatas it probably mean there is no subjects... we don't have to do anything here\n        if (!this.metadatas.length)\n            return this.subjects;\n\n        const sortedSubjects: Subject[] = [];\n\n        // first if we sort for deletion all junction subjects\n        // junction subjects are subjects without entity and database entity set\n        if (direction === \"delete\") {\n            const junctionSubjects = this.subjects.filter(subject => !subject.entity && !subject.databaseEntity);\n            sortedSubjects.push(...junctionSubjects);\n            this.removeAlreadySorted(junctionSubjects);\n        }\n\n        // next we always insert entities with non-nullable relations, sort them first\n        const nonNullableDependencies = this.getNonNullableDependencies();\n        let sortedNonNullableEntityTargets = this.toposort(nonNullableDependencies);\n        if (direction === \"insert\")\n            sortedNonNullableEntityTargets = sortedNonNullableEntityTargets.reverse();\n\n        // so we have a sorted entity targets\n        // go thought each of them and find all subjects with sorted entity target\n        // add those sorted targets and remove them from original array of targets\n        sortedNonNullableEntityTargets.forEach(sortedEntityTarget => {\n            const entityTargetSubjects = this.subjects.filter(subject => subject.metadata.targetName === sortedEntityTarget);\n            sortedSubjects.push(...entityTargetSubjects);\n            this.removeAlreadySorted(entityTargetSubjects);\n        });\n\n        // next sort all other entities\n        // same process as in above but with other entities\n        const otherDependencies: string[][] = this.getDependencies();\n        let sortedOtherEntityTargets = this.toposort(otherDependencies);\n        if (direction === \"insert\")\n            sortedOtherEntityTargets = sortedOtherEntityTargets.reverse();\n\n        sortedOtherEntityTargets.forEach(sortedEntityTarget => {\n            const entityTargetSubjects = this.subjects.filter(subject => subject.metadata.targetName === sortedEntityTarget);\n            sortedSubjects.push(...entityTargetSubjects);\n            this.removeAlreadySorted(entityTargetSubjects);\n        });\n\n        // if we have something left in the subjects add them as well\n        sortedSubjects.push(...this.subjects);\n        return sortedSubjects;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Removes already sorted subjects from this.subjects list of subjects.\n     */\n    protected removeAlreadySorted(subjects: Subject[]) {\n        subjects.forEach(subject => {\n            this.subjects.splice(this.subjects.indexOf(subject), 1);\n        });\n    }\n\n    /**\n     * Extracts all unique metadatas from the given subjects.\n     */\n    protected getUniqueMetadatas(subjects: Subject[]) {\n        const metadatas: EntityMetadata[] = [];\n        subjects.forEach(subject => {\n            if (metadatas.indexOf(subject.metadata) === -1)\n                metadatas.push(subject.metadata);\n        });\n        return metadatas;\n    }\n\n    /**\n     * Gets dependency tree for all entity metadatas with non-nullable relations.\n     * We need to execute insertions first for entities which non-nullable relations.\n     */\n    protected getNonNullableDependencies(): string[][] {\n        return this.metadatas.reduce((dependencies, metadata) => {\n            metadata.relationsWithJoinColumns.forEach(relation => {\n                if (relation.isNullable)\n                    return;\n\n                dependencies.push([metadata.targetName, relation.inverseEntityMetadata.targetName]);\n            });\n            return dependencies;\n        }, [] as string[][]);\n    }\n\n    /**\n     * Gets dependency tree for all entity metadatas with non-nullable relations.\n     * We need to execute insertions first for entities which non-nullable relations.\n     */\n    protected getDependencies(): string[][] {\n        return this.metadatas.reduce((dependencies, metadata) => {\n            metadata.relationsWithJoinColumns.forEach(relation => {\n\n                // if relation is self-referenced we skip it\n                if (relation.inverseEntityMetadata === metadata)\n                    return;\n\n                dependencies.push([metadata.targetName, relation.inverseEntityMetadata.targetName]);\n            });\n            return dependencies;\n        }, [] as string[][]);\n    }\n\n    /**\n     * Sorts given graph using topological sorting algorithm.\n     *\n     * Algorithm is kindly taken from https://github.com/marcelklehr/toposort repository.\n     */\n    protected toposort(edges: any[][]) {\n\n        function uniqueNodes(arr: any[]) {\n            let res = [];\n            for (let i = 0, len = arr.length; i < len; i++) {\n                let edge: any = arr[i];\n                if (res.indexOf(edge[0]) < 0) res.push(edge[0]);\n                if (res.indexOf(edge[1]) < 0) res.push(edge[1]);\n            }\n            return res;\n        }\n\n        const nodes = uniqueNodes(edges);\n        let cursor = nodes.length\n            , sorted = new Array(cursor)\n            , visited: any = {}\n            , i = cursor;\n\n        while (i--) {\n            if (!visited[i]) visit(nodes[i], i, []);\n        }\n\n        function visit(node: any, i: number, predecessors: any[]) {\n            if (predecessors.indexOf(node) >= 0) {\n                throw new Error(\"Cyclic dependency: \" + JSON.stringify(node)); // todo: better error\n            }\n\n            if (!~nodes.indexOf(node)) {\n                throw new Error(\"Found unknown node. Make sure to provided all involved nodes. Unknown node: \" + JSON.stringify(node));\n            }\n\n            if (visited[i]) return;\n            visited[i] = true;\n\n            // outgoing edges\n            let outgoing = edges.filter(function(edge) {\n                return edge[0] === node;\n            });\n            if (i = outgoing.length) {\n                let preds = predecessors.concat(node);\n                do {\n                    let child = outgoing[--i][1];\n                    visit(child, nodes.indexOf(child), preds);\n                } while (i);\n            }\n\n            sorted[--cursor] = node;\n        }\n\n        return sorted;\n    }\n\n}","import {Subject} from \"./Subject\";\nimport {DateUtils} from \"../util/DateUtils\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {OrmUtils} from \"../util/OrmUtils\";\nimport {ApplyValueTransformers} from \"../util/ApplyValueTransformers\";\n\n/**\n * Finds what columns are changed in the subject entities.\n */\nexport class SubjectChangedColumnsComputer {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds what columns are changed in the subject entities.\n     */\n    compute(subjects: Subject[]) {\n        subjects.forEach(subject => {\n            this.computeDiffColumns(subject);\n            this.computeDiffRelationalColumns(subjects, subject);\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Differentiate columns from the updated entity and entity stored in the database.\n     */\n    protected computeDiffColumns(subject: Subject): void {\n\n        // if there is no persisted entity then nothing to compute changed in it\n        if (!subject.entity)\n            return;\n\n        subject.metadata.columns.forEach(column => {\n\n            // ignore special columns\n            if (column.isVirtual ||\n                column.isDiscriminator // ||\n                // column.isUpdateDate ||\n                // column.isVersion ||\n                // column.isCreateDate\n            )\n                return;\n\n            const changeMap = subject.changeMaps.find(changeMap => changeMap.column === column);\n            if (changeMap) {\n                subject.changeMaps.splice(subject.changeMaps.indexOf(changeMap), 1);\n            }\n\n            // get user provided value - column value from the user provided persisted entity\n            const entityValue = column.getEntityValue(subject.entity!);\n\n            // we don't perform operation over undefined properties (but we DO need null properties!)\n            if (entityValue === undefined)\n                return;\n\n            // if there is no database entity then all columns are treated as new, e.g. changed\n            if (subject.databaseEntity) {\n\n                // get database value of the column\n                let databaseValue = column.getEntityValue(subject.databaseEntity, true);\n\n                // filter out \"relational columns\" only in the case if there is a relation object in entity\n                if (column.relationMetadata) {\n                    const value = column.relationMetadata.getEntityValue(subject.entity!);\n                    if (value !== null && value !== undefined)\n                        return;\n                }\n                let normalizedValue = entityValue;\n                // normalize special values to make proper comparision\n                if (entityValue !== null) {\n                    switch (column.type) {\n                        case \"date\":\n                            normalizedValue = DateUtils.mixedDateToDateString(entityValue);\n                            break;\n\n                        case \"time\":\n                        case \"time with time zone\":\n                        case \"time without time zone\":\n                        case \"timetz\":\n                            normalizedValue = DateUtils.mixedDateToTimeString(entityValue);\n                            break;\n\n                        case \"datetime\":\n                        case \"datetime2\":\n                        case Date:\n                        case \"timestamp\":\n                        case \"timestamp without time zone\":\n                        case \"timestamp with time zone\":\n                        case \"timestamp with local time zone\":\n                        case \"timestamptz\":\n                            normalizedValue = DateUtils.mixedDateToUtcDatetimeString(entityValue);\n                            databaseValue = DateUtils.mixedDateToUtcDatetimeString(databaseValue);\n                            break;\n\n                        case \"json\":\n                        case \"jsonb\":\n                            // JSON.stringify doesn't work because postgresql sorts jsonb before save.\n                            // If you try to save json '[{\"messages\": \"\", \"attribute Key\": \"\", \"level\":\"\"}] ' as jsonb,\n                            // then postgresql will save it as '[{\"level\": \"\", \"message\":\"\", \"attributeKey\": \"\"}]'\n                            if (OrmUtils.deepCompare(entityValue, databaseValue)) return;\n                            break;\n\n                        case \"simple-array\":\n                            normalizedValue = DateUtils.simpleArrayToString(entityValue);\n                            databaseValue = DateUtils.simpleArrayToString(databaseValue);\n                            break;\n                        case \"simple-enum\":\n                            normalizedValue = DateUtils.simpleEnumToString(entityValue);\n                            databaseValue = DateUtils.simpleEnumToString(databaseValue);\n                            break;\n                        case \"simple-json\":\n                            normalizedValue = DateUtils.simpleJsonToString(entityValue);\n                            databaseValue = DateUtils.simpleJsonToString(databaseValue);\n                            break;\n                    }\n\n                    if (column.transformer) {\n                        normalizedValue = ApplyValueTransformers.transformTo(column.transformer, entityValue);\n                    }\n                }\n\n                // if value is not changed - then do nothing\n                if (normalizedValue === databaseValue)\n                    return;\n            }\n            subject.diffColumns.push(column);\n            subject.changeMaps.push({\n                column: column,\n                value: entityValue\n            });\n        });\n    }\n\n    /**\n     * Difference columns of the owning one-to-one and many-to-one columns.\n     */\n    protected computeDiffRelationalColumns(allSubjects: Subject[], subject: Subject): void {\n\n        // if there is no persisted entity then nothing to compute changed in it\n        if (!subject.entity)\n            return;\n\n        subject.metadata.relationsWithJoinColumns.forEach(relation => {\n\n            // get the related entity from the persisted entity\n            let relatedEntity = relation.getEntityValue(subject.entity!);\n\n            // we don't perform operation over undefined properties (but we DO need null properties!)\n            if (relatedEntity === undefined)\n                return;\n\n            // if there is no database entity then all relational columns are treated as new, e.g. changed\n            if (subject.databaseEntity) {\n\n                // here we cover two scenarios:\n                // 1. related entity can be another entity which is natural way\n                // 2. related entity can be just an entity id\n                // if relation entity is just a relation id set (for example post.tag = 1)\n                // then we create an id map from it to make a proper comparision\n                let relatedEntityRelationIdMap: ObjectLiteral = relatedEntity;\n                if (relatedEntityRelationIdMap !== null && relatedEntityRelationIdMap instanceof Object)\n                    relatedEntityRelationIdMap = relation.getRelationIdMap(relatedEntityRelationIdMap)!;\n\n                // get database related entity. Since loadRelationIds are used on databaseEntity\n                // related entity will contain only its relation ids\n                const databaseRelatedEntityRelationIdMap = relation.getEntityValue(subject.databaseEntity);\n\n                // if relation ids are equal then we don't need to update anything\n                const areRelatedIdsEqual = OrmUtils.compareIds(relatedEntityRelationIdMap, databaseRelatedEntityRelationIdMap);\n                if (areRelatedIdsEqual) {\n                    return;\n                } else {\n                    subject.diffRelations.push(relation);\n                }\n            }\n\n            // if there is an inserted subject for the related entity of the persisted entity then use it as related entity\n            // this code is used for related entities without ids to be properly inserted (and then updated if needed)\n            const valueSubject = allSubjects.find(subject => subject.mustBeInserted && subject.entity === relatedEntity);\n            if (valueSubject)\n                relatedEntity = valueSubject;\n\n            // find if there is already a relation to be changed\n            const changeMap = subject.changeMaps.find(changeMap => changeMap.relation === relation);\n            if (changeMap) { // and update its value if it was found\n                changeMap.value = relatedEntity;\n\n            } else { // if it wasn't found add a new relation for change\n                subject.changeMaps.push({\n                    relation: relation,\n                    value: relatedEntity\n                });\n            }\n        });\n    }\n\n}\n","import {Subject} from \"../persistence/Subject\";\n\n/**\n * Thrown when operation is going to be executed on a subject without identifier.\n * This error should never be thrown, however it still presents to prevent user from updation or removing the whole table.\n * If this error occurs still, it most probably is an ORM internal problem which must be reported and fixed.\n */\nexport class SubjectWithoutIdentifierError extends Error {\n    name = \"SubjectWithoutIdentifierError\";\n\n    constructor(subject: Subject) {\n        super();\n        Object.setPrototypeOf(this, SubjectWithoutIdentifierError.prototype);\n        this.message = `Internal error. Subject ${subject.metadata.targetName} must have an identifier to perform operation. ` +\n            `Please report a github issue if you face this error.`;\n    }\n\n}","import {Subject} from \"../persistence/Subject\";\n\n/**\n * Thrown when same object is scheduled for remove and updation at the same time.\n */\nexport class SubjectRemovedAndUpdatedError extends Error {\n    name = \"SubjectRemovedAndUpdatedError\";\n\n    constructor(subject: Subject) {\n        super();\n        Object.setPrototypeOf(this, SubjectRemovedAndUpdatedError.prototype);\n        this.message = `Removed entity \"${subject.metadata.name}\" is also scheduled for update operation. ` +\n            `Make sure you are not updating and removing same object (note that update or remove may be executed by cascade operations).`;\n    }\n\n}","import {Subject} from \"../Subject\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\n\n/**\n * Executes subject operations for nested set tree entities.\n */\nexport class NestedSetSubjectExecutor {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected queryRunner: QueryRunner) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes operations when subject is being inserted.\n     */\n    async insert(subject: Subject): Promise<void> {\n        const escape = (alias: string) => this.queryRunner.connection.driver.escape(alias);\n        const tableName = this.getTableName(subject.metadata.tablePath);\n        const leftColumnName = escape(subject.metadata.nestedSetLeftColumn!.databaseName);\n        const rightColumnName = escape(subject.metadata.nestedSetRightColumn!.databaseName);\n\n        let parent = subject.metadata.treeParentRelation!.getEntityValue(subject.entity!); // if entity was attached via parent\n        if (!parent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children\n            parent = subject.parentSubject.insertedValueSet ? subject.parentSubject.insertedValueSet : subject.parentSubject.entity;\n        const parentId = subject.metadata.getEntityIdMap(parent);\n\n        let parentNsRight: number|undefined = undefined;\n        if (parentId) {\n            parentNsRight = await this.queryRunner.manager\n                .createQueryBuilder()\n                .select(subject.metadata.targetName + \".\" + subject.metadata.nestedSetRightColumn!.propertyPath, \"right\")\n                .from(subject.metadata.target, subject.metadata.targetName)\n                .whereInIds(parentId)\n                .getRawOne()\n                .then(result => {\n                    const value: any = result ? result[\"right\"] : undefined;\n                    // CockroachDB returns numeric types as string\n                    return typeof value === \"string\" ? parseInt(value) : value;\n                });\n        }\n\n        if (parentNsRight !== undefined) {\n            await this.queryRunner.query(`UPDATE ${tableName} SET ` +\n                `${leftColumnName} = CASE WHEN ${leftColumnName} > ${parentNsRight} THEN ${leftColumnName} + 2 ELSE ${leftColumnName} END,` +\n                `${rightColumnName} = ${rightColumnName} + 2 ` +\n                `WHERE ${rightColumnName} >= ${parentNsRight}`);\n\n            OrmUtils.mergeDeep(\n                subject.insertedValueSet,\n                subject.metadata.nestedSetLeftColumn!.createValueMap(parentNsRight),\n                subject.metadata.nestedSetRightColumn!.createValueMap(parentNsRight + 1),\n            );\n        } else {\n            OrmUtils.mergeDeep(\n                subject.insertedValueSet,\n                subject.metadata.nestedSetLeftColumn!.createValueMap(1),\n                subject.metadata.nestedSetRightColumn!.createValueMap(2),\n            );\n        }\n    }\n\n    /**\n     * Gets escaped table name with schema name if SqlServer or Postgres driver used with custom\n     * schema name, otherwise returns escaped table name.\n     */\n    protected getTableName(tablePath: string): string {\n        return tablePath.split(\".\")\n            .map(i => {\n                // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n                if (i === \"\")\n                    return i;\n                return this.queryRunner.connection.driver.escape(i);\n            }).join(\".\");\n    }\n\n}\n","/**\n * Thrown when user saves tree children entity but its parent is not saved yet.\n*/\nexport class CannotAttachTreeChildrenEntityError extends Error {\n    name = \"CannotAttachTreeChildrenEntityError\";\n\n    constructor(entityName: string) {\n        super();\n        Object.setPrototypeOf(this, CannotAttachTreeChildrenEntityError.prototype);\n        this.message = `Cannot attach entity \"${entityName}\" to its parent. Please make sure parent is saved in the database before saving children nodes.`;\n    }\n\n}","import {Subject} from \"../Subject\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {CannotAttachTreeChildrenEntityError} from \"../../error/CannotAttachTreeChildrenEntityError\";\n\n/**\n * Executes subject operations for closure entities.\n */\nexport class ClosureSubjectExecutor {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected queryRunner: QueryRunner) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Removes all children of the given subject's entity.\n\n     async deleteChildrenOf(subject: Subject) {\n        // const relationValue = subject.metadata.treeParentRelation.getEntityValue(subject.databaseEntity);\n        // console.log(\"relationValue: \", relationValue);\n        // this.queryRunner.manager\n        //     .createQueryBuilder()\n        //     .from(subject.metadata.closureJunctionTable.target, \"tree\")\n        //     .where(\"tree.\");\n    }*/\n\n    /**\n     * Executes operations when subject is being inserted.\n     */\n    async insert(subject: Subject): Promise<void> {\n\n        // create values to be inserted into the closure junction\n        const closureJunctionInsertMap: ObjectLiteral = {};\n        subject.metadata.closureJunctionTable.ancestorColumns.forEach(column => {\n            closureJunctionInsertMap[column.databaseName] = subject.identifier;\n        });\n        subject.metadata.closureJunctionTable.descendantColumns.forEach(column => {\n            closureJunctionInsertMap[column.databaseName] = subject.identifier;\n        });\n\n        // insert values into the closure junction table\n        await this.queryRunner\n            .manager\n            .createQueryBuilder()\n            .insert()\n            .into(subject.metadata.closureJunctionTable.tablePath)\n            .values(closureJunctionInsertMap)\n            .updateEntity(false)\n            .callListeners(false)\n            .execute();\n\n        let parent = subject.metadata.treeParentRelation!.getEntityValue(subject.entity!); // if entity was attached via parent\n        if (!parent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children\n            parent = subject.parentSubject.insertedValueSet ? subject.parentSubject.insertedValueSet : subject.parentSubject.entity;\n\n        if (parent) {\n            const escape = (alias: string) => this.queryRunner.connection.driver.escape(alias);\n            const tableName = this.getTableName(subject.metadata.closureJunctionTable.tablePath);\n            const ancestorColumnNames = subject.metadata.closureJunctionTable.ancestorColumns.map(column => {\n                return escape(column.databaseName);\n            });\n            const descendantColumnNames = subject.metadata.closureJunctionTable.descendantColumns.map(column => {\n                return escape(column.databaseName);\n            });\n            const firstQueryParameters: any[] = [];\n            const childEntityIdValues = subject.metadata.primaryColumns.map(column => column.getEntityValue(subject.insertedValueSet!));\n            const childEntityIds1 = subject.metadata.primaryColumns.map((column, index) => {\n                firstQueryParameters.push(childEntityIdValues[index]);\n                return this.queryRunner.connection.driver.createParameter(\"child_entity_\" + column.databaseName, firstQueryParameters.length - 1);\n            });\n            const whereCondition = subject.metadata.closureJunctionTable.descendantColumns.map(column => {\n                const columnName = escape(column.databaseName);\n                const parentId = column.referencedColumn!.getEntityValue(parent);\n                if (!parentId)\n                    throw new CannotAttachTreeChildrenEntityError(subject.metadata.name);\n\n                firstQueryParameters.push(parentId);\n                const parameterName = this.queryRunner.connection.driver.createParameter(\"parent_entity_\" + column.referencedColumn!.databaseName, firstQueryParameters.length - 1);\n                return columnName + \" = \" + parameterName;\n            }).join(\", \");\n\n            await this.queryRunner.query(\n                `INSERT INTO ${tableName} (${[...ancestorColumnNames, ...descendantColumnNames].join(\", \")}) ` +\n                `SELECT ${ancestorColumnNames.join(\", \")}, ${childEntityIds1.join(\", \")} FROM ${tableName} WHERE ${whereCondition}`,\n                firstQueryParameters\n            );\n        }\n    }\n\n    /**\n     * Gets escaped table name with schema name if SqlServer or Postgres driver used with custom\n     * schema name, otherwise returns escaped table name.\n     */\n    protected getTableName(tablePath: string): string {\n        return tablePath.split(\".\")\n            .map(i => {\n                // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n                if (i === \"\")\n                    return i;\n                return this.queryRunner.connection.driver.escape(i);\n            }).join(\".\");\n    }\n\n\n}\n","import {Subject} from \"../Subject\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\n\n/**\n * Executes subject operations for materialized-path tree entities.\n */\nexport class MaterializedPathSubjectExecutor {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected queryRunner: QueryRunner) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes operations when subject is being inserted.\n     */\n    async insert(subject: Subject): Promise<void> {\n\n        let parent = subject.metadata.treeParentRelation!.getEntityValue(subject.entity!); // if entity was attached via parent\n        if (!parent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children\n            parent = subject.parentSubject.insertedValueSet ? subject.parentSubject.insertedValueSet : subject.parentSubject.entity;\n\n        const parentId = subject.metadata.getEntityIdMap(parent);\n\n        let parentPath: string = \"\";\n        if (parentId) {\n            parentPath = await this.queryRunner.manager\n                .createQueryBuilder()\n                .select(subject.metadata.targetName + \".\" + subject.metadata.materializedPathColumn!.propertyPath, \"path\")\n                .from(subject.metadata.target, subject.metadata.targetName)\n                .whereInIds(parentId)\n                .getRawOne()\n                .then(result => result ? result[\"path\"] : undefined);\n        }\n\n        const insertedEntityId = subject.metadata.treeParentRelation!.joinColumns.map(joinColumn => {\n            return joinColumn.referencedColumn!.getEntityValue(subject.insertedValueSet!);\n        }).join(\"_\");\n\n        await this.queryRunner.manager\n            .createQueryBuilder()\n            .update(subject.metadata.target)\n            .set({\n                [subject.metadata.materializedPathColumn!.propertyPath]: parentPath + insertedEntityId + \".\"\n            } as any)\n            .where(subject.identifier!)\n            .execute();\n    }\n\n}\n","import {SapDriver} from \"../driver/sap/SapDriver\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {Subject} from \"./Subject\";\nimport {SubjectTopoligicalSorter} from \"./SubjectTopoligicalSorter\";\nimport {SubjectChangedColumnsComputer} from \"./SubjectChangedColumnsComputer\";\nimport {SubjectWithoutIdentifierError} from \"../error/SubjectWithoutIdentifierError\";\nimport {SubjectRemovedAndUpdatedError} from \"../error/SubjectRemovedAndUpdatedError\";\nimport {MongoQueryRunner} from \"../driver/mongodb/MongoQueryRunner\";\nimport {MongoEntityManager} from \"../entity-manager/MongoEntityManager\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {SaveOptions} from \"../repository/SaveOptions\";\nimport {RemoveOptions} from \"../repository/RemoveOptions\";\nimport {BroadcasterResult} from \"../subscriber/BroadcasterResult\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {NestedSetSubjectExecutor} from \"./tree/NestedSetSubjectExecutor\";\nimport {ClosureSubjectExecutor} from \"./tree/ClosureSubjectExecutor\";\nimport {MaterializedPathSubjectExecutor} from \"./tree/MaterializedPathSubjectExecutor\";\nimport {OrmUtils} from \"../util/OrmUtils\";\n\n/**\n * Executes all database operations (inserts, updated, deletes) that must be executed\n * with given persistence subjects.\n */\nexport class SubjectExecutor {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if executor has any operations to execute (e.g. has insert / update / delete operations to be executed).\n     */\n    hasExecutableOperations: boolean = false;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * QueryRunner used to execute all queries with a given subjects.\n     */\n    protected queryRunner: QueryRunner;\n\n    /**\n     * Persistence options.\n     */\n    protected options?: SaveOptions & RemoveOptions;\n\n    /**\n     * All subjects that needs to be operated.\n     */\n    protected allSubjects: Subject[];\n\n    /**\n     * Subjects that must be inserted.\n     */\n    protected insertSubjects: Subject[] = [];\n\n    /**\n     * Subjects that must be updated.\n     */\n    protected updateSubjects: Subject[] = [];\n\n    /**\n     * Subjects that must be removed.\n     */\n    protected removeSubjects: Subject[] = [];\n\n    /**\n     * Subjects that must be soft-removed.\n     */\n    protected softRemoveSubjects: Subject[] = [];\n\n    /**\n     * Subjects that must be recovered.\n     */\n    protected recoverSubjects: Subject[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(queryRunner: QueryRunner, subjects: Subject[], options?: SaveOptions & RemoveOptions) {\n        this.queryRunner = queryRunner;\n        this.allSubjects = subjects;\n        this.options = options;\n        this.validate();\n        this.recompute();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes all operations over given array of subjects.\n     * Executes queries using given query runner.\n     */\n    async execute(): Promise<void> {\n        // console.time(\"SubjectExecutor.execute\");\n\n        // broadcast \"before\" events before we start insert / update / remove operations\n        let broadcasterResult: BroadcasterResult | undefined = undefined;\n        if (!this.options || this.options.listeners !== false) {\n            // console.time(\".broadcastBeforeEventsForAll\");\n            broadcasterResult = this.broadcastBeforeEventsForAll();\n            if (broadcasterResult.promises.length > 0) await Promise.all(broadcasterResult.promises);\n            // console.timeEnd(\".broadcastBeforeEventsForAll\");\n        }\n\n        // since event listeners and subscribers can call save methods and/or trigger entity changes we need to recompute operational subjects\n        // recompute only in the case if any listener or subscriber was really executed\n        if (broadcasterResult && broadcasterResult.count > 0) {\n            // console.time(\".recompute\");\n            this.insertSubjects.forEach(subject => subject.recompute());\n            this.updateSubjects.forEach(subject => subject.recompute());\n            this.removeSubjects.forEach(subject => subject.recompute());\n            this.softRemoveSubjects.forEach(subject => subject.recompute());\n            this.recoverSubjects.forEach(subject => subject.recompute());\n            this.recompute();\n            // console.timeEnd(\".recompute\");\n        }\n\n        // make sure our insert subjects are sorted (using topological sorting) to make cascade inserts work properly\n\n        // console.timeEnd(\"prepare\");\n\n        // execute all insert operations\n        // console.time(\".insertion\");\n        this.insertSubjects = new SubjectTopoligicalSorter(this.insertSubjects).sort(\"insert\");\n        await this.executeInsertOperations();\n        // console.timeEnd(\".insertion\");\n\n        // recompute update operations since insertion can create updation operations for the\n        // properties it wasn't able to handle on its own (referenced columns)\n        this.updateSubjects = this.allSubjects.filter(subject => subject.mustBeUpdated);\n\n        // execute update operations\n        // console.time(\".updation\");\n        await this.executeUpdateOperations();\n        // console.timeEnd(\".updation\");\n\n        // make sure our remove subjects are sorted (using topological sorting) when multiple entities are passed for the removal\n        // console.time(\".removal\");\n        this.removeSubjects = new SubjectTopoligicalSorter(this.removeSubjects).sort(\"delete\");\n        await this.executeRemoveOperations();\n        // console.timeEnd(\".removal\");\n\n        // recompute soft-remove operations\n        this.softRemoveSubjects = this.allSubjects.filter(subject => subject.mustBeSoftRemoved);\n\n        // execute soft-remove operations\n        await this.executeSoftRemoveOperations();\n\n        // recompute recover operations\n        this.recoverSubjects = this.allSubjects.filter(subject => subject.mustBeRecovered);\n\n        // execute recover operations\n        await this.executeRecoverOperations();\n\n        // update all special columns in persisted entities, like inserted id or remove ids from the removed entities\n        // console.time(\".updateSpecialColumnsInPersistedEntities\");\n        await this.updateSpecialColumnsInPersistedEntities();\n        // console.timeEnd(\".updateSpecialColumnsInPersistedEntities\");\n\n        // finally broadcast \"after\" events after we finish insert / update / remove operations\n        if (!this.options || this.options.listeners !== false) {\n            // console.time(\".broadcastAfterEventsForAll\");\n            broadcasterResult = this.broadcastAfterEventsForAll();\n            if (broadcasterResult.promises.length > 0) await Promise.all(broadcasterResult.promises);\n            // console.timeEnd(\".broadcastAfterEventsForAll\");\n        }\n        // console.timeEnd(\"SubjectExecutor.execute\");\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Validates all given subjects.\n     */\n    protected validate() {\n        this.allSubjects.forEach(subject => {\n            if (subject.mustBeUpdated && subject.mustBeRemoved)\n                throw new SubjectRemovedAndUpdatedError(subject);\n        });\n    }\n\n    /**\n     * Performs entity re-computations - finds changed columns, re-builds insert/update/remove subjects.\n     */\n    protected recompute(): void {\n        new SubjectChangedColumnsComputer().compute(this.allSubjects);\n        this.insertSubjects = this.allSubjects.filter(subject => subject.mustBeInserted);\n        this.updateSubjects = this.allSubjects.filter(subject => subject.mustBeUpdated);\n        this.removeSubjects = this.allSubjects.filter(subject => subject.mustBeRemoved);\n        this.softRemoveSubjects = this.allSubjects.filter(subject => subject.mustBeSoftRemoved);\n        this.recoverSubjects = this.allSubjects.filter(subject => subject.mustBeRecovered);\n        this.hasExecutableOperations = this.insertSubjects.length > 0 || this.updateSubjects.length > 0 || this.removeSubjects.length > 0 || this.softRemoveSubjects.length > 0 || this.recoverSubjects.length > 0;\n    }\n\n    /**\n     * Broadcasts \"BEFORE_INSERT\", \"BEFORE_UPDATE\", \"BEFORE_REMOVE\" events for all given subjects.\n     */\n    protected broadcastBeforeEventsForAll(): BroadcasterResult {\n        const result = new BroadcasterResult();\n        if (this.insertSubjects.length)\n            this.insertSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastBeforeInsertEvent(result, subject.metadata, subject.entity!));\n        if (this.updateSubjects.length)\n            this.updateSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastBeforeUpdateEvent(result, subject.metadata, subject.entity!, subject.databaseEntity, subject.diffColumns, subject.diffRelations));\n        if (this.removeSubjects.length)\n            this.removeSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastBeforeRemoveEvent(result, subject.metadata, subject.entity!, subject.databaseEntity));\n        if (this.softRemoveSubjects.length)\n            this.softRemoveSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastBeforeUpdateEvent(result, subject.metadata, subject.entity!, subject.databaseEntity, subject.diffColumns, subject.diffRelations));\n        if (this.recoverSubjects.length)\n            this.recoverSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastBeforeUpdateEvent(result, subject.metadata, subject.entity!, subject.databaseEntity, subject.diffColumns, subject.diffRelations));\n        return result;\n    }\n\n    /**\n     * Broadcasts \"AFTER_INSERT\", \"AFTER_UPDATE\", \"AFTER_REMOVE\" events for all given subjects.\n     * Returns void if there wasn't any listener or subscriber executed.\n     * Note: this method has a performance-optimized code organization.\n     */\n    protected broadcastAfterEventsForAll(): BroadcasterResult {\n        const result = new BroadcasterResult();\n        if (this.insertSubjects.length)\n            this.insertSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastAfterInsertEvent(result, subject.metadata, subject.entity!));\n        if (this.updateSubjects.length)\n            this.updateSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastAfterUpdateEvent(result, subject.metadata, subject.entity!, subject.databaseEntity, subject.diffColumns, subject.diffRelations));\n        if (this.removeSubjects.length)\n            this.removeSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastAfterRemoveEvent(result, subject.metadata, subject.entity!, subject.databaseEntity));\n        if (this.softRemoveSubjects.length)\n            this.softRemoveSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastAfterUpdateEvent(result, subject.metadata, subject.entity!, subject.databaseEntity, subject.diffColumns, subject.diffRelations));\n        if (this.recoverSubjects.length)\n            this.recoverSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastAfterUpdateEvent(result, subject.metadata, subject.entity!, subject.databaseEntity, subject.diffColumns, subject.diffRelations));\n        return result;\n    }\n\n    /**\n     * Executes insert operations.\n     */\n    protected async executeInsertOperations(): Promise<void> {\n        // group insertion subjects to make bulk insertions\n        const [groupedInsertSubjects, groupedInsertSubjectKeys] = this.groupBulkSubjects(this.insertSubjects, \"insert\");\n\n        // then we run insertion in the sequential order which is important since we have an ordered subjects\n        for (const groupName of groupedInsertSubjectKeys) {\n            const subjects = groupedInsertSubjects[groupName];\n\n            // we must separately insert entities which does not have any values to insert\n            // because its not possible to insert multiple entities with only default values in bulk\n            const bulkInsertMaps: ObjectLiteral[] = [];\n            const bulkInsertSubjects: Subject[] = [];\n            const singleInsertSubjects: Subject[] = [];\n            if (this.queryRunner.connection.driver instanceof MongoDriver) {\n                subjects.forEach(subject => {\n                    if (subject.metadata.createDateColumn && subject.entity) {\n                        subject.entity[subject.metadata.createDateColumn.databaseName] = new Date();\n                    }\n\n                    if (subject.metadata.updateDateColumn && subject.entity) {\n                        subject.entity[subject.metadata.updateDateColumn.databaseName] = new Date();\n                    }\n\n                    subject.createValueSetAndPopChangeMap();\n\n                    bulkInsertSubjects.push(subject);\n                    bulkInsertMaps.push(subject.entity!);\n                });\n            } else if (this.queryRunner.connection.driver instanceof OracleDriver) {\n                subjects.forEach(subject => {\n                    singleInsertSubjects.push(subject);\n                });\n            } else {\n                subjects.forEach(subject => {\n\n                    // we do not insert in bulk in following cases:\n                    // - when there is no values in insert (only defaults are inserted), since we cannot use DEFAULT VALUES expression for multiple inserted rows\n                    // - when entity is a tree table, since tree tables require extra operation per each inserted row\n                    // - when oracle is used, since oracle's bulk insertion is very bad\n                    if (subject.changeMaps.length === 0 ||\n                        subject.metadata.treeType ||\n                        this.queryRunner.connection.driver instanceof OracleDriver ||\n                        this.queryRunner.connection.driver instanceof SapDriver) {\n                        singleInsertSubjects.push(subject);\n\n                    } else {\n                        bulkInsertSubjects.push(subject);\n                        bulkInsertMaps.push(subject.createValueSetAndPopChangeMap());\n                    }\n                });\n            }\n\n            // for mongodb we have a bit different insertion logic\n            if (this.queryRunner instanceof MongoQueryRunner) {\n                const manager = this.queryRunner.manager as MongoEntityManager;\n                const insertResult = await manager.insert(subjects[0].metadata.target, bulkInsertMaps);\n                subjects.forEach((subject, index) => {\n                    subject.identifier = insertResult.identifiers[index];\n                    subject.generatedMap = insertResult.generatedMaps[index];\n                    subject.insertedValueSet = bulkInsertMaps[index];\n                });\n\n            } else {\n\n                // here we execute our insertion query\n                // we need to enable entity updation because we DO need to have updated insertedMap\n                // which is not same object as our entity that's why we don't need to worry about our entity to get dirty\n                // also, we disable listeners because we call them on our own in persistence layer\n                if (bulkInsertMaps.length > 0) {\n                    const insertResult = await this.queryRunner\n                        .manager\n                        .createQueryBuilder()\n                        .insert()\n                        .into(subjects[0].metadata.target)\n                        .values(bulkInsertMaps)\n                        .updateEntity(this.options && this.options.reload === false ? false : true)\n                        .callListeners(false)\n                        .execute();\n\n                    bulkInsertSubjects.forEach((subject, index) => {\n                        subject.identifier = insertResult.identifiers[index];\n                        subject.generatedMap = insertResult.generatedMaps[index];\n                        subject.insertedValueSet = bulkInsertMaps[index];\n                    });\n                }\n\n                // insert subjects which must be inserted in separate requests (all default values)\n                if (singleInsertSubjects.length > 0) {\n                    for (const subject of singleInsertSubjects) {\n                        subject.insertedValueSet = subject.createValueSetAndPopChangeMap(); // important to have because query builder sets inserted values into it\n\n                        // for nested set we execute additional queries\n                        if (subject.metadata.treeType === \"nested-set\")\n                            await new NestedSetSubjectExecutor(this.queryRunner).insert(subject);\n\n                        await this.queryRunner\n                            .manager\n                            .createQueryBuilder()\n                            .insert()\n                            .into(subject.metadata.target)\n                            .values(subject.insertedValueSet)\n                            .updateEntity(this.options && this.options.reload === false ? false : true)\n                            .callListeners(false)\n                            .execute()\n                            .then(insertResult => {\n                                subject.identifier = insertResult.identifiers[0];\n                                subject.generatedMap = insertResult.generatedMaps[0];\n                            });\n\n                        // for tree tables we execute additional queries\n                        if (subject.metadata.treeType === \"closure-table\") {\n                            await new ClosureSubjectExecutor(this.queryRunner).insert(subject);\n\n                        } else if (subject.metadata.treeType === \"materialized-path\") {\n                            await new MaterializedPathSubjectExecutor(this.queryRunner).insert(subject);\n                        }\n                    }\n                }\n            }\n\n            subjects.forEach(subject => {\n                if (subject.generatedMap) {\n                    subject.metadata.columns.forEach(column => {\n                        const value = column.getEntityValue(subject.generatedMap!);\n                        if (value !== undefined && value !== null) {\n                            const preparedValue = this.queryRunner.connection.driver.prepareHydratedValue(value, column);\n                            column.setEntityValue(subject.generatedMap!, preparedValue);\n                        }\n                    });\n                }\n            });\n        }\n    }\n\n    /**\n     * Updates all given subjects in the database.\n     */\n    protected async executeUpdateOperations(): Promise<void> {\n        await Promise.all(this.updateSubjects.map(async subject => {\n\n            if (!subject.identifier)\n                throw new SubjectWithoutIdentifierError(subject);\n\n            // for mongodb we have a bit different updation logic\n            if (this.queryRunner instanceof MongoQueryRunner) {\n                const partialEntity = OrmUtils.mergeDeep({}, subject.entity!);\n                if (subject.metadata.objectIdColumn && subject.metadata.objectIdColumn.propertyName) {\n                    delete partialEntity[subject.metadata.objectIdColumn.propertyName];\n                }\n\n                if (subject.metadata.createDateColumn && subject.metadata.createDateColumn.propertyName) {\n                    delete partialEntity[subject.metadata.createDateColumn.propertyName];\n                }\n\n                if (subject.metadata.updateDateColumn && subject.metadata.updateDateColumn.propertyName) {\n                    partialEntity[subject.metadata.updateDateColumn.propertyName] = new Date();\n                }\n\n                const manager = this.queryRunner.manager as MongoEntityManager;\n\n                await manager.update(subject.metadata.target, subject.identifier, partialEntity);\n\n            } else {\n\n                const updateMap: ObjectLiteral = subject.createValueSetAndPopChangeMap();\n\n                // here we execute our updation query\n                // we need to enable entity updation because we update a subject identifier\n                // which is not same object as our entity that's why we don't need to worry about our entity to get dirty\n                // also, we disable listeners because we call them on our own in persistence layer\n                const updateQueryBuilder = this.queryRunner\n                    .manager\n                    .createQueryBuilder()\n                    .update(subject.metadata.target)\n                    .set(updateMap)\n                    .updateEntity(this.options && this.options.reload === false ? false : true)\n                    .callListeners(false);\n\n                if (subject.entity) {\n                    updateQueryBuilder.whereEntity(subject.identifier);\n\n                } else { // in this case identifier is just conditions object to update by\n                    updateQueryBuilder.where(subject.identifier);\n                }\n\n                const updateResult = await updateQueryBuilder.execute();\n                subject.generatedMap = updateResult.generatedMaps[0];\n                if (subject.generatedMap) {\n                    subject.metadata.columns.forEach(column => {\n                        const value = column.getEntityValue(subject.generatedMap!);\n                        if (value !== undefined && value !== null) {\n                            const preparedValue = this.queryRunner.connection.driver.prepareHydratedValue(value, column);\n                            column.setEntityValue(subject.generatedMap!, preparedValue);\n                        }\n                    });\n                }\n\n                // experiments, remove probably, need to implement tree tables children removal\n                // if (subject.updatedRelationMaps.length > 0) {\n                //     await Promise.all(subject.updatedRelationMaps.map(async updatedRelation => {\n                //         if (!updatedRelation.relation.isTreeParent) return;\n                //         if (!updatedRelation.value !== null) return;\n                //\n                //         if (subject.metadata.treeType === \"closure-table\") {\n                //             await new ClosureSubjectExecutor(this.queryRunner).deleteChildrenOf(subject);\n                //         }\n                //     }));\n                // }\n            }\n        }));\n    }\n\n    /**\n     * Removes all given subjects from the database.\n     *\n     * todo: we need to apply topological sort here as well\n     */\n    protected async executeRemoveOperations(): Promise<void> {\n        // group insertion subjects to make bulk insertions\n        const [groupedRemoveSubjects, groupedRemoveSubjectKeys] = this.groupBulkSubjects(this.removeSubjects, \"delete\");\n\n        for (const groupName of groupedRemoveSubjectKeys) {\n            const subjects = groupedRemoveSubjects[groupName];\n            const deleteMaps = subjects.map(subject => {\n                if (!subject.identifier)\n                    throw new SubjectWithoutIdentifierError(subject);\n\n                return subject.identifier;\n            });\n\n            // for mongodb we have a bit different updation logic\n            if (this.queryRunner instanceof MongoQueryRunner) {\n                const manager = this.queryRunner.manager as MongoEntityManager;\n                await manager.delete(subjects[0].metadata.target, deleteMaps);\n\n            } else {\n\n                // here we execute our deletion query\n                // we don't need to specify entities and set update entity to true since the only thing query builder\n                // will do for use is a primary keys deletion which is handled by us later once persistence is finished\n                // also, we disable listeners because we call them on our own in persistence layer\n                await this.queryRunner\n                    .manager\n                    .createQueryBuilder()\n                    .delete()\n                    .from(subjects[0].metadata.target)\n                    .where(deleteMaps)\n                    .callListeners(false)\n                    .execute();\n            }\n        }\n    }\n\n    /**\n     * Soft-removes all given subjects in the database.\n     */\n    protected async executeSoftRemoveOperations(): Promise<void> {\n        await Promise.all(this.softRemoveSubjects.map(async subject => {\n\n            if (!subject.identifier)\n                throw new SubjectWithoutIdentifierError(subject);\n\n            // for mongodb we have a bit different updation logic\n            if (this.queryRunner instanceof MongoQueryRunner) {\n                const partialEntity = OrmUtils.mergeDeep({}, subject.entity!);\n                if (subject.metadata.objectIdColumn && subject.metadata.objectIdColumn.propertyName) {\n                    delete partialEntity[subject.metadata.objectIdColumn.propertyName];\n                }\n\n                if (subject.metadata.createDateColumn && subject.metadata.createDateColumn.propertyName) {\n                    delete partialEntity[subject.metadata.createDateColumn.propertyName];\n                }\n\n                if (subject.metadata.updateDateColumn && subject.metadata.updateDateColumn.propertyName) {\n                    partialEntity[subject.metadata.updateDateColumn.propertyName] = new Date();\n                }\n\n                if (subject.metadata.deleteDateColumn && subject.metadata.deleteDateColumn.propertyName) {\n                    partialEntity[subject.metadata.deleteDateColumn.propertyName] = new Date();\n                }\n\n                const manager = this.queryRunner.manager as MongoEntityManager;\n\n                await manager.update(subject.metadata.target, subject.identifier, partialEntity);\n\n            } else {\n\n                // here we execute our soft-deletion query\n                // we need to enable entity soft-deletion because we update a subject identifier\n                // which is not same object as our entity that's why we don't need to worry about our entity to get dirty\n                // also, we disable listeners because we call them on our own in persistence layer\n                const softDeleteQueryBuilder = this.queryRunner\n                    .manager\n                    .createQueryBuilder()\n                    .softDelete()\n                    .from(subject.metadata.target)\n                    .updateEntity(this.options && this.options.reload === false ? false : true)\n                    .callListeners(false);\n\n                if (subject.entity) {\n                    softDeleteQueryBuilder.whereEntity(subject.identifier);\n\n                } else { // in this case identifier is just conditions object to update by\n                    softDeleteQueryBuilder.where(subject.identifier);\n                }\n\n                const updateResult = await softDeleteQueryBuilder.execute();\n                subject.generatedMap = updateResult.generatedMaps[0];\n                if (subject.generatedMap) {\n                    subject.metadata.columns.forEach(column => {\n                        const value = column.getEntityValue(subject.generatedMap!);\n                        if (value !== undefined && value !== null) {\n                            const preparedValue = this.queryRunner.connection.driver.prepareHydratedValue(value, column);\n                            column.setEntityValue(subject.generatedMap!, preparedValue);\n                        }\n                    });\n                }\n\n                // experiments, remove probably, need to implement tree tables children removal\n                // if (subject.updatedRelationMaps.length > 0) {\n                //     await Promise.all(subject.updatedRelationMaps.map(async updatedRelation => {\n                //         if (!updatedRelation.relation.isTreeParent) return;\n                //         if (!updatedRelation.value !== null) return;\n                //\n                //         if (subject.metadata.treeType === \"closure-table\") {\n                //             await new ClosureSubjectExecutor(this.queryRunner).deleteChildrenOf(subject);\n                //         }\n                //     }));\n                // }\n            }\n        }));\n    }\n\n    /**\n     * Recovers all given subjects in the database.\n     */\n    protected async executeRecoverOperations(): Promise<void> {\n        await Promise.all(this.recoverSubjects.map(async subject => {\n\n            if (!subject.identifier)\n                throw new SubjectWithoutIdentifierError(subject);\n\n            // for mongodb we have a bit different updation logic\n            if (this.queryRunner instanceof MongoQueryRunner) {\n                const partialEntity = OrmUtils.mergeDeep({}, subject.entity!);\n                if (subject.metadata.objectIdColumn && subject.metadata.objectIdColumn.propertyName) {\n                    delete partialEntity[subject.metadata.objectIdColumn.propertyName];\n                }\n\n                if (subject.metadata.createDateColumn && subject.metadata.createDateColumn.propertyName) {\n                    delete partialEntity[subject.metadata.createDateColumn.propertyName];\n                }\n\n                if (subject.metadata.updateDateColumn && subject.metadata.updateDateColumn.propertyName) {\n                    partialEntity[subject.metadata.updateDateColumn.propertyName] = new Date();\n                }\n\n                if (subject.metadata.deleteDateColumn && subject.metadata.deleteDateColumn.propertyName) {\n                    partialEntity[subject.metadata.deleteDateColumn.propertyName] = null;\n                }\n\n                const manager = this.queryRunner.manager as MongoEntityManager;\n\n                await manager.update(subject.metadata.target, subject.identifier, partialEntity);\n\n            } else {\n\n                // here we execute our restory query\n                // we need to enable entity restory because we update a subject identifier\n                // which is not same object as our entity that's why we don't need to worry about our entity to get dirty\n                // also, we disable listeners because we call them on our own in persistence layer\n                const softDeleteQueryBuilder = this.queryRunner\n                    .manager\n                    .createQueryBuilder()\n                    .restore()\n                    .from(subject.metadata.target)\n                    .updateEntity(this.options && this.options.reload === false ? false : true)\n                    .callListeners(false);\n\n                if (subject.entity) {\n                    softDeleteQueryBuilder.whereEntity(subject.identifier);\n\n                } else { // in this case identifier is just conditions object to update by\n                    softDeleteQueryBuilder.where(subject.identifier);\n                }\n\n                const updateResult = await softDeleteQueryBuilder.execute();\n                subject.generatedMap = updateResult.generatedMaps[0];\n                if (subject.generatedMap) {\n                    subject.metadata.columns.forEach(column => {\n                        const value = column.getEntityValue(subject.generatedMap!);\n                        if (value !== undefined && value !== null) {\n                            const preparedValue = this.queryRunner.connection.driver.prepareHydratedValue(value, column);\n                            column.setEntityValue(subject.generatedMap!, preparedValue);\n                        }\n                    });\n                }\n\n                // experiments, remove probably, need to implement tree tables children removal\n                // if (subject.updatedRelationMaps.length > 0) {\n                //     await Promise.all(subject.updatedRelationMaps.map(async updatedRelation => {\n                //         if (!updatedRelation.relation.isTreeParent) return;\n                //         if (!updatedRelation.value !== null) return;\n                //\n                //         if (subject.metadata.treeType === \"closure-table\") {\n                //             await new ClosureSubjectExecutor(this.queryRunner).deleteChildrenOf(subject);\n                //         }\n                //     }));\n                // }\n            }\n        }));\n    }\n\n    /**\n     * Updates all special columns of the saving entities (create date, update date, version, etc.).\n     * Also updates nullable columns and columns with default values.\n     */\n    protected updateSpecialColumnsInPersistedEntities(): void {\n\n        // update inserted entity properties\n        if (this.insertSubjects.length)\n            this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.insertSubjects);\n\n        // update updated entity properties\n        if (this.updateSubjects.length)\n            this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.updateSubjects);\n\n        // update soft-removed entity properties\n        if (this.updateSubjects.length)\n            this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.softRemoveSubjects);\n\n        // update recovered entity properties\n        if (this.updateSubjects.length)\n            this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.recoverSubjects);\n\n        // remove ids from the entities that were removed\n        if (this.removeSubjects.length) {\n            this.removeSubjects.forEach(subject => {\n                if (!subject.entity) return;\n\n                subject.metadata.primaryColumns.forEach(primaryColumn => {\n                    primaryColumn.setEntityValue(subject.entity!, undefined);\n                });\n            });\n        }\n\n        // other post-persist updations\n        this.allSubjects.forEach(subject => {\n            if (!subject.entity) return;\n\n            subject.metadata.relationIds.forEach(relationId => {\n                relationId.setValue(subject.entity!);\n            });\n\n            // mongo _id remove\n            if (this.queryRunner instanceof MongoQueryRunner) {\n                if (subject.metadata.objectIdColumn\n                    && subject.metadata.objectIdColumn.databaseName\n                    && subject.metadata.objectIdColumn.databaseName !== subject.metadata.objectIdColumn.propertyName\n                ) {\n                    delete subject.entity[subject.metadata.objectIdColumn.databaseName];\n                }\n            }\n        });\n    }\n\n    /**\n     * Updates all special columns of the saving entities (create date, update date, version, etc.).\n     * Also updates nullable columns and columns with default values.\n     */\n    protected updateSpecialColumnsInInsertedAndUpdatedEntities(subjects: Subject[]): void {\n        subjects.forEach(subject => {\n            if (!subject.entity) return;\n\n            // set values to \"null\" for nullable columns that did not have values\n            subject.metadata.columns.forEach(column => {\n\n                // if table inheritance is used make sure this column is not child's column\n                if (subject.metadata.childEntityMetadatas.length > 0 && subject.metadata.childEntityMetadatas.map(metadata => metadata.target).indexOf(column.target) !== -1)\n                    return;\n\n                // entities does not have virtual columns\n                if (column.isVirtual)\n                    return;\n\n                // update nullable columns\n                if (column.isNullable) {\n                    const columnValue = column.getEntityValue(subject.entity!);\n                    if (columnValue === undefined)\n                        column.setEntityValue(subject.entity!, null);\n                }\n\n                // update relational columns\n                if (subject.updatedRelationMaps.length > 0) {\n                    subject.updatedRelationMaps.forEach(updatedRelationMap => {\n                        updatedRelationMap.relation.joinColumns.forEach(column => {\n                            if (column.isVirtual === true)\n                                return;\n\n                            column.setEntityValue(subject.entity!, updatedRelationMap.value instanceof Object ? column.referencedColumn!.getEntityValue(updatedRelationMap.value) : updatedRelationMap.value);\n                        });\n                    });\n                }\n            });\n\n            // merge into entity all generated values returned by a database\n            if (subject.generatedMap)\n                this.queryRunner.manager.merge(subject.metadata.target as any, subject.entity, subject.generatedMap);\n        });\n    }\n\n    /**\n     * Groups subjects by metadata names (by tables) to make bulk insertions and deletions possible.\n     * However there are some limitations with bulk insertions of data into tables with generated (increment) columns\n     * in some drivers. Some drivers like mysql and sqlite does not support returning multiple generated columns\n     * after insertion and can only return a single generated column value, that's why its not possible to do bulk insertion,\n     * because it breaks insertion result's generatedMap and leads to problems when this subject is used in other subjects saves.\n     * That's why we only support bulking in junction tables for those drivers.\n     *\n     * Other drivers like postgres and sql server support RETURNING / OUTPUT statement which allows to return generated\n     * id for each inserted row, that's why bulk insertion is not limited to junction tables in there.\n     */\n    protected groupBulkSubjects(subjects: Subject[], type: \"insert\" | \"delete\"): [{ [key: string]: Subject[] }, string[]] {\n        const group: { [key: string]: Subject[] } = {};\n        const keys: string[] = [];\n        const groupingAllowed = type === \"delete\" || this.queryRunner.connection.driver.isReturningSqlSupported();\n\n        subjects.forEach((subject, index) => {\n            const key = groupingAllowed || subject.metadata.isJunction ? subject.metadata.name : subject.metadata.name + \"_\" + index;\n            if (!group[key]) {\n                group[key] = [subject];\n                keys.push(key);\n            } else {\n                group[key].push(subject);\n            }\n        });\n\n        return [group, keys];\n    }\n\n}\n","/**\n * Thrown when user tries to save/remove/etc. constructor-less object (object literal) instead of entity.\n */\nexport class CannotDetermineEntityError extends Error {\n    name = \"CannotDetermineEntityError\";\n\n    constructor(operation: string) {\n        super();\n        Object.setPrototypeOf(this, CannotDetermineEntityError.prototype);\n        this.message = `Cannot ${operation}, given value must be instance of entity class, instead object literal is given. Or you must specify an entity target to method call.`;\n    }\n\n}","import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {SubjectChangeMap} from \"./SubjectChangeMap\";\nimport {OrmUtils} from \"../util/OrmUtils\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\n\n/**\n * Subject is a subject of persistence.\n * It holds information about each entity that needs to be persisted:\n * - what entity should be persisted\n * - what is database representation of the persisted entity\n * - what entity metadata of the persisted entity\n * - what is allowed to with persisted entity (insert/update/remove)\n *\n * Having this collection of subjects we can perform database queries.\n */\nexport class Subject {\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the subject entity.\n     */\n    metadata: EntityMetadata;\n\n    /**\n     * Subject identifier.\n     * This identifier is not limited to table entity primary columns.\n     * This can be entity id or ids as well as some unique entity properties, like name or title.\n     * Insert / Update / Remove operation will be executed by a given identifier.\n     */\n    identifier: ObjectLiteral|undefined = undefined;\n\n    /**\n     * Copy of entity but with relational ids fulfilled.\n     */\n    entityWithFulfilledIds: ObjectLiteral|undefined = undefined;\n\n    /**\n     * If subject was created by cascades this property will contain subject\n     * from where this subject was created.\n     */\n    parentSubject?: Subject;\n\n    /**\n     * Gets entity sent to the persistence (e.g. changed entity).\n     * If entity is not set then this subject is created only for the entity loaded from the database,\n     * or this subject is used for the junction operation (junction operations are relying only on identifier).\n     */\n    entity?: ObjectLiteral;\n\n    /**\n     * Database entity.\n     * THIS IS NOT RAW ENTITY DATA, its a real entity.\n     */\n    databaseEntity?: ObjectLiteral;\n\n    /**\n     * Indicates if database entity was loaded.\n     * No matter if it was found or not, it indicates the fact of loading.\n     */\n    databaseEntityLoaded: boolean = false;\n\n    /**\n     * Changes needs to be applied in the database for the given subject.\n     */\n    changeMaps: SubjectChangeMap[] = [];\n\n    /**\n     * Generated values returned by a database (for example generated id or default values).\n     * Used in insert and update operations.\n     * Has entity-like structure (not just column database name and values).\n     */\n    generatedMap?: ObjectLiteral;\n\n    /**\n     * Inserted values with updated values of special and default columns.\n     * Has entity-like structure (not just column database name and values).\n     */\n    insertedValueSet?: ObjectLiteral;\n\n    /**\n     * Indicates if this subject can be inserted into the database.\n     * This means that this subject either is newly persisted, either can be inserted by cascades.\n     */\n    canBeInserted: boolean = false;\n\n    /**\n     * Indicates if this subject can be updated in the database.\n     * This means that this subject either was persisted, either can be updated by cascades.\n     */\n    canBeUpdated: boolean = false;\n\n    /**\n     * Indicates if this subject MUST be removed from the database.\n     * This means that this subject either was removed, either was removed by cascades.\n     */\n    mustBeRemoved: boolean = false;\n\n    /**\n     * Indicates if this subject can be soft-removed from the database.\n     * This means that this subject either was soft-removed, either was soft-removed by cascades.\n     */\n    canBeSoftRemoved: boolean = false;\n\n    /**\n     * Indicates if this subject can be recovered from the database.\n     * This means that this subject either was recovered, either was recovered by cascades.\n     */\n    canBeRecovered: boolean = false;\n\n    /**\n     * Relations updated by the change maps.\n     */\n    updatedRelationMaps: { relation: RelationMetadata, value: ObjectLiteral }[] = [];\n\n    /**\n     * List of updated columns\n     */\n    diffColumns: ColumnMetadata[] = [];\n\n    /**\n     * List of updated relations\n     */\n    diffRelations: RelationMetadata[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: {\n        metadata: EntityMetadata,\n        parentSubject?: Subject,\n        entity?: ObjectLiteral,\n        canBeInserted?: boolean,\n        canBeUpdated?: boolean,\n        mustBeRemoved?: boolean,\n        canBeSoftRemoved?: boolean,\n        canBeRecovered?: boolean,\n        identifier?: ObjectLiteral,\n        changeMaps?: SubjectChangeMap[]\n    }) {\n        this.metadata = options.metadata;\n        this.entity = options.entity;\n        this.parentSubject = options.parentSubject;\n        if (options.canBeInserted !== undefined)\n            this.canBeInserted = options.canBeInserted;\n        if (options.canBeUpdated !== undefined)\n            this.canBeUpdated = options.canBeUpdated;\n        if (options.mustBeRemoved !== undefined)\n            this.mustBeRemoved = options.mustBeRemoved;\n        if (options.canBeSoftRemoved !== undefined)\n            this.canBeSoftRemoved = options.canBeSoftRemoved;\n        if (options.canBeRecovered !== undefined)\n            this.canBeRecovered = options.canBeRecovered;\n        if (options.identifier !== undefined)\n            this.identifier = options.identifier;\n        if (options.changeMaps !== undefined)\n            this.changeMaps.push(...options.changeMaps);\n\n        this.recompute();\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if this subject must be inserted into the database.\n     * Subject can be inserted into the database if it is allowed to be inserted (explicitly persisted or by cascades)\n     * and if it does not have database entity set.\n     */\n    get mustBeInserted() {\n        return this.canBeInserted && !this.databaseEntity;\n    }\n\n    /**\n     * Checks if this subject must be updated into the database.\n     * Subject can be updated in the database if it is allowed to be updated (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeUpdated() {\n        return this.canBeUpdated &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false || (this.databaseEntityLoaded && this.databaseEntity)) &&\n            // ((this.entity && this.databaseEntity) || (!this.entity && !this.databaseEntity)) &&\n            this.changeMaps.length > 0;\n    }\n\n    /**\n     * Checks if this subject must be soft-removed into the database.\n     * Subject can be updated in the database if it is allowed to be soft-removed (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeSoftRemoved() {\n        return this.canBeSoftRemoved &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false || (this.databaseEntityLoaded && this.databaseEntity));\n    }\n\n    /**\n     * Checks if this subject must be recovered into the database.\n     * Subject can be updated in the database if it is allowed to be recovered (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeRecovered() {\n        return this.canBeRecovered &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false || (this.databaseEntityLoaded && this.databaseEntity));\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a value set needs to be inserted / updated in the database.\n     * Value set is based on the entity and change maps of the subject.\n     * Important note: this method pops data from this subject's change maps.\n     */\n    createValueSetAndPopChangeMap(): ObjectLiteral {\n        const changeMapsWithoutValues: SubjectChangeMap[] = [];\n        const changeSet = this.changeMaps.reduce((updateMap, changeMap) => {\n            let value = changeMap.value;\n            if (value instanceof Subject) {\n\n                // referenced columns can refer on values both which were just inserted and which were present in the model\n                // if entity was just inserted valueSets must contain all values from the entity and values just inserted in the database\n                // so, here we check if we have a value set then we simply use it as value to get our reference column values\n                // otherwise simply use an entity which cannot be just inserted at the moment and have all necessary data\n                value = value.insertedValueSet ? value.insertedValueSet : value.entity;\n            }\n            // value = changeMap.valueFactory ? changeMap.valueFactory(value) : changeMap.column.createValueMap(value);\n\n            let valueMap: ObjectLiteral|undefined;\n            if (this.metadata.isJunction && changeMap.column) {\n                valueMap = changeMap.column.createValueMap(changeMap.column.referencedColumn!.getEntityValue(value));\n\n            } else if (changeMap.column) {\n                valueMap = changeMap.column.createValueMap(value);\n\n            } else if (changeMap.relation) {\n\n                // value can be a related object, for example: post.question = { id: 1 }\n                // or value can be a null or direct relation id, e.g. post.question = 1\n                // if its a direction relation id then we just set it to the valueMap,\n                // however if its an object then we need to extract its relation id map and set it to the valueMap\n                if (value instanceof Object) {\n\n                    // get relation id, e.g. referenced column name and its value,\n                    // for example: { id: 1 } which then will be set to relation, e.g. post.category = { id: 1 }\n                    const relationId = changeMap.relation!.getRelationIdMap(value);\n\n                    // but relation id can be empty, for example in the case when you insert a new post with category\n                    // and both post and category are newly inserted objects (by cascades) and in this case category will not have id\n                    // this means we need to insert post without question id and update post's questionId once question be inserted\n                    // that's why we create a new changeMap operation for future updation of the post entity\n                    if (relationId === undefined) {\n                        changeMapsWithoutValues.push(changeMap);\n                        this.canBeUpdated = true;\n                        return updateMap;\n                    }\n                    valueMap = changeMap.relation!.createValueMap(relationId);\n                    this.updatedRelationMaps.push({ relation: changeMap.relation, value: relationId });\n\n                } else { // value can be \"null\" or direct relation id here\n                    valueMap = changeMap.relation!.createValueMap(value);\n                    this.updatedRelationMaps.push({ relation: changeMap.relation, value: value });\n                }\n            }\n\n            OrmUtils.mergeDeep(updateMap, valueMap);\n            return updateMap;\n        }, {} as ObjectLiteral);\n        this.changeMaps = changeMapsWithoutValues;\n        return changeSet;\n    }\n\n    /**\n     * Recomputes entityWithFulfilledIds and identifier when entity changes.\n     */\n    recompute(): void {\n\n        if (this.entity) {\n            this.entityWithFulfilledIds = Object.assign({}, this.entity);\n            if (this.parentSubject) {\n                this.metadata.primaryColumns.forEach(primaryColumn => {\n                    if (primaryColumn.relationMetadata && primaryColumn.relationMetadata.inverseEntityMetadata === this.parentSubject!.metadata) {\n                        const value = primaryColumn.referencedColumn!.getEntityValue(this.parentSubject!.entity!);\n                        primaryColumn.setEntityValue(this.entityWithFulfilledIds!, value);\n                    }\n                });\n            }\n            this.identifier = this.metadata.getEntityIdMap(this.entityWithFulfilledIds);\n\n        } else if (this.databaseEntity) {\n            this.identifier = this.metadata.getEntityIdMap(this.databaseEntity);\n        }\n    }\n\n}\n","import {Subject} from \"../Subject\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n * Builds operations needs to be executed for one-to-many relations of the given subjects.\n *\n * by example: post contains one-to-many relation with category in the property called \"categories\", e.g.\n *             @OneToMany(type => Category, category => category.post) categories: Category[]\n *             If user adds categories into the post and saves post we need to bind them.\n *             This operation requires updation of category table since its owner of the relation and contains a join column.\n *\n * note: this class shares lot of things with OneToOneInverseSideOperationBuilder, so when you change this class\n *       make sure to reflect changes there as well.\n */\nexport class OneToManySubjectBuilder {\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(protected subjects: Subject[]) {\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds all required operations.\n     */\n    build(): void {\n        this.subjects.forEach(subject => {\n            subject.metadata.oneToManyRelations.forEach(relation => {\n\n                // skip relations for which persistence is disabled\n                if (relation.persistenceEnabled === false)\n                    return;\n\n                this.buildForSubjectRelation(subject, relation);\n            });\n        });\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"categories\" inside it here.\n     */\n    protected buildForSubjectRelation(subject: Subject, relation: RelationMetadata) {\n\n        // prepare objects (relation id maps) for the database entity\n        // note: subject.databaseEntity contains relations with loaded relation ids only\n        // by example: since subject is a post, we are expecting to get all post's categories saved in the database here,\n        //             particularly their relation ids, e.g. category ids stored in the database\n        let relatedEntityDatabaseRelationIds: ObjectLiteral[] = [];\n        if (subject.databaseEntity) { // related entities in the database can exist only if this entity (post) is saved\n            relatedEntityDatabaseRelationIds = relation.getEntityValue(subject.databaseEntity);\n        }\n\n        // get related entities of persisted entity\n        // by example: get categories from the passed to persist post entity\n        let relatedEntities: ObjectLiteral[] = relation.getEntityValue(subject.entity!);\n        if (relatedEntities === null) // we treat relations set to null as removed, so we don't skip it\n            relatedEntities = [] as ObjectLiteral[];\n        if (relatedEntities === undefined) // if relation is undefined then nothing to update\n            return;\n\n        // extract only relation ids from the related entities, since we only need them for comparision\n        // by example: extract from categories only relation ids (category id, or let's say category title, depend on join column options)\n        const relatedPersistedEntityRelationIds: ObjectLiteral[] = [];\n        relatedEntities.forEach(relatedEntity => { // by example: relatedEntity is a category here\n            let relationIdMap = relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity); // by example: relationIdMap is category.id map here, e.g. { id: ... }\n\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            let relatedEntitySubject = this.subjects.find(subject => {\n                return subject.entity === relatedEntity;\n            });\n\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relationIdMap = relatedEntitySubject.identifier;\n\n            // if relationIdMap is undefined then it means user binds object which is not saved in the database yet\n            // by example: if post contains categories which does not have ids yet (because they are new)\n            //             it means they are always newly inserted and relation update operation always must be created for them\n            //             it does not make sense to perform difference operation for them for both add and remove actions\n            if (!relationIdMap) {\n\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if (!relatedEntitySubject)\n                //     throw new Error(`One-to-many relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n                //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +\n                //         `Please setup cascade insertion or save entities before binding it.`);\n                if (!relatedEntitySubject)\n                    return;\n\n                // okay, so related subject exist and its marked for insertion, then add a new change map\n                // by example: this will tell category to insert into its post relation our post we are working with\n                //             relatedEntitySubject is newly inserted CategorySubject\n                //             relation.inverseRelation is ManyToOne relation inside Category\n                //             subject is Post needs to be inserted into Category\n                relatedEntitySubject.changeMaps.push({\n                    relation: relation.inverseRelation!,\n                    value: subject\n                });\n\n                return;\n            }\n\n            // check if this binding really exist in the database\n            // by example: find our category if its already bind in the database\n            const relationIdInDatabaseSubjectRelation = relatedEntityDatabaseRelationIds.find(relatedDatabaseEntityRelationId => {\n                return OrmUtils.compareIds(relationIdMap, relatedDatabaseEntityRelationId);\n            });\n\n            // if relationIdMap DOES NOT exist in the subject's relation in the database it means its a new relation and we need to \"bind\" them\n            // by example: this will tell category to insert into its post relation our post we are working with\n            //             relatedEntitySubject is newly inserted CategorySubject\n            //             relation.inverseRelation is ManyToOne relation inside Category\n            //             subject is Post needs to be inserted into Category\n            if (!relationIdInDatabaseSubjectRelation) {\n\n                // if there is no relatedEntitySubject then it means \"category\" wasn't persisted,\n                // but since we are going to update \"category\" table (since its an owning side of relation with join column)\n                // we create a new subject here:\n                if (!relatedEntitySubject) {\n                    relatedEntitySubject = new Subject({\n                        metadata: relation.inverseEntityMetadata,\n                        parentSubject: subject,\n                        canBeUpdated: true,\n                        identifier: relationIdMap\n                    });\n                    this.subjects.push(relatedEntitySubject);\n                }\n\n                relatedEntitySubject.changeMaps.push({\n                    relation: relation.inverseRelation!,\n                    value: subject\n                });\n            }\n\n            // if related entity has relation id then we add it to the list of relation ids\n            // this list will be used later to compare with database relation ids to find a difference\n            // what exist in this array and does not exist in the database are newly inserted relations\n            // what does not exist in this array, but exist in the database are removed relations\n            // removed relations are set to null from inverse side of relation\n            relatedPersistedEntityRelationIds.push(relationIdMap);\n        });\n\n        // find what related entities were added and what were removed based on difference between what we save and what database has\n        EntityMetadata\n            .difference(relatedEntityDatabaseRelationIds, relatedPersistedEntityRelationIds)\n            .forEach(removedRelatedEntityRelationId => { // by example: removedRelatedEntityRelationId is category that was bind in the database before, but now its unbind\n\n                // todo: probably we can improve this in the future by finding entity with column those values,\n                // todo: maybe it was already in persistence process. This is possible due to unique requirements of join columns\n                // we create a new subject which operations will be executed in subject operation executor\n                const removedRelatedEntitySubject = new Subject({\n                    metadata: relation.inverseEntityMetadata,\n                    parentSubject: subject,\n                    identifier: removedRelatedEntityRelationId,\n                });\n\n                if (!relation.inverseRelation || relation.inverseRelation.orphanedRowAction === \"nullify\") {\n                    removedRelatedEntitySubject.canBeUpdated = true;\n                    removedRelatedEntitySubject.changeMaps = [{\n                        relation: relation.inverseRelation!,\n                        value: null\n                    }];\n                } else if (relation.inverseRelation.orphanedRowAction === \"delete\") {\n                    removedRelatedEntitySubject.mustBeRemoved = true;\n                }\n\n                this.subjects.push(removedRelatedEntitySubject);\n            });\n    }\n\n}\n","import {Subject} from \"../Subject\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n * Builds operations needs to be executed for one-to-one non-owner relations of the given subjects.\n *\n * by example: post contains one-to-one non-owner relation with category in the property called \"category\", e.g.\n *             @OneToOne(type => Category, category => category.post) category: Category\n *             If user sets a category into the post and saves post we need to bind them.\n *             This operation requires updation of category table since its owner of the relation and contains a join column.\n *\n * note: this class shares lot of things with OneToManyUpdateBuilder, so when you change this class\n *       make sure to reflect changes there as well.\n */\nexport class OneToOneInverseSideSubjectBuilder {\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(protected subjects: Subject[]) {\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds all required operations.\n     */\n    build(): void {\n        this.subjects.forEach(subject => {\n            subject.metadata.oneToOneRelations.forEach(relation => {\n\n                // we don't need owning relations, this operation is only for inverse side of one-to-one relations\n                // skip relations for which persistence is disabled\n                if (relation.isOwning || relation.persistenceEnabled === false)\n                    return;\n\n                this.buildForSubjectRelation(subject, relation);\n            });\n        });\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"category\" inside it here.\n     */\n    protected buildForSubjectRelation(subject: Subject, relation: RelationMetadata) {\n\n        // prepare objects (relation id map) for the database entity\n        // note: subject.databaseEntity contains relation with loaded relation id only (id map)\n        // by example: since subject is a post, we are expecting to get post's category saved in the database here,\n        //             particularly its relation id, e.g. category id stored in the database\n        let relatedEntityDatabaseRelationId: ObjectLiteral|undefined = undefined;\n        if (subject.databaseEntity) // related entity in the database can exist only if this entity (post) is saved\n            relatedEntityDatabaseRelationId = relation.getEntityValue(subject.databaseEntity);\n\n        // get related entities of persisted entity\n        // by example: get category from the passed to persist post entity\n        let relatedEntity: ObjectLiteral|null = relation.getEntityValue(subject.entity!); // by example: relatedEntity is a category here\n        if (relatedEntity === undefined) // if relation is undefined then nothing to update\n            return;\n\n        // if related entity is null then we need to check if there a bind in the database and unset it\n        // if there is no bind in the entity then we don't need to do anything\n        // by example: if post.category = null and category has this post in the database then we unset it\n        if (relatedEntity === null) {\n\n            // it makes sense to update database only there is a previously set value in the database\n            if (relatedEntityDatabaseRelationId) {\n                // todo: probably we can improve this in the future by finding entity with column those values,\n                // todo: maybe it was already in persistence process. This is possible due to unique requirements of join columns\n                // we create a new subject which operations will be executed in subject operation executor\n\n                const removedRelatedEntitySubject = new Subject({\n                    metadata: relation.inverseEntityMetadata,\n                    parentSubject: subject,\n                    canBeUpdated: true,\n                    identifier: relatedEntityDatabaseRelationId,\n                    changeMaps: [{\n                        relation: relation.inverseRelation!,\n                        value: null\n                    }]\n                });\n                this.subjects.push(removedRelatedEntitySubject);\n            }\n\n            return;\n        } // else means entity is bind in the database\n\n        // extract only relation id from the related entities, since we only need it for comparision\n        // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)\n        let relationIdMap = relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity); // by example: relationIdMap is category.id map here, e.g. { id: ... }\n\n        // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n        let relatedEntitySubject = this.subjects.find(operateSubject => {\n            return !!operateSubject.entity && operateSubject.entity === relatedEntity;\n        });\n\n        // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n        if (relatedEntitySubject)\n            relationIdMap = relatedEntitySubject.identifier;\n\n        // if relationIdMap is undefined then it means user binds object which is not saved in the database yet\n        // by example: if post contains category which does not have id(s) yet (because its a new category)\n        //             it means its always newly inserted and relation update operation always must be created for it\n        //             it does not make sense to perform difference operation for it for both add and remove actions\n        if (!relationIdMap) {\n\n            // we decided to remove this error because it brings complications when saving object with non-saved entities\n            // if related entity does not have a subject then it means user tries to bind entity which wasn't saved\n            // in this persistence because he didn't pass this entity for save or he did not set cascades\n            // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here\n            // if (!relatedEntitySubject)\n            //     throw new Error(`One-to-one inverse relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n            //         `entity which does not exist in the database yet, thus cannot be bind in the database. ` +\n            //         `Please setup cascade insertion or save entity before binding it.`);\n            if (!relatedEntitySubject)\n                return;\n\n            // okay, so related subject exist and its marked for insertion, then add a new change map\n            // by example: this will tell category to insert into its post relation our post we are working with\n            //             relatedEntitySubject is newly inserted CategorySubject\n            //             relation.inverseRelation is OneToOne owner relation inside Category\n            //             subject is Post needs to be inserted into Category\n            relatedEntitySubject.changeMaps.push({\n                relation: relation.inverseRelation!,\n                value: subject\n            });\n        }\n\n        // check if this binding really exist in the database\n        // by example: find our post if its already bind to category in the database and its not equal to what user tries to set\n        const areRelatedIdEqualWithDatabase = relatedEntityDatabaseRelationId && OrmUtils.compareIds(relationIdMap, relatedEntityDatabaseRelationId);\n\n        // if they aren't equal it means its a new relation and we need to \"bind\" them\n        // by example: this will tell category to insert into its post relation our post we are working with\n        //             relatedEntitySubject is newly inserted CategorySubject\n        //             relation.inverseRelation is ManyToOne relation inside Category\n        //             subject is Post needs to be inserted into Category\n        if (!areRelatedIdEqualWithDatabase) {\n\n            // if there is no relatedEntitySubject then it means \"category\" wasn't persisted,\n            // but since we are going to update \"category\" table (since its an owning side of relation with join column)\n            // we create a new subject here:\n            if (!relatedEntitySubject) {\n                relatedEntitySubject = new Subject({\n                    metadata: relation.inverseEntityMetadata,\n                    canBeUpdated: true,\n                    identifier: relationIdMap\n                });\n                this.subjects.push(relatedEntitySubject);\n            }\n\n            relatedEntitySubject.changeMaps.push({\n                relation: relation.inverseRelation!,\n                value: subject\n            });\n        }\n    }\n\n}","import {Subject} from \"../Subject\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n * Builds operations needs to be executed for many-to-many relations of the given subjects.\n *\n * by example: post contains owner many-to-many relation with categories in the property called \"categories\", e.g.\n *             @ManyToMany(type => Category, category => category.posts) categories: Category[]\n *             If user adds categories into the post and saves post we need to bind them.\n *             This operation requires updation of junction table.\n */\nexport class ManyToManySubjectBuilder {\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(protected subjects: Subject[]) {\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds operations for any changes in the many-to-many relations of the subjects.\n     */\n    build(): void {\n        this.subjects.forEach(subject => {\n\n            // if subject doesn't have entity then no need to find something that should be inserted or removed\n            if (!subject.entity)\n                return;\n\n            // go through all persistence enabled many-to-many relations and build subject operations for them\n            subject.metadata.manyToManyRelations.forEach(relation => {\n\n                // skip relations for which persistence is disabled\n                if (relation.persistenceEnabled === false)\n                    return;\n\n                this.buildForSubjectRelation(subject, relation);\n            });\n        });\n    }\n\n    /**\n     * Builds operations for removal of all many-to-many records of all many-to-many relations of the given subject.\n     */\n    buildForAllRemoval(subject: Subject) {\n\n        // if subject does not have a database entity then it means it does not exist in the database\n        // if it does not exist in the database then we don't have anything for deletion\n        if (!subject.databaseEntity)\n            return;\n\n        // go through all persistence enabled many-to-many relations and build subject operations for them\n        subject.metadata.manyToManyRelations.forEach(relation => {\n\n            // skip relations for which persistence is disabled\n            if (relation.persistenceEnabled === false)\n                return;\n\n            // get all related entities (actually related entity relation ids) bind to this subject entity\n            // by example: returns category ids of the post we are currently working with (subject.entity is post)\n            const relatedEntityRelationIdsInDatabase: ObjectLiteral[] = relation.getEntityValue(subject.databaseEntity!);\n\n            // go through all related entities and create a new junction subject for each row in junction table\n            relatedEntityRelationIdsInDatabase.forEach(relationId => {\n                const junctionSubject = new Subject({\n                    metadata: relation.junctionEntityMetadata!,\n                    parentSubject: subject,\n                    mustBeRemoved: true,\n                    identifier: this.buildJunctionIdentifier(subject, relation, relationId)\n                });\n\n                // we use unshift because we need to perform those operations before post deletion is performed\n                // but post deletion was already added as an subject\n                // this is temporary solution, later we need to implement proper sorting of subjects before their removal\n                this.subjects.push(junctionSubject);\n            });\n        });\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"categories\" inside it here.\n     */\n    protected buildForSubjectRelation(subject: Subject, relation: RelationMetadata) {\n\n        // load from db all relation ids of inverse entities that are \"bind\" to the subject's entity\n        // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)\n        let databaseRelatedEntityIds: ObjectLiteral[] = [];\n\n        // if subject don't have database entity it means all related entities in persisted subject are new and must be bind\n        // and we don't need to remove something that is not exist\n        if (subject.databaseEntity)\n            databaseRelatedEntityIds = relation.getEntityValue(subject.databaseEntity);\n\n        // extract entity's relation value\n        // by example: categories inside our post (subject.entity is post)\n        let relatedEntities: ObjectLiteral[] = relation.getEntityValue(subject.entity!);\n        if (relatedEntities === null) // if value set to null its equal if we set it to empty array - all items must be removed from the database\n            relatedEntities = [];\n        if (!(Array.isArray(relatedEntities)))\n            return;\n\n        // from all related entities find only those which aren't found in the db - for them we will create operation subjects\n        relatedEntities.forEach(relatedEntity => { // by example: relatedEntity is category from categories saved with post\n\n            // todo: check how it will work for entities which are saved by cascades, but aren't saved in the database yet\n\n            // extract only relation id from the related entities, since we only need it for comparision\n            // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)\n            let relatedEntityRelationIdMap = relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity);\n\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            const relatedEntitySubject = this.subjects.find(subject => {\n                return subject.entity === relatedEntity;\n            });\n\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier;\n\n            // if related entity relation id map is empty it means related entity is newly persisted\n            if (!relatedEntityRelationIdMap) {\n\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if related entity does not have a subject then it means user tries to bind entity which wasn't saved\n                // in this persistence because he didn't pass this entity for save or he did not set cascades\n                // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if (!relatedEntitySubject)\n                //     throw new Error(`Many-to-many relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n                //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +\n                //         `Please setup cascade insertion or save entities before binding it.`);\n                if (!relatedEntitySubject)\n                    return;\n            }\n\n            // try to find related entity in the database\n            // by example: find post's category in the database post's categories\n            const relatedEntityExistInDatabase = databaseRelatedEntityIds.find(databaseRelatedEntityRelationId => {\n                return OrmUtils.compareIds(databaseRelatedEntityRelationId, relatedEntityRelationIdMap);\n            });\n\n            // if entity is found then don't do anything - it means binding in junction table already exist, we don't need to add anything\n            if (relatedEntityExistInDatabase)\n                return;\n\n            const ownerValue = relation.isOwning ? subject : (relatedEntitySubject || relatedEntity); // by example: ownerEntityMap is post from subject here\n            const inverseValue = relation.isOwning ? (relatedEntitySubject || relatedEntity) : subject; // by example: inverseEntityMap is category from categories array here\n\n            // create a new subject for insert operation of junction rows\n            const junctionSubject = new Subject({\n                metadata: relation.junctionEntityMetadata!,\n                parentSubject: subject,\n                canBeInserted: true,\n            });\n            this.subjects.push(junctionSubject);\n\n            relation.junctionEntityMetadata!.ownerColumns.forEach(column => {\n                junctionSubject.changeMaps.push({\n                    column: column,\n                    value: ownerValue,\n                    // valueFactory: (value) => column.referencedColumn!.getEntityValue(value) // column.referencedColumn!.getEntityValue(ownerEntityMap),\n                });\n            });\n\n            relation.junctionEntityMetadata!.inverseColumns.forEach(column => {\n                junctionSubject.changeMaps.push({\n                    column: column,\n                    value: inverseValue,\n                    // valueFactory: (value) => column.referencedColumn!.getEntityValue(value) // column.referencedColumn!.getEntityValue(inverseEntityMap),\n                });\n            });\n        });\n\n        // get all inverse entities relation ids that are \"bind\" to the currently persisted entity\n        const changedInverseEntityRelationIds: ObjectLiteral[] = [];\n        relatedEntities.forEach(relatedEntity => {\n            // relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n            let relatedEntityRelationIdMap = relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity);\n\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            const relatedEntitySubject = this.subjects.find(subject => {\n                return subject.entity === relatedEntity;\n            });\n\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier;\n\n            if (relatedEntityRelationIdMap !== undefined && relatedEntityRelationIdMap !== null)\n                changedInverseEntityRelationIds.push(relatedEntityRelationIdMap);\n        });\n\n        // now from all entities in the persisted entity find only those which aren't found in the db\n        const removedJunctionEntityIds = databaseRelatedEntityIds.filter(existRelationId => {\n            return !changedInverseEntityRelationIds.find(changedRelationId => {\n                return OrmUtils.compareIds(changedRelationId, existRelationId);\n            });\n        });\n\n        // finally create a new junction remove operations for missing related entities\n        removedJunctionEntityIds.forEach(removedEntityRelationId => {\n            const junctionSubject = new Subject({\n                metadata: relation.junctionEntityMetadata!,\n                parentSubject: subject,\n                mustBeRemoved: true,\n                identifier: this.buildJunctionIdentifier(subject, relation, removedEntityRelationId)\n            });\n            this.subjects.push(junctionSubject);\n        });\n    }\n\n    /**\n     * Creates identifiers for junction table.\n     * Example: { postId: 1, categoryId: 2 }\n     */\n    protected buildJunctionIdentifier(subject: Subject, relation: RelationMetadata, relationId: ObjectLiteral) {\n        const ownerEntityMap = relation.isOwning ? subject.entity! : relationId;\n        const inverseEntityMap = relation.isOwning ? relationId : subject.entity!;\n\n        const identifier: ObjectLiteral = {};\n        relation.junctionEntityMetadata!.ownerColumns.forEach(column => {\n            OrmUtils.mergeDeep(identifier, column.createValueMap(column.referencedColumn!.getEntityValue(ownerEntityMap)));\n        });\n        relation.junctionEntityMetadata!.inverseColumns.forEach(column => {\n            OrmUtils.mergeDeep(identifier, column.createValueMap(column.referencedColumn!.getEntityValue(inverseEntityMap)));\n        });\n        return identifier;\n    }\n\n}\n","import {Subject} from \"./Subject\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\n\n/**\n * Loads database entities for all operate subjects which do not have database entity set.\n * All entities that we load database entities for are marked as updated or inserted.\n * To understand which of them really needs to be inserted or updated we need to load\n * their original representations from the database.\n */\nexport class SubjectDatabaseEntityLoader {\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(protected queryRunner: QueryRunner,\n                protected subjects: Subject[]) {\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Loads database entities for all subjects.\n     *\n     * loadAllRelations flag is used to load all relation ids of the object, no matter if they present in subject entity or not.\n     * This option is used for deletion.\n     */\n    async load(operationType: \"save\"|\"remove\"|\"soft-remove\"|\"recover\"): Promise<void> {\n\n        // we are grouping subjects by target to perform more optimized queries using WHERE IN operator\n        // go through the groups and perform loading of database entities of each subject in the group\n        const promises = this.groupByEntityTargets().map(async subjectGroup => {\n\n            // prepare entity ids of the subjects we need to load\n            const allIds: ObjectLiteral[] = [];\n            const allSubjects: Subject[] = [];\n            subjectGroup.subjects.forEach(subject => {\n\n                // we don't load if subject already has a database entity loaded\n                if (subject.databaseEntity || !subject.identifier)\n                    return;\n\n                allIds.push(subject.identifier);\n                allSubjects.push(subject);\n            });\n\n            // if there no ids found (means all entities are new and have generated ids) - then nothing to load there\n            if (!allIds.length)\n                return;\n\n            const loadRelationPropertyPaths: string[] = [];\n\n            // for the save, soft-remove and recover operation\n            // extract all property paths of the relations we need to load relation ids for\n            // this is for optimization purpose - this way we don't load relation ids for entities\n            // whose relations are undefined, and since they are undefined its really pointless to\n            // load something for them, since undefined properties are skipped by the orm\n            if (operationType === \"save\" || operationType === \"soft-remove\" || operationType === \"recover\") {\n                subjectGroup.subjects.forEach(subject => {\n\n                    // gets all relation property paths that exist in the persisted entity.\n                    subject.metadata.relations.forEach(relation => {\n                        const value = relation.getEntityValue(subject.entityWithFulfilledIds!);\n                        if (value === undefined)\n                            return;\n\n                        if (loadRelationPropertyPaths.indexOf(relation.propertyPath) === -1)\n                            loadRelationPropertyPaths.push(relation.propertyPath);\n                    });\n                });\n            } else { // remove\n\n                // for remove operation\n                // we only need to load junction relation ids since only they are removed by cascades\n                loadRelationPropertyPaths.push(...subjectGroup.subjects[0].metadata.manyToManyRelations.map(relation => relation.propertyPath));\n            }\n\n            const findOptions: FindManyOptions<any> = {\n                loadEagerRelations: false,\n                loadRelationIds: {\n                    relations: loadRelationPropertyPaths,\n                    disableMixedMap: true\n                },\n                // the soft-deleted entities should be included in the loaded entities for recover operation\n                withDeleted: true\n            };\n\n            // load database entities for all given ids\n            const entities = await this.queryRunner.manager\n                .getRepository<ObjectLiteral>(subjectGroup.target)\n                .findByIds(allIds, findOptions);\n\n            // now when we have entities we need to find subject of each entity\n            // and insert that entity into database entity of the found subjects\n            entities.forEach(entity => {\n                const subjects = this.findByPersistEntityLike(subjectGroup.target, entity);\n                subjects.forEach(subject => {\n                  subject.databaseEntity = entity;\n                  if (!subject.identifier)\n                      subject.identifier = subject.metadata.hasAllPrimaryKeys(entity) ? subject.metadata.getEntityIdMap(entity) : undefined;\n                });\n            });\n\n            // this way we tell what subjects we tried to load database entities of\n            for (let subject of allSubjects) {\n                subject.databaseEntityLoaded = true;\n            }\n        });\n\n        await Promise.all(promises);\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Finds subjects where entity like given subject's entity.\n     * Comparision made by entity id.\n     * Multiple subjects may be returned if duplicates are present in the subject array.\n     * This will likely result in the same row being updated multiple times during a transaction.\n     */\n    protected findByPersistEntityLike(entityTarget: Function|string, entity: ObjectLiteral): Subject[] {\n        return this.subjects.filter(subject => {\n            if (!subject.entity)\n                return false;\n\n            if (subject.entity === entity)\n                return true;\n\n            return subject.metadata.target === entityTarget && subject.metadata.compareEntities(subject.entityWithFulfilledIds!, entity);\n        });\n    }\n\n    /**\n     * Groups given Subject objects into groups separated by entity targets.\n     */\n    protected groupByEntityTargets(): { target: Function|string, subjects: Subject[] }[] {\n        return this.subjects.reduce((groups, operatedEntity) => {\n            let group = groups.find(group => group.target === operatedEntity.metadata.target);\n            if (!group) {\n                group = { target: operatedEntity.metadata.target, subjects: [] };\n                groups.push(group);\n            }\n            group.subjects.push(operatedEntity);\n            return groups;\n        }, [] as { target: Function|string, subjects: Subject[] }[]);\n    }\n\n}\n","import {Subject} from \"../Subject\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\n\n/**\n * Finds all cascade operations of the given subject and cascade operations of the found cascaded subjects,\n * e.g. builds a cascade tree and creates a subjects for them.\n */\nexport class CascadesSubjectBuilder {\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(protected allSubjects: Subject[]) {\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds a cascade subjects tree and pushes them in into the given array of subjects.\n     */\n    build(subject: Subject, operationType: \"save\"|\"remove\"|\"soft-remove\"|\"recover\") {\n\n        subject.metadata\n            .extractRelationValuesFromEntity(subject.entity!, subject.metadata.relations) // todo: we can create EntityMetadata.cascadeRelations\n            .forEach(([relation, relationEntity, relationEntityMetadata]) => {\n\n                // we need only defined values and insert, update, soft-remove or recover cascades of the relation should be set\n                if (relationEntity === undefined ||\n                    relationEntity === null ||\n                    (!relation.isCascadeInsert && !relation.isCascadeUpdate && !relation.isCascadeSoftRemove && !relation.isCascadeRecover))\n                    return;\n\n                // if relation entity is just a relation id set (for example post.tag = 1)\n                // then we don't really need to check cascades since there is no object to insert or update\n                if (!(relationEntity instanceof Object))\n                    return;\n\n                // if we already has this entity in list of operated subjects then skip it to avoid recursion\n                const alreadyExistRelationEntitySubject = this.findByPersistEntityLike(relationEntityMetadata.target, relationEntity);\n                if (alreadyExistRelationEntitySubject) {\n                    if (alreadyExistRelationEntitySubject.canBeInserted === false) // if its not marked for insertion yet\n                        alreadyExistRelationEntitySubject.canBeInserted = relation.isCascadeInsert === true && operationType === \"save\";\n                    if (alreadyExistRelationEntitySubject.canBeUpdated === false) // if its not marked for update yet\n                        alreadyExistRelationEntitySubject.canBeUpdated = relation.isCascadeUpdate === true && operationType === \"save\";\n                    if (alreadyExistRelationEntitySubject.canBeSoftRemoved === false) // if its not marked for removal yet\n                        alreadyExistRelationEntitySubject.canBeSoftRemoved = relation.isCascadeSoftRemove === true && operationType === \"soft-remove\";\n                    if (alreadyExistRelationEntitySubject.canBeRecovered === false) // if its not marked for recovery yet\n                        alreadyExistRelationEntitySubject.canBeRecovered = relation.isCascadeRecover === true && operationType === \"recover\";\n                    return;\n                }\n\n                // mark subject with what we can do with it\n                // and add to the array of subjects to load only if there is no same entity there already\n                const relationEntitySubject = new Subject({\n                    metadata: relationEntityMetadata,\n                    parentSubject: subject,\n                    entity: relationEntity,\n                    canBeInserted: relation.isCascadeInsert === true && operationType === \"save\",\n                    canBeUpdated: relation.isCascadeUpdate === true && operationType === \"save\",\n                    canBeSoftRemoved: relation.isCascadeSoftRemove === true && operationType === \"soft-remove\",\n                    canBeRecovered: relation.isCascadeRecover === true && operationType === \"recover\"\n                });\n                this.allSubjects.push(relationEntitySubject);\n\n                // go recursively and find other entities we need to insert/update\n                this.build(relationEntitySubject, operationType);\n            });\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Finds subject where entity like given subject's entity.\n     * Comparision made by entity id.\n     */\n    protected findByPersistEntityLike(entityTarget: Function|string, entity: ObjectLiteral): Subject|undefined {\n        return this.allSubjects.find(subject => {\n            if (!subject.entity)\n                return false;\n\n            if (subject.entity === entity)\n                return true;\n\n            return subject.metadata.target === entityTarget && subject.metadata.compareEntities(subject.entityWithFulfilledIds!, entity);\n        });\n    }\n\n}","import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {SaveOptions} from \"../repository/SaveOptions\";\nimport {RemoveOptions} from \"../repository/RemoveOptions\";\nimport {MustBeEntityError} from \"../error/MustBeEntityError\";\nimport {SubjectExecutor} from \"./SubjectExecutor\";\nimport {CannotDetermineEntityError} from \"../error/CannotDetermineEntityError\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {Connection} from \"../connection/Connection\";\nimport {Subject} from \"./Subject\";\nimport {OneToManySubjectBuilder} from \"./subject-builder/OneToManySubjectBuilder\";\nimport {OneToOneInverseSideSubjectBuilder} from \"./subject-builder/OneToOneInverseSideSubjectBuilder\";\nimport {ManyToManySubjectBuilder} from \"./subject-builder/ManyToManySubjectBuilder\";\nimport {SubjectDatabaseEntityLoader} from \"./SubjectDatabaseEntityLoader\";\nimport {CascadesSubjectBuilder} from \"./subject-builder/CascadesSubjectBuilder\";\nimport {OrmUtils} from \"../util/OrmUtils\";\n\n/**\n * Persists a single entity or multiple entities - saves or removes them.\n */\nexport class EntityPersistExecutor {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection,\n                protected queryRunner: QueryRunner|undefined,\n                protected mode: \"save\"|\"remove\"|\"soft-remove\"|\"recover\",\n                protected target: Function|string|undefined,\n                protected entity: ObjectLiteral|ObjectLiteral[],\n                protected options?: SaveOptions & RemoveOptions) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes persistence operation ob given entity or entities.\n     */\n    async execute(): Promise<void> {\n\n        // check if entity we are going to save is valid and is an object\n        if (!this.entity || typeof this.entity !== \"object\")\n            return Promise.reject(new MustBeEntityError(this.mode, this.entity));\n\n        // we MUST call \"fake\" resolve here to make sure all properties of lazily loaded relations are resolved\n        await Promise.resolve();\n\n        // if query runner is already defined in this class, it means this entity manager was already created for a single connection\n        // if its not defined we create a new query runner - single connection where we'll execute all our operations\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n\n        // save data in the query runner - this is useful functionality to share data from outside of the world\n        // with third classes - like subscribers and listener methods\n        if (this.options && this.options.data)\n            queryRunner.data = this.options.data;\n\n        try {\n\n            // collect all operate subjects\n            const entities: ObjectLiteral[] = Array.isArray(this.entity) ? this.entity : [this.entity];\n            const entitiesInChunks = this.options && this.options.chunk && this.options.chunk > 0 ? OrmUtils.chunk(entities, this.options.chunk) : [entities];\n\n            // console.time(\"building subject executors...\");\n            const executors = await Promise.all(entitiesInChunks.map(async entities => {\n                const subjects: Subject[] = [];\n\n                // create subjects for all entities we received for the persistence\n                entities.forEach(entity => {\n                    const entityTarget = this.target ? this.target : entity.constructor;\n                    if (entityTarget === Object)\n                        throw new CannotDetermineEntityError(this.mode);\n\n                    subjects.push(new Subject({\n                        metadata: this.connection.getMetadata(entityTarget),\n                        entity: entity,\n                        canBeInserted: this.mode === \"save\",\n                        canBeUpdated: this.mode === \"save\",\n                        mustBeRemoved: this.mode === \"remove\",\n                        canBeSoftRemoved: this.mode === \"soft-remove\",\n                        canBeRecovered: this.mode === \"recover\"\n                    }));\n                });\n\n                // console.time(\"building cascades...\");\n                // go through each entity with metadata and create subjects and subjects by cascades for them\n                const cascadesSubjectBuilder = new CascadesSubjectBuilder(subjects);\n                subjects.forEach(subject => {\n                    // next step we build list of subjects we will operate with\n                    // these subjects are subjects that we need to insert or update alongside with main persisted entity\n                    cascadesSubjectBuilder.build(subject, this.mode);\n                });\n                // console.timeEnd(\"building cascades...\");\n\n                // load database entities for all subjects we have\n                // next step is to load database entities for all operate subjects\n                // console.time(\"loading...\");\n                await new SubjectDatabaseEntityLoader(queryRunner, subjects).load(this.mode);\n                // console.timeEnd(\"loading...\");\n\n                // console.time(\"other subjects...\");\n                // build all related subjects and change maps\n                if (this.mode === \"save\" || this.mode === \"soft-remove\" || this.mode === \"recover\") {\n                    new OneToManySubjectBuilder(subjects).build();\n                    new OneToOneInverseSideSubjectBuilder(subjects).build();\n                    new ManyToManySubjectBuilder(subjects).build();\n                } else {\n                    subjects.forEach(subject => {\n                        if (subject.mustBeRemoved) {\n                            new ManyToManySubjectBuilder(subjects).buildForAllRemoval(subject);\n                        }\n                    });\n                }\n                // console.timeEnd(\"other subjects...\");\n                // console.timeEnd(\"building subjects...\");\n                // console.log(\"subjects\", subjects);\n\n                // create a subject executor\n                return new SubjectExecutor(queryRunner, subjects, this.options);\n            }));\n            // console.timeEnd(\"building subject executors...\");\n\n            // make sure we have at least one executable operation before we create a transaction and proceed\n            // if we don't have operations it means we don't really need to update or remove something\n            const executorsWithExecutableOperations = executors.filter(executor => executor.hasExecutableOperations);\n            if (executorsWithExecutableOperations.length === 0)\n                return;\n\n            // start execute queries in a transaction\n            // if transaction is already opened in this query runner then we don't touch it\n            // if its not opened yet then we open it here, and once we finish - we close it\n            let isTransactionStartedByUs = false;\n            try {\n\n                // open transaction if its not opened yet\n                if (!queryRunner.isTransactionActive) {\n                    if (!this.options || this.options.transaction !== false) { // start transaction until it was not explicitly disabled\n                        isTransactionStartedByUs = true;\n                        await queryRunner.startTransaction();\n                    }\n                }\n\n                // execute all persistence operations for all entities we have\n                // console.time(\"executing subject executors...\");\n                for (const executor of executorsWithExecutableOperations) {\n                    await executor.execute();\n                }\n                // console.timeEnd(\"executing subject executors...\");\n\n                // commit transaction if it was started by us\n                // console.time(\"commit\");\n                if (isTransactionStartedByUs === true)\n                    await queryRunner.commitTransaction();\n                // console.timeEnd(\"commit\");\n\n            } catch (error) {\n\n                // rollback transaction if it was started by us\n                if (isTransactionStartedByUs) {\n                    try {\n                        await queryRunner.rollbackTransaction();\n                    } catch (rollbackError) { }\n                }\n                throw error;\n            }\n\n        } finally {\n\n            // release query runner only if its created by us\n            if (!this.queryRunner)\n                await queryRunner.release();\n        }\n    }\n\n}\n","import {Connection} from \"../connection/Connection\";\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\nimport {EntityTarget} from \"../common/EntityTarget\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {EntityNotFoundError} from \"../error/EntityNotFoundError\";\nimport {QueryRunnerProviderAlreadyReleasedError} from \"../error/QueryRunnerProviderAlreadyReleasedError\";\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\nimport {DeepPartial} from \"../common/DeepPartial\";\nimport {RemoveOptions} from \"../repository/RemoveOptions\";\nimport {SaveOptions} from \"../repository/SaveOptions\";\nimport {NoNeedToReleaseEntityManagerError} from \"../error/NoNeedToReleaseEntityManagerError\";\nimport {MongoRepository} from \"../repository/MongoRepository\";\nimport {TreeRepository} from \"../repository/TreeRepository\";\nimport {Repository} from \"../repository/Repository\";\nimport {FindOptionsUtils} from \"../find-options/FindOptionsUtils\";\nimport {PlainObjectToNewEntityTransformer} from \"../query-builder/transformer/PlainObjectToNewEntityTransformer\";\nimport {PlainObjectToDatabaseEntityTransformer} from \"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\";\nimport {CustomRepositoryNotFoundError} from \"../error/CustomRepositoryNotFoundError\";\nimport {EntitySchema, getMetadataArgsStorage, ObjectLiteral} from \"../index\";\nimport {AbstractRepository} from \"../repository/AbstractRepository\";\nimport {CustomRepositoryCannotInheritRepositoryError} from \"../error/CustomRepositoryCannotInheritRepositoryError\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {RepositoryNotFoundError} from \"../error/RepositoryNotFoundError\";\nimport {RepositoryNotTreeError} from \"../error/RepositoryNotTreeError\";\nimport {RepositoryFactory} from \"../repository/RepositoryFactory\";\nimport {TreeRepositoryNotSupportedError} from \"../error/TreeRepositoryNotSupportedError\";\nimport {QueryDeepPartialEntity} from \"../query-builder/QueryPartialEntity\";\nimport {EntityPersistExecutor} from \"../persistence/EntityPersistExecutor\";\nimport {ObjectID} from \"../driver/mongodb/typings\";\nimport {InsertResult} from \"../query-builder/result/InsertResult\";\nimport {UpdateResult} from \"../query-builder/result/UpdateResult\";\nimport {DeleteResult} from \"../query-builder/result/DeleteResult\";\nimport {FindConditions} from \"../find-options/FindConditions\";\nimport {IsolationLevel} from \"../driver/types/IsolationLevel\";\nimport {ObjectUtils} from \"../util/ObjectUtils\";\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n */\nexport class EntityManager {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this entity manager.\n     */\n    readonly connection: Connection;\n\n    /**\n     * Custom query runner to be used for operations in this entity manager.\n     * Used only in non-global entity manager.\n     */\n    readonly queryRunner?: QueryRunner;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Once created and then reused by en repositories.\n     */\n    protected repositories: Repository<any>[] = [];\n\n    /**\n     * Plain to object transformer used in create and merge operations.\n     */\n    protected plainObjectToEntityTransformer = new PlainObjectToNewEntityTransformer();\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection, queryRunner?: QueryRunner) {\n        this.connection = connection;\n        if (queryRunner) {\n            this.queryRunner = queryRunner;\n            // dynamic: this.queryRunner = manager;\n            ObjectUtils.assign(this.queryRunner, { manager: this });\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(runInTransaction: (entityManager: EntityManager) => Promise<T>): Promise<T>;\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(isolationLevel: IsolationLevel, runInTransaction: (entityManager: EntityManager) => Promise<T>): Promise<T>;\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        isolationOrRunInTransaction: IsolationLevel | ((entityManager: EntityManager) => Promise<T>),\n        runInTransactionParam?: (entityManager: EntityManager) => Promise<T>\n    ): Promise<T> {\n\n        const isolation = typeof isolationOrRunInTransaction === \"string\" ? isolationOrRunInTransaction : undefined;\n        const runInTransaction = typeof isolationOrRunInTransaction === \"function\" ? isolationOrRunInTransaction : runInTransactionParam;\n\n        if (!runInTransaction) {\n            throw new Error(`Transaction method requires callback in second paramter if isolation level is supplied.`);\n        }\n\n        if (this.connection.driver instanceof MongoDriver)\n            throw new Error(`Transactions aren't supported by MongoDB.`);\n\n        if (this.queryRunner && this.queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError();\n\n        if (this.queryRunner && this.queryRunner.isTransactionActive)\n            throw new Error(`Cannot start transaction because its already started`);\n\n        // if query runner is already defined in this class, it means this entity manager was already created for a single connection\n        // if its not defined we create a new query runner - single connection where we'll execute all our operations\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n\n        try {\n            if (isolation) {\n                await queryRunner.startTransaction(isolation);\n              } else {\n                await queryRunner.startTransaction();\n              }\n            const result = await runInTransaction(queryRunner.manager);\n            await queryRunner.commitTransaction();\n            return result;\n\n        } catch (err) {\n            try { // we throw original error even if rollback thrown an error\n                await queryRunner.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw err;\n\n        } finally {\n            if (!this.queryRunner) // if we used a new query runner provider then release it\n                await queryRunner.release();\n        }\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        return this.connection.query(query, parameters, this.queryRunner);\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityClass: EntityTarget<Entity>, alias: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityClass?: EntityTarget<Entity>|QueryRunner, alias?: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\n        if (alias) {\n            return this.connection.createQueryBuilder(entityClass as EntityTarget<Entity>, alias, queryRunner || this.queryRunner);\n\n        } else {\n            return this.connection.createQueryBuilder(entityClass as QueryRunner|undefined || queryRunner || this.queryRunner);\n        }\n    }\n\n    /**\n     * Checks if entity has an id.\n     */\n    hasId(entity: any): boolean;\n\n    /**\n     * Checks if entity of given schema name has an id.\n     */\n    hasId(target: Function|string, entity: any): boolean;\n\n    /**\n     * Checks if entity has an id by its Function type or schema name.\n     */\n    hasId(targetOrEntity: any|Function|string, maybeEntity?: any): boolean {\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\n        const metadata = this.connection.getMetadata(target);\n        return metadata.hasId(entity);\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: any): any;\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(target: EntityTarget<any>, entity: any): any;\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(targetOrEntity: any|EntityTarget<any>, maybeEntity?: any): any {\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\n        const metadata = this.connection.getMetadata(target);\n        return metadata.getEntityIdMixedMap(entity);\n    }\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(entityClass: EntityTarget<Entity>, plainObject?: DeepPartial<Entity>): Entity;\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(entityClass: EntityTarget<Entity>, plainObjects?: DeepPartial<Entity>[]): Entity[];\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create<Entity>(entityClass: EntityTarget<Entity>, plainObjectOrObjects?: DeepPartial<Entity>|DeepPartial<Entity>[]): Entity|Entity[] {\n        const metadata = this.connection.getMetadata(entityClass);\n\n        if (!plainObjectOrObjects)\n            return metadata.create(this.queryRunner);\n\n        if (Array.isArray(plainObjectOrObjects))\n            return plainObjectOrObjects.map(plainEntityLike => this.create(entityClass as any, plainEntityLike));\n\n        const mergeIntoEntity = metadata.create(this.queryRunner);\n        this.plainObjectToEntityTransformer.transform(mergeIntoEntity, plainObjectOrObjects, metadata, true);\n        return mergeIntoEntity;\n    }\n\n    /**\n     * Merges two entities into one new entity.\n     */\n    merge<Entity>(entityClass: EntityTarget<Entity>, mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity { // todo: throw exception if entity manager is released\n        const metadata = this.connection.getMetadata(entityClass);\n        entityLikes.forEach(object => this.plainObjectToEntityTransformer.transform(mergeIntoEntity, object, metadata));\n        return mergeIntoEntity;\n    }\n\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     */\n    async preload<Entity>(entityClass: EntityTarget<Entity>, entityLike: DeepPartial<Entity>): Promise<Entity|undefined> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const plainObjectToDatabaseEntityTransformer = new PlainObjectToDatabaseEntityTransformer(this.connection.manager);\n        const transformedEntity = await plainObjectToDatabaseEntityTransformer.transform(entityLike, metadata);\n        if (transformedEntity)\n            return this.merge(entityClass as any, transformedEntity as Entity, entityLike);\n\n        return undefined;\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>;\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(targetOrEntity: EntityTarget<Entity>, entities: T[], options?: SaveOptions): Promise<T[]>;\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(targetOrEntity: EntityTarget<Entity>, entity: T, options?: SaveOptions): Promise<T>;\n\n    /**\n     * Saves a given entity in the database.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(targetOrEntity: (T|T[])|EntityTarget<Entity>, maybeEntityOrOptions?: T|T[], maybeOptions?: SaveOptions): Promise<T|T[]> {\n\n        // normalize mixed parameters\n        let target = (arguments.length > 1 && (targetOrEntity instanceof Function || targetOrEntity instanceof EntitySchema || typeof targetOrEntity === \"string\")) ? targetOrEntity as Function|string : undefined;\n        const entity: T|T[] = target ? maybeEntityOrOptions as T|T[] : targetOrEntity as T|T[];\n        const options = target ? maybeOptions : maybeEntityOrOptions as SaveOptions;\n\n        if (target instanceof EntitySchema)\n            target = target.options.name;\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity);\n\n        // execute save operation\n        return new EntityPersistExecutor(this.connection, this.queryRunner, \"save\", target, entity, options)\n            .execute()\n            .then(() => entity);\n    }\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity, options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: EntityTarget<Entity>, entity: Entity, options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity[], options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: EntityTarget<Entity>, entity: Entity[], options?: RemoveOptions): Promise<Entity[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: (Entity|Entity[])|EntityTarget<Entity>, maybeEntityOrOptions?: Entity|Entity[], maybeOptions?: RemoveOptions): Promise<Entity|Entity[]> {\n\n        // normalize mixed parameters\n        const target = (arguments.length > 1 && (targetOrEntity instanceof Function || typeof targetOrEntity === \"string\")) ? targetOrEntity as Function|string : undefined;\n        const entity: Entity|Entity[] = target ? maybeEntityOrOptions as Entity|Entity[] : targetOrEntity as Entity|Entity[];\n        const options = target ? maybeOptions : maybeEntityOrOptions as SaveOptions;\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity);\n\n        // execute save operation\n        return new EntityPersistExecutor(this.connection, this.queryRunner, \"remove\", target, entity, options)\n            .execute()\n            .then(() => entity);\n    }\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<Entity>(entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>;\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<Entity, T extends DeepPartial<Entity>>(targetOrEntity: EntityTarget<Entity>, entities: T[], options?: SaveOptions): Promise<T[]>;\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<Entity, T extends DeepPartial<Entity>>(targetOrEntity: EntityTarget<Entity>, entity: T, options?: SaveOptions): Promise<T>;\n\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    softRemove<Entity, T extends DeepPartial<Entity>>(targetOrEntity: (T|T[])|EntityTarget<Entity>, maybeEntityOrOptions?: T|T[], maybeOptions?: SaveOptions): Promise<T|T[]> {\n\n        // normalize mixed parameters\n        let target = (arguments.length > 1 && (targetOrEntity instanceof Function || targetOrEntity instanceof EntitySchema || typeof targetOrEntity === \"string\")) ? targetOrEntity as Function|string : undefined;\n        const entity: T|T[] = target ? maybeEntityOrOptions as T|T[] : targetOrEntity as T|T[];\n        const options = target ? maybeOptions : maybeEntityOrOptions as SaveOptions;\n\n        if (target instanceof EntitySchema)\n            target = target.options.name;\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity);\n\n        // execute soft-remove operation\n        return new EntityPersistExecutor(this.connection, this.queryRunner, \"soft-remove\", target, entity, options)\n            .execute()\n            .then(() => entity);\n    }\n\n    /**\n     * Recovers all given entities.\n     */\n    recover<Entity>(entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\n\n    /**\n     * Recovers a given entity.\n     */\n    recover<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>;\n\n    /**\n     * Recovers all given entities.\n     */\n    recover<Entity, T extends DeepPartial<Entity>>(targetOrEntity: EntityTarget<Entity>, entities: T[], options?: SaveOptions): Promise<T[]>;\n\n    /**\n     * Recovers a given entity.\n     */\n    recover<Entity, T extends DeepPartial<Entity>>(targetOrEntity: EntityTarget<Entity>, entity: T, options?: SaveOptions): Promise<T>;\n\n    /**\n     * Recovers one or many given entities.\n     */\n    recover<Entity, T extends DeepPartial<Entity>>(targetOrEntity: (T|T[])|EntityTarget<Entity>, maybeEntityOrOptions?: T|T[], maybeOptions?: SaveOptions): Promise<T|T[]> {\n\n        // normalize mixed parameters\n        let target = (arguments.length > 1 && (targetOrEntity instanceof Function || targetOrEntity instanceof EntitySchema || typeof targetOrEntity === \"string\")) ? targetOrEntity as Function|string : undefined;\n        const entity: T|T[] = target ? maybeEntityOrOptions as T|T[] : targetOrEntity as T|T[];\n        const options = target ? maybeOptions : maybeEntityOrOptions as SaveOptions;\n\n        if (target instanceof EntitySchema)\n            target = target.options.name;\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity);\n\n        // execute recover operation\n        return new EntityPersistExecutor(this.connection, this.queryRunner, \"recover\", target, entity, options)\n            .execute()\n            .then(() => entity);\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     * You can execute bulk inserts using this method.\n     */\n    async insert<Entity>(target: EntityTarget<Entity>, entity: QueryDeepPartialEntity<Entity>|(QueryDeepPartialEntity<Entity>[])): Promise<InsertResult> {\n        return this.createQueryBuilder()\n            .insert()\n            .into(target)\n            .values(entity)\n            .execute();\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    update<Entity>(target: EntityTarget<Entity>, criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|any, partialEntity: QueryDeepPartialEntity<Entity>): Promise<UpdateResult> {\n\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)) {\n\n            return Promise.reject(new Error(`Empty criteria(s) are not allowed for the update method.`));\n        }\n\n        if (typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)) {\n\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .whereInIds(criteria)\n                .execute();\n\n        } else {\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .where(criteria)\n                .execute();\n        }\n    }\n\n    /**\n     * Deletes entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    delete<Entity>(targetOrEntity: EntityTarget<Entity>, criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|any): Promise<DeleteResult> {\n\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)) {\n\n            return Promise.reject(new Error(`Empty criteria(s) are not allowed for the delete method.`));\n        }\n\n        if (typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)) {\n\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute();\n\n        } else {\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute();\n        }\n    }\n\n    /**\n     * Records the delete date of entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    softDelete<Entity>(targetOrEntity: EntityTarget<Entity>, criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|any): Promise<UpdateResult> {\n\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)) {\n\n            return Promise.reject(new Error(`Empty criteria(s) are not allowed for the delete method.`));\n        }\n\n        if (typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)) {\n\n            return this.createQueryBuilder()\n                .softDelete()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute();\n\n        } else {\n            return this.createQueryBuilder()\n                .softDelete()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute();\n        }\n    }\n\n    /**\n     * Restores entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    restore<Entity>(targetOrEntity: EntityTarget<Entity>, criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|any): Promise<UpdateResult> {\n\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)) {\n\n            return Promise.reject(new Error(`Empty criteria(s) are not allowed for the delete method.`));\n        }\n\n        if (typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)) {\n\n            return this.createQueryBuilder()\n                .restore()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute();\n\n        } else {\n            return this.createQueryBuilder()\n                .restore()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute();\n        }\n    }\n\n    /**\n     * Counts entities that match given options.\n     * Useful for pagination.\n     */\n    count<Entity>(entityClass: EntityTarget<Entity>, options?: FindOneOptions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given options.\n     * Useful for pagination.\n     */\n    count<Entity>(entityClass: EntityTarget<Entity>, options?: FindManyOptions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     * Useful for pagination.\n     */\n    count<Entity>(entityClass: EntityTarget<Entity>, conditions?: FindConditions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given find options or conditions.\n     * Useful for pagination.\n     */\n    async count<Entity>(entityClass: EntityTarget<Entity>, optionsOrConditions?: FindConditions<Entity>|FindOneOptions<Entity>|FindManyOptions<Entity>): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getCount();\n    }\n\n    /**\n     * Finds entities that match given options.\n     */\n    find<Entity>(entityClass: EntityTarget<Entity>, options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find<Entity>(entityClass: EntityTarget<Entity>, conditions?: FindConditions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    async find<Entity>(entityClass: EntityTarget<Entity>, optionsOrConditions?: FindManyOptions<Entity>|FindConditions<Entity>): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder<Entity>(entityClass as any, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n\n        if (!FindOptionsUtils.isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false)\n            FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\n\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getMany();\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity>(entityClass: EntityTarget<Entity>, options?: FindManyOptions<Entity>): Promise<[Entity[], number]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity>(entityClass: EntityTarget<Entity>, conditions?: FindConditions<Entity>): Promise<[Entity[], number]>;\n\n    /**\n     * Finds entities that match given find options and conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    async findAndCount<Entity>(entityClass: EntityTarget<Entity>, optionsOrConditions?: FindConditions<Entity>|FindManyOptions<Entity>): Promise<[Entity[], number]> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder<Entity>(entityClass as any, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n\n        if (!FindOptionsUtils.isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false)\n            FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\n\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getManyAndCount();\n    }\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options can be applied.\n     */\n    findByIds<Entity>(entityClass: EntityTarget<Entity>, ids: any[], options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities with ids.\n     * Optionally conditions can be applied.\n     */\n    findByIds<Entity>(entityClass: EntityTarget<Entity>, ids: any[], conditions?: FindConditions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options or conditions can be applied.\n     */\n    async findByIds<Entity>(entityClass: EntityTarget<Entity>, ids: any[], optionsOrConditions?: FindConditions<Entity>|FindManyOptions<Entity>): Promise<Entity[]> {\n\n        // if no ids passed, no need to execute a query - just return an empty array of values\n        if (!ids.length)\n            return Promise.resolve([]);\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder<Entity>(entityClass as any, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n        FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions);\n\n        if (!FindOptionsUtils.isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false)\n            FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\n\n        return qb.andWhereInIds(ids).getMany();\n    }\n\n    /**\n     * Finds first entity that matches given find options.\n     */\n    findOne<Entity>(entityClass: EntityTarget<Entity>, id?: string|number|Date|ObjectID, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given find options.\n     */\n    findOne<Entity>(entityClass: EntityTarget<Entity>, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne<Entity>(entityClass: EntityTarget<Entity>, conditions?: FindConditions<Entity>, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    async findOne<Entity>(entityClass: EntityTarget<Entity>, idOrOptionsOrConditions?: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindOneOptions<Entity>|FindConditions<Entity>, maybeOptions?: FindOneOptions<Entity>): Promise<Entity|undefined> {\n\n        let findOptions: FindManyOptions<any>|FindOneOptions<any>|undefined = undefined;\n        if (FindOptionsUtils.isFindOneOptions(idOrOptionsOrConditions)) {\n            findOptions = idOrOptionsOrConditions;\n        } else if (maybeOptions && FindOptionsUtils.isFindOneOptions(maybeOptions)) {\n            findOptions = maybeOptions;\n        }\n\n        let options: ObjectLiteral|undefined = undefined;\n        if (idOrOptionsOrConditions instanceof Object && !FindOptionsUtils.isFindOneOptions(idOrOptionsOrConditions))\n            options = idOrOptionsOrConditions as ObjectLiteral;\n\n        const metadata = this.connection.getMetadata(entityClass);\n        let alias: string = metadata.name;\n        if (findOptions && findOptions.join) {\n            alias = findOptions.join.alias;\n\n        } else if (maybeOptions && FindOptionsUtils.isFindOneOptions(maybeOptions) && maybeOptions.join) {\n            alias = maybeOptions.join.alias;\n        }\n        const qb = this.createQueryBuilder<Entity>(entityClass as any, alias);\n\n        if (!findOptions || findOptions.loadEagerRelations !== false)\n            FindOptionsUtils.joinEagerRelations(qb, qb.alias, qb.expressionMap.mainAlias!.metadata);\n\n        const passedId = typeof idOrOptionsOrConditions === \"string\" || typeof idOrOptionsOrConditions === \"number\" || (idOrOptionsOrConditions as any) instanceof Date;\n\n        if (!passedId) {\n            findOptions = {\n                ...(findOptions || {}),\n                take: 1,\n            };\n        }\n\n        FindOptionsUtils.applyOptionsToQueryBuilder(qb, findOptions);\n\n        if (options) {\n            qb.where(options);\n\n        } else if (passedId) {\n            qb.andWhereInIds(metadata.ensureEntityIdMap(idOrOptionsOrConditions));\n        }\n\n        return qb.getOne();\n    }\n\n    /**\n     * Finds first entity that matches given find options or rejects the returned promise on error.\n     */\n    findOneOrFail<Entity>(entityClass: EntityTarget<Entity>, id?: string|number|Date|ObjectID, options?: FindOneOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given find options or rejects the returned promise on error.\n     */\n    findOneOrFail<Entity>(entityClass: EntityTarget<Entity>, options?: FindOneOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given conditions or rejects the returned promise on error.\n     */\n    findOneOrFail<Entity>(entityClass: EntityTarget<Entity>, conditions?: FindConditions<Entity>, options?: FindOneOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given conditions or rejects the returned promise on error.\n     */\n    async findOneOrFail<Entity>(entityClass: EntityTarget<Entity>, idOrOptionsOrConditions?: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindOneOptions<Entity>|FindConditions<Entity>, maybeOptions?: FindOneOptions<Entity>): Promise<Entity> {\n        return this.findOne<Entity>(entityClass as any, idOrOptionsOrConditions as any, maybeOptions).then((value) => {\n            if (value === undefined) {\n                return Promise.reject(new EntityNotFoundError(entityClass, idOrOptionsOrConditions));\n            }\n            return Promise.resolve(value);\n        });\n    }\n\n    /**\n     * Clears all the data from the given table (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    async clear<Entity>(entityClass: EntityTarget<Entity>): Promise<void> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n        try {\n            return await queryRunner.clearTable(metadata.tablePath); // await is needed here because we are using finally\n\n        } finally {\n            if (!this.queryRunner)\n                await queryRunner.release();\n        }\n    }\n\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    async increment<Entity>(entityClass: EntityTarget<Entity>,\n                            conditions: any,\n                            propertyPath: string,\n                            value: number | string): Promise<UpdateResult> {\n\n        const metadata = this.connection.getMetadata(entityClass);\n        const column = metadata.findColumnWithPropertyPath(propertyPath);\n        if (!column)\n            throw new Error(`Column ${propertyPath} was not found in ${metadata.targetName} entity.`);\n\n        if (isNaN(Number(value)))\n            throw new Error(`Value \"${value}\" is not a number.`);\n\n        // convert possible embeded path \"social.likes\" into object { social: { like: () => value } }\n        const values: QueryDeepPartialEntity<Entity> = propertyPath\n            .split(\".\")\n            .reduceRight(\n                (value, key) => ({ [key]: value }) as any,\n                () => this.connection.driver.escape(column.databaseName) + \" + \" + value\n            );\n\n        return this\n            .createQueryBuilder<Entity>(entityClass as any, \"entity\")\n            .update(entityClass)\n            .set(values)\n            .where(conditions)\n            .execute();\n    }\n\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    async decrement<Entity>(entityClass: EntityTarget<Entity>,\n                            conditions: any,\n                            propertyPath: string,\n                            value: number | string): Promise<UpdateResult> {\n\n        const metadata = this.connection.getMetadata(entityClass);\n        const column = metadata.findColumnWithPropertyPath(propertyPath);\n        if (!column)\n            throw new Error(`Column ${propertyPath} was not found in ${metadata.targetName} entity.`);\n\n        if (isNaN(Number(value)))\n            throw new Error(`Value \"${value}\" is not a number.`);\n\n        // convert possible embeded path \"social.likes\" into object { social: { like: () => value } }\n        const values: QueryDeepPartialEntity<Entity> = propertyPath\n            .split(\".\")\n            .reduceRight(\n                (value, key) => ({ [key]: value }) as any,\n                () => this.connection.driver.escape(column.databaseName) + \" - \" + value\n            );\n\n        return this\n            .createQueryBuilder<Entity>(entityClass as any, \"entity\")\n            .update(entityClass)\n            .set(values)\n            .where(conditions)\n            .execute();\n    }\n\n    /**\n     * Gets repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getRepository<Entity>(target: EntityTarget<Entity>): Repository<Entity> {\n\n        // throw exception if there is no repository with this target registered\n        if (!this.connection.hasMetadata(target))\n            throw new RepositoryNotFoundError(this.connection.name, target);\n\n        // find already created repository instance and return it if found\n        const metadata = this.connection.getMetadata(target);\n        const repository = this.repositories.find(repository => repository.metadata === metadata);\n        if (repository)\n            return repository;\n\n        // if repository was not found then create it, store its instance and return it\n        const newRepository = new RepositoryFactory().create(this, metadata, this.queryRunner);\n        this.repositories.push(newRepository);\n        return newRepository;\n    }\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getTreeRepository<Entity>(target: EntityTarget<Entity>): TreeRepository<Entity> {\n\n        // tree tables aren't supported by some drivers (mongodb)\n        if (this.connection.driver.treeSupport === false)\n            throw new TreeRepositoryNotSupportedError(this.connection.driver);\n\n        // check if repository is real tree repository\n        const repository = this.getRepository(target);\n        if (!(repository instanceof TreeRepository))\n            throw new RepositoryNotTreeError(target);\n\n        return repository;\n    }\n\n    /**\n     * Gets mongodb repository for the given entity class.\n     */\n    getMongoRepository<Entity>(target: EntityTarget<Entity>): MongoRepository<Entity> {\n        return this.connection.getMongoRepository<Entity>(target);\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        const entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.find(repository => {\n            return repository.target === (customRepository instanceof Function ? customRepository : (customRepository as any).constructor);\n        });\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError(customRepository);\n\n        const entityMetadata = entityRepositoryMetadataArgs.entity ? this.connection.getMetadata(entityRepositoryMetadataArgs.entity) : undefined;\n        const entityRepositoryInstance = new (entityRepositoryMetadataArgs.target as any)(this, entityMetadata);\n\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n        // however we need these properties for internal work of the class\n        if (entityRepositoryInstance instanceof AbstractRepository) {\n            if (!(entityRepositoryInstance as any)[\"manager\"])\n                (entityRepositoryInstance as any)[\"manager\"] = this;\n        }\n        if (entityRepositoryInstance instanceof Repository) {\n            if (!entityMetadata)\n                throw new CustomRepositoryCannotInheritRepositoryError(customRepository);\n\n            (entityRepositoryInstance as any)[\"manager\"] = this;\n            (entityRepositoryInstance as any)[\"metadata\"] = entityMetadata;\n        }\n\n        return entityRepositoryInstance;\n    }\n\n    /**\n     * Releases all resources used by entity manager.\n     * This is used when entity manager is created with a single query runner,\n     * and this single query runner needs to be released after job with entity manager is done.\n     */\n    async release(): Promise<void> {\n        if (!this.queryRunner)\n            throw new NoNeedToReleaseEntityManagerError();\n\n        return this.queryRunner.release();\n    }\n}\n","import {Connection} from \"../connection/Connection\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {EntityManager} from \"./EntityManager\";\nimport {SqljsDriver} from \"../driver/sqljs/SqljsDriver\";\n\n/**\n * A special EntityManager that includes import/export and load/save function\n * that are unique to Sql.js.\n */\nexport class SqljsEntityManager extends EntityManager {\n    private driver: SqljsDriver;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection, queryRunner?: QueryRunner) {\n        super(connection, queryRunner);\n        this.driver = connection.driver as SqljsDriver;\n    }\n    \n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads either the definition from a file (Node.js) or localstorage (browser)\n     * or uses the given definition to open a new database.\n     */\n    async loadDatabase(fileNameOrLocalStorageOrData: string | Uint8Array): Promise<void> {\n        await this.driver.load(fileNameOrLocalStorageOrData);\n    }\n    \n    /**\n     * Saves the current database to a file (Node.js) or localstorage (browser)\n     * if fileNameOrLocalStorage is not set options.location is used.\n     */\n    async saveDatabase(fileNameOrLocalStorage?: string): Promise<void> {\n        await this.driver.save(fileNameOrLocalStorage);\n    }\n\n    /**\n     * Returns the current database definition.\n     */\n    exportDatabase(): Uint8Array {\n        return this.driver.export();\n    }\n\n }","import {Connection} from \"../connection/Connection\";\nimport {EntityManager} from \"./EntityManager\";\nimport {MongoEntityManager} from \"./MongoEntityManager\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {SqljsEntityManager} from \"./SqljsEntityManager\";\nimport {SqljsDriver} from \"../driver/sqljs/SqljsDriver\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\n\n/**\n * Helps to create entity managers.\n */\nexport class EntityManagerFactory {\n\n    /**\n     * Creates a new entity manager depend on a given connection's driver.\n     */\n    create(connection: Connection, queryRunner?: QueryRunner): EntityManager {\n        if (connection.driver instanceof MongoDriver)\n            return new MongoEntityManager(connection);\n\n        if (connection.driver instanceof SqljsDriver)\n            return new SqljsEntityManager(connection, queryRunner);\n\n        return new EntityManager(connection, queryRunner);\n    }\n\n}","/**\n * Thrown when consumer specifies driver type that does not exist or supported.\n */\nexport class MissingDriverError extends Error {\n    name = \"MissingDriverError\";\n\n    constructor(driverType: string) {\n        super();\n        Object.setPrototypeOf(this, MissingDriverError.prototype);\n        this.message = `Wrong driver: \"${driverType}\" given. Supported drivers are: \"cordova\", \"expo\", \"mariadb\", \"mongodb\", \"mssql\", \"mysql\", \"oracle\", \"postgres\", \"sqlite\", \"better-sqlite3\", \"sqljs\", \"react-native\", \"aurora-data-api\", \"aurora-data-api-pg\".`;\n    }\n\n}\n","import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\nimport {AbstractSqliteQueryRunner} from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport {CordovaDriver} from \"./CordovaDriver\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class CordovaQueryRunner extends AbstractSqliteQueryRunner {\n    \n    /**\n     * Database driver used by connection.\n     */\n    driver: CordovaDriver;\n    \n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: CordovaDriver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise<any[]>(async (ok, fail) => {\n            const databaseConnection = await this.connect();\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const queryStartTime = +new Date();\n            databaseConnection.executeSql(query, parameters, (result: any) => {\n\n                // log slow queries if maxQueryExecution time is set\n                const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                const queryEndTime = +new Date();\n                const queryExecutionTime = queryEndTime - queryStartTime;\n                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                    this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                if (query.substr(0, 11) === \"INSERT INTO\") {\n                    ok(result.insertId);\n                }\n                else {\n                    let resultSet = [];\n                    for (let i = 0; i < result.rows.length; i++) {\n                        resultSet.push(result.rows.item(i));\n                    }\n                    \n                    ok(resultSet);\n                }\n            }, (err: any) => {\n                this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                fail(new QueryFailedError(query, parameters, err));\n            });\n        });\n    }\n\n    /**\n     * Insert a new row with given values into the given table.\n     * Returns value of the generated column if given and generate column exist in the table.\n     // todo: implement new syntax\n    async insert(tableName: string, keyValues: ObjectLiteral): Promise<InsertResult> {\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => `\"${key}\"`).join(\", \");\n        const values = keys.map(key => \"?\").join(\",\");\n        const generatedColumns = this.connection.hasMetadata(tableName) ? this.connection.getMetadata(tableName).generatedColumns : [];\n        const sql = columns.length > 0 ? (`INSERT INTO \"${tableName}\"(${columns}) VALUES (${values})`) : `INSERT INTO \"${tableName}\" DEFAULT VALUES`;\n        const parameters = keys.map(key => keyValues[key]);\n\n        return new Promise<InsertResult>(async (ok, fail) => {\n            this.driver.connection.logger.logQuery(sql, parameters, this);\n            const __this = this;\n            const databaseConnection = await this.connect();\n            databaseConnection.executeSql(sql, parameters, (resultSet: any) => {\n                const generatedMap = generatedColumns.reduce((map, generatedColumn) => {\n                    const value = generatedColumn.isPrimary && generatedColumn.generationStrategy === \"increment\" && resultSet.insertId ? resultSet.insertId : keyValues[generatedColumn.databaseName];\n                    if (!value) return map;\n                    return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n                }, {} as ObjectLiteral);\n\n                ok({\n                    result: undefined,\n                    generatedMap: Object.keys(generatedMap).length > 0 ? generatedMap : undefined\n                });\n            }, (err: any) => {\n                __this.driver.connection.logger.logQueryError(err, sql, parameters, this);\n                fail(err);\n            });\n        });\n    }*/\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\");\n    }\n}","import {AbstractSqliteDriver} from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport {CordovaConnectionOptions} from \"./CordovaConnectionOptions\";\nimport {CordovaQueryRunner} from \"./CordovaQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {Connection} from \"../../connection/Connection\";\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\n\n// needed for typescript compiler\ninterface Window {\n    sqlitePlugin: any;\n}\n\ndeclare var window: Window;\n\nexport class CordovaDriver extends AbstractSqliteDriver {\n    options: CordovaConnectionOptions;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n\n        // this.connection = connection;\n        // this.options = connection.options as CordovaConnectionOptions;\n        this.database = this.options.database;\n\n        // validate options to make sure everything is set\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n\n        if (!this.options.location)\n            throw new DriverOptionNotSetError(\"location\");\n\n        // load sqlite package\n        this.loadDependencies();\n    }\n\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.queryRunner = undefined;\n            this.databaseConnection.close(ok, fail);\n        });\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner)\n            this.queryRunner = new CordovaQueryRunner(this);\n\n        return this.queryRunner;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        return new Promise<void>((ok, fail) => {\n            const options = Object.assign({}, {\n                name: this.options.database,\n                location: this.options.location,\n            }, this.options.extra || {});\n\n            this.sqlite.openDatabase(options, (db: any) => {\n                const databaseConnection = db;\n\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete to work with sqlite.\n                databaseConnection.executeSql(`PRAGMA foreign_keys = ON;`, [], (result: any) => {\n                    ok(databaseConnection);\n                }, (error: any) => {\n                    fail(error);\n                });\n            }, (error: any) => {\n                fail(error);\n            });\n        });\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.sqlite = window.sqlitePlugin;\n\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\"Cordova-SQLite\", \"cordova-sqlite-storage\");\n        }\n    }\n}\n","import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\nimport {AbstractSqliteQueryRunner} from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport {ReactNativeDriver} from \"./ReactNativeDriver\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class ReactNativeQueryRunner extends AbstractSqliteQueryRunner {\n    \n    /**\n     * Database driver used by connection.\n     */\n    driver: ReactNativeDriver;\n    \n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: ReactNativeDriver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise<any[]>(async (ok, fail) => {\n            const databaseConnection = await this.connect();\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const queryStartTime = +new Date();\n            databaseConnection.executeSql(query, parameters, (result: any) => {\n\n                // log slow queries if maxQueryExecution time is set\n                const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                const queryEndTime = +new Date();\n                const queryExecutionTime = queryEndTime - queryStartTime;\n                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                    this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                // return id of inserted row, if query was insert statement.\n                if (query.substr(0, 11) === \"INSERT INTO\") {\n                    ok(result.insertId);\n                }\n                else {\n                    let resultSet = [];\n                    for (let i = 0; i < result.rows.length; i++) {\n                        resultSet.push(result.rows.item(i));\n                    }\n                    \n                    ok(resultSet);\n                }\n            }, (err: any) => {\n                this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                fail(new QueryFailedError(query, parameters, err));\n            });\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\");\n    }\n}","import {AbstractSqliteDriver} from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport {ReactNativeConnectionOptions} from \"./ReactNativeConnectionOptions\";\nimport {ReactNativeQueryRunner} from \"./ReactNativeQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {Connection} from \"../../connection/Connection\";\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\n\nexport class ReactNativeDriver extends AbstractSqliteDriver {\n    options: ReactNativeConnectionOptions;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n\n        this.database = this.options.database;\n\n        // validate options to make sure everything is set\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n\n        if (!this.options.location)\n            throw new DriverOptionNotSetError(\"location\");\n\n        // load sqlite package\n        this.loadDependencies();\n    }\n\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.queryRunner = undefined;\n            this.databaseConnection.close(ok, fail);\n        });\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner)\n            this.queryRunner = new ReactNativeQueryRunner(this);\n\n        return this.queryRunner;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        return new Promise<void>((ok, fail) => {\n            const options = Object.assign({}, {\n                name: this.options.database,\n                location: this.options.location,\n            }, this.options.extra || {});\n\n            this.sqlite.openDatabase(options, (db: any) => {\n                const databaseConnection = db;\n\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete work with sqlite.\n                databaseConnection.executeSql(`PRAGMA foreign_keys = ON;`, [], (result: any) => {\n                    ok(databaseConnection);\n                }, (error: any) => {\n                    fail(error);\n                });\n            }, (error: any) => {\n                fail(error);\n            });\n        });\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.sqlite = require(\"react-native-sqlite-storage\");\n\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\"React-Native\", \"react-native-sqlite-storage\");\n        }\n    }\n}\n","import {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\nimport {AbstractSqliteQueryRunner} from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {ExpoDriver} from \"./ExpoDriver\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\nimport {BroadcasterResult} from \"../../subscriber/BroadcasterResult\";\n\n// Needed to satisfy the Typescript compiler\ninterface IResultSet {\n    insertId: number | undefined;\n    rowsAffected: number;\n    rows: {\n        length: number;\n        item: (idx: number) => any;\n        _array: any[];\n    };\n}\ninterface ITransaction {\n    executeSql: (\n        sql: string,\n        args: any[] | undefined,\n        ok: (tsx: ITransaction, resultSet: IResultSet) => void,\n        fail: (tsx: ITransaction, err: any) => void\n    ) => void;\n}\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class ExpoQueryRunner extends AbstractSqliteQueryRunner {\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: ExpoDriver;\n\n    /**\n     * Database transaction object\n     */\n    private transaction?: ITransaction;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: ExpoDriver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n\n    /**\n     * Starts transaction. Within Expo, all database operations happen in a\n     * transaction context, so issuing a `BEGIN TRANSACTION` command is\n     * redundant and will result in the following error:\n     *\n     * `Error: Error code 1: cannot start a transaction within a transaction`\n     *\n     * Instead, we keep track of a `Transaction` object in `this.transaction`\n     * and continue using the same object until we wish to commit the\n     * transaction.\n     */\n    async startTransaction(): Promise<void> {\n        if (this.isTransactionActive && typeof this.transaction !== \"undefined\")\n            throw new TransactionAlreadyStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        this.isTransactionActive = true;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     * Since Expo will automatically commit the transaction once all the\n     * callbacks of the transaction object have been completed, \"committing\" a\n     * transaction in this driver's context means that we delete the transaction\n     * object and set the stage for the next transaction.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive && typeof this.transaction === \"undefined\")\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        this.isTransactionActive = false;\n        this.transaction = undefined;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     * This method's functionality is identical to `commitTransaction()` because\n     * the transaction lifecycle is handled within the Expo transaction object.\n     * Issuing separate statements for `COMMIT` or `ROLLBACK` aren't necessary.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive && typeof this.transaction === \"undefined\")\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        this.isTransactionActive = false;\n        this.transaction = undefined;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise<any>(async (ok, fail) => {\n            const databaseConnection = await this.connect();\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const queryStartTime = +new Date();\n            // All Expo SQL queries are executed in a transaction context\n            databaseConnection.transaction((transaction: ITransaction) => {\n                if (typeof this.transaction === \"undefined\") {\n                    this.startTransaction();\n                    this.transaction = transaction;\n                }\n                this.transaction.executeSql(query, parameters, (t: ITransaction, result: IResultSet) => {\n                    // log slow queries if maxQueryExecution time is set\n                    const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                    const queryEndTime = +new Date();\n                    const queryExecutionTime = queryEndTime - queryStartTime;\n                    if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) {\n                        this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n                    }\n\n                    // return id of inserted row, if query was insert statement.\n                    if (query.substr(0, 11) === \"INSERT INTO\") {\n                        ok(result.insertId);\n                    }\n                    else {\n                        let resultSet = [];\n                        for (let i = 0; i < result.rows.length; i++) {\n                            resultSet.push(result.rows.item(i));\n                        }\n                        ok(resultSet);\n                    }\n                }, (t: ITransaction, err: any) => {\n                    this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                    fail(new QueryFailedError(query, parameters, err));\n                });\n            }, (err: any) => {\n                this.rollbackTransaction();\n            }, () => {\n                this.isTransactionActive = false;\n                this.transaction = undefined;\n            });\n        });\n    }\n}\n","import {AbstractSqliteDriver} from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport {ExpoConnectionOptions} from \"./ExpoConnectionOptions\";\nimport {ExpoQueryRunner} from \"./ExpoQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {Connection} from \"../../connection/Connection\";\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\n\nexport class ExpoDriver extends AbstractSqliteDriver {\n    options: ExpoConnectionOptions;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n\n        this.database = this.options.database;\n\n        // validate options to make sure everything is set\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n\n        if (!this.options.driver)\n            throw new DriverOptionNotSetError(\"driver\");\n\n        // load sqlite package\n        this.sqlite = this.options.driver;\n    }\n\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            try {\n                this.queryRunner = undefined;\n                this.databaseConnection._db.close();\n                this.databaseConnection = undefined;\n                ok();\n            } catch (error) {\n                fail(error);\n            }\n        });\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner)\n            this.queryRunner = new ExpoQueryRunner(this);\n\n        return this.queryRunner;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        return new Promise<void>((ok, fail) => {\n            try {\n                const databaseConnection = this.sqlite.openDatabase(this.options.database);\n                /*\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete work with sqlite.\n                */\n                databaseConnection.transaction((tsx: any) => {\n                    tsx.executeSql(`PRAGMA foreign_keys = ON;`, [], (t: any, result: any) => {\n                        ok(databaseConnection);\n                    }, (t: any, err: any) => {\n                        fail({transaction: t, error: err});\n                    });\n                }, (err: any) => {\n                    fail(err);\n                });\n            } catch (error) {\n                fail(error);\n            }\n        });\n    }\n}\n","import {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {IsolationLevel} from \"../types/IsolationLevel\";\nimport {AuroraDataApiPostgresDriver} from \"./AuroraDataApiPostgresDriver\";\nimport {PostgresQueryRunner} from \"../postgres/PostgresQueryRunner\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\nimport {BroadcasterResult} from \"../../subscriber/BroadcasterResult\";\n\nclass PostgresQueryRunnerWrapper extends PostgresQueryRunner {\n    driver: any;\n\n    constructor(driver: any, mode: ReplicationMode) {\n        super(driver, mode);\n    }\n}\n\n/**\n * Runs queries on a single postgres database connection.\n */\nexport class AuroraDataApiPostgresQueryRunner extends PostgresQueryRunnerWrapper implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: AuroraDataApiPostgresDriver;\n\n    protected client: any;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Promise used to obtain a database connection for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>;\n\n    /**\n     * Special callback provided by a driver used to release a created connection.\n     */\n    protected releaseCallback: Function;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: AuroraDataApiPostgresDriver, client: any, mode: ReplicationMode) {\n        super(driver, mode);\n\n        this.client = client\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise;\n\n        if (this.mode === \"slave\" && this.driver.isReplicated)  {\n            this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(([ connection, release]: any[]) => {\n                this.driver.connectedQueryRunners.push(this);\n                this.databaseConnection = connection;\n                this.releaseCallback = release;\n                return this.databaseConnection;\n            });\n\n        } else { // master\n            this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(([connection, release]: any[]) => {\n                this.driver.connectedQueryRunners.push(this);\n                this.databaseConnection = connection;\n                this.releaseCallback = release;\n                return this.databaseConnection;\n            });\n        }\n\n        return this.databaseConnectionPromise;\n    }\n\n    /**\n     * Starts transaction on the current connection.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        this.isTransactionActive = true;\n      \n        await this.client.startTransaction();\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n      \n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        await this.client.commitTransaction();\n\n        this.isTransactionActive = false;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        await this.client.rollbackTransaction();\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const result = await this.client.query(query, parameters);\n\n        if (result.records) {\n            return result.records;\n        }\n\n        return result;\n    }\n}\n","import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {ColumnType} from \"../../index\";\nimport {ReadStream} from \"../../platform/PlatformTools\";\nimport {BaseQueryRunner} from \"../../query-runner/BaseQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {TableIndexOptions} from \"../../schema-builder/options/TableIndexOptions\";\nimport {Table} from \"../../schema-builder/table/Table\";\nimport {TableCheck} from \"../../schema-builder/table/TableCheck\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {TableExclusion} from \"../../schema-builder/table/TableExclusion\";\nimport {TableForeignKey} from \"../../schema-builder/table/TableForeignKey\";\nimport {TableIndex} from \"../../schema-builder/table/TableIndex\";\nimport {TableUnique} from \"../../schema-builder/table/TableUnique\";\nimport {View} from \"../../schema-builder/view/View\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {Query} from \"../Query\";\nimport {IsolationLevel} from \"../types/IsolationLevel\";\nimport {PostgresDriver} from \"./PostgresDriver\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\nimport {BroadcasterResult} from \"../../subscriber/BroadcasterResult\";\n\n/**\n * Runs queries on a single postgres database connection.\n */\nexport class PostgresQueryRunner extends BaseQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: PostgresDriver;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Promise used to obtain a database connection for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>;\n\n    /**\n     * Special callback provided by a driver used to release a created connection.\n     */\n    protected releaseCallback: Function;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: PostgresDriver, mode: ReplicationMode) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.mode = mode;\n        this.broadcaster = new Broadcaster(this);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise;\n\n        if (this.mode === \"slave\" && this.driver.isReplicated)  {\n            this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(([connection, release]: any[]) => {\n                this.driver.connectedQueryRunners.push(this);\n                this.databaseConnection = connection;\n\n                const onErrorCallback = () => this.release();\n                this.releaseCallback = () => {\n                    this.databaseConnection.removeListener(\"error\", onErrorCallback);\n                    release();\n                };\n                this.databaseConnection.on(\"error\", onErrorCallback);\n\n                return this.databaseConnection;\n            });\n\n        } else { // master\n            this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(([connection, release]: any[]) => {\n                this.driver.connectedQueryRunners.push(this);\n                this.databaseConnection = connection;\n\n                const onErrorCallback = () => this.release();\n                this.releaseCallback = () => {\n                    this.databaseConnection.removeListener(\"error\", onErrorCallback);\n                    release();\n                };\n                this.databaseConnection.on(\"error\", onErrorCallback);\n\n                return this.databaseConnection;\n            });\n        }\n\n        return this.databaseConnectionPromise;\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        if (this.isReleased) {\n            return Promise.resolve();\n        }\n\n        this.isReleased = true;\n        if (this.releaseCallback)\n            this.releaseCallback();\n\n        const index = this.driver.connectedQueryRunners.indexOf(this);\n        if (index !== -1) this.driver.connectedQueryRunners.splice(index);\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        this.isTransactionActive = true;\n        await this.query(\"START TRANSACTION\");\n        if (isolationLevel) {\n            await this.query(\"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel);\n        }\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        await this.query(\"COMMIT\");\n        this.isTransactionActive = false;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        await this.query(\"ROLLBACK\");\n        this.isTransactionActive = false;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const databaseConnection = await this.connect();\n\n        this.driver.connection.logger.logQuery(query, parameters, this);\n        try {\n            const queryStartTime = +new Date();\n            const result = await databaseConnection.query(query, parameters);\n            // log slow queries if maxQueryExecution time is set\n            const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n            const queryEndTime = +new Date();\n            const queryExecutionTime = queryEndTime - queryStartTime;\n            if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n            switch (result.command) {\n                case \"DELETE\":\n                case \"UPDATE\":\n                    // for UPDATE and DELETE query additionally return number of affected rows\n                    return [result.rows, result.rowCount];\n                    break;\n                default:\n                    return result.rows;\n            }\n        } catch (err) {\n            this.driver.connection.logger.logQueryError(err, query, parameters, this);\n            throw new QueryFailedError(query, parameters, err);\n        }\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        const QueryStream = this.driver.loadStreamDependency();\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise(async (ok, fail) => {\n            try {\n                const databaseConnection = await this.connect();\n                this.driver.connection.logger.logQuery(query, parameters, this);\n                const stream = databaseConnection.query(new QueryStream(query, parameters));\n                if (onEnd) stream.on(\"end\", onEnd);\n                if (onError) stream.on(\"error\", onError);\n                ok(stream);\n\n            } catch (err) {\n                fail(err);\n            }\n        });\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        return Promise.resolve([]);\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        return Promise.resolve([]);\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        return Promise.resolve(false);\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        const result = await this.query(`SELECT * FROM \"information_schema\".\"schemata\" WHERE \"schema_name\" = '${schema}'`);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table|string): Promise<boolean> {\n        const parsedTableName = this.parseTableName(tableOrName);\n        const sql = `SELECT * FROM \"information_schema\".\"tables\" WHERE \"table_schema\" = ${parsedTableName.schema} AND \"table_name\" = ${parsedTableName.tableName}`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableOrName: Table|string, columnName: string): Promise<boolean> {\n        const parsedTableName = this.parseTableName(tableOrName);\n        const sql = `SELECT * FROM \"information_schema\".\"columns\" WHERE \"table_schema\" = ${parsedTableName.schema} AND \"table_name\" = ${parsedTableName.tableName} AND \"column_name\" = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new database.\n     * Postgres does not supports database creation inside a transaction block.\n     */\n    async createDatabase(database: string, ifNotExist?: boolean): Promise<void> {\n        await Promise.resolve();\n    }\n\n    /**\n     * Drops database.\n     * Postgres does not supports database drop inside a transaction block.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(schema: string, ifNotExist?: boolean): Promise<void> {\n        const up = ifNotExist ? `CREATE SCHEMA IF NOT EXISTS \"${schema}\"` : `CREATE SCHEMA \"${schema}\"`;\n        const down = `DROP SCHEMA \"${schema}\" CASCADE`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n\n    /**\n     * Drops table schema.\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean, isCascade?: boolean): Promise<void> {\n        const schema = schemaPath.indexOf(\".\") === -1 ? schemaPath : schemaPath.split(\".\")[0];\n        const up = ifExist ? `DROP SCHEMA IF EXISTS \"${schema}\" ${isCascade ? \"CASCADE\" : \"\"}` : `DROP SCHEMA \"${schema}\" ${isCascade ? \"CASCADE\" : \"\"}`;\n        const down = `CREATE SCHEMA \"${schema}\"`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(table: Table, ifNotExist: boolean = false, createForeignKeys: boolean = true, createIndices: boolean = true): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table);\n            if (isTableExist) return Promise.resolve();\n        }\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // if table have column with ENUM type, we must create this type in postgres.\n        await Promise.all(table.columns\n            .filter(column => column.type === \"enum\" || column.type === \"simple-enum\")\n            .map(async column => {\n                const hasEnum = await this.hasEnumType(table, column);\n                // TODO: Should also check if values of existing type matches expected ones\n                if (!hasEnum) {\n                    upQueries.push(this.createEnumTypeSql(table, column));\n                    downQueries.push(this.dropEnumTypeSql(table, column));\n                }\n                return Promise.resolve();\n            }));\n\n        upQueries.push(this.createTableSql(table, createForeignKeys));\n        downQueries.push(this.dropTableSql(table));\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        if (createIndices) {\n            table.indices.forEach(index => {\n\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                upQueries.push(this.createIndexSql(table, index));\n                downQueries.push(this.dropIndexSql(table, index));\n            });\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(target: Table|string, ifExist?: boolean, dropForeignKeys: boolean = true, dropIndices: boolean = true): Promise<void> {// It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n        if (ifExist) {\n            const isTableExist = await this.hasTable(target);\n            if (!isTableExist) return Promise.resolve();\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys;\n        const tableName = target instanceof Table ? target.name : target;\n        const table = await this.getCachedTable(tableName);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n\n        if (dropIndices) {\n            table.indices.forEach(index => {\n                upQueries.push(this.dropIndexSql(table, index));\n                downQueries.push(this.createIndexSql(table, index));\n            });\n        }\n\n        if (dropForeignKeys)\n            table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        upQueries.push(this.dropTableSql(table));\n        downQueries.push(this.createTableSql(table, createForeignKeys));\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(view: View): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.createViewSql(view));\n        upQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.deleteViewDefinitionSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View|string): Promise<void> {\n        const viewName = target instanceof View ? target.name : target;\n        const view = await this.getCachedView(viewName);\n\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(await this.deleteViewDefinitionSql(view));\n        upQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.createViewSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Renames the given table.\n     */\n    async renameTable(oldTableOrName: Table|string, newTableName: string): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        const oldTable = oldTableOrName instanceof Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);\n        const newTable = oldTable.clone();\n        const oldTableName = oldTable.name.indexOf(\".\") === -1 ? oldTable.name : oldTable.name.split(\".\")[1];\n        const schemaName = oldTable.name.indexOf(\".\") === -1 ? undefined : oldTable.name.split(\".\")[0];\n        newTable.name = schemaName ? `${schemaName}.${newTableName}` : newTableName;\n\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(oldTable)} RENAME TO \"${newTableName}\"`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME TO \"${oldTableName}\"`));\n\n        // rename column primary key constraint\n        if (newTable.primaryColumns.length > 0) {\n            const columnNames = newTable.primaryColumns.map(column => column.name);\n\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\n            const newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);\n\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${oldPkName}\" TO \"${newPkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${newPkName}\" TO \"${oldPkName}\"`));\n        }\n\n        // rename unique constraints\n        newTable.uniques.forEach(unique => {\n            // build new constraint name\n            const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);\n\n            // build queries\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${unique.name}\" TO \"${newUniqueName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${newUniqueName}\" TO \"${unique.name}\"`));\n\n            // replace constraint name\n            unique.name = newUniqueName;\n        });\n\n        // rename index constraints\n        newTable.indices.forEach(index => {\n            // build new constraint name\n            const schema = this.extractSchema(newTable);\n            const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n\n            // build queries\n            const up = schema ? `ALTER INDEX \"${schema}\".\"${index.name}\" RENAME TO \"${newIndexName}\"` : `ALTER INDEX \"${index.name}\" RENAME TO \"${newIndexName}\"`;\n            const down = schema ? `ALTER INDEX \"${schema}\".\"${newIndexName}\" RENAME TO \"${index.name}\"` : `ALTER INDEX \"${newIndexName}\" RENAME TO \"${index.name}\"`;\n            upQueries.push(new Query(up));\n            downQueries.push(new Query(down));\n\n            // replace constraint name\n            index.name = newIndexName;\n        });\n\n        // rename foreign key constraints\n        newTable.foreignKeys.forEach(foreignKey => {\n            // build new constraint name\n            const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n            // build queries\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${foreignKey.name}\" TO \"${newForeignKeyName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${newForeignKeyName}\" TO \"${foreignKey.name}\"`));\n\n            // replace constraint name\n            foreignKey.name = newForeignKeyName;\n        });\n\n        // rename ENUM types\n        const enumColumns = newTable.columns.filter(column => column.type === \"enum\" || column.type === \"simple-enum\");\n        for (let column of enumColumns) {\n            const oldEnumType = await this.getEnumTypeName(oldTable, column);\n            upQueries.push(new Query(`ALTER TYPE \"${oldEnumType.enumTypeSchema}\".\"${oldEnumType.enumTypeName}\" RENAME TO ${this.buildEnumName(newTable, column, false)}`));\n            downQueries.push(new Query(`ALTER TYPE ${this.buildEnumName(newTable, column)} RENAME TO \"${oldEnumType.enumTypeName}\"`));\n        }\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(tableOrName: Table|string, column: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        if (column.type === \"enum\" || column.type === \"simple-enum\") {\n            const hasEnum = await this.hasEnumType(table, column);\n            if (!hasEnum) {\n                upQueries.push(this.createEnumTypeSql(table, column));\n                downQueries.push(this.dropEnumTypeSql(table, column));\n            }\n        }\n\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column)}`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${column.name}\"`));\n\n        // create or update primary key constraint\n        if (column.isPrimary) {\n            const primaryColumns = clonedTable.primaryColumns;\n            // if table already have primary key, me must drop it and recreate again\n            if (primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            }\n\n            primaryColumns.push(column);\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n        }\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            upQueries.push(this.createIndexSql(table, columnIndex));\n            downQueries.push(this.dropIndexSql(table, columnIndex));\n        }\n\n        // create unique constraint\n        if (column.isUnique) {\n            const uniqueConstraint = new TableUnique({\n                name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                columnNames: [column.name]\n            });\n            clonedTable.uniques.push(uniqueConstraint);\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${column.name}\")`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\n        }\n\n        // create column's comment\n        if (column.comment) {\n            upQueries.push(new Query(`COMMENT ON COLUMN ${this.escapePath(table)}.\"${column.name}\" IS ${this.escapeComment(column.comment)}`));\n            downQueries.push(new Query(`COMMENT ON COLUMN ${this.escapePath(table)}.\"${column.name}\" IS ${this.escapeComment(column.comment)}`));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.addColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newTableColumnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        let newColumn;\n        if (newTableColumnOrName instanceof TableColumn) {\n            newColumn = newTableColumnOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newTableColumnOrName;\n        }\n\n        return this.changeColumn(table, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newColumn: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        let clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        const oldColumn = oldTableColumnOrName instanceof TableColumn\n            ? oldTableColumnOrName\n            : table.columns.find(column => column.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        if (oldColumn.type !== newColumn.type || oldColumn.length !== newColumn.length) {\n            // To avoid data conversion, we just recreate column\n            await this.dropColumn(table, oldColumn);\n            await this.addColumn(table, newColumn);\n\n            // update cloned table\n            clonedTable = table.clone();\n\n        } else {\n            if (oldColumn.name !== newColumn.name) {\n                // rename column\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME COLUMN \"${oldColumn.name}\" TO \"${newColumn.name}\"`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME COLUMN \"${newColumn.name}\" TO \"${oldColumn.name}\"`));\n\n                // rename ENUM type\n                if (oldColumn.type === \"enum\" || oldColumn.type === \"simple-enum\") {\n                    const oldEnumType = await this.getEnumTypeName(table, oldColumn);\n                    upQueries.push(new Query(`ALTER TYPE \"${oldEnumType.enumTypeSchema}\".\"${oldEnumType.enumTypeName}\" RENAME TO ${this.buildEnumName(table, newColumn, false)}`));\n                    downQueries.push(new Query(`ALTER TYPE ${this.buildEnumName(table, newColumn)} RENAME TO \"${oldEnumType.enumTypeName}\"`));\n                }\n\n                // rename column primary key constraint\n                if (oldColumn.isPrimary === true) {\n                    const primaryColumns = clonedTable.primaryColumns;\n\n                    // build old primary constraint name\n                    const columnNames = primaryColumns.map(column => column.name);\n                    const oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    // replace old column name with new column name\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n                    columnNames.push(newColumn.name);\n\n                    // build new primary constraint name\n                    const newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${oldPkName}\" TO \"${newPkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${newPkName}\" TO \"${oldPkName}\"`));\n                }\n\n                // rename column sequence\n                if (oldColumn.isGenerated === true && newColumn.generationStrategy === \"increment\") {\n                    const schema = this.extractSchema(table);\n\n                    // building sequence name. Sequence without schema needed because it must be supplied in RENAME TO without\n                    // schema name, but schema needed in ALTER SEQUENCE argument.\n                    const seqName = this.buildSequenceName(table, oldColumn.name, undefined, true, true);\n                    const newSeqName = this.buildSequenceName(table, newColumn.name, undefined, true, true);\n\n                    const up = schema ? `ALTER SEQUENCE \"${schema}\".\"${seqName}\" RENAME TO \"${newSeqName}\"` : `ALTER SEQUENCE \"${seqName}\" RENAME TO \"${newSeqName}\"`;\n                    const down = schema ? `ALTER SEQUENCE \"${schema}\".\"${newSeqName}\" RENAME TO \"${seqName}\"` : `ALTER SEQUENCE \"${newSeqName}\" RENAME TO \"${seqName}\"`;\n                    upQueries.push(new Query(up));\n                    downQueries.push(new Query(down));\n                }\n\n                // rename unique constraints\n                clonedTable.findColumnUniques(oldColumn).forEach(unique => {\n                    // build new constraint name\n                    unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);\n                    unique.columnNames.push(newColumn.name);\n                    const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames);\n\n                    // build queries\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${unique.name}\" TO \"${newUniqueName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${newUniqueName}\" TO \"${unique.name}\"`));\n\n                    // replace constraint name\n                    unique.name = newUniqueName;\n                });\n\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach(index => {\n                    // build new constraint name\n                    index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                    index.columnNames.push(newColumn.name);\n                    const schema = this.extractSchema(table);\n                    const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n\n                    // build queries\n                    const up = schema ? `ALTER INDEX \"${schema}\".\"${index.name}\" RENAME TO \"${newIndexName}\"` : `ALTER INDEX \"${index.name}\" RENAME TO \"${newIndexName}\"`;\n                    const down = schema ? `ALTER INDEX \"${schema}\".\"${newIndexName}\" RENAME TO \"${index.name}\"` : `ALTER INDEX \"${newIndexName}\" RENAME TO \"${index.name}\"`;\n                    upQueries.push(new Query(up));\n                    downQueries.push(new Query(down));\n\n                    // replace constraint name\n                    index.name = newIndexName;\n                });\n\n                // rename foreign key constraints\n                clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {\n                    // build new constraint name\n                    foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                    foreignKey.columnNames.push(newColumn.name);\n                    const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n                    // build queries\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${foreignKey.name}\" TO \"${newForeignKeyName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${newForeignKeyName}\" TO \"${foreignKey.name}\"`));\n\n                    // replace constraint name\n                    foreignKey.name = newForeignKeyName;\n                });\n\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);\n                clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn!)].name = newColumn.name;\n                oldColumn.name = newColumn.name;\n            }\n\n            if (newColumn.precision !== oldColumn.precision || newColumn.scale !== oldColumn.scale) {\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${this.driver.createFullType(newColumn)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${this.driver.createFullType(oldColumn)}`));\n            }\n\n            if (\n                (newColumn.type === \"enum\" || newColumn.type === \"simple-enum\")\n                && (oldColumn.type === \"enum\" || oldColumn.type === \"simple-enum\")\n                && !OrmUtils.isArraysEqual(newColumn.enum!, oldColumn.enum!)\n            ) {\n                const enumName = this.buildEnumName(table, newColumn);\n                const arraySuffix = newColumn.isArray ? \"[]\" : \"\";\n                const oldEnumName = this.buildEnumName(table, newColumn, true, false, true);\n                const oldEnumNameWithoutSchema = this.buildEnumName(table, newColumn, false, false, true);\n                const enumTypeBeforeColumnChange = await this.getEnumTypeName(table, oldColumn);\n\n                // rename old ENUM\n                upQueries.push(new Query(`ALTER TYPE \"${enumTypeBeforeColumnChange.enumTypeSchema}\".\"${enumTypeBeforeColumnChange.enumTypeName}\" RENAME TO ${oldEnumNameWithoutSchema}`));\n                downQueries.push(new Query(`ALTER TYPE ${oldEnumName} RENAME TO  \"${enumTypeBeforeColumnChange.enumTypeName}\"`));\n\n                // create new ENUM\n                upQueries.push(this.createEnumTypeSql(table, newColumn));\n                downQueries.push(this.dropEnumTypeSql(table, oldColumn));\n\n                // if column have default value, we must drop it to avoid issues with type casting\n                if (newColumn.default !== null && newColumn.default !== undefined) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${newColumn.default}`));\n                }\n\n                // build column types\n                const upType = `${enumName}${arraySuffix} USING \"${newColumn.name}\"::\"text\"::${enumName}${arraySuffix}`;\n                const downType = `${oldEnumName}${arraySuffix} USING \"${newColumn.name}\"::\"text\"::${oldEnumName}${arraySuffix}`;\n\n                // update column to use new type\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${upType}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${downType}`));\n\n                // if column have default value and we dropped it before, we must bring it back\n                if (newColumn.default !== null && newColumn.default !== undefined) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${newColumn.default}`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n                }\n\n                // remove old ENUM\n                upQueries.push(this.dropEnumTypeSql(table, newColumn, oldEnumName));\n                downQueries.push(this.createEnumTypeSql(table, oldColumn, oldEnumName));\n            }\n\n            if (oldColumn.isNullable !== newColumn.isNullable) {\n                if (newColumn.isNullable) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" DROP NOT NULL`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" SET NOT NULL`));\n                } else {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" SET NOT NULL`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" DROP NOT NULL`));\n                }\n            }\n\n            if (oldColumn.comment !== newColumn.comment) {\n                upQueries.push(new Query(`COMMENT ON COLUMN ${this.escapePath(table)}.\"${oldColumn.name}\" IS ${this.escapeComment(newColumn.comment)}`));\n                downQueries.push(new Query(`COMMENT ON COLUMN ${this.escapePath(table)}.\"${newColumn.name}\" IS ${this.escapeComment(oldColumn.comment)}`));\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                const primaryColumns = clonedTable.primaryColumns;\n\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                }\n\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn);\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = true;\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n\n                } else {\n                    const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);\n                    primaryColumns.splice(primaryColumns.indexOf(primaryColumn!), 1);\n\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = false;\n\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                        const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    }\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueConstraint = new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [newColumn.name]),\n                        columnNames: [newColumn.name]\n                    });\n                    clonedTable.uniques.push(uniqueConstraint);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${newColumn.name}\")`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\n\n                } else {\n                    const uniqueConstraint = clonedTable.uniques.find(unique => {\n                        return unique.columnNames.length === 1 && !!unique.columnNames.find(columnName => columnName === newColumn.name);\n                    });\n                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint!), 1);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint!.name}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint!.name}\" UNIQUE (\"${newColumn.name}\")`));\n                }\n            }\n\n            if (oldColumn.isGenerated !== newColumn.isGenerated && newColumn.generationStrategy !== \"uuid\") {\n                if (newColumn.isGenerated === true) {\n                    upQueries.push(new Query(`CREATE SEQUENCE ${this.buildSequenceName(table, newColumn)} OWNED BY ${this.escapePath(table)}.\"${newColumn.name}\"`));\n                    downQueries.push(new Query(`DROP SEQUENCE ${this.buildSequenceName(table, newColumn)}`));\n\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT nextval('${this.buildSequenceName(table, newColumn, undefined, true)}')`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n\n                } else {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT nextval('${this.buildSequenceName(table, newColumn, undefined, true)}')`));\n\n                    upQueries.push(new Query(`DROP SEQUENCE ${this.buildSequenceName(table, newColumn)}`));\n                    downQueries.push(new Query(`CREATE SEQUENCE ${this.buildSequenceName(table, newColumn)} OWNED BY ${this.escapePath(table)}.\"${newColumn.name}\"`));\n                }\n            }\n\n            if (newColumn.default !== oldColumn.default) {\n                if (newColumn.default !== null && newColumn.default !== undefined) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${newColumn.default}`));\n\n                    if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${oldColumn.default}`));\n                    } else {\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n                    }\n\n                } else if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${oldColumn.default}`));\n                }\n            }\n\n            if ((newColumn.spatialFeatureType || \"\").toLowerCase() !== (oldColumn.spatialFeatureType || \"\").toLowerCase() || newColumn.srid !== oldColumn.srid) {\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${this.driver.createFullType(newColumn)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${this.driver.createFullType(oldColumn)}`));\n            }\n\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableOrName: Table|string, changedColumns: { newColumn: TableColumn, oldColumn: TableColumn }[]): Promise<void> {\n        for (const {oldColumn, newColumn} of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn);\n        }\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableOrName: Table|string, columnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n        if (!column)\n            throw new Error(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\n\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // drop primary key constraint\n        if (column.isPrimary) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n            const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name);\n            tableColumn!.isPrimary = false;\n\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            }\n        }\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n            upQueries.push(this.dropIndexSql(table, columnIndex));\n            downQueries.push(this.createIndexSql(table, columnIndex));\n        }\n\n        // drop column check\n        const columnCheck = clonedTable.checks.find(check => !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name);\n        if (columnCheck) {\n            clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n        }\n\n        // drop column unique\n        const columnUnique = clonedTable.uniques.find(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\n        if (columnUnique) {\n            clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);\n            upQueries.push(this.dropUniqueConstraintSql(table, columnUnique));\n            downQueries.push(this.createUniqueConstraintSql(table, columnUnique));\n        }\n\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${column.name}\"`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column)}`));\n\n        // drop enum type\n        if (column.type === \"enum\" || column.type === \"simple-enum\") {\n            const hasEnum = await this.hasEnumType(table, column);\n            if (hasEnum) {\n                const enumType = await this.getEnumTypeName(table, column);\n                const escapedEnumName = `\"${enumType.enumTypeSchema}\".\"${enumType.enumTypeName}\"`;\n                upQueries.push(this.dropEnumTypeSql(table, column, escapedEnumName));\n                downQueries.push(this.createEnumTypeSql(table, column, escapedEnumName));\n            }\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.removeColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(tableOrName: Table|string, columnNames: string[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n\n        const up = this.createPrimaryKeySql(table, columnNames);\n\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n        clonedTable.columns.forEach(column => {\n            if (columnNames.find(columnName => columnName === column.name))\n                column.isPrimary = true;\n        });\n        const down = this.dropPrimaryKeySql(clonedTable);\n\n        await this.executeQueries(up, down);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const columnNames = columns.map(column => column.name);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns;\n        if (primaryColumns.length > 0) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNamesString = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        }\n\n        // update columns in table.\n        clonedTable.columns\n            .filter(column => columnNames.indexOf(column.name) !== -1)\n            .forEach(column => column.isPrimary = true);\n\n        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName: Table|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const up = this.dropPrimaryKeySql(table);\n        const down = this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name));\n        await this.executeQueries(up, down);\n        table.primaryColumns.forEach(column => {\n            column.isPrimary = false;\n        });\n    }\n\n    /**\n     * Creates new unique constraint.\n     */\n    async createUniqueConstraint(tableOrName: Table|string, uniqueConstraint: TableUnique): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!uniqueConstraint.name)\n            uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table.name, uniqueConstraint.columnNames);\n\n        const up = this.createUniqueConstraintSql(table, uniqueConstraint);\n        const down = this.dropUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.addUniqueConstraint(uniqueConstraint);\n    }\n\n    /**\n     * Creates new unique constraints.\n     */\n    async createUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        for (const uniqueConstraint of uniqueConstraints) {\n            await this.createUniqueConstraint(tableOrName, uniqueConstraint);\n        }\n    }\n\n    /**\n     * Drops unique constraint.\n     */\n    async dropUniqueConstraint(tableOrName: Table|string, uniqueOrName: TableUnique|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const uniqueConstraint = uniqueOrName instanceof TableUnique ? uniqueOrName : table.uniques.find(u => u.name === uniqueOrName);\n        if (!uniqueConstraint)\n            throw new Error(`Supplied unique constraint was not found in table ${table.name}`);\n\n        const up = this.dropUniqueConstraintSql(table, uniqueConstraint);\n        const down = this.createUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.removeUniqueConstraint(uniqueConstraint);\n    }\n\n    /**\n     * Drops unique constraints.\n     */\n    async dropUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        for (const uniqueConstraint of uniqueConstraints) {\n            await this.dropUniqueConstraint(tableOrName, uniqueConstraint);\n        }\n    }\n\n    /**\n     * Creates new check constraint.\n     */\n    async createCheckConstraint(tableOrName: Table|string, checkConstraint: TableCheck): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression!);\n\n        const up = this.createCheckConstraintSql(table, checkConstraint);\n        const down = this.dropCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.addCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Creates new check constraints.\n     */\n    async createCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.createCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(tableOrName: Table|string, checkOrName: TableCheck|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);\n        if (!checkConstraint)\n            throw new Error(`Supplied check constraint was not found in table ${table.name}`);\n\n        const up = this.dropCheckConstraintSql(table, checkConstraint);\n        const down = this.createCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.removeCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.dropCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates new exclusion constraint.\n     */\n    async createExclusionConstraint(tableOrName: Table|string, exclusionConstraint: TableExclusion): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!exclusionConstraint.name)\n            exclusionConstraint.name = this.connection.namingStrategy.exclusionConstraintName(table.name, exclusionConstraint.expression!);\n\n        const up = this.createExclusionConstraintSql(table, exclusionConstraint);\n        const down = this.dropExclusionConstraintSql(table, exclusionConstraint);\n        await this.executeQueries(up, down);\n        table.addExclusionConstraint(exclusionConstraint);\n    }\n\n    /**\n     * Creates new exclusion constraints.\n     */\n    async createExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        const promises = exclusionConstraints.map(exclusionConstraint => this.createExclusionConstraint(tableOrName, exclusionConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(tableOrName: Table|string, exclusionOrName: TableExclusion|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const exclusionConstraint = exclusionOrName instanceof TableExclusion ? exclusionOrName : table.exclusions.find(c => c.name === exclusionOrName);\n        if (!exclusionConstraint)\n            throw new Error(`Supplied exclusion constraint was not found in table ${table.name}`);\n\n        const up = this.dropExclusionConstraintSql(table, exclusionConstraint);\n        const down = this.createExclusionConstraintSql(table, exclusionConstraint);\n        await this.executeQueries(up, down);\n        table.removeExclusionConstraint(exclusionConstraint);\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        const promises = exclusionConstraints.map(exclusionConstraint => this.dropExclusionConstraint(tableOrName, exclusionConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableOrName: Table|string, foreignKey: TableForeignKey): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n        const up = this.createForeignKeySql(table, foreignKey);\n        const down = this.dropForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.addForeignKey(foreignKey);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        for (const foreignKey of foreignKeys) {\n            await this.createForeignKey(tableOrName, foreignKey);\n        }\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);\n        if (!foreignKey)\n            throw new Error(`Supplied foreign key was not found in table ${table.name}`);\n\n        const up = this.dropForeignKeySql(table, foreignKey);\n        const down = this.createForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.removeForeignKey(foreignKey);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        for (const foreignKey of foreignKeys) {\n            await this.dropForeignKey(tableOrName, foreignKey);\n        }\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableOrName: Table|string, index: TableIndex): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n\n        const up = this.createIndexSql(table, index);\n        const down = this.dropIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.addIndex(index);\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        for (const index of indices) {\n            await this.createIndex(tableOrName, index);\n        }\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableOrName: Table|string, indexOrName: TableIndex|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);\n        if (!index)\n            throw new Error(`Supplied index was not found in table ${table.name}`);\n\n        const up = this.dropIndexSql(table, index);\n        const down = this.createIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.removeIndex(index);\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        for (const index of indices) {\n            await this.dropIndex(tableOrName, index);\n        }\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tableName: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tableName)}`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        const schemas: string[] = [];\n        this.connection.entityMetadatas\n            .filter(metadata => metadata.schema)\n            .forEach(metadata => {\n                const isSchemaExist = !!schemas.find(schema => schema === metadata.schema);\n                if (!isSchemaExist)\n                    schemas.push(metadata.schema!);\n            });\n        schemas.push(this.driver.options.schema || \"current_schema()\");\n        const schemaNamesString = schemas.map(name => {\n            return name === \"current_schema()\" ? name : \"'\" + name + \"'\";\n        }).join(\", \");\n\n        await this.startTransaction();\n        try {\n            const selectViewDropsQuery = `SELECT 'DROP VIEW IF EXISTS \"' || schemaname || '\".\"' || viewname || '\" CASCADE;' as \"query\" ` +\n             `FROM \"pg_views\" WHERE \"schemaname\" IN (${schemaNamesString}) AND \"viewname\" NOT IN ('geography_columns', 'geometry_columns', 'raster_columns', 'raster_overviews')`;\n            const dropViewQueries: ObjectLiteral[] = await this.query(selectViewDropsQuery);\n            await Promise.all(dropViewQueries.map(q => this.query(q[\"query\"])));\n\n            // ignore spatial_ref_sys; it's a special table supporting PostGIS\n            // TODO generalize this as this.driver.ignoreTables\n            const selectTableDropsQuery = `SELECT 'DROP TABLE IF EXISTS \"' || schemaname || '\".\"' || tablename || '\" CASCADE;' as \"query\" FROM \"pg_tables\" WHERE \"schemaname\" IN (${schemaNamesString}) AND \"tablename\" NOT IN ('spatial_ref_sys')`;\n            const dropTableQueries: ObjectLiteral[] = await this.query(selectTableDropsQuery);\n            await Promise.all(dropTableQueries.map(q => this.query(q[\"query\"])));\n            await this.dropEnumTypes(schemaNamesString);\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected async loadViews(viewNames: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName());\n        if (!hasTable)\n            return Promise.resolve([]);\n\n        const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);\n        const currentSchema = currentSchemaQuery[0][\"current_schema\"];\n\n        const viewsCondition = viewNames.map(viewName => {\n            let [schema, name] = viewName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"t\".\"schema\" = '${schema}' AND \"t\".\"name\" = '${name}')`;\n        }).join(\" OR \");\n\n        const query = `SELECT \"t\".*, \"v\".\"check_option\" FROM ${this.escapePath(this.getTypeormMetadataTableName())} \"t\" ` +\n            `INNER JOIN \"information_schema\".\"views\" \"v\" ON \"v\".\"table_schema\" = \"t\".\"schema\" AND \"v\".\"table_name\" = \"t\".\"name\" WHERE \"t\".\"type\" = 'VIEW' ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`;\n        const dbViews = await this.query(query);\n        return dbViews.map((dbView: any) => {\n            const view = new View();\n            const schema = dbView[\"schema\"] === currentSchema && !this.driver.options.schema ? undefined : dbView[\"schema\"];\n            view.name = this.driver.buildTableName(dbView[\"name\"], schema);\n            view.expression = dbView[\"value\"];\n            return view;\n        });\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames: string[]): Promise<Table[]> {\n\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);\n        const currentSchema = currentSchemaQuery[0][\"current_schema\"];\n\n        const tablesCondition = tableNames.map(tableName => {\n            let [schema, name] = tableName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"table_schema\" = '${schema}' AND \"table_name\" = '${name}')`;\n        }).join(\" OR \");\n        const tablesSql = `SELECT * FROM \"information_schema\".\"tables\" WHERE ` + tablesCondition;\n        \n        /**\n         * Uses standard SQL information_schema.columns table and postgres-specific \n         * pg_catalog.pg_attribute table to get column information.\n         * @see https://stackoverflow.com/a/19541865\n         */\n        const columnsSql = `\n            SELECT columns.*,\n              pg_catalog.col_description(('\"' || table_catalog || '\".\"' || table_schema || '\".\"' || table_name || '\"')::regclass::oid, ordinal_position) AS description,\n              ('\"' || \"udt_schema\" || '\".\"' || \"udt_name\" || '\"')::\"regtype\" AS \"regtype\",\n              pg_catalog.format_type(\"col_attr\".\"atttypid\", \"col_attr\".\"atttypmod\") AS \"format_type\"\n              FROM \"information_schema\".\"columns\"\n              LEFT JOIN \"pg_catalog\".\"pg_attribute\" AS \"col_attr\"\n              ON \"col_attr\".\"attname\" = \"columns\".\"column_name\"\n              AND \"col_attr\".\"attrelid\" = (\n                SELECT\n                  \"cls\".\"oid\" FROM \"pg_catalog\".\"pg_class\" AS \"cls\"\n                  LEFT JOIN \"pg_catalog\".\"pg_namespace\" AS \"ns\"\n                  ON \"ns\".\"oid\" = \"cls\".\"relnamespace\"\n                WHERE \"cls\".\"relname\" = \"columns\".\"table_name\"\n                AND \"ns\".\"nspname\" = \"columns\".\"table_schema\"\n              )\n            WHERE\n            ` + tablesCondition;\n\n        const constraintsCondition = tableNames.map(tableName => {\n            let [schema, name] = tableName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"ns\".\"nspname\" = '${schema}' AND \"t\".\"relname\" = '${name}')`;\n        }).join(\" OR \");\n\n        const constraintsSql = `SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"cnst\".\"conname\" AS \"constraint_name\", ` +\n            `pg_get_constraintdef(\"cnst\".\"oid\") AS \"expression\", ` +\n            `CASE \"cnst\".\"contype\" WHEN 'p' THEN 'PRIMARY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' WHEN 'x' THEN 'EXCLUDE' END AS \"constraint_type\", \"a\".\"attname\" AS \"column_name\" ` +\n            `FROM \"pg_constraint\" \"cnst\" ` +\n            `INNER JOIN \"pg_class\" \"t\" ON \"t\".\"oid\" = \"cnst\".\"conrelid\" ` +\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"ns\".\"oid\" = \"cnst\".\"connamespace\" ` +\n            `LEFT JOIN \"pg_attribute\" \"a\" ON \"a\".\"attrelid\" = \"cnst\".\"conrelid\" AND \"a\".\"attnum\" = ANY (\"cnst\".\"conkey\") ` +\n            `WHERE \"t\".\"relkind\" IN ('r', 'p') AND (${constraintsCondition})`;\n\n        const indicesSql = `SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"i\".\"relname\" AS \"constraint_name\", \"a\".\"attname\" AS \"column_name\", ` +\n            `CASE \"ix\".\"indisunique\" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS \"is_unique\", pg_get_expr(\"ix\".\"indpred\", \"ix\".\"indrelid\") AS \"condition\", ` +\n            `\"types\".\"typname\" AS \"type_name\" ` +\n            `FROM \"pg_class\" \"t\" ` +\n            `INNER JOIN \"pg_index\" \"ix\" ON \"ix\".\"indrelid\" = \"t\".\"oid\" ` +\n            `INNER JOIN \"pg_attribute\" \"a\" ON \"a\".\"attrelid\" = \"t\".\"oid\"  AND \"a\".\"attnum\" = ANY (\"ix\".\"indkey\") ` +\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"ns\".\"oid\" = \"t\".\"relnamespace\" ` +\n            `INNER JOIN \"pg_class\" \"i\" ON \"i\".\"oid\" = \"ix\".\"indexrelid\" ` +\n            `INNER JOIN \"pg_type\" \"types\" ON \"types\".\"oid\" = \"a\".\"atttypid\" ` +\n            `LEFT JOIN \"pg_constraint\" \"cnst\" ON \"cnst\".\"conname\" = \"i\".\"relname\" ` +\n            `WHERE \"t\".\"relkind\" IN ('r', 'p') AND \"cnst\".\"contype\" IS NULL AND (${constraintsCondition})`;\n\n        const foreignKeysCondition = tableNames.map(tableName => {\n            let [schema, name] = tableName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"ns\".\"nspname\" = '${schema}' AND \"cl\".\"relname\" = '${name}')`;\n        }).join(\" OR \");\n\n        const hasRelispartitionColumn = await this.hasSupportForPartitionedTables();\n        const isPartitionCondition = hasRelispartitionColumn ? ` AND \"cl\".\"relispartition\" = 'f'` : \"\";\n\n        const foreignKeysSql = `SELECT \"con\".\"conname\" AS \"constraint_name\", \"con\".\"nspname\" AS \"table_schema\", \"con\".\"relname\" AS \"table_name\", \"att2\".\"attname\" AS \"column_name\", ` +\n            `\"ns\".\"nspname\" AS \"referenced_table_schema\", \"cl\".\"relname\" AS \"referenced_table_name\", \"att\".\"attname\" AS \"referenced_column_name\", \"con\".\"confdeltype\" AS \"on_delete\", ` +\n            `\"con\".\"confupdtype\" AS \"on_update\", \"con\".\"condeferrable\" AS \"deferrable\", \"con\".\"condeferred\" AS \"deferred\" ` +\n            `FROM ( ` +\n            `SELECT UNNEST (\"con1\".\"conkey\") AS \"parent\", UNNEST (\"con1\".\"confkey\") AS \"child\", \"con1\".\"confrelid\", \"con1\".\"conrelid\", \"con1\".\"conname\", \"con1\".\"contype\", \"ns\".\"nspname\", ` +\n            `\"cl\".\"relname\", \"con1\".\"condeferrable\", ` +\n            `CASE WHEN \"con1\".\"condeferred\" THEN 'INITIALLY DEFERRED' ELSE 'INITIALLY IMMEDIATE' END as condeferred, ` +\n            `CASE \"con1\".\"confdeltype\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \"confdeltype\", ` +\n            `CASE \"con1\".\"confupdtype\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \"confupdtype\" ` +\n            `FROM \"pg_class\" \"cl\" ` +\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"cl\".\"relnamespace\" = \"ns\".\"oid\" ` +\n            `INNER JOIN \"pg_constraint\" \"con1\" ON \"con1\".\"conrelid\" = \"cl\".\"oid\" ` +\n            `WHERE \"con1\".\"contype\" = 'f' AND (${foreignKeysCondition}) ` +\n            `) \"con\" ` +\n            `INNER JOIN \"pg_attribute\" \"att\" ON \"att\".\"attrelid\" = \"con\".\"confrelid\" AND \"att\".\"attnum\" = \"con\".\"child\" ` +\n            `INNER JOIN \"pg_class\" \"cl\" ON \"cl\".\"oid\" = \"con\".\"confrelid\" ${isPartitionCondition}` +\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"cl\".\"relnamespace\" = \"ns\".\"oid\" ` +\n            `INNER JOIN \"pg_attribute\" \"att2\" ON \"att2\".\"attrelid\" = \"con\".\"conrelid\" AND \"att2\".\"attnum\" = \"con\".\"parent\"`;\n        const [dbTables, dbColumns, dbConstraints, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(constraintsSql),\n            this.query(indicesSql),\n            this.query(foreignKeysSql),\n        ]);\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create tables for loaded tables\n        return Promise.all(dbTables.map(async dbTable => {\n            const table = new Table();\n\n            const getSchemaFromKey = (dbObject: any, key: string) => dbObject[key] === currentSchema && !this.driver.options.schema ? undefined : dbObject[key];\n            // We do not need to join schema name, when database is by default.\n            // In this case we need local variable `tableFullName` for below comparision.\n            const schema = getSchemaFromKey(dbTable, \"table_schema\");\n            table.name = this.driver.buildTableName(dbTable[\"table_name\"], schema);\n            const tableFullName = this.driver.buildTableName(dbTable[\"table_name\"], dbTable[\"table_schema\"]);\n\n            // create columns from the loaded columns\n            table.columns = await Promise.all(dbColumns\n                .filter(dbColumn => this.driver.buildTableName(dbColumn[\"table_name\"], dbColumn[\"table_schema\"]) === tableFullName)\n                .map(async dbColumn => {\n\n                    const columnConstraints = dbConstraints.filter(dbConstraint => {\n                        return this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName && dbConstraint[\"column_name\"] === dbColumn[\"column_name\"];\n                    });\n\n                    const tableColumn = new TableColumn();\n                    tableColumn.name = dbColumn[\"column_name\"];\n                    tableColumn.type = dbColumn[\"regtype\"].toLowerCase();\n\n                    if (tableColumn.type === \"numeric\" || tableColumn.type === \"decimal\" || tableColumn.type === \"float\") {\n                        // If one of these properties was set, and another was not, Postgres sets '0' in to unspecified property\n                        // we set 'undefined' in to unspecified property to avoid changing column on sync\n                        if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\n                            tableColumn.precision = dbColumn[\"numeric_precision\"];\n                        } else if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\n                            tableColumn.precision = undefined;\n                        }\n                        if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\n                            tableColumn.scale = dbColumn[\"numeric_scale\"];\n                        } else if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\n                            tableColumn.scale = undefined;\n                        }\n                    }\n\n                    if (dbColumn[\"data_type\"].toLowerCase() === \"array\") {\n                        tableColumn.isArray = true;\n                        const type = tableColumn.type.replace(\"[]\", \"\");\n                        tableColumn.type = this.connection.driver.normalizeType({type: type});\n                    }\n\n                    if (tableColumn.type === \"interval\"\n                        || tableColumn.type === \"time without time zone\"\n                        || tableColumn.type === \"time with time zone\"\n                        || tableColumn.type === \"timestamp without time zone\"\n                        || tableColumn.type === \"timestamp with time zone\") {\n                        tableColumn.precision = !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"datetime_precision\"]) ? dbColumn[\"datetime_precision\"] : undefined;\n                    }\n\n                    if (tableColumn.type.indexOf(\"enum\") !== -1) {\n                        tableColumn.type = \"enum\";\n                        const sql = `SELECT \"e\".\"enumlabel\" AS \"value\" FROM \"pg_enum\" \"e\" ` +\n                        `INNER JOIN \"pg_type\" \"t\" ON \"t\".\"oid\" = \"e\".\"enumtypid\" ` +\n                        `INNER JOIN \"pg_namespace\" \"n\" ON \"n\".\"oid\" = \"t\".\"typnamespace\" ` +\n                        `WHERE \"n\".\"nspname\" = '${dbTable[\"table_schema\"]}' AND \"t\".\"typname\" = '${this.buildEnumName(table, tableColumn.name, false, true)}'`;\n                        const results: ObjectLiteral[] = await this.query(sql);\n                        tableColumn.enum = results.map(result => result[\"value\"]);\n                    }\n\n                    if (tableColumn.type === \"geometry\") {\n                        const geometryColumnSql = `SELECT * FROM (\n                        SELECT\n                          \"f_table_schema\" \"table_schema\",\n                          \"f_table_name\" \"table_name\",\n                          \"f_geometry_column\" \"column_name\",\n                          \"srid\",\n                          \"type\"\n                        FROM \"geometry_columns\"\n                      ) AS _\n                      WHERE (${tablesCondition}) AND \"column_name\" = '${tableColumn.name}' AND \"table_name\" = '${dbTable[\"table_name\"]}'`;\n\n                        const results: ObjectLiteral[] = await this.query(geometryColumnSql);\n                        tableColumn.spatialFeatureType = results[0].type;\n                        tableColumn.srid = results[0].srid;\n                    }\n\n                    if (tableColumn.type === \"geography\") {\n                        const geographyColumnSql = `SELECT * FROM (\n                        SELECT\n                          \"f_table_schema\" \"table_schema\",\n                          \"f_table_name\" \"table_name\",\n                          \"f_geography_column\" \"column_name\",\n                          \"srid\",\n                          \"type\"\n                        FROM \"geography_columns\"\n                      ) AS _\n                      WHERE (${tablesCondition}) AND \"column_name\" = '${tableColumn.name}' AND \"table_name\" = '${dbTable[\"table_name\"]}'`;\n\n                        const results: ObjectLiteral[] = await this.query(geographyColumnSql);\n                        tableColumn.spatialFeatureType = results[0].type;\n                        tableColumn.srid = results[0].srid;\n                    }\n\n                    // check only columns that have length property\n                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type as ColumnType) !== -1) {\n                      let length;\n                      if (tableColumn.isArray) {\n                        const match = /\\((\\d+)\\)/.exec(dbColumn[\"format_type\"]);\n                        length = match ? match[1] : undefined;\n                      } else if (dbColumn[\"character_maximum_length\"]) {\n                        length = dbColumn[\"character_maximum_length\"].toString();\n                      }\n                      if (length) {\n                        tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length) ? length : \"\";\n                      }\n                    }\n                    tableColumn.isNullable = dbColumn[\"is_nullable\"] === \"YES\";\n                    tableColumn.isPrimary = !!columnConstraints.find(constraint => constraint[\"constraint_type\"] === \"PRIMARY\");\n\n                    const uniqueConstraint = columnConstraints.find(constraint => constraint[\"constraint_type\"] === \"UNIQUE\");\n                    const isConstraintComposite = uniqueConstraint\n                        ? !!dbConstraints.find(dbConstraint => dbConstraint[\"constraint_type\"] === \"UNIQUE\"\n                            && dbConstraint[\"constraint_name\"] === uniqueConstraint[\"constraint_name\"]\n                            && dbConstraint[\"column_name\"] !== dbColumn[\"column_name\"])\n                        : false;\n                    tableColumn.isUnique = !!uniqueConstraint && !isConstraintComposite;\n\n                    if (dbColumn[\"column_default\"] !== null && dbColumn[\"column_default\"] !== undefined) {\n                        if (dbColumn[\"column_default\"].replace(/\"/gi, \"\") === `nextval('${this.buildSequenceName(table, dbColumn[\"column_name\"], currentSchema, true)}'::regclass)`) {\n                            tableColumn.isGenerated = true;\n                            tableColumn.generationStrategy = \"increment\";\n                        } else if (dbColumn[\"column_default\"] === \"gen_random_uuid()\" || /^uuid_generate_v\\d\\(\\)/.test(dbColumn[\"column_default\"])) {\n                            tableColumn.isGenerated = true;\n                            tableColumn.generationStrategy = \"uuid\";\n                        } else {\n                            tableColumn.default = dbColumn[\"column_default\"].replace(/::.*/, \"\");\n                            tableColumn.default = tableColumn.default.replace(/^(-?\\d+)$/, \"'$1'\");\n                        }\n                    }\n\n                    tableColumn.comment = dbColumn[\"description\"] == null ? undefined : dbColumn[\"description\"];\n                    if (dbColumn[\"character_set_name\"])\n                        tableColumn.charset = dbColumn[\"character_set_name\"];\n                    if (dbColumn[\"collation_name\"])\n                        tableColumn.collation = dbColumn[\"collation_name\"];\n                    return tableColumn;\n                }));\n\n            // find unique constraints of table, group them by constraint name and build TableUnique.\n            const tableUniqueConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName\n                    && dbConstraint[\"constraint_type\"] === \"UNIQUE\";\n            }), dbConstraint => dbConstraint[\"constraint_name\"]);\n\n            table.uniques = tableUniqueConstraints.map(constraint => {\n                const uniques = dbConstraints.filter(dbC => dbC[\"constraint_name\"] === constraint[\"constraint_name\"]);\n                return new TableUnique({\n                    name: constraint[\"constraint_name\"],\n                    columnNames: uniques.map(u => u[\"column_name\"])\n                });\n            });\n\n            // find check constraints of table, group them by constraint name and build TableCheck.\n            const tableCheckConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName\n                    && dbConstraint[\"constraint_type\"] === \"CHECK\";\n            }), dbConstraint => dbConstraint[\"constraint_name\"]);\n\n            table.checks = tableCheckConstraints.map(constraint => {\n                const checks = dbConstraints.filter(dbC => dbC[\"constraint_name\"] === constraint[\"constraint_name\"]);\n                return new TableCheck({\n                    name: constraint[\"constraint_name\"],\n                    columnNames: checks.map(c => c[\"column_name\"]),\n                    expression: constraint[\"expression\"].replace(/^\\s*CHECK\\s*\\((.*)\\)\\s*$/i, \"$1\")\n                });\n            });\n\n            // find exclusion constraints of table, group them by constraint name and build TableExclusion.\n            const tableExclusionConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName\n                    && dbConstraint[\"constraint_type\"] === \"EXCLUDE\";\n            }), dbConstraint => dbConstraint[\"constraint_name\"]);\n\n            table.exclusions = tableExclusionConstraints.map(constraint => {\n                return new TableExclusion({\n                    name: constraint[\"constraint_name\"],\n                    expression: constraint[\"expression\"].substring(8) // trim EXCLUDE from start of expression\n                });\n            });\n\n            // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {\n                return this.driver.buildTableName(dbForeignKey[\"table_name\"], dbForeignKey[\"table_schema\"]) === tableFullName;\n            }), dbForeignKey => dbForeignKey[\"constraint_name\"]);\n\n            table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"constraint_name\"] === dbForeignKey[\"constraint_name\"]);\n\n                // if referenced table located in currently used schema, we don't need to concat schema name to table name.\n                const schema = getSchemaFromKey(dbForeignKey, \"referenced_table_schema\");\n                const referencedTableName = this.driver.buildTableName(dbForeignKey[\"referenced_table_name\"], schema);\n\n                return new TableForeignKey({\n                    name: dbForeignKey[\"constraint_name\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"column_name\"]),\n                    referencedTableName: referencedTableName,\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"referenced_column_name\"]),\n                    onDelete: dbForeignKey[\"on_delete\"],\n                    onUpdate: dbForeignKey[\"on_update\"],\n                    deferrable: dbForeignKey[\"deferrable\"] ? dbForeignKey[\"deferred\"] : undefined,\n                });\n            });\n\n            // find index constraints of table, group them by constraint name and build TableIndex.\n            const tableIndexConstraints = OrmUtils.uniq(dbIndices.filter(dbIndex => {\n                return this.driver.buildTableName(dbIndex[\"table_name\"], dbIndex[\"table_schema\"]) === tableFullName;\n            }), dbIndex => dbIndex[\"constraint_name\"]);\n\n            table.indices = tableIndexConstraints.map(constraint => {\n                const indices = dbIndices.filter(index => {\n                    return index[\"table_schema\"] === constraint[\"table_schema\"]\n                        && index[\"table_name\"] === constraint[\"table_name\"]\n                        && index[\"constraint_name\"] === constraint[\"constraint_name\"];\n                });\n                return new TableIndex(<TableIndexOptions>{\n                    table: table,\n                    name: constraint[\"constraint_name\"],\n                    columnNames: indices.map(i => i[\"column_name\"]),\n                    isUnique: constraint[\"is_unique\"] === \"TRUE\",\n                    where: constraint[\"condition\"],\n                    isSpatial: indices.every(i => this.driver.spatialTypes.indexOf(i[\"type_name\"]) >= 0),\n                    isFulltext: false\n                });\n            });\n\n            return table;\n        }));\n    }\n\n    /**\n     * Builds create table sql.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(table, column)).join(\", \");\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;\n\n        table.columns\n            .filter(column => column.isUnique)\n            .forEach(column => {\n                const isUniqueExist = table.uniques.some(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\n                if (!isUniqueExist)\n                    table.uniques.push(new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                        columnNames: [column.name]\n                    }));\n            });\n\n        if (table.uniques.length > 0) {\n            const uniquesSql = table.uniques.map(unique => {\n                const uniqueName = unique.name ? unique.name : this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);\n                const columnNames = unique.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`;\n            }).join(\", \");\n\n            sql += `, ${uniquesSql}`;\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks.map(check => {\n                const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression!);\n                return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`;\n            }).join(\", \");\n\n            sql += `, ${checksSql}`;\n        }\n\n        if (table.exclusions.length > 0) {\n            const exclusionsSql = table.exclusions.map(exclusion => {\n                const exclusionName = exclusion.name ? exclusion.name : this.connection.namingStrategy.exclusionConstraintName(table.name, exclusion.expression!);\n                return `CONSTRAINT \"${exclusionName}\" EXCLUDE ${exclusion.expression}`;\n            }).join(\", \");\n\n            sql += `, ${exclusionsSql}`;\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys.map(fk => {\n                const columnNames = fk.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                if (!fk.name)\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);\n                const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n\n                let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(fk.referencedTableName)} (${referencedColumnNames})`;\n                if (fk.onDelete)\n                    constraint += ` ON DELETE ${fk.onDelete}`;\n                if (fk.onUpdate)\n                    constraint += ` ON UPDATE ${fk.onUpdate}`;\n                if (fk.deferrable)\n                    constraint += ` DEFERRABLE ${fk.deferrable}`;\n\n                return constraint;\n            }).join(\", \");\n\n            sql += `, ${foreignKeysSql}`;\n        }\n\n        const primaryColumns = table.columns.filter(column => column.isPrimary);\n        if (primaryColumns.length > 0) {\n            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`;\n        }\n\n        sql += `)`;\n\n        table.columns\n            .filter(it => it.comment)\n            .forEach(it => sql += `; COMMENT ON COLUMN ${this.escapePath(table)}.\"${it.name}\" IS ${this.escapeComment(it.comment)}`);\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(tableOrPath: Table|string): Query {\n        return new Query(`DROP TABLE ${this.escapePath(tableOrPath)}`);\n    }\n\n    protected createViewSql(view: View): Query {\n        const materializedClause = view.materialized ? \"MATERIALIZED \" : \"\";\n        const viewName = this.escapePath(view);\n\n        if (typeof view.expression === \"string\") {\n            return new Query(`CREATE ${materializedClause}VIEW ${viewName} AS ${view.expression}`);\n        } else {\n            return new Query(`CREATE ${materializedClause}VIEW ${viewName} AS ${view.expression(this.connection).getQuery()}`);\n        }\n    }\n\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\n        const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);\n        const currentSchema = currentSchemaQuery[0][\"current_schema\"];\n        const splittedName = view.name.split(\".\");\n        let schema = this.driver.options.schema || currentSchema;\n        let name = view.name;\n        if (splittedName.length === 2) {\n            schema = splittedName[0];\n            name = splittedName[1];\n        }\n\n        const expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n        const [query, parameters] = this.connection.createQueryBuilder()\n            .insert()\n            .into(this.getTypeormMetadataTableName())\n            .values({ type: \"VIEW\", schema: schema, name: name, value: expression })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(viewOrPath: View|string): Query {\n        return new Query(`DROP VIEW ${this.escapePath(viewOrPath)}`);\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected async deleteViewDefinitionSql(viewOrPath: View|string): Promise<Query> {\n        const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);\n        const currentSchema = currentSchemaQuery[0][\"current_schema\"];\n        const viewName = viewOrPath instanceof View ? viewOrPath.name : viewOrPath;\n        const splittedName = viewName.split(\".\");\n        let schema = this.driver.options.schema || currentSchema;\n        let name = viewName;\n        if (splittedName.length === 2) {\n            schema = splittedName[0];\n            name = splittedName[1];\n        }\n\n        const qb = this.connection.createQueryBuilder();\n        const [query, parameters] = qb.delete()\n            .from(this.getTypeormMetadataTableName())\n            .where(`${qb.escape(\"type\")} = 'VIEW'`)\n            .andWhere(`${qb.escape(\"schema\")} = :schema`, { schema })\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Extracts schema name from given Table object or table name string.\n     */\n    protected extractSchema(target: Table|string): string|undefined {\n        const tableName = target instanceof Table ? target.name : target;\n        return tableName.indexOf(\".\") === -1 ? this.driver.options.schema : tableName.split(\".\")[0];\n    }\n\n    /**\n     * Drops ENUM type from given schemas.\n     */\n    protected async dropEnumTypes(schemaNames: string): Promise<void> {\n        const selectDropsQuery = `SELECT 'DROP TYPE IF EXISTS \"' || n.nspname || '\".\"' || t.typname || '\" CASCADE;' as \"query\" FROM \"pg_type\" \"t\" ` +\n            `INNER JOIN \"pg_enum\" \"e\" ON \"e\".\"enumtypid\" = \"t\".\"oid\" ` +\n            `INNER JOIN \"pg_namespace\" \"n\" ON \"n\".\"oid\" = \"t\".\"typnamespace\" ` +\n            `WHERE \"n\".\"nspname\" IN (${schemaNames}) GROUP BY \"n\".\"nspname\", \"t\".\"typname\"`;\n        const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\n        await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\n    }\n\n    /**\n     * Checks if enum with the given name exist in the database.\n     */\n    protected async hasEnumType(table: Table, column: TableColumn): Promise<boolean> {\n        const schema = this.parseTableName(table).schema;\n        const enumName = this.buildEnumName(table, column, false, true);\n        const sql = `SELECT \"n\".\"nspname\", \"t\".\"typname\" FROM \"pg_type\" \"t\" ` +\n            `INNER JOIN \"pg_namespace\" \"n\" ON \"n\".\"oid\" = \"t\".\"typnamespace\" ` +\n            `WHERE \"n\".\"nspname\" = ${schema} AND \"t\".\"typname\" = '${enumName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Builds create ENUM type sql.\n     */\n    protected createEnumTypeSql(table: Table, column: TableColumn, enumName?: string): Query {\n        if (!enumName)\n            enumName = this.buildEnumName(table, column);\n        const enumValues = column.enum!.map(value => `'${value.replace(\"'\", \"''\")}'`).join(\", \");\n        return new Query(`CREATE TYPE ${enumName} AS ENUM(${enumValues})`);\n    }\n\n    /**\n     * Builds create ENUM type sql.\n     */\n    protected dropEnumTypeSql(table: Table, column: TableColumn, enumName?: string): Query {\n        if (!enumName)\n            enumName = this.buildEnumName(table, column);\n        return new Query(`DROP TYPE ${enumName}`);\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON ${this.escapePath(table)} ${index.isSpatial ? \"USING GiST \" : \"\"}(${columns}) ${index.where ? \"WHERE \" + index.where : \"\"}`);\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(table: Table, indexOrName: TableIndex|string): Query {\n        let indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n        const schema = this.extractSchema(table);\n        return schema ? new Query(`DROP INDEX \"${schema}\".\"${indexName}\"`) : new Query(`DROP INDEX \"${indexName}\"`);\n    }\n\n    /**\n     * Builds create primary key sql.\n     */\n    protected createPrimaryKeySql(table: Table, columnNames: string[]): Query {\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`);\n    }\n\n    /**\n     * Builds drop primary key sql.\n     */\n    protected dropPrimaryKeySql(table: Table): Query {\n        const columnNames = table.primaryColumns.map(column => column.name);\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${primaryKeyName}\"`);\n    }\n\n    /**\n     * Builds create unique constraint sql.\n     */\n    protected createUniqueConstraintSql(table: Table, uniqueConstraint: TableUnique): Query {\n        const columnNames = uniqueConstraint.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (${columnNames})`);\n    }\n\n    /**\n     * Builds drop unique constraint sql.\n     */\n    protected dropUniqueConstraintSql(table: Table, uniqueOrName: TableUnique|string): Query {\n        const uniqueName = uniqueOrName instanceof TableUnique ? uniqueOrName.name : uniqueOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueName}\"`);\n    }\n\n    /**\n     * Builds create check constraint sql.\n     */\n    protected createCheckConstraintSql(table: Table, checkConstraint: TableCheck): Query {\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${checkConstraint.name}\" CHECK (${checkConstraint.expression})`);\n    }\n\n    /**\n     * Builds drop check constraint sql.\n     */\n    protected dropCheckConstraintSql(table: Table, checkOrName: TableCheck|string): Query {\n        const checkName = checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${checkName}\"`);\n    }\n\n    /**\n     * Builds create exclusion constraint sql.\n     */\n    protected createExclusionConstraintSql(table: Table, exclusionConstraint: TableExclusion): Query {\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${exclusionConstraint.name}\" EXCLUDE ${exclusionConstraint.expression}`);\n    }\n\n    /**\n     * Builds drop exclusion constraint sql.\n     */\n    protected dropExclusionConstraintSql(table: Table, exclusionOrName: TableExclusion|string): Query {\n        const exclusionName = exclusionOrName instanceof TableExclusion ? exclusionOrName.name : exclusionOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${exclusionName}\"`);\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(table: Table, foreignKey: TableForeignKey): Query {\n        const columnNames = foreignKey.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\"` + column + `\"`).join(\",\");\n        let sql = `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${foreignKey.name}\" FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;\n        if (foreignKey.onDelete)\n            sql += ` ON DELETE ${foreignKey.onDelete}`;\n        if (foreignKey.onUpdate)\n            sql += ` ON UPDATE ${foreignKey.onUpdate}`;\n        if (foreignKey.deferrable)\n            sql += ` DEFERRABLE ${foreignKey.deferrable}`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(table: Table, foreignKeyOrName: TableForeignKey|string): Query {\n        const foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${foreignKeyName}\"`);\n    }\n\n    /**\n     * Builds sequence name from given table and column.\n     */\n    protected buildSequenceName(table: Table, columnOrName: TableColumn|string, currentSchema?: string, disableEscape?: true, skipSchema?: boolean): string {\n        const columnName = columnOrName instanceof TableColumn ? columnOrName.name : columnOrName;\n        let schema: string|undefined = undefined;\n        let tableName: string|undefined = undefined;\n\n        if (table.name.indexOf(\".\") === -1) {\n            tableName = table.name;\n        } else {\n            schema = table.name.split(\".\")[0];\n            tableName = table.name.split(\".\")[1];\n        }\n\n        let seqName = `${tableName}_${columnName}_seq`;\n        if (seqName.length > this.connection.driver.maxAliasLength!) // note doesn't yet handle corner cases where .length differs from number of UTF-8 bytes\n            seqName=`${tableName.substring(0,29)}_${columnName.substring(0,Math.max(29,63-tableName.length-5))}_seq`;\n        \n        if (schema && schema !== currentSchema && !skipSchema) {\n            return disableEscape ? `${schema}.${seqName}` : `\"${schema}\".\"${seqName}\"`;\n        } else {\n            return disableEscape ? `${seqName}` : `\"${seqName}\"`;\n        }\n    }\n\n    /**\n     * Builds ENUM type name from given table and column.\n     */\n    protected buildEnumName(table: Table, columnOrName: TableColumn|string, withSchema: boolean = true, disableEscape?: boolean, toOld?: boolean): string {\n        /**\n         * If enumName is specified in column options then use it instead\n         */\n        if (columnOrName instanceof TableColumn && columnOrName.enumName) {\n            let enumName = columnOrName.enumName;\n            if (toOld)\n                enumName = enumName + \"_old\";\n            return disableEscape ? enumName : `\"${enumName}\"`;\n        }\n        const columnName = columnOrName instanceof TableColumn ? columnOrName.name : columnOrName;\n        const schema = table.name.indexOf(\".\") === -1 ? this.driver.options.schema : table.name.split(\".\")[0];\n        const tableName = table.name.indexOf(\".\") === -1 ? table.name : table.name.split(\".\")[1];\n        let enumName = schema && withSchema ? `${schema}.${tableName}_${columnName.toLowerCase()}_enum` : `${tableName}_${columnName.toLowerCase()}_enum`;\n        if (toOld)\n            enumName = enumName + \"_old\";\n        return enumName.split(\".\").map(i => {\n            return disableEscape ? i : `\"${i}\"`;\n        }).join(\".\");\n    }\n\n    protected async getEnumTypeName(table: Table, column: TableColumn) {\n        const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);\n        const currentSchema = currentSchemaQuery[0][\"current_schema\"];\n        let [schema, name] = table.name.split(\".\");\n        if (!name) {\n            name = schema;\n            schema = this.driver.options.schema || currentSchema;\n        }\n        const result = await this.query(`SELECT \"udt_schema\", \"udt_name\" ` +\n            `FROM \"information_schema\".\"columns\" WHERE \"table_schema\" = '${schema}' AND \"table_name\" = '${name}' AND \"column_name\"='${column.name}'`);\n        return {\n            enumTypeSchema: result[0][\"udt_schema\"],\n            enumTypeName: result[0][\"udt_name\"]\n        };\n    }\n\n    /**\n     * Escapes a given comment so it's safe to include in a query.\n     */\n    protected escapeComment(comment?: string) {\n        if (comment === undefined || comment.length === 0) {\n            return \"NULL\";\n        }\n\n        comment = comment\n            .replace(\"'\", \"''\")\n            .replace(\"\\0\", \"\"); // Null bytes aren't allowed in comments\n\n        return `'${comment}'`;\n    }\n\n    /**\n     * Escapes given table or view path.\n     */\n    protected escapePath(target: Table|View|string, disableEscape?: boolean): string {\n        let tableName = target instanceof Table || target instanceof View ? target.name : target;\n        tableName = tableName.indexOf(\".\") === -1 && this.driver.options.schema ? `${this.driver.options.schema}.${tableName}` : tableName;\n\n        return tableName.split(\".\").map(i => {\n            return disableEscape ? i : `\"${i}\"`;\n        }).join(\".\");\n    }\n\n    /**\n     * Returns object with table schema and table name.\n     */\n    protected parseTableName(target: Table|string) {\n        const tableName = target instanceof Table ? target.name : target;\n        if (tableName.indexOf(\".\") === -1) {\n            return {\n                schema: this.driver.options.schema ? `'${this.driver.options.schema}'` : \"current_schema()\",\n                tableName: `'${tableName}'`\n            };\n        } else {\n            return {\n                schema: `'${tableName.split(\".\")[0]}'`,\n                tableName: `'${tableName.split(\".\")[1]}'`\n            };\n        }\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(table: Table, column: TableColumn) {\n        let c = \"\\\"\" + column.name + \"\\\"\";\n        if (column.isGenerated === true && column.generationStrategy !== \"uuid\") {\n            if (column.type === \"integer\" || column.type === \"int\" || column.type === \"int4\")\n                c += \" SERIAL\";\n            if (column.type === \"smallint\" || column.type === \"int2\")\n                c += \" SMALLSERIAL\";\n            if (column.type === \"bigint\" || column.type === \"int8\")\n                c += \" BIGSERIAL\";\n        }\n        if (column.type === \"enum\" || column.type === \"simple-enum\") {\n            c += \" \" + this.buildEnumName(table, column);\n            if (column.isArray)\n                c += \" array\";\n\n        } else if (!column.isGenerated || column.type === \"uuid\") {\n            c += \" \" + this.connection.driver.createFullType(column);\n        }\n        if (column.charset)\n            c += \" CHARACTER SET \\\"\" + column.charset + \"\\\"\";\n        if (column.collation)\n            c += \" COLLATE \\\"\" + column.collation + \"\\\"\";\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.default !== undefined && column.default !== null)\n            c += \" DEFAULT \" + column.default;\n        if (column.isGenerated && column.generationStrategy === \"uuid\" && !column.default)\n            c += ` DEFAULT ${this.driver.uuidGenerator}`;\n\n        return c;\n    }\n\n    /**\n     * Checks if the PostgreSQL server has support for partitioned tables\n     */\n    protected async hasSupportForPartitionedTables() {\n        const result = await this.query(`SELECT TRUE FROM information_schema.columns WHERE table_name = 'pg_class' and column_name = 'relispartition'`);\n        return result.length ? true : false;\n    }\n}\n","import {Driver} from \"../Driver\";\nimport {PostgresDriver} from \"../postgres/PostgresDriver\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {Connection} from \"../../connection/Connection\";\nimport {AuroraDataApiPostgresConnectionOptions} from \"../aurora-data-api-pg/AuroraDataApiPostgresConnectionOptions\";\nimport {AuroraDataApiPostgresQueryRunner} from \"../aurora-data-api-pg/AuroraDataApiPostgresQueryRunner\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\n\nabstract class PostgresWrapper extends PostgresDriver {\n    options: any;\n\n    abstract createQueryRunner(mode: ReplicationMode): any;\n}\n\nexport class AuroraDataApiPostgresDriver extends PostgresWrapper implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * Aurora Data API underlying library.\n     */\n    DataApiDriver: any;\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: AuroraDataApiPostgresConnectionOptions;\n\n    /**\n     * Master database used to perform all write queries.\n     */\n    database?: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super();\n        this.connection = connection;\n        this.options = connection.options as AuroraDataApiPostgresConnectionOptions;\n        this.isReplicated = false;\n\n        // load data-api package\n        this.loadDependencies();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect(): Promise<void> {\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode) {\n        return new AuroraDataApiPostgresQueryRunner(\n            this,\n            new this.DataApiDriver(\n                this.options.region,\n                this.options.secretArn,\n                this.options.resourceArn,\n                this.options.database,\n                (query: string, parameters?: any[]) => this.connection.logger.logQuery(query, parameters),\n                this.options.serviceConfigOptions,\n                this.options.formatOptions,\n            ),\n            mode\n        );\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        const { pg } = PlatformTools.load(\"typeorm-aurora-data-api-driver\");\n\n        this.DataApiDriver = pg;\n    }\n\n    /**\n     * Executes given query.\n     */\n    protected executeQuery(connection: any, query: string) {\n        return this.connection.query(query);\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    async afterConnect(): Promise<void> {\n        const extensionsMetadata = await this.checkMetadataForExtensions();\n\n        if (extensionsMetadata.hasExtensions) {\n            await this.enableExtensions(extensionsMetadata, this.connection);\n        }\n\n        return Promise.resolve();\n    }\n}\n","import {MissingDriverError} from \"../error/MissingDriverError\";\nimport {CockroachDriver} from \"./cockroachdb/CockroachDriver\";\nimport {MongoDriver} from \"./mongodb/MongoDriver\";\nimport {SqlServerDriver} from \"./sqlserver/SqlServerDriver\";\nimport {OracleDriver} from \"./oracle/OracleDriver\";\nimport {SqliteDriver} from \"./sqlite/SqliteDriver\";\nimport {CordovaDriver} from \"./cordova/CordovaDriver\";\nimport {ReactNativeDriver} from \"./react-native/ReactNativeDriver\";\nimport {NativescriptDriver} from \"./nativescript/NativescriptDriver\";\nimport {SqljsDriver} from \"./sqljs/SqljsDriver\";\nimport {MysqlDriver} from \"./mysql/MysqlDriver\";\nimport {PostgresDriver} from \"./postgres/PostgresDriver\";\nimport {ExpoDriver} from \"./expo/ExpoDriver\";\nimport {AuroraDataApiDriver} from \"./aurora-data-api/AuroraDataApiDriver\";\nimport {AuroraDataApiPostgresDriver} from \"./aurora-data-api-pg/AuroraDataApiPostgresDriver\";\nimport {Driver} from \"./Driver\";\nimport {Connection} from \"../connection/Connection\";\nimport {SapDriver} from \"./sap/SapDriver\";\nimport {BetterSqlite3Driver} from \"./better-sqlite3/BetterSqlite3Driver\";\n\n/**\n * Helps to create drivers.\n */\nexport class DriverFactory {\n\n    /**\n     * Creates a new driver depend on a given connection's driver type.\n     */\n    create(connection: Connection): Driver {\n        const {type} = connection.options;\n        switch (type) {\n            case \"mysql\":\n                return new MysqlDriver(connection);\n            case \"postgres\":\n                return new PostgresDriver(connection);\n            case \"cockroachdb\":\n                return new CockroachDriver(connection);\n            case \"sap\":\n                return new SapDriver(connection);\n            case \"mariadb\":\n                return new MysqlDriver(connection);\n            case \"sqlite\":\n                return new SqliteDriver(connection);\n            case \"better-sqlite3\":\n                return new BetterSqlite3Driver(connection);\n            case \"cordova\":\n                return new CordovaDriver(connection);\n            case \"nativescript\":\n                return new NativescriptDriver(connection);\n            case \"react-native\":\n                return new ReactNativeDriver(connection);\n            case \"sqljs\":\n                return new SqljsDriver(connection);\n            case \"oracle\":\n                return new OracleDriver(connection);\n            case \"mssql\":\n                return new SqlServerDriver(connection);\n            case \"mongodb\":\n                return new MongoDriver(connection);\n            case \"expo\":\n                return new ExpoDriver(connection);\n            case \"aurora-data-api\":\n                return new AuroraDataApiDriver(connection);\n            case \"aurora-data-api-pg\":\n                return new AuroraDataApiPostgresDriver(connection);\n            default:\n                throw new MissingDriverError(type);\n        }\n    }\n\n}\n","/**\n * Dummy functions for replacement via `package.json` in browser builds.\n *\n * If we don't include these functions typeorm will throw an error on runtime\n * as well as during webpack builds.\n */\n\nimport {Logger} from \"../logger/Logger\";\n\n/**\n * Loads all exported classes from the given directory.\n */\nexport function importClassesFromDirectories(logger: Logger, directories: string[], formats = [\".js\", \".cjs\", \".ts\"]): Function[] {\n    return [];\n}\n\n/**\n * Loads all json files from the given directory.\n */\nexport function importJsonsFromDirectories(directories: string[], format = \".json\"): any[] {\n    return [];\n}\n","/**\n * Container options.\n */\nexport interface UseContainerOptions {\n\n    /**\n     * If set to true, then default container will be used in the case if given container haven't returned anything.\n     */\n    fallback?: boolean;\n\n    /**\n     * If set to true, then default container will be used in the case if given container thrown an exception.\n     */\n    fallbackOnErrors?: boolean;\n\n}\n\nexport type ContainedType<T> = { new (...args: any[]): T } | Function;\n\nexport interface ContainerInterface {\n    get<T>(someClass: ContainedType<T>): T;\n}\n\n/**\n * Container to be used by this library for inversion control. If container was not implicitly set then by default\n * container simply creates a new instance of the given class.\n */\nconst defaultContainer: ContainerInterface = new (class implements ContainerInterface {\n    private instances: { type: Function, object: any }[] = [];\n\n    get<T>(someClass: ContainedType<T>): T {\n        let instance = this.instances.find(i => i.type === someClass);\n        if (!instance) {\n            instance = { type: someClass, object: new (someClass as new() => T)()};\n            this.instances.push(instance);\n        }\n\n        return instance.object;\n    }\n})();\n\nlet userContainer: ContainerInterface;\nlet userContainerOptions: UseContainerOptions|undefined;\n\n/**\n * Sets container to be used by this library.\n */\nexport function useContainer(iocContainer: ContainerInterface, options?: UseContainerOptions) {\n    userContainer = iocContainer;\n    userContainerOptions = options;\n}\n\n/**\n * Gets the IOC container used by this library.\n */\nexport function getFromContainer<T>(someClass: ContainedType<T>): T {\n    if (userContainer) {\n        try {\n            const instance = userContainer.get(someClass);\n            if (instance)\n                return instance;\n\n            if (!userContainerOptions || !userContainerOptions.fallback)\n                return instance;\n\n        } catch (error) {\n            if (!userContainerOptions || !userContainerOptions.fallbackOnErrors)\n                throw error;\n        }\n    }\n    return defaultContainer.get<T>(someClass);\n}","import {EntityMetadata} from \"./EntityMetadata\";\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {ColumnMetadata} from \"./ColumnMetadata\";\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\n\n/**\n * Index metadata contains all information about table's index.\n */\nexport class IndexMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the class to which this index is applied.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Embedded metadata if this index was applied on embedded.\n     */\n    embeddedMetadata?: EmbeddedMetadata;\n\n    /**\n     * Indicates if this index must be unique.\n     */\n    isUnique: boolean = false;\n\n    /**\n     * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\n     * Works only in MySQL.\n     */\n    isSpatial: boolean = false;\n\n    /**\n     * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\n     * Works only in MySQL.\n     */\n    isFulltext: boolean = false;\n\n    /**\n     * Fulltext parser.\n     * Works only in MySQL.\n     */\n    parser?: string;\n\n    /**\n     * Indicates if this index must synchronize with database index.\n     */\n    synchronize: boolean = true;\n\n    /**\n     * If true, the index only references documents with the specified field.\n     * These indexes use less space but behave differently in some situations (particularly sorts).\n     * This option is only supported for mongodb database.\n     */\n    isSparse?: boolean;\n\n    /**\n     * Builds the index in the background so that building an index an does not block other database activities.\n     * This option is only supported for mongodb database.\n     */\n    isBackground?: boolean;\n\n    /**\n     * Specifies a time to live, in seconds.\n     * This option is only supported for mongodb database.\n     */\n    expireAfterSeconds?: number;\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target?: Function|string;\n\n    /**\n     * Indexed columns.\n     */\n    columns: ColumnMetadata[] = [];\n\n    /**\n     * User specified index name.\n     */\n    givenName?: string;\n\n    /**\n     * User specified column names.\n     */\n    givenColumnNames?: ((object?: any) => (any[]|{ [key: string]: number }))|string[];\n\n    /**\n     * Final index name.\n     * If index name was given by a user then it stores normalized (by naming strategy) givenName.\n     * If index name was not given then its generated.\n     */\n    name: string;\n\n    /**\n     * Index filter condition.\n     */\n    where?: string;\n\n    /**\n     * Map of column names with order set.\n     * Used only by MongoDB driver.\n     */\n    columnNamesWithOrderingMap: { [key: string]: number } = {};\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        embeddedMetadata?: EmbeddedMetadata,\n        columns?: ColumnMetadata[],\n        args?: IndexMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        if (options.columns)\n            this.columns = options.columns;\n\n        if (options.args) {\n            this.target = options.args.target;\n            if (options.args.synchronize !== null && options.args.synchronize !== undefined)\n                this.synchronize = options.args.synchronize;\n            this.isUnique = !!options.args.unique;\n            this.isSpatial = !!options.args.spatial;\n            this.isFulltext = !!options.args.fulltext;\n            this.parser = options.args.parser;\n            this.where = options.args.where;\n            this.isSparse = options.args.sparse;\n            this.isBackground = options.args.background;\n            this.expireAfterSeconds = options.args.expireAfterSeconds;\n            this.givenName = options.args.name;\n            this.givenColumnNames = options.args.columns;\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend index properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy: NamingStrategyInterface): this {\n        if (this.synchronize === false) {\n            this.name = this.givenName!;\n            return this;\n        }\n\n        const map: { [key: string]: number } = {};\n\n        // if columns already an array of string then simply return it\n        if (this.givenColumnNames) {\n            let columnPropertyPaths: string[] = [];\n            if (Array.isArray(this.givenColumnNames)) {\n                columnPropertyPaths = this.givenColumnNames.map(columnName => {\n                    if (this.embeddedMetadata)\n                        return this.embeddedMetadata.propertyPath + \".\" + columnName;\n\n                    return columnName;\n                });\n                columnPropertyPaths.forEach(propertyPath => map[propertyPath] = 1);\n            } else { // todo: indices in embeds are not implemented in this syntax. deprecate this syntax?\n                // if columns is a function that returns array of field names then execute it and get columns names from it\n                const columnsFnResult = this.givenColumnNames(this.entityMetadata.propertiesMap);\n                if (Array.isArray(columnsFnResult)) {\n                    columnPropertyPaths = columnsFnResult.map((i: any) => String(i));\n                    columnPropertyPaths.forEach(name => map[name] = 1);\n                } else {\n                    columnPropertyPaths = Object.keys(columnsFnResult).map((i: any) => String(i));\n                    Object.keys(columnsFnResult).forEach(columnName => map[columnName] = columnsFnResult[columnName]);\n                }\n            }\n\n            this.columns = columnPropertyPaths.map(propertyPath => {\n                const columnWithSameName = this.entityMetadata.columns.find(column => column.propertyPath === propertyPath);\n                if (columnWithSameName) {\n                    return [columnWithSameName];\n                }\n                const relationWithSameName = this.entityMetadata.relations.find(relation => relation.isWithJoinColumn && relation.propertyName === propertyPath);\n                if (relationWithSameName) {\n                    return relationWithSameName.joinColumns;\n                }\n                const indexName = this.givenName ? \"\\\"\" + this.givenName + \"\\\" \" : \"\";\n                const entityName = this.entityMetadata.targetName;\n                throw new Error(`Index ${indexName}contains column that is missing in the entity (${entityName}): ` + propertyPath);\n            })\n            .reduce((a, b) => a.concat(b));\n        }\n\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce((updatedMap, key) => {\n            const column = this.entityMetadata.columns.find(column => column.propertyPath === key);\n            if (column)\n                updatedMap[column.databasePath] = map[key];\n\n            return updatedMap;\n        }, {} as { [key: string]: number });\n\n        this.name = this.givenName ? this.givenName : namingStrategy.indexName(this.entityMetadata.tablePath, this.columns.map(column => column.databaseName), this.where);\n        return this;\n    }\n\n}\n","import {RelationType} from \"./types/RelationTypes\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {ForeignKeyMetadata} from \"./ForeignKeyMetadata\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"./ColumnMetadata\";\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\nimport {RelationMetadataArgs} from \"../metadata-args/RelationMetadataArgs\";\nimport {DeferrableType} from \"./types/DeferrableType\";\nimport {OnUpdateType} from \"./types/OnUpdateType\";\nimport {OnDeleteType} from \"./types/OnDeleteType\";\nimport {PropertyTypeFactory} from \"./types/PropertyTypeInFunction\";\n\n/**\n * Contains all information about some entity's relation.\n */\nexport class RelationMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the entity where this relation is placed.\n     *\n     * For example for @ManyToMany(type => Category) in Post, entityMetadata will be metadata of Post entity.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Entity metadata of the entity that is targeted by this relation.\n     *\n     * For example for @ManyToMany(type => Category) in Post, inverseEntityMetadata will be metadata of Category entity.\n     */\n    inverseEntityMetadata: EntityMetadata;\n\n    /**\n     * Entity metadata of the junction table.\n     * Junction tables have their own entity metadata objects.\n     * Defined only for many-to-many relations.\n     */\n    junctionEntityMetadata?: EntityMetadata;\n\n    /**\n     * Embedded metadata where this relation is.\n     * If this relation is not in embed then this property value is undefined.\n     */\n    embeddedMetadata?: EmbeddedMetadata;\n\n    /**\n     * Relation type, e.g. is it one-to-one, one-to-many, many-to-one or many-to-many.\n     */\n    relationType: RelationType;\n\n    /**\n     * Target entity to which this relation is applied.\n     * Target IS NOT equal to entityMetadata.target, because relation\n     *\n     * For example for @ManyToMany(type => Category) in Post, target will be Post.\n     * If @ManyToMany(type => Category) is in Counters which is embedded into Post, target will be Counters.\n     * If @ManyToMany(type => Category) is in abstract class BaseUser which Post extends, target will be BaseUser.\n     * Target can be string if its defined in entity schema instead of class.\n     */\n    target: Function|string;\n\n    /**\n     * Target's property name to which relation decorator is applied.\n     */\n    propertyName: string;\n\n    /**\n     * Gets full path to this column property (including relation name).\n     * Full path is relevant when column is used in embeds (one or multiple nested).\n     * For example it will return \"counters.subcounters.likes\".\n     * If property is not in embeds then it returns just property name of the column.\n     */\n    propertyPath: string;\n\n    /**\n     * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.\n     */\n    isTreeParent: boolean = false;\n\n    /**\n     * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.\n     */\n    isTreeChildren: boolean = false;\n\n    /**\n     * Indicates if this relation's column is a primary key.\n     * Can be used only for many-to-one and owner one-to-one relations.\n     */\n    isPrimary: boolean = false;\n\n    /**\n     * Indicates if this relation is lazily loaded.\n     */\n    isLazy: boolean = false;\n\n    /**\n     * Indicates if this relation is eagerly loaded.\n     */\n    isEager: boolean = false;\n\n    /**\n     * Indicates if persistence is enabled for the relation.\n     * By default its enabled, but if you want to avoid any changes in the relation to be reflected in the database you can disable it.\n     * If its disabled you can only change a relation from inverse side of a relation or using relation query builder functionality.\n     * This is useful for performance optimization since its disabling avoid multiple extra queries during entity save.\n     */\n    persistenceEnabled: boolean = true;\n\n    /**\n     * When a child row is removed from its parent, determines if the child row should be orphaned (default) or deleted.\n     */\n    orphanedRowAction?: \"nullify\" | \"delete\";\n\n    /**\n     * If set to true then related objects are allowed to be inserted to the database.\n     */\n    isCascadeInsert: boolean = false;\n\n    /**\n     * If set to true then related objects are allowed to be updated in the database.\n     */\n    isCascadeUpdate: boolean = false;\n\n    /**\n     * If set to true then related objects are allowed to be remove from the database.\n     */\n    isCascadeRemove: boolean = false;\n\n    /**\n     * If set to true then related objects are allowed to be soft-removed from the database.\n     */\n    isCascadeSoftRemove: boolean = false;\n\n    /**\n     * If set to true then related objects are allowed to be recovered from the database.\n     */\n    isCascadeRecover: boolean = false;\n\n    /**\n     * Indicates if relation column value can be nullable or not.\n     */\n    isNullable: boolean = true;\n\n    /**\n     * What to do with a relation on deletion of the row containing a foreign key.\n     */\n    onDelete?: OnDeleteType;\n\n    /**\n     * What to do with a relation on update of the row containing a foreign key.\n     */\n    onUpdate?: OnUpdateType;\n\n    /**\n     * What to do with a relation on update of the row containing a foreign key.\n     */\n    deferrable?: DeferrableType;\n\n    /**\n     * Gets the property's type to which this relation is applied.\n     *\n     * For example for @ManyToMany(type => Category) in Post, target will be Category.\n     */\n    type: Function|string;\n\n    /**\n     * Indicates if this side is an owner of this relation.\n     */\n    isOwning: boolean = false;\n\n    /**\n     * Checks if this relation's type is \"one-to-one\".\n     */\n    isOneToOne: boolean = false;\n\n    /**\n     * Checks if this relation is owner side of the \"one-to-one\" relation.\n     * Owner side means this side of relation has a join column in the table.\n     */\n    isOneToOneOwner: boolean = false;\n\n    /**\n     * Checks if this relation has a join column (e.g. is it many-to-one or one-to-one owner side).\n     */\n    isWithJoinColumn: boolean = false;\n\n    /**\n     * Checks if this relation is NOT owner side of the \"one-to-one\" relation.\n     * NOT owner side means this side of relation does not have a join column in the table.\n     */\n    isOneToOneNotOwner: boolean = false;\n\n    /**\n     * Checks if this relation's type is \"one-to-many\".\n     */\n    isOneToMany: boolean = false;\n\n    /**\n     * Checks if this relation's type is \"many-to-one\".\n     */\n    isManyToOne: boolean = false;\n\n    /**\n     * Checks if this relation's type is \"many-to-many\".\n     */\n    isManyToMany: boolean = false;\n\n    /**\n     * Checks if this relation's type is \"many-to-many\", and is owner side of the relationship.\n     * Owner side means this side of relation has a join table.\n     */\n    isManyToManyOwner: boolean = false;\n\n    /**\n     * Checks if this relation's type is \"many-to-many\", and is NOT owner side of the relationship.\n     * Not owner side means this side of relation does not have a join table.\n     */\n    isManyToManyNotOwner: boolean = false;\n\n    /**\n     * Gets the property path of the inverse side of the relation.\n     */\n    inverseSidePropertyPath: string;\n\n    /**\n     * Inverse side of the relation set by user.\n     *\n     * Inverse side set in the relation can be either string - property name of the column on inverse side,\n     * either can be a function that accepts a map of properties with the object and returns one of them.\n     * Second approach is used to achieve type-safety.\n     */\n    givenInverseSidePropertyFactory: PropertyTypeFactory<any>;\n\n    /**\n     * Gets the relation metadata of the inverse side of this relation.\n     */\n    inverseRelation?: RelationMetadata;\n\n    /**\n     * Join table name.\n     */\n    joinTableName: string;\n\n    /**\n     * Foreign keys created for this relation.\n     */\n    foreignKeys: ForeignKeyMetadata[] = [];\n\n    /**\n     * Join table columns.\n     * Join columns can be obtained only from owner side of the relation.\n     * From non-owner side of the relation join columns will be empty.\n     * If this relation is a many-to-one/one-to-one then it takes join columns from the current entity.\n     * If this relation is many-to-many then it takes all owner join columns from the junction entity.\n     */\n    joinColumns: ColumnMetadata[] = [];\n\n    /**\n     * Inverse join table columns.\n     * Inverse join columns are supported only for many-to-many relations\n     * and can be obtained only from owner side of the relation.\n     * From non-owner side of the relation join columns will be undefined.\n     */\n    inverseJoinColumns: ColumnMetadata[] = [];\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        embeddedMetadata?: EmbeddedMetadata,\n        args: RelationMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata!;\n        const args = options.args;\n        this.target = args.target;\n        this.propertyName = args.propertyName;\n        this.relationType = args.relationType;\n\n        if (args.inverseSideProperty)\n            this.givenInverseSidePropertyFactory = args.inverseSideProperty;\n\n        this.isLazy = args.isLazy || false;\n        // this.isCascadeInsert = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"insert\") !== -1);\n        // this.isCascadeUpdate = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"update\") !== -1);\n        // this.isCascadeRemove = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"remove\") !== -1);\n        // this.isCascadeSoftRemove = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"soft-remove\") !== -1);\n        // this.isCascadeRecover = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"recover\") !== -1);\n        this.isCascadeInsert = args.options.cascade === true || (Array.isArray(args.options.cascade) && args.options.cascade.indexOf(\"insert\") !== -1);\n        this.isCascadeUpdate = args.options.cascade === true || (Array.isArray(args.options.cascade) && args.options.cascade.indexOf(\"update\") !== -1);\n        this.isCascadeRemove = args.options.cascade === true || (Array.isArray(args.options.cascade) && args.options.cascade.indexOf(\"remove\") !== -1);\n        this.isCascadeSoftRemove = args.options.cascade === true || (Array.isArray(args.options.cascade) && args.options.cascade.indexOf(\"soft-remove\") !== -1);\n        this.isCascadeRecover = args.options.cascade === true || (Array.isArray(args.options.cascade) && args.options.cascade.indexOf(\"recover\") !== -1);\n        this.isPrimary = args.options.primary || false;\n        this.isNullable = args.options.nullable === false || this.isPrimary ? false : true;\n        this.onDelete = args.options.onDelete;\n        this.onUpdate = args.options.onUpdate;\n        this.deferrable = args.options.deferrable;\n        this.isEager = args.options.eager || false;\n        this.persistenceEnabled = args.options.persistence === false ? false : true;\n        this.orphanedRowAction = args.options.orphanedRowAction || \"nullify\";\n        this.isTreeParent = args.isTreeParent || false;\n        this.isTreeChildren = args.isTreeChildren || false;\n        this.type = args.type instanceof Function ? (args.type as () => any)() : args.type;\n\n        this.isOneToOne = this.relationType === \"one-to-one\";\n        this.isOneToMany = this.relationType === \"one-to-many\";\n        this.isManyToOne = this.relationType === \"many-to-one\";\n        this.isManyToMany = this.relationType === \"many-to-many\";\n        this.isOneToOneNotOwner = this.isOneToOne ? true : false;\n        this.isManyToManyNotOwner = this.isManyToMany ? true : false;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Creates join column ids map from the given related entity ids array.\n     */\n    getRelationIdMap(entity: ObjectLiteral): ObjectLiteral|undefined {\n        const joinColumns = this.isOwning ? this.joinColumns : this.inverseRelation!.joinColumns;\n        const referencedColumns = joinColumns.map(joinColumn => joinColumn.referencedColumn!);\n        // console.log(\"entity\", entity);\n        // console.log(\"referencedColumns\", referencedColumns);\n        return EntityMetadata.getValueMap(entity, referencedColumns);\n    }\n\n    /**\n     * Ensures that given object is an entity id map.\n     * If given id is an object then it means its already id map.\n     * If given id isn't an object then it means its a value of the id column\n     * and it creates a new id map with this value and name of the primary column.\n     */\n    ensureRelationIdMap(id: any): ObjectLiteral {\n        if (id instanceof Object)\n            return id;\n\n        const joinColumns = this.isOwning ? this.joinColumns : this.inverseRelation!.joinColumns;\n        const referencedColumns = joinColumns.map(joinColumn => joinColumn.referencedColumn!);\n\n        if (referencedColumns.length > 1)\n            throw new Error(`Cannot create relation id map for a single value because relation contains multiple referenced columns.`);\n\n        return referencedColumns[0].createValueMap(id);\n    }\n\n    /**\n     * Extracts column value from the given entity.\n     * If column is in embedded (or recursive embedded) it extracts its value from there.\n     */\n    getEntityValue(entity: ObjectLiteral, getLazyRelationsPromiseValue: boolean = false): any|undefined {\n        if (entity === null || entity === undefined) return undefined;\n        // extract column value from embeddeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\n\n            // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters\n            // this recursive function takes array of generated property names and gets the post[data][information][counters] embed\n            const extractEmbeddedColumnValue = (propertyNames: string[], value: ObjectLiteral): any => {\n                const propertyName = propertyNames.shift();\n                if (propertyName) {\n                    if (value[propertyName]) {\n                        return extractEmbeddedColumnValue(propertyNames, value[propertyName]);\n                    }\n                    return undefined;\n                }\n                return value;\n            };\n\n            // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]\n            const embeddedObject = extractEmbeddedColumnValue(propertyNames, entity);\n\n            if (this.isLazy) {\n                if (embeddedObject[\"__\" + this.propertyName + \"__\"] !== undefined)\n                    return embeddedObject[\"__\" + this.propertyName + \"__\"];\n\n                if (getLazyRelationsPromiseValue === true)\n                    return embeddedObject[this.propertyName];\n\n                return undefined;\n            }\n            return embeddedObject ? embeddedObject[this.isLazy ? \"__\" + this.propertyName + \"__\" : this.propertyName] : undefined;\n\n        } else { // no embeds - no problems. Simply return column name by property name of the entity\n            if (this.isLazy) {\n                if (entity[\"__\" + this.propertyName + \"__\"] !== undefined)\n                    return entity[\"__\" + this.propertyName + \"__\"];\n\n                if (getLazyRelationsPromiseValue === true)\n                    return entity[this.propertyName];\n\n                return undefined;\n            }\n            return entity[this.propertyName];\n        }\n    }\n\n    /**\n     * Sets given entity's relation's value.\n     * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.\n     *\n     * If merge is set to true, it merges given value into currently\n     */\n    setEntityValue(entity: ObjectLiteral, value: any): void {\n        const propertyName = this.isLazy ? \"__\" + this.propertyName + \"__\" : this.propertyName;\n\n        if (this.embeddedMetadata) {\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const extractEmbeddedColumnValue = (embeddedMetadatas: EmbeddedMetadata[], map: ObjectLiteral): any => {\n                // if (!object[embeddedMetadata.propertyName])\n                //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();\n\n                const embeddedMetadata = embeddedMetadatas.shift();\n                if (embeddedMetadata) {\n                    if (!map[embeddedMetadata.propertyName])\n                        map[embeddedMetadata.propertyName] = embeddedMetadata.create();\n\n                    extractEmbeddedColumnValue(embeddedMetadatas, map[embeddedMetadata.propertyName]);\n                    return map;\n                }\n                map[propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue([...this.embeddedMetadata.embeddedMetadataTree], entity);\n\n        } else {\n            entity[propertyName] = value;\n        }\n    }\n\n    /**\n     * Creates entity id map from the given entity ids array.\n     */\n    createValueMap(value: any) {\n\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\n\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            const extractEmbeddedColumnValue = (propertyNames: string[], map: ObjectLiteral): any => {\n                const propertyName = propertyNames.shift();\n                if (propertyName) {\n                    map[propertyName] = {};\n                    extractEmbeddedColumnValue(propertyNames, map[propertyName]);\n                    return map;\n                }\n                map[this.propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue(propertyNames, {});\n\n        } else { // no embeds - no problems. Simply return column property name and its value of the entity\n            return { [this.propertyName]: value };\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend relation metadata properties.\n     * This builder method should be used only after embedded metadata tree was build.\n     */\n    build() {\n        this.propertyPath = this.buildPropertyPath();\n    }\n\n    /**\n     * Registers given foreign keys in the relation.\n     * This builder method should be used to register foreign key in the relation.\n     */\n    registerForeignKeys(...foreignKeys: ForeignKeyMetadata[]) {\n        this.foreignKeys.push(...foreignKeys);\n        this.joinColumns = this.foreignKeys[0] ? this.foreignKeys[0].columns : [];\n        this.inverseJoinColumns = this.foreignKeys[1] ? this.foreignKeys[1].columns : [];\n        this.isOwning = this.isManyToOne || ((this.isManyToMany || this.isOneToOne) && this.joinColumns.length > 0);\n        this.isOneToOneOwner = this.isOneToOne && this.isOwning;\n        this.isOneToOneNotOwner = this.isOneToOne && !this.isOwning;\n        this.isManyToManyOwner = this.isManyToMany && this.isOwning;\n        this.isManyToManyNotOwner = this.isManyToMany && !this.isOwning;\n        this.isWithJoinColumn = this.isManyToOne || this.isOneToOneOwner;\n    }\n\n    /**\n     * Registers a given junction entity metadata.\n     * This builder method can be called after junction entity metadata for the many-to-many relation was created.\n     */\n    registerJunctionEntityMetadata(junctionEntityMetadata: EntityMetadata) {\n        this.junctionEntityMetadata = junctionEntityMetadata;\n        this.joinTableName = junctionEntityMetadata.tableName;\n        if (this.inverseRelation) {\n            this.inverseRelation.junctionEntityMetadata = junctionEntityMetadata;\n            this.joinTableName = junctionEntityMetadata.tableName;\n        }\n    }\n\n    /**\n     * Builds inverse side property path based on given inverse side property factory.\n     * This builder method should be used only after properties map of the inverse entity metadata was build.\n     */\n    buildInverseSidePropertyPath(): string {\n\n        if (this.givenInverseSidePropertyFactory) {\n            const ownerEntityPropertiesMap = this.inverseEntityMetadata.propertiesMap;\n            if (typeof this.givenInverseSidePropertyFactory === \"function\")\n                return this.givenInverseSidePropertyFactory(ownerEntityPropertiesMap);\n\n            if (typeof this.givenInverseSidePropertyFactory === \"string\")\n                return this.givenInverseSidePropertyFactory;\n\n        } else if (this.isTreeParent && this.entityMetadata.treeChildrenRelation) {\n            return this.entityMetadata.treeChildrenRelation.propertyName;\n\n        } else if (this.isTreeChildren && this.entityMetadata.treeParentRelation) {\n            return this.entityMetadata.treeParentRelation.propertyName;\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Builds relation's property path based on its embedded tree.\n     */\n    buildPropertyPath(): string {\n        if (!this.embeddedMetadata || !this.embeddedMetadata.parentPropertyNames.length)\n            return this.propertyName;\n\n        return this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\" + this.propertyName;\n    }\n\n}\n","import {ColumnMetadata} from \"./ColumnMetadata\";\nimport {RelationMetadata} from \"./RelationMetadata\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {EmbeddedMetadataArgs} from \"../metadata-args/EmbeddedMetadataArgs\";\nimport {RelationIdMetadata} from \"./RelationIdMetadata\";\nimport {RelationCountMetadata} from \"./RelationCountMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {EntityListenerMetadata} from \"./EntityListenerMetadata\";\nimport {IndexMetadata} from \"./IndexMetadata\";\nimport {UniqueMetadata} from \"./UniqueMetadata\";\n\n/**\n * Contains all information about entity's embedded property.\n */\nexport class EmbeddedMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this embedded is.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Parent embedded in the case if this embedded inside other embedded.\n     */\n    parentEmbeddedMetadata?: EmbeddedMetadata;\n\n    /**\n     * Embedded target type.\n     */\n    type: Function;\n\n    /**\n     * Property name on which this embedded is attached.\n     */\n    propertyName: string;\n\n    /**\n     * Gets full path to this embedded property (including embedded property name).\n     * Full path is relevant when embedded is used inside other embeds (one or multiple nested).\n     * For example it will return \"counters.subcounters\".\n     */\n    propertyPath: string;\n\n    /**\n     * Columns inside this embed.\n     */\n    columns: ColumnMetadata[] = [];\n\n    /**\n     * Relations inside this embed.\n     */\n    relations: RelationMetadata[] = [];\n\n    /**\n     * Entity listeners inside this embed.\n     */\n    listeners: EntityListenerMetadata[] = [];\n\n    /**\n     * Indices applied to the embed columns.\n     */\n    indices: IndexMetadata[] = [];\n\n    /**\n     * Uniques applied to the embed columns.\n     */\n    uniques: UniqueMetadata[] = [];\n\n    /**\n     * Relation ids inside this embed.\n     */\n    relationIds: RelationIdMetadata[] = [];\n\n    /**\n     * Relation counts inside this embed.\n     */\n    relationCounts: RelationCountMetadata[] = [];\n\n    /**\n     * Nested embeddable in this embeddable (which has current embedded as parent embedded).\n     */\n    embeddeds: EmbeddedMetadata[] = [];\n\n    /**\n     * Indicates if this embedded is in array mode.\n     *\n     * This option works only in mongodb.\n     */\n    isArray: boolean = false;\n\n    /**\n     * Prefix of the embedded, used instead of propertyName.\n     * If set to empty string or false, then prefix is not set at all.\n     */\n    customPrefix: string|boolean|undefined;\n\n    /**\n     * Gets the prefix of the columns.\n     * By default its a property name of the class where this prefix is.\n     * But if custom prefix is set then it takes its value as a prefix.\n     * However if custom prefix is set to empty string or false, then prefix to column is not applied at all.\n     */\n    prefix: string;\n\n    /**\n     * Returns array of property names of current embed and all its parent embeds.\n     *\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n     * we need to get value of \"id\" column from the post real entity object.\n     * this method will return [\"data\", \"information\", \"counters\"]\n     */\n    parentPropertyNames: string[] = [];\n\n    /**\n     * Returns array of prefixes of current embed and all its parent embeds.\n     */\n    parentPrefixes: string[] = [];\n\n    /**\n     * Returns embed metadatas from all levels of the parent tree.\n     *\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n     * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n     */\n    embeddedMetadataTree: EmbeddedMetadata[] = [];\n\n    /**\n     * Embed metadatas from all levels of the parent tree.\n     *\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n     * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n     */\n    columnsFromTree: ColumnMetadata[] = [];\n\n    /**\n     * Relations of this embed and all relations from its child embeds.\n     */\n    relationsFromTree: RelationMetadata[] = [];\n\n    /**\n     * Relations of this embed and all relations from its child embeds.\n     */\n    listenersFromTree: EntityListenerMetadata[] = [];\n\n    /**\n     * Indices of this embed and all indices from its child embeds.\n     */\n    indicesFromTree: IndexMetadata[] = [];\n\n    /**\n     * Uniques of this embed and all uniques from its child embeds.\n     */\n    uniquesFromTree: UniqueMetadata[] = [];\n\n    /**\n     * Relation ids of this embed and all relation ids from its child embeds.\n     */\n    relationIdsFromTree: RelationIdMetadata[] = [];\n\n    /**\n     * Relation counts of this embed and all relation counts from its child embeds.\n     */\n    relationCountsFromTree: RelationCountMetadata[] = [];\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        args: EmbeddedMetadataArgs,\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.type = options.args.type();\n        this.propertyName = options.args.propertyName;\n        this.customPrefix = options.args.prefix;\n        this.isArray = options.args.isArray;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Creates a new embedded object.\n     */\n    create(): any {\n        return new (this.type as any);\n    }\n\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n\n    build(connection: Connection): this {\n        this.embeddeds.forEach(embedded => embedded.build(connection));\n        this.prefix = this.buildPrefix(connection);\n        this.parentPropertyNames = this.buildParentPropertyNames();\n        this.parentPrefixes = this.buildParentPrefixes();\n        this.propertyPath = this.parentPropertyNames.join(\".\");\n        this.embeddedMetadataTree = this.buildEmbeddedMetadataTree();\n        this.columnsFromTree = this.buildColumnsFromTree();\n        this.relationsFromTree = this.buildRelationsFromTree();\n        this.listenersFromTree = this.buildListenersFromTree();\n        this.indicesFromTree = this.buildIndicesFromTree();\n        this.uniquesFromTree = this.buildUniquesFromTree();\n        this.relationIdsFromTree = this.buildRelationIdsFromTree();\n        this.relationCountsFromTree = this.buildRelationCountsFromTree();\n        return this;\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    protected buildPartialPrefix(): string[] {\n        // if prefix option was not set or explicitly set to true - default prefix\n        if (this.customPrefix === undefined || this.customPrefix === true) {\n            return [this.propertyName];\n        }\n\n        // if prefix option was set to empty string or explicity set to false - disable prefix\n        if (this.customPrefix === \"\" || this.customPrefix === false) {\n            return [];\n        }\n\n        // use custom prefix\n        if (typeof this.customPrefix === \"string\") {\n            return [this.customPrefix];\n        }\n\n        throw new Error(`Invalid prefix option given for ${this.entityMetadata.targetName}#${this.propertyName}`);\n    }\n\n    protected buildPrefix(connection: Connection): string {\n        if (connection.driver instanceof MongoDriver)\n            return this.propertyName;\n\n        let prefixes: string[] = [];\n        if (this.parentEmbeddedMetadata)\n            prefixes.push(this.parentEmbeddedMetadata.buildPrefix(connection));\n\n        prefixes.push(...this.buildPartialPrefix());\n\n        return prefixes.join(\"_\"); // todo: use naming strategy instead of \"_\"  !!!\n    }\n\n    protected buildParentPropertyNames(): string[] {\n        return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildParentPropertyNames().concat(this.propertyName) : [this.propertyName];\n    }\n\n    protected buildParentPrefixes(): string[] {\n        return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildParentPrefixes().concat(this.buildPartialPrefix()) : this.buildPartialPrefix();\n    }\n\n    protected buildEmbeddedMetadataTree(): EmbeddedMetadata[] {\n        return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildEmbeddedMetadataTree().concat(this) : [this];\n    }\n\n    protected buildColumnsFromTree(): ColumnMetadata[] {\n        return this.embeddeds.reduce((columns, embedded) => columns.concat(embedded.buildColumnsFromTree()), this.columns);\n    }\n\n    protected buildRelationsFromTree(): RelationMetadata[] {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationsFromTree()), this.relations);\n    }\n\n    protected buildListenersFromTree(): EntityListenerMetadata[] {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildListenersFromTree()), this.listeners);\n    }\n\n    protected buildIndicesFromTree(): IndexMetadata[] {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildIndicesFromTree()), this.indices);\n    }\n\n    protected buildUniquesFromTree(): UniqueMetadata[] {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildUniquesFromTree()), this.uniques);\n    }\n\n    protected buildRelationIdsFromTree(): RelationIdMetadata[] {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationIdsFromTree()), this.relationIds);\n    }\n\n    protected buildRelationCountsFromTree(): RelationCountMetadata[] {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationCountsFromTree()), this.relationCounts);\n    }\n\n}\n","import {RelationIdMetadataArgs} from \"../metadata-args/RelationIdMetadataArgs\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {RelationMetadata} from \"./RelationMetadata\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\n\n/**\n * Contains all information about entity's relation count.\n */\nexport class RelationIdMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this column metadata is.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Relation from which ids will be extracted.\n     */\n    relation: RelationMetadata;\n\n    /**\n     * Relation name which need to count.\n     */\n    relationNameOrFactory: string|((object: any) => any);\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target: Function|string;\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    propertyName: string;\n\n    /**\n     * Alias of the joined (destination) table.\n     */\n    alias?: string;\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        args: RelationIdMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.target = options.args.target;\n        this.propertyName = options.args.propertyName;\n        this.relationNameOrFactory = options.args.relation;\n        this.alias = options.args.alias;\n        this.queryBuilderFactory = options.args.queryBuilderFactory;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Sets relation id value from the given entity.\n     *\n     * todo: make it to work in embeds as well.\n     */\n    setValue(entity: ObjectLiteral) {\n        const inverseEntity = this.relation.getEntityValue(entity);\n\n        if (Array.isArray(inverseEntity)) {\n            entity[this.propertyName] = inverseEntity.map(item => {\n               return this.relation.inverseEntityMetadata.getEntityIdMixedMap(item);\n            }).filter(item => item !== null && item !== undefined);\n\n        } else {\n            const value = this.relation.inverseEntityMetadata.getEntityIdMixedMap(inverseEntity);\n            if (value !== undefined)\n                entity[this.propertyName] = value;\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend relation id properties.\n     * This builder method should be used only after entity metadata, its properties map and all relations are build.\n     */\n    build() {\n        const propertyPath = this.relationNameOrFactory instanceof Function ? this.relationNameOrFactory(this.entityMetadata.propertiesMap) : this.relationNameOrFactory;\n        const relation = this.entityMetadata.findRelationWithPropertyPath(propertyPath);\n        if (!relation)\n            throw new Error(`Cannot find relation ${propertyPath}. Wrong relation specified for @RelationId decorator.`);\n\n        this.relation = relation;\n    }\n\n\n}\n","import {RelationCountMetadataArgs} from \"../metadata-args/RelationCountMetadataArgs\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {RelationMetadata} from \"./RelationMetadata\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\n\n/**\n * Contains all information about entity's relation count.\n */\nexport class RelationCountMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this column metadata is.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Relation which needs to be counted.\n     */\n    relation: RelationMetadata;\n\n    /**\n     * Relation name which need to count.\n     */\n    relationNameOrFactory: string|((object: any) => any);\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target: Function|string;\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    propertyName: string;\n\n    /**\n     * Alias of the joined (destination) table.\n     */\n    alias?: string;\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        args: RelationCountMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.target = options.args.target;\n        this.propertyName = options.args.propertyName;\n        this.relationNameOrFactory = options.args.relation;\n        this.alias = options.args.alias;\n        this.queryBuilderFactory = options.args.queryBuilderFactory;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend relation count metadata properties.\n     * This builder method should be used only after entity metadata, its properties map and all relations are build.\n     */\n    build() {\n        const propertyPath = this.relationNameOrFactory instanceof Function ? this.relationNameOrFactory(this.entityMetadata.propertiesMap) : this.relationNameOrFactory;\n        const relation = this.entityMetadata.findRelationWithPropertyPath(propertyPath);\n        if (!relation)\n            throw new Error(`Cannot find relation ${propertyPath}. Wrong relation specified for @RelationCount decorator.`);\n\n        this.relation = relation;\n    }\n\n}","/**\n * All types that entity listener can be.\n */\nexport type EventListenerType =\n    | \"after-load\"\n    | \"before-insert\"\n    | \"after-insert\"\n    | \"before-update\"\n    | \"after-update\"\n    | \"before-remove\"\n    | \"after-remove\";\n\n/**\n * Provides a constants for each entity listener type.\n */\nexport class EventListenerTypes {\n    static AFTER_LOAD = \"after-load\" as const;\n    static BEFORE_INSERT = \"before-insert\" as const;\n    static AFTER_INSERT = \"after-insert\" as const;\n    static BEFORE_UPDATE = \"before-update\" as const;\n    static AFTER_UPDATE = \"after-update\" as const;\n    static BEFORE_REMOVE = \"before-remove\" as const;\n    static AFTER_REMOVE = \"after-remove\" as const;\n}\n","/**\n * Metadata args utility functions.\n */\nexport class MetadataUtils {\n\n    /**\n     * Gets given's entity all inherited classes.\n     * Gives in order from parents to children.\n     * For example Post extends ContentModel which extends Unit it will give\n     * [Unit, ContentModel, Post]\n     */\n    static getInheritanceTree(entity: Function): Function[] {\n        const tree: Function[] = [entity];\n        const getPrototypeOf = (object: Function): void => {\n            const proto = Object.getPrototypeOf(object);\n            if (proto && proto.name) {\n                tree.push(proto);\n                getPrototypeOf(proto);\n            }\n        };\n        getPrototypeOf(entity);\n        return tree;\n    }\n\n    /**\n     * Checks if this table is inherited from another table.\n     */\n    static isInherited(target1: Function, target2: Function) {\n        return target1.prototype instanceof target2;\n    }\n\n    /**\n     * Filters given array of targets by a given classes.\n     * If classes are not given, then it returns array itself.\n     */\n    static filterByTarget<T extends { target?: any }>(array: T[], classes?: any[]): T[] {\n        if (!classes) return array;\n        return array.filter(item => item.target && classes.indexOf(item.target) !== -1);\n    }\n\n}","import {ColumnMetadata} from \"./ColumnMetadata\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {DeferrableType} from \"./types/DeferrableType\";\nimport {OnDeleteType} from \"./types/OnDeleteType\";\nimport {OnUpdateType} from \"./types/OnUpdateType\";\n\n/**\n * Contains all information about entity's foreign key.\n */\nexport class ForeignKeyMetadata {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this foreign key is.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Entity metadata which this foreign key references.\n     */\n    referencedEntityMetadata: EntityMetadata;\n\n    /**\n     * Array of columns of this foreign key.\n     */\n    columns: ColumnMetadata[] = [];\n\n    /**\n     * Array of referenced columns.\n     */\n    referencedColumns: ColumnMetadata[] = [];\n\n    /**\n     * What to do with a relation on deletion of the row containing a foreign key.\n     */\n    onDelete?: OnDeleteType;\n\n    /**\n     * What to do with a relation on update of the row containing a foreign key.\n     */\n    onUpdate?: OnUpdateType;\n\n    /**\n     * When to check the constraints of a foreign key.\n     */\n    deferrable?: DeferrableType;\n\n    /**\n     * Gets the table name to which this foreign key is referenced.\n     */\n    referencedTablePath: string;\n\n    /**\n     * Gets foreign key name.\n     */\n    name: string;\n\n    /**\n     * Gets array of column names.\n     */\n    columnNames: string[] = [];\n\n    /**\n     * Gets array of referenced column names.\n     */\n    referencedColumnNames: string[] = [];\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        referencedEntityMetadata: EntityMetadata,\n        namingStrategy?: NamingStrategyInterface,\n        columns: ColumnMetadata[],\n        referencedColumns: ColumnMetadata[],\n        onDelete?: OnDeleteType,\n        onUpdate?: OnUpdateType,\n        deferrable?: DeferrableType,\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.referencedEntityMetadata = options.referencedEntityMetadata;\n        this.columns = options.columns;\n        this.referencedColumns = options.referencedColumns;\n        this.onDelete = options.onDelete || \"NO ACTION\";\n        this.onUpdate = options.onUpdate || \"NO ACTION\";\n        this.deferrable = options.deferrable;\n        if (options.namingStrategy)\n            this.build(options.namingStrategy);\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend foreign key properties.\n     * Must be called after all entity metadatas and their columns are built.\n     */\n    build(namingStrategy: NamingStrategyInterface) {\n        this.columnNames = this.columns.map(column => column.databaseName);\n        this.referencedColumnNames = this.referencedColumns.map(column => column.databaseName);\n        this.referencedTablePath = this.referencedEntityMetadata.tablePath;\n        this.name = namingStrategy.foreignKeyName(this.entityMetadata.tablePath, this.columnNames, this.referencedTablePath, this.referencedColumnNames);\n    }\n\n}\n","import {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\nimport {JoinTableMetadataArgs} from \"../metadata-args/JoinTableMetadataArgs\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {AuroraDataApiDriver} from \"../driver/aurora-data-api/AuroraDataApiDriver\";\n\n/**\n * Creates EntityMetadata for junction tables.\n * Junction tables are tables generated by many-to-many relations.\n */\nexport class JunctionEntityMetadataBuilder {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds EntityMetadata for the junction of the given many-to-many relation.\n     */\n    build(relation: RelationMetadata, joinTable: JoinTableMetadataArgs): EntityMetadata {\n        const referencedColumns = this.collectReferencedColumns(relation, joinTable);\n        const inverseReferencedColumns = this.collectInverseReferencedColumns(relation, joinTable);\n\n        const joinTableName = joinTable.name || this.connection.namingStrategy.joinTableName(\n            relation.entityMetadata.tableNameWithoutPrefix,\n            relation.inverseEntityMetadata.tableNameWithoutPrefix,\n            relation.propertyPath,\n            relation.inverseRelation ? relation.inverseRelation.propertyName : \"\"\n        );\n\n        const entityMetadata = new EntityMetadata({\n            connection: this.connection,\n            args: {\n                target: \"\",\n                name: joinTableName,\n                type: \"junction\",\n                database: joinTable.database || relation.entityMetadata.database,\n                schema: joinTable.schema || relation.entityMetadata.schema,\n            }\n        });\n        entityMetadata.build();\n\n        // create original side junction columns\n        const junctionColumns = referencedColumns.map(referencedColumn => {\n            const joinColumn = joinTable.joinColumns ? joinTable.joinColumns.find(joinColumnArgs => {\n                return (!joinColumnArgs.referencedColumnName || joinColumnArgs.referencedColumnName === referencedColumn.propertyName) &&\n                    !!joinColumnArgs.name;\n            }) : undefined;\n            const columnName = joinColumn && joinColumn.name ? joinColumn.name\n                : this.connection.namingStrategy.joinTableColumnName(relation.entityMetadata.tableNameWithoutPrefix, referencedColumn.propertyName, referencedColumn.databaseName);\n\n            return new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                referencedColumn: referencedColumn,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: columnName,\n                    options: {\n                        name: columnName,\n                        length: !referencedColumn.length\n                        && (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver)\n                        && (referencedColumn.generationStrategy === \"uuid\" || referencedColumn.type === \"uuid\")\n                            ? \"36\"\n                            : referencedColumn.length, // fix https://github.com/typeorm/typeorm/issues/3604\n                        width: referencedColumn.width,\n                        type: referencedColumn.type,\n                        precision: referencedColumn.precision,\n                        scale: referencedColumn.scale,\n                        charset: referencedColumn.charset,\n                        collation: referencedColumn.collation,\n                        zerofill: referencedColumn.zerofill,\n                        unsigned: referencedColumn.zerofill ? true : referencedColumn.unsigned,\n                        nullable: false,\n                        primary: true,\n                    }\n                }\n            });\n        });\n\n        // create inverse side junction columns\n        const inverseJunctionColumns = inverseReferencedColumns.map(inverseReferencedColumn => {\n            const joinColumn = joinTable.inverseJoinColumns ? joinTable.inverseJoinColumns.find(joinColumnArgs => {\n                return (!joinColumnArgs.referencedColumnName || joinColumnArgs.referencedColumnName === inverseReferencedColumn.propertyName) &&\n                    !!joinColumnArgs.name;\n            }) : undefined;\n            const columnName = joinColumn && joinColumn.name ? joinColumn.name\n                : this.connection.namingStrategy.joinTableInverseColumnName(relation.inverseEntityMetadata.tableNameWithoutPrefix, inverseReferencedColumn.propertyName, inverseReferencedColumn.databaseName);\n\n            return new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                referencedColumn: inverseReferencedColumn,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: columnName,\n                    options: {\n                        length: !inverseReferencedColumn.length\n                        && (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver)\n                        && (inverseReferencedColumn.generationStrategy === \"uuid\" || inverseReferencedColumn.type === \"uuid\")\n                            ? \"36\"\n                            : inverseReferencedColumn.length, // fix https://github.com/typeorm/typeorm/issues/3604\n                        width: inverseReferencedColumn.width, // fix https://github.com/typeorm/typeorm/issues/6442\n                        type: inverseReferencedColumn.type,\n                        precision: inverseReferencedColumn.precision,\n                        scale: inverseReferencedColumn.scale,\n                        charset: inverseReferencedColumn.charset,\n                        collation: inverseReferencedColumn.collation,\n                        zerofill: inverseReferencedColumn.zerofill,\n                        unsigned: inverseReferencedColumn.zerofill ? true : inverseReferencedColumn.unsigned,\n                        name: columnName,\n                        nullable: false,\n                        primary: true,\n                    }\n                }\n            });\n        });\n\n        this.changeDuplicatedColumnNames(junctionColumns, inverseJunctionColumns);\n\n        // set junction table columns\n        entityMetadata.ownerColumns = junctionColumns;\n        entityMetadata.inverseColumns = inverseJunctionColumns;\n        entityMetadata.ownColumns = [...junctionColumns, ...inverseJunctionColumns];\n        entityMetadata.ownColumns.forEach(column => column.relationMetadata = relation);\n\n        // create junction table foreign keys\n        entityMetadata.foreignKeys = [\n            new ForeignKeyMetadata({\n                entityMetadata: entityMetadata,\n                referencedEntityMetadata: relation.entityMetadata,\n                columns: junctionColumns,\n                referencedColumns: referencedColumns,\n                onDelete: relation.onDelete ||  \"CASCADE\"\n            }),\n            new ForeignKeyMetadata({\n                entityMetadata: entityMetadata,\n                referencedEntityMetadata: relation.inverseEntityMetadata,\n                columns: inverseJunctionColumns,\n                referencedColumns: inverseReferencedColumns,\n                onDelete: relation.onDelete || \"CASCADE\"\n            }),\n        ];\n\n        // create junction table indices\n        entityMetadata.ownIndices = [\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: junctionColumns,\n                args: {\n                    target: entityMetadata.target,\n                    synchronize: true\n                }\n            }),\n\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: inverseJunctionColumns,\n                args: {\n                    target: entityMetadata.target,\n                    synchronize: true\n                }\n            })\n        ];\n\n        // finally return entity metadata\n        return entityMetadata;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Collects referenced columns from the given join column args.\n     */\n    protected collectReferencedColumns(relation: RelationMetadata, joinTable: JoinTableMetadataArgs): ColumnMetadata[] {\n        const hasAnyReferencedColumnName = joinTable.joinColumns ? joinTable.joinColumns.find(joinColumn => !!joinColumn.referencedColumnName) : false;\n        if (!joinTable.joinColumns || (joinTable.joinColumns && !hasAnyReferencedColumnName)) {\n            return relation.entityMetadata.columns.filter(column => column.isPrimary);\n        } else {\n            return joinTable.joinColumns.map(joinColumn => {\n                const referencedColumn = relation.entityMetadata.columns.find(column => column.propertyName === joinColumn.referencedColumnName);\n                if (!referencedColumn)\n                    throw new Error(`Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.entityMetadata.name}`);\n\n                return referencedColumn;\n            });\n        }\n    }\n\n    /**\n     * Collects inverse referenced columns from the given join column args.\n     */\n    protected collectInverseReferencedColumns(relation: RelationMetadata, joinTable: JoinTableMetadataArgs): ColumnMetadata[] {\n        const hasInverseJoinColumns = !!joinTable.inverseJoinColumns;\n        const hasAnyInverseReferencedColumnName = hasInverseJoinColumns ? joinTable.inverseJoinColumns!.find(joinColumn => !!joinColumn.referencedColumnName) : false;\n        if (!hasInverseJoinColumns || (hasInverseJoinColumns && !hasAnyInverseReferencedColumnName)) {\n            return relation.inverseEntityMetadata.primaryColumns;\n        } else {\n            return joinTable.inverseJoinColumns!.map(joinColumn => {\n                const referencedColumn = relation.inverseEntityMetadata.ownColumns.find(column => column.propertyName === joinColumn.referencedColumnName);\n                if (!referencedColumn)\n                    throw new Error(`Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.inverseEntityMetadata.name}`);\n\n                return referencedColumn;\n            });\n        }\n    }\n\n    protected changeDuplicatedColumnNames(junctionColumns: ColumnMetadata[], inverseJunctionColumns: ColumnMetadata[]) {\n        junctionColumns.forEach(junctionColumn => {\n            inverseJunctionColumns.forEach(inverseJunctionColumn => {\n                if (junctionColumn.givenDatabaseName === inverseJunctionColumn.givenDatabaseName) {\n                    const junctionColumnName = this.connection.namingStrategy.joinTableColumnDuplicationPrefix(junctionColumn.propertyName, 1);\n                    junctionColumn.propertyName = junctionColumnName;\n                    junctionColumn.givenDatabaseName = junctionColumnName;\n\n                    const inverseJunctionColumnName = this.connection.namingStrategy.joinTableColumnDuplicationPrefix(inverseJunctionColumn.propertyName, 2);\n                    inverseJunctionColumn.propertyName = inverseJunctionColumnName;\n                    inverseJunctionColumn.givenDatabaseName = inverseJunctionColumnName;\n                }\n            });\n        });\n    }\n\n}\n","import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\n\n/**\n * Creates EntityMetadata for junction tables of the closure entities.\n * Closure junction tables are tables generated by closure entities.\n */\nexport class ClosureJunctionEntityMetadataBuilder {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds EntityMetadata for the closure junction of the given closure entity.\n     */\n    build(parentClosureEntityMetadata: EntityMetadata) {\n\n        // create entity metadata itself\n        const entityMetadata = new EntityMetadata({\n            parentClosureEntityMetadata: parentClosureEntityMetadata,\n            connection: this.connection,\n            args: {\n                target: \"\",\n                name: parentClosureEntityMetadata.treeOptions && parentClosureEntityMetadata.treeOptions.closureTableName ? parentClosureEntityMetadata.treeOptions.closureTableName : parentClosureEntityMetadata.tableNameWithoutPrefix,\n                type: \"closure-junction\"\n            }\n        });\n        entityMetadata.build();\n\n        // create ancestor and descendant columns for new closure junction table\n        parentClosureEntityMetadata.primaryColumns.forEach(primaryColumn => {\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                closureType: \"ancestor\",\n                referencedColumn: primaryColumn,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: parentClosureEntityMetadata.treeOptions && parentClosureEntityMetadata.treeOptions.ancestorColumnName ? parentClosureEntityMetadata.treeOptions.ancestorColumnName(primaryColumn) : primaryColumn.propertyName + \"_ancestor\",\n                    options: {\n                        primary: true,\n                        length: primaryColumn.length,\n                        type: primaryColumn.type\n                    }\n                }\n            }));\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                closureType: \"descendant\",\n                referencedColumn: primaryColumn,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: parentClosureEntityMetadata.treeOptions && parentClosureEntityMetadata.treeOptions.descendantColumnName ? parentClosureEntityMetadata.treeOptions.descendantColumnName(primaryColumn) : primaryColumn.propertyName + \"_descendant\",\n                    options: {\n                        primary: true,\n                        length: primaryColumn.length,\n                        type: primaryColumn.type,\n                    }\n                }\n            }));\n        });\n\n        entityMetadata.ownIndices = [\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: [entityMetadata.ownColumns[0]],\n                args: {\n                    target: entityMetadata.target,\n                    synchronize: true\n                }\n            }),\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: [entityMetadata.ownColumns[1]],\n                args: {\n                    target: entityMetadata.target,\n                    synchronize: true\n                }\n            })\n        ];\n\n        // if tree level column was defined by a closure entity then add it to the junction columns as well\n        if (parentClosureEntityMetadata.treeLevelColumn) {\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: \"level\",\n                    options: {\n                        type: this.connection.driver.mappedDataTypes.treeLevel,\n                    }\n                }\n            }));\n        }\n\n        // create junction table foreign keys\n        entityMetadata.foreignKeys = [\n            new ForeignKeyMetadata({\n                entityMetadata: entityMetadata,\n                referencedEntityMetadata: parentClosureEntityMetadata,\n                columns: [entityMetadata.ownColumns[0]],\n                referencedColumns: parentClosureEntityMetadata.primaryColumns,\n                // onDelete: \"CASCADE\" // todo: does not work in mssql for some reason\n            }),\n            new ForeignKeyMetadata({\n                entityMetadata: entityMetadata,\n                referencedEntityMetadata: parentClosureEntityMetadata,\n                columns: [entityMetadata.ownColumns[1]],\n                referencedColumns: parentClosureEntityMetadata.primaryColumns,\n                // onDelete: \"CASCADE\" // todo: does not work in mssql for some reason\n            }),\n        ];\n\n        return entityMetadata;\n    }\n\n}\n","import {EmbeddedMetadata} from \"./EmbeddedMetadata\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {ColumnMetadata} from \"./ColumnMetadata\";\nimport {UniqueMetadataArgs} from \"../metadata-args/UniqueMetadataArgs\";\n\n/**\n * Unique metadata contains all information about table's unique constraints.\n */\nexport class UniqueMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the class to which this unique constraint is applied.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Embedded metadata if this unique was applied on embedded.\n     */\n    embeddedMetadata?: EmbeddedMetadata;\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target?: Function|string;\n\n    /**\n     * Unique columns.\n     */\n    columns: ColumnMetadata[] = [];\n\n    /**\n     * User specified unique constraint name.\n     */\n    givenName?: string;\n\n    /**\n     * User specified column names.\n     */\n    givenColumnNames?: ((object?: any) => (any[]|{ [key: string]: number }))|string[];\n\n    /**\n     * Final unique constraint name.\n     * If unique constraint name was given by a user then it stores normalized (by naming strategy) givenName.\n     * If unique constraint name was not given then its generated.\n     */\n    name: string;\n\n    /**\n     * Map of column names with order set.\n     * Used only by MongoDB driver.\n     */\n    columnNamesWithOrderingMap: { [key: string]: number } = {};\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        embeddedMetadata?: EmbeddedMetadata,\n        columns?: ColumnMetadata[],\n        args?: UniqueMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        if (options.columns)\n            this.columns = options.columns;\n\n        if (options.args) {\n            this.target = options.args.target;\n            this.givenName = options.args.name;\n            this.givenColumnNames = options.args.columns;\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend unique constraint properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy: NamingStrategyInterface): this {\n\n        const map: { [key: string]: number } = {};\n\n        // if columns already an array of string then simply return it\n        if (this.givenColumnNames) {\n            let columnPropertyPaths: string[] = [];\n            if (Array.isArray(this.givenColumnNames)) {\n                columnPropertyPaths = this.givenColumnNames.map(columnName => {\n                    if (this.embeddedMetadata)\n                        return this.embeddedMetadata.propertyPath + \".\" + columnName;\n\n                    return columnName;\n                });\n                columnPropertyPaths.forEach(propertyPath => map[propertyPath] = 1);\n            } else {\n                // if columns is a function that returns array of field names then execute it and get columns names from it\n                const columnsFnResult = this.givenColumnNames(this.entityMetadata.propertiesMap);\n                if (Array.isArray(columnsFnResult)) {\n                    columnPropertyPaths = columnsFnResult.map((i: any) => String(i));\n                    columnPropertyPaths.forEach(name => map[name] = 1);\n                } else {\n                    columnPropertyPaths = Object.keys(columnsFnResult).map((i: any) => String(i));\n                    Object.keys(columnsFnResult).forEach(columnName => map[columnName] = columnsFnResult[columnName]);\n                }\n            }\n\n            this.columns = columnPropertyPaths.map(propertyName => {\n                const columnWithSameName = this.entityMetadata.columns.find(column => column.propertyPath === propertyName);\n                if (columnWithSameName) {\n                    return [columnWithSameName];\n                }\n                const relationWithSameName = this.entityMetadata.relations.find(relation => relation.isWithJoinColumn && relation.propertyName === propertyName);\n                if (relationWithSameName) {\n                    return relationWithSameName.joinColumns;\n                }\n                const indexName = this.givenName ? \"\\\"\" + this.givenName + \"\\\" \" : \"\";\n                const entityName = this.entityMetadata.targetName;\n                throw new Error(`Unique constraint ${indexName}contains column that is missing in the entity (${entityName}): ` + propertyName);\n            })\n            .reduce((a, b) => a.concat(b));\n        }\n\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce((updatedMap, key) => {\n            const column = this.entityMetadata.columns.find(column => column.propertyPath === key);\n            if (column)\n                updatedMap[column.databasePath] = map[key];\n\n            return updatedMap;\n        }, {} as { [key: string]: number });\n\n        this.name = this.givenName ? this.givenName : namingStrategy.uniqueConstraintName(this.entityMetadata.tablePath, this.columns.map(column => column.databaseName));\n        return this;\n    }\n\n}\n","import {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {UniqueMetadata} from \"../metadata/UniqueMetadata\";\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {JoinColumnMetadataArgs} from \"../metadata-args/JoinColumnMetadataArgs\";\nimport {Connection} from \"../connection/Connection\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {AuroraDataApiDriver} from \"../driver/aurora-data-api/AuroraDataApiDriver\";\n\n/**\n * Builds join column for the many-to-one and one-to-one owner relations.\n *\n * Cases it should cover:\n * 1. when join column is set with custom name and without referenced column name\n * we need automatically set referenced column name - primary ids by default\n * @JoinColumn({ name: \"custom_name\" })\n *\n * 2. when join column is set with only referenced column name\n * we need automatically set join column name - relation name + referenced column name\n * @JoinColumn({ referencedColumnName: \"title\" })\n *\n * 3. when join column is set without both referenced column name and join column name\n * we need to automatically set both of them\n * @JoinColumn()\n *\n * 4. when join column is not set at all (as in case of @ManyToOne relation)\n * we need to create join column for it with proper referenced column name and join column name\n *\n * 5. when multiple join columns set none of referencedColumnName and name can be optional\n * both options are required\n * @JoinColumn([\n *      { name: \"category_title\", referencedColumnName: \"type\" },\n *      { name: \"category_title\", referencedColumnName: \"name\" },\n * ])\n *\n * Since for many-to-one relations having JoinColumn decorator is not required,\n * we need to go thought each many-to-one relation without join column decorator set\n * and create join column metadata args for them.\n */\nexport class RelationJoinColumnBuilder {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds a foreign key of the many-to-one or one-to-one owner relations.\n     */\n    build(joinColumns: JoinColumnMetadataArgs[], relation: RelationMetadata): {\n      foreignKey: ForeignKeyMetadata|undefined,\n      uniqueConstraint: UniqueMetadata|undefined,\n    } {\n        const referencedColumns = this.collectReferencedColumns(joinColumns, relation);\n        if (!referencedColumns.length)\n            return { foreignKey: undefined, uniqueConstraint: undefined }; // this case is possible only for one-to-one non owning side\n\n        const columns = this.collectColumns(joinColumns, relation, referencedColumns);\n        const foreignKey = new ForeignKeyMetadata({\n            entityMetadata: relation.entityMetadata,\n            referencedEntityMetadata: relation.inverseEntityMetadata,\n            namingStrategy: this.connection.namingStrategy,\n            columns: columns,\n            referencedColumns: referencedColumns,\n            onDelete: relation.onDelete,\n            onUpdate: relation.onUpdate,\n            deferrable: relation.deferrable,\n        });\n\n        // Oracle does not allow both primary and unique constraints on the same column\n        if (this.connection.driver instanceof OracleDriver && columns.every(column => column.isPrimary))\n            return { foreignKey, uniqueConstraint: undefined };\n\n        // CockroachDB requires UNIQUE constraints on referenced columns\n        if (referencedColumns.length > 0 && relation.isOneToOne) {\n            const uniqueConstraint = new UniqueMetadata({\n                entityMetadata: relation.entityMetadata,\n                columns: foreignKey.columns,\n                args: {\n                    name: this.connection.namingStrategy.relationConstraintName(relation.entityMetadata.tablePath, foreignKey.columns.map(c => c.databaseName)),\n                    target: relation.entityMetadata.target,\n                }\n            });\n            uniqueConstraint.build(this.connection.namingStrategy);\n            return {foreignKey, uniqueConstraint};\n        }\n\n        return { foreignKey, uniqueConstraint: undefined };\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Collects referenced columns from the given join column args.\n     */\n    protected collectReferencedColumns(joinColumns: JoinColumnMetadataArgs[], relation: RelationMetadata): ColumnMetadata[] {\n        const hasAnyReferencedColumnName = joinColumns.find(joinColumnArgs => !!joinColumnArgs.referencedColumnName);\n        const manyToOneWithoutJoinColumn = joinColumns.length === 0 && relation.isManyToOne;\n        const hasJoinColumnWithoutAnyReferencedColumnName = joinColumns.length > 0 && !hasAnyReferencedColumnName;\n\n        if (manyToOneWithoutJoinColumn || hasJoinColumnWithoutAnyReferencedColumnName) { // covers case3 and case1\n            return relation.inverseEntityMetadata.primaryColumns;\n\n        } else { // cases with referenced columns defined\n            return joinColumns.map(joinColumn => {\n                const referencedColumn = relation.inverseEntityMetadata.ownColumns.find(column => column.propertyName === joinColumn.referencedColumnName); // todo: can we also search in relations?\n                if (!referencedColumn)\n                    throw new Error(`Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.inverseEntityMetadata.name}`);\n\n                return referencedColumn;\n            });\n        }\n    }\n\n    /**\n     * Collects columns from the given join column args.\n     */\n    private collectColumns(joinColumns: JoinColumnMetadataArgs[], relation: RelationMetadata, referencedColumns: ColumnMetadata[]): ColumnMetadata[] {\n        return referencedColumns.map(referencedColumn => {\n\n            // in the case if relation has join column with only name set we need this check\n            const joinColumnMetadataArg = joinColumns.find(joinColumn => {\n                return (!joinColumn.referencedColumnName || joinColumn.referencedColumnName === referencedColumn.propertyName) &&\n                    !!joinColumn.name;\n            });\n            const joinColumnName = joinColumnMetadataArg ? joinColumnMetadataArg.name : this.connection.namingStrategy.joinColumnName(relation.propertyName, referencedColumn.propertyName);\n\n            let relationalColumn = relation.entityMetadata.ownColumns.find(column => column.databaseName === joinColumnName);\n            if (!relationalColumn) {\n                relationalColumn = new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: relation.entityMetadata,\n                    args: {\n                        target: \"\",\n                        mode: \"virtual\",\n                        propertyName: relation.propertyName,\n                        options: {\n                            name: joinColumnName,\n                            type: referencedColumn.type,\n                            length: !referencedColumn.length\n                                        && (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver)\n                                        && (referencedColumn.generationStrategy === \"uuid\" || referencedColumn.type === \"uuid\")\n                                    ? \"36\"\n                                    : referencedColumn.length, // fix https://github.com/typeorm/typeorm/issues/3604\n                            width: referencedColumn.width,\n                            charset: referencedColumn.charset,\n                            collation: referencedColumn.collation,\n                            precision: referencedColumn.precision,\n                            scale: referencedColumn.scale,\n                            zerofill: referencedColumn.zerofill,\n                            unsigned: referencedColumn.unsigned,\n                            comment: referencedColumn.comment,\n                            primary: relation.isPrimary,\n                            nullable: relation.isNullable\n                        }\n                    }\n                });\n                relation.entityMetadata.registerColumn(relationalColumn);\n            }\n            relationalColumn.referencedColumn = referencedColumn; // its important to set it here because we need to set referenced column for user defined join column\n            relationalColumn.type = referencedColumn.type; // also since types of relational column and join column must be equal we override user defined column type\n            relationalColumn.relationMetadata = relation;\n            relationalColumn.build(this.connection);\n            return relationalColumn;\n        });\n    }\n}\n","import {EventListenerType} from \"./types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../metadata-args/EntityListenerMetadataArgs\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\n\n/**\n * This metadata contains all information about entity's listeners.\n */\nexport class EntityListenerMetadata {\n\n    // ---------------------------------------------------------------------\n    // Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the listener.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Embedded metadata of the listener, in the case if listener is in embedded.\n     */\n    embeddedMetadata?: EmbeddedMetadata;\n\n    /**\n     * Target class to which metadata is applied.\n     * This can be different then entityMetadata.target in the case if listener is in the embedded.\n     */\n    target: Function|string;\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    propertyName: string;\n\n    /**\n     * The type of the listener.\n     */\n    type: EventListenerType;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: { entityMetadata: EntityMetadata, embeddedMetadata?: EmbeddedMetadata, args: EntityListenerMetadataArgs }) {\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        this.target = options.args.target;\n        this.propertyName = options.args.propertyName;\n        this.type = options.args.type;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Checks if entity listener is allowed to be executed on the given entity.\n     */\n    isAllowed(entity: ObjectLiteral) { // todo: create in entity metadata method like isInherited?\n        return this.entityMetadata.target === entity.constructor || // todo: .constructor won't work for entity schemas, but there are no entity listeners in schemas since there are no objects, right?\n            (this.entityMetadata.target instanceof Function && entity.constructor.prototype instanceof this.entityMetadata.target); // todo: also need to implement entity schema inheritance\n    }\n\n    /**\n     * Executes listener method of the given entity.\n     */\n    execute(entity: ObjectLiteral) {\n        if (!this.embeddedMetadata)\n            return entity[this.propertyName]();\n\n        this.callEntityEmbeddedMethod(entity, this.embeddedMetadata.propertyPath.split(\".\"));\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Calls embedded entity listener method no matter how nested it is.\n     */\n    protected callEntityEmbeddedMethod(entity: ObjectLiteral, propertyPaths: string[]): void {\n        const propertyPath = propertyPaths.shift();\n        if (!propertyPath || !entity[propertyPath])\n            return;\n\n        if (propertyPaths.length === 0) {\n            entity[propertyPath][this.propertyName]();\n        } else {\n            if (entity[propertyPath])\n                this.callEntityEmbeddedMethod(entity[propertyPath], propertyPaths);\n        }\n    }\n\n}\n","import {EntityMetadata} from \"./EntityMetadata\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {CheckMetadataArgs} from \"../metadata-args/CheckMetadataArgs\";\n\n/**\n * Check metadata contains all information about table's check constraints.\n */\nexport class CheckMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the class to which this check constraint is applied.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target?: Function|string;\n\n    /**\n     * Check expression.\n     */\n    expression: string;\n\n    /**\n     * User specified check constraint name.\n     */\n    givenName?: string;\n\n    /**\n     * Final check constraint name.\n     * If check constraint name was given by a user then it stores normalized (by naming strategy) givenName.\n     * If check constraint name was not given then its generated.\n     */\n    name: string;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        args?: CheckMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata;\n\n        if (options.args) {\n            this.target = options.args.target;\n            this.expression = options.args.expression;\n            this.givenName = options.args.name;\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend check constraint properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy: NamingStrategyInterface): this {\n        this.name = this.givenName ? this.givenName : namingStrategy.checkConstraintName(this.entityMetadata.tablePath, this.expression);\n        return this;\n    }\n\n}","import {EntityMetadata} from \"./EntityMetadata\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {ExclusionMetadataArgs} from \"../metadata-args/ExclusionMetadataArgs\";\n\n/**\n * Exclusion metadata contains all information about table's exclusion constraints.\n */\nexport class ExclusionMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the class to which this exclusion constraint is applied.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target?: Function|string;\n\n    /**\n     * Exclusion expression.\n     */\n    expression: string;\n\n    /**\n     * User specified exclusion constraint name.\n     */\n    givenName?: string;\n\n    /**\n     * Final exclusion constraint name.\n     * If exclusion constraint name was given by a user then it stores normalized (by naming strategy) givenName.\n     * If exclusion constraint name was not given then its generated.\n     */\n    name: string;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        args?: ExclusionMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata;\n\n        if (options.args) {\n            this.target = options.args.target;\n            this.expression = options.args.expression;\n            this.givenName = options.args.name;\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend exclusion constraint properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy: NamingStrategyInterface): this {\n        this.name = this.givenName ? this.givenName : namingStrategy.exclusionConstraintName(this.entityMetadata.tablePath, this.expression);\n        return this;\n    }\n\n}\n","import {CockroachDriver} from \"../driver/cockroachdb/CockroachDriver\";\nimport {SapDriver} from \"../driver/sap/SapDriver\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {EmbeddedMetadata} from \"../metadata/EmbeddedMetadata\";\nimport {MetadataArgsStorage} from \"../metadata-args/MetadataArgsStorage\";\nimport {EmbeddedMetadataArgs} from \"../metadata-args/EmbeddedMetadataArgs\";\nimport {RelationIdMetadata} from \"../metadata/RelationIdMetadata\";\nimport {RelationCountMetadata} from \"../metadata/RelationCountMetadata\";\nimport { EventListenerTypes } from \"../metadata/types/EventListenerTypes\";\nimport {MetadataUtils} from \"./MetadataUtils\";\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\nimport {JunctionEntityMetadataBuilder} from \"./JunctionEntityMetadataBuilder\";\nimport {ClosureJunctionEntityMetadataBuilder} from \"./ClosureJunctionEntityMetadataBuilder\";\nimport {RelationJoinColumnBuilder} from \"./RelationJoinColumnBuilder\";\nimport {Connection} from \"../connection/Connection\";\nimport {EntityListenerMetadata} from \"../metadata/EntityListenerMetadata\";\nimport {UniqueMetadata} from \"../metadata/UniqueMetadata\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {CheckMetadata} from \"../metadata/CheckMetadata\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {ExclusionMetadata} from \"../metadata/ExclusionMetadata\";\nimport {AuroraDataApiDriver} from \"../driver/aurora-data-api/AuroraDataApiDriver\";\n\n/**\n * Builds EntityMetadata objects and all its sub-metadatas.\n */\nexport class EntityMetadataBuilder {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Used to build entity metadatas of the junction entities.\n     */\n    protected junctionEntityMetadataBuilder: JunctionEntityMetadataBuilder;\n\n    /**\n     * Used to build entity metadatas of the closure junction entities.\n     */\n    protected closureJunctionEntityMetadataBuilder: ClosureJunctionEntityMetadataBuilder;\n\n    /**\n     * Used to build join columns of the relations.\n     */\n    protected relationJoinColumnBuilder: RelationJoinColumnBuilder;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection,\n                private metadataArgsStorage: MetadataArgsStorage) {\n\n        this.junctionEntityMetadataBuilder = new JunctionEntityMetadataBuilder(connection);\n        this.closureJunctionEntityMetadataBuilder = new ClosureJunctionEntityMetadataBuilder(connection);\n        this.relationJoinColumnBuilder = new RelationJoinColumnBuilder(connection);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds a complete entity metadatas for the given entity classes.\n     */\n    build(entityClasses?: Function[]): EntityMetadata[] {\n\n        // if entity classes to filter entities by are given then do filtering, otherwise use all\n        const allTables = entityClasses ? this.metadataArgsStorage.filterTables(entityClasses) : this.metadataArgsStorage.tables;\n\n        // filter out table metadata args for those we really create entity metadatas and tables in the db\n        const realTables = allTables.filter(table => table.type === \"regular\" || table.type === \"closure\" || table.type === \"entity-child\" || table.type === \"view\");\n\n        // create entity metadatas for a user defined entities (marked with @Entity decorator or loaded from entity schemas)\n        const entityMetadatas = realTables.map(tableArgs => this.createEntityMetadata(tableArgs));\n\n        // compute parent entity metadatas for table inheritance\n        entityMetadatas.forEach(entityMetadata => this.computeParentEntityMetadata(entityMetadatas, entityMetadata));\n\n        // after all metadatas created we set child entity metadatas for table inheritance\n        entityMetadatas.forEach(metadata => {\n            metadata.childEntityMetadatas = entityMetadatas.filter(childMetadata => {\n                return metadata.target instanceof Function\n                    && childMetadata.target instanceof Function\n                    && MetadataUtils.isInherited(childMetadata.target, metadata.target);\n            });\n        });\n\n        // build entity metadata (step0), first for non-single-table-inherited entity metadatas (dependant)\n        entityMetadatas\n            .filter(entityMetadata => entityMetadata.tableType !== \"entity-child\")\n            .forEach(entityMetadata => entityMetadata.build());\n\n        // build entity metadata (step0), now for single-table-inherited entity metadatas (dependant)\n        entityMetadatas\n            .filter(entityMetadata => entityMetadata.tableType === \"entity-child\")\n            .forEach(entityMetadata => entityMetadata.build());\n\n        // compute entity metadata columns, relations, etc. first for the regular, non-single-table-inherited entity metadatas\n        entityMetadatas\n            .filter(entityMetadata => entityMetadata.tableType !== \"entity-child\")\n            .forEach(entityMetadata => this.computeEntityMetadataStep1(entityMetadatas, entityMetadata));\n\n        // then do it for single table inheritance children (since they are depend on their parents to be built)\n        entityMetadatas\n            .filter(entityMetadata => entityMetadata.tableType === \"entity-child\")\n            .forEach(entityMetadata => this.computeEntityMetadataStep1(entityMetadatas, entityMetadata));\n\n        // calculate entity metadata computed properties and all its sub-metadatas\n        entityMetadatas.forEach(entityMetadata => this.computeEntityMetadataStep2(entityMetadata));\n\n        // calculate entity metadata's inverse properties\n        entityMetadatas.forEach(entityMetadata => this.computeInverseProperties(entityMetadata, entityMetadatas));\n\n        // go through all entity metadatas and create foreign keys / junction entity metadatas for their relations\n        entityMetadatas\n            .filter(entityMetadata => entityMetadata.tableType !== \"entity-child\")\n            .forEach(entityMetadata => {\n\n                // create entity's relations join columns (for many-to-one and one-to-one owner)\n                entityMetadata.relations.filter(relation => relation.isOneToOne || relation.isManyToOne).forEach(relation => {\n                    const joinColumns = this.metadataArgsStorage.filterJoinColumns(relation.target, relation.propertyName);\n                    const { foreignKey, uniqueConstraint } = this.relationJoinColumnBuilder.build(joinColumns, relation); // create a foreign key based on its metadata args\n                    if (foreignKey) {\n                        relation.registerForeignKeys(foreignKey); // push it to the relation and thus register there a join column\n                        entityMetadata.foreignKeys.push(foreignKey);\n                    }\n                    if (uniqueConstraint) {\n                        if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver\n                            || this.connection.driver instanceof SqlServerDriver || this.connection.driver instanceof SapDriver) {\n                            const index = new IndexMetadata({\n                                entityMetadata: uniqueConstraint.entityMetadata,\n                                columns: uniqueConstraint.columns,\n                                args: {\n                                    target: uniqueConstraint.target!,\n                                    name: uniqueConstraint.name,\n                                    unique: true,\n                                    synchronize: true\n                                }\n                            });\n\n                            if (this.connection.driver instanceof SqlServerDriver) {\n                                index.where = index.columns.map(column => {\n                                    return `${this.connection.driver.escape(column.databaseName)} IS NOT NULL`;\n                                }).join(\" AND \");\n                            }\n\n                            if (relation.embeddedMetadata) {\n                                relation.embeddedMetadata.indices.push(index);\n                            } else {\n                                relation.entityMetadata.ownIndices.push(index);\n                            }\n                            this.computeEntityMetadataStep2(entityMetadata);\n\n                        } else {\n                            if (relation.embeddedMetadata) {\n                                relation.embeddedMetadata.uniques.push(uniqueConstraint);\n                            } else {\n                                relation.entityMetadata.ownUniques.push(uniqueConstraint);\n                            }\n                            this.computeEntityMetadataStep2(entityMetadata);\n                        }\n                    }\n\n                    if (foreignKey && this.connection.driver instanceof CockroachDriver) {\n                        const index = new IndexMetadata({\n                            entityMetadata: relation.entityMetadata,\n                            columns: foreignKey.columns,\n                            args: {\n                                target: relation.entityMetadata.target!,\n                                synchronize: true\n                            }\n                        });\n                        if (relation.embeddedMetadata) {\n                            relation.embeddedMetadata.indices.push(index);\n                        } else {\n                            relation.entityMetadata.ownIndices.push(index);\n                        }\n                        this.computeEntityMetadataStep2(entityMetadata);\n                    }\n                });\n\n                // create junction entity metadatas for entity many-to-many relations\n                entityMetadata.relations.filter(relation => relation.isManyToMany).forEach(relation => {\n                    const joinTable = this.metadataArgsStorage.findJoinTable(relation.target, relation.propertyName)!;\n                    if (!joinTable) return; // no join table set - no need to do anything (it means this is many-to-many inverse side)\n\n                    // here we create a junction entity metadata for a new junction table of many-to-many relation\n                    const junctionEntityMetadata = this.junctionEntityMetadataBuilder.build(relation, joinTable);\n                    relation.registerForeignKeys(...junctionEntityMetadata.foreignKeys);\n                    relation.registerJunctionEntityMetadata(junctionEntityMetadata);\n\n                    // compute new entity metadata properties and push it to entity metadatas pool\n                    this.computeEntityMetadataStep2(junctionEntityMetadata);\n                    this.computeInverseProperties(junctionEntityMetadata, entityMetadatas);\n                    entityMetadatas.push(junctionEntityMetadata);\n                });\n\n        });\n\n        // update entity metadata depend properties\n        entityMetadatas\n            .forEach(entityMetadata => {\n                entityMetadata.relationsWithJoinColumns = entityMetadata.relations.filter(relation => relation.isWithJoinColumn);\n                entityMetadata.hasNonNullableRelations = entityMetadata.relationsWithJoinColumns.some(relation => !relation.isNullable || relation.isPrimary);\n            });\n\n        // generate closure junction tables for all closure tables\n        entityMetadatas\n            .filter(metadata => metadata.treeType === \"closure-table\")\n            .forEach(entityMetadata => {\n                const closureJunctionEntityMetadata = this.closureJunctionEntityMetadataBuilder.build(entityMetadata);\n                entityMetadata.closureJunctionTable = closureJunctionEntityMetadata;\n                this.computeEntityMetadataStep2(closureJunctionEntityMetadata);\n                this.computeInverseProperties(closureJunctionEntityMetadata, entityMetadatas);\n                entityMetadatas.push(closureJunctionEntityMetadata);\n            });\n\n        // generate keys for tables with single-table inheritance\n        entityMetadatas\n            .filter(metadata => metadata.inheritancePattern === \"STI\" && metadata.discriminatorColumn)\n            .forEach(entityMetadata => this.createKeysForTableInheritance(entityMetadata));\n\n        // build all indices (need to do it after relations and their join columns are built)\n        entityMetadatas.forEach(entityMetadata => {\n            entityMetadata.indices.forEach(index => index.build(this.connection.namingStrategy));\n        });\n\n        // build all unique constraints (need to do it after relations and their join columns are built)\n        entityMetadatas.forEach(entityMetadata => {\n            entityMetadata.uniques.forEach(unique => unique.build(this.connection.namingStrategy));\n        });\n\n        // build all check constraints\n        entityMetadatas.forEach(entityMetadata => {\n            entityMetadata.checks.forEach(check => check.build(this.connection.namingStrategy));\n        });\n\n        // build all exclusion constraints\n        entityMetadatas.forEach(entityMetadata => {\n            entityMetadata.exclusions.forEach(exclusion => exclusion.build(this.connection.namingStrategy));\n        });\n\n        // add lazy initializer for entity relations\n        entityMetadatas\n            .filter(metadata => metadata.target instanceof Function)\n            .forEach(entityMetadata => {\n                entityMetadata.relations\n                    .filter(relation => relation.isLazy)\n                    .forEach(relation => {\n                        this.connection.relationLoader.enableLazyLoad(relation, (entityMetadata.target as Function).prototype);\n                    });\n            });\n\n        entityMetadatas.forEach(entityMetadata => {\n            entityMetadata.columns.forEach(column => {\n                // const target = column.embeddedMetadata ? column.embeddedMetadata.type : column.target;\n                const generated = this.metadataArgsStorage.findGenerated(column.target, column.propertyName);\n                if (generated) {\n                    column.isGenerated = true;\n                    column.generationStrategy = generated.strategy;\n                    if (generated.strategy === \"uuid\") {\n                        column.type = \"uuid\";\n                    } else if (generated.strategy === \"rowid\") {\n                        column.type = \"int\";\n                    } else {\n                        column.type = column.type || Number;\n                    }\n                    column.build(this.connection);\n                    this.computeEntityMetadataStep2(entityMetadata);\n                }\n            });\n\n        });\n\n        return entityMetadatas;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates entity metadata from the given table args.\n     * Creates column, relation, etc. metadatas for everything this entity metadata owns.\n     */\n    protected createEntityMetadata(tableArgs: TableMetadataArgs): EntityMetadata {\n\n        // we take all \"inheritance tree\" from a target entity to collect all stored metadata args\n        // (by decorators or inside entity schemas). For example for target Post < ContentModel < Unit\n        // it will be an array of [Post, ContentModel, Unit] and we can then get all metadata args of those classes\n        const inheritanceTree: any[] = tableArgs.target instanceof Function\n            ? MetadataUtils.getInheritanceTree(tableArgs.target)\n            : [tableArgs.target]; // todo: implement later here inheritance for string-targets\n\n        const tableInheritance = this.metadataArgsStorage.findInheritanceType(tableArgs.target);\n        const tableTree = this.metadataArgsStorage.findTree(tableArgs.target);\n\n        // if single table inheritance used, we need to copy all children columns in to parent table\n        let singleTableChildrenTargets: any[];\n        if ((tableInheritance && tableInheritance.pattern === \"STI\") || tableArgs.type === \"entity-child\") {\n            singleTableChildrenTargets = this.metadataArgsStorage\n                .filterSingleTableChildren(tableArgs.target)\n                .map(args => args.target)\n                .filter(target => target instanceof Function);\n\n            inheritanceTree.push(...singleTableChildrenTargets);\n        }\n\n        return new EntityMetadata({\n            connection: this.connection,\n            args: tableArgs,\n            inheritanceTree: inheritanceTree,\n            tableTree: tableTree,\n            inheritancePattern: tableInheritance ? tableInheritance.pattern : undefined\n        });\n    }\n\n    protected computeParentEntityMetadata(allEntityMetadatas: EntityMetadata[], entityMetadata: EntityMetadata) {\n\n        // after all metadatas created we set parent entity metadata for table inheritance\n        if (entityMetadata.tableType === \"entity-child\") {\n            entityMetadata.parentEntityMetadata = allEntityMetadatas.find(allEntityMetadata => {\n                return allEntityMetadata.inheritanceTree.indexOf(entityMetadata.target as Function) !== -1 && allEntityMetadata.inheritancePattern === \"STI\";\n            })!;\n        }\n    }\n\n    protected computeEntityMetadataStep1(allEntityMetadatas: EntityMetadata[], entityMetadata: EntityMetadata) {\n\n        const entityInheritance = this.metadataArgsStorage.findInheritanceType(entityMetadata.target);\n\n        const discriminatorValue = this.metadataArgsStorage.findDiscriminatorValue(entityMetadata.target);\n\n        if (typeof discriminatorValue !== \"undefined\") {\n            entityMetadata.discriminatorValue = discriminatorValue.value;\n        } else {\n            entityMetadata.discriminatorValue = (entityMetadata.target as any).name;\n        }\n\n        // if single table inheritance is used, we need to mark all embedded columns as nullable\n        entityMetadata.embeddeds = this.createEmbeddedsRecursively(entityMetadata, this.metadataArgsStorage.filterEmbeddeds(entityMetadata.inheritanceTree))\n            .map((embedded: EmbeddedMetadata): EmbeddedMetadata => {\n                 if (entityMetadata.inheritancePattern === \"STI\") {\n                     embedded.columns = embedded.columns.map((column: ColumnMetadata): ColumnMetadata => {\n                         column.isNullable = true;\n                         return column;\n                     });\n                 }\n                 return embedded;\n            });\n\n        entityMetadata.ownColumns = this.metadataArgsStorage\n            .filterColumns(entityMetadata.inheritanceTree)\n            .map(args => {\n\n                // for single table children we reuse columns created for their parents\n                if (entityMetadata.tableType === \"entity-child\")\n                    return entityMetadata.parentEntityMetadata.ownColumns.find(column => column.propertyName === args.propertyName)!;\n\n                const column = new ColumnMetadata({ connection: this.connection, entityMetadata, args });\n\n                // if single table inheritance used, we need to mark all inherit table columns as nullable\n                const columnInSingleTableInheritedChild = allEntityMetadatas.find(otherEntityMetadata => otherEntityMetadata.tableType === \"entity-child\" && otherEntityMetadata.target === args.target);\n                if (columnInSingleTableInheritedChild)\n                    column.isNullable = true;\n                return column;\n            });\n\n        // for table inheritance we need to add a discriminator column\n        //\n        if (entityInheritance && entityInheritance.column) {\n            const discriminatorColumnName = entityInheritance.column && entityInheritance.column.name ? entityInheritance.column.name : \"type\";\n            let discriminatorColumn = entityMetadata.ownColumns.find(column => column.propertyName === discriminatorColumnName);\n            if (!discriminatorColumn) {\n                discriminatorColumn = new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: entityMetadata,\n                    args: {\n                        target: entityMetadata.target,\n                        mode: \"virtual\",\n                        propertyName: discriminatorColumnName,\n                        options: entityInheritance.column || {\n                            name: discriminatorColumnName,\n                            type: \"varchar\",\n                            nullable: false\n                        }\n                    }\n                });\n                discriminatorColumn.isVirtual = true;\n                discriminatorColumn.isDiscriminator = true;\n                entityMetadata.ownColumns.push(discriminatorColumn);\n            } else {\n                discriminatorColumn.isDiscriminator = true;\n            }\n        }\n\n        // add discriminator column to the child entity metadatas\n        // discriminator column will not be there automatically since we are creating it in the code above\n        if (entityMetadata.tableType === \"entity-child\") {\n            const discriminatorColumn = entityMetadata.parentEntityMetadata.ownColumns.find(column => column.isDiscriminator);\n            if (discriminatorColumn && !entityMetadata.ownColumns.find(column => column === discriminatorColumn)) {\n                entityMetadata.ownColumns.push(discriminatorColumn);\n            }\n        }\n\n        const { namingStrategy } = this.connection;\n\n        // check if tree is used then we need to add extra columns for specific tree types\n        if (entityMetadata.treeType === \"materialized-path\") {\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                materializedPath: true,\n                args: {\n                    target: entityMetadata.target,\n                    mode: \"virtual\",\n                    propertyName: \"mpath\",\n                    options: /*tree.column || */ {\n                        name: namingStrategy.materializedPathColumnName,\n                        type: \"varchar\",\n                        nullable: true,\n                        default: \"\"\n                    }\n                }\n            }));\n\n        } else if (entityMetadata.treeType === \"nested-set\") {\n            const { left, right } = namingStrategy.nestedSetColumnNames;\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                nestedSetLeft: true,\n                args: {\n                    target: entityMetadata.target,\n                    mode: \"virtual\",\n                    propertyName: left,\n                    options: /*tree.column || */ {\n                        name: left,\n                        type: \"integer\",\n                        nullable: false,\n                        default: 1\n                    }\n                }\n            }));\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                nestedSetRight: true,\n                args: {\n                    target: entityMetadata.target,\n                    mode: \"virtual\",\n                    propertyName: right,\n                    options: /*tree.column || */ {\n                        name: right,\n                        type: \"integer\",\n                        nullable: false,\n                        default: 2\n                    }\n                }\n            }));\n        }\n\n        entityMetadata.ownRelations = this.metadataArgsStorage.filterRelations(entityMetadata.inheritanceTree).map(args => {\n\n            // for single table children we reuse relations created for their parents\n            if (entityMetadata.tableType === \"entity-child\")\n                return entityMetadata.parentEntityMetadata.ownRelations.find(relation => relation.propertyName === args.propertyName)!;\n\n            return new RelationMetadata({ entityMetadata, args });\n        });\n        entityMetadata.relationIds = this.metadataArgsStorage.filterRelationIds(entityMetadata.inheritanceTree).map(args => {\n\n            // for single table children we reuse relation ids created for their parents\n            if (entityMetadata.tableType === \"entity-child\")\n                return entityMetadata.parentEntityMetadata.relationIds.find(relationId => relationId.propertyName === args.propertyName)!;\n\n            return new RelationIdMetadata({ entityMetadata, args });\n        });\n        entityMetadata.relationCounts = this.metadataArgsStorage.filterRelationCounts(entityMetadata.inheritanceTree).map(args => {\n\n            // for single table children we reuse relation counts created for their parents\n            if (entityMetadata.tableType === \"entity-child\")\n                return entityMetadata.parentEntityMetadata.relationCounts.find(relationCount => relationCount.propertyName === args.propertyName)!;\n\n            return new RelationCountMetadata({ entityMetadata, args });\n        });\n        entityMetadata.ownListeners = this.metadataArgsStorage.filterListeners(entityMetadata.inheritanceTree).map(args => {\n            return new EntityListenerMetadata({ entityMetadata: entityMetadata, args: args });\n        });\n        entityMetadata.checks = this.metadataArgsStorage.filterChecks(entityMetadata.inheritanceTree).map(args => {\n            return new CheckMetadata({ entityMetadata, args });\n        });\n\n        // Only PostgreSQL supports exclusion constraints.\n        if (this.connection.driver instanceof PostgresDriver) {\n            entityMetadata.exclusions = this.metadataArgsStorage.filterExclusions(entityMetadata.inheritanceTree).map(args => {\n                return new ExclusionMetadata({ entityMetadata, args });\n            });\n        }\n\n        if (this.connection.driver instanceof CockroachDriver) {\n            entityMetadata.ownIndices = this.metadataArgsStorage.filterIndices(entityMetadata.inheritanceTree)\n                .filter(args => !args.unique)\n                .map(args => {\n                    return new IndexMetadata({entityMetadata, args});\n                });\n\n            const uniques = this.metadataArgsStorage.filterIndices(entityMetadata.inheritanceTree)\n                .filter(args => args.unique)\n                .map(args => {\n                    return new UniqueMetadata({\n                        entityMetadata: entityMetadata,\n                        args: {\n                            target: args.target,\n                            name: args.name,\n                            columns: args.columns,\n                        }\n                    });\n                });\n            entityMetadata.ownUniques.push(...uniques);\n\n        } else {\n            entityMetadata.ownIndices = this.metadataArgsStorage.filterIndices(entityMetadata.inheritanceTree).map(args => {\n                return new IndexMetadata({entityMetadata, args});\n            });\n        }\n\n        // Mysql and SAP HANA stores unique constraints as unique indices.\n        if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver || this.connection.driver instanceof SapDriver) {\n            const indices = this.metadataArgsStorage.filterUniques(entityMetadata.inheritanceTree).map(args => {\n                return new IndexMetadata({\n                    entityMetadata: entityMetadata,\n                    args: {\n                        target: args.target,\n                        name: args.name,\n                        columns: args.columns,\n                        unique: true,\n                        synchronize: true\n                    }\n                });\n            });\n            entityMetadata.ownIndices.push(...indices);\n\n        } else {\n            const uniques = this.metadataArgsStorage.filterUniques(entityMetadata.inheritanceTree).map(args => {\n                return new UniqueMetadata({ entityMetadata, args });\n            });\n            entityMetadata.ownUniques.push(...uniques);\n        }\n    }\n\n    /**\n     * Creates from the given embedded metadata args real embedded metadatas with its columns and relations,\n     * and does the same for all its sub-embeddeds (goes recursively).\n     */\n    protected createEmbeddedsRecursively(entityMetadata: EntityMetadata, embeddedArgs: EmbeddedMetadataArgs[]): EmbeddedMetadata[] {\n        return embeddedArgs.map(embeddedArgs => {\n            const embeddedMetadata = new EmbeddedMetadata({ entityMetadata: entityMetadata, args: embeddedArgs });\n            const targets = MetadataUtils.getInheritanceTree(embeddedMetadata.type);\n\n            embeddedMetadata.columns = this.metadataArgsStorage.filterColumns(targets).map(args => {\n                return new ColumnMetadata({ connection: this.connection, entityMetadata, embeddedMetadata, args});\n            });\n            embeddedMetadata.relations = this.metadataArgsStorage.filterRelations(targets).map(args => {\n                return new RelationMetadata({ entityMetadata, embeddedMetadata, args });\n            });\n            embeddedMetadata.listeners = this.metadataArgsStorage.filterListeners(targets).map(args => {\n                return new EntityListenerMetadata({ entityMetadata, embeddedMetadata, args });\n            });\n            embeddedMetadata.indices = this.metadataArgsStorage.filterIndices(targets).map(args => {\n                return new IndexMetadata({ entityMetadata, embeddedMetadata, args });\n            });\n            embeddedMetadata.uniques = this.metadataArgsStorage.filterUniques(targets).map(args => {\n                return new UniqueMetadata({ entityMetadata, embeddedMetadata, args });\n            });\n            embeddedMetadata.relationIds = this.metadataArgsStorage.filterRelationIds(targets).map(args => {\n                return new RelationIdMetadata({ entityMetadata, args });\n            });\n            embeddedMetadata.relationCounts = this.metadataArgsStorage.filterRelationCounts(targets).map(args => {\n                return new RelationCountMetadata({ entityMetadata, args });\n            });\n            embeddedMetadata.embeddeds = this.createEmbeddedsRecursively(entityMetadata, this.metadataArgsStorage.filterEmbeddeds(targets));\n            embeddedMetadata.embeddeds.forEach(subEmbedded => subEmbedded.parentEmbeddedMetadata = embeddedMetadata);\n            entityMetadata.allEmbeddeds.push(embeddedMetadata);\n            return embeddedMetadata;\n        });\n    }\n\n    /**\n     * Computes all entity metadata's computed properties, and all its sub-metadatas (relations, columns, embeds, etc).\n     */\n    protected computeEntityMetadataStep2(entityMetadata: EntityMetadata) {\n        entityMetadata.embeddeds.forEach(embedded => embedded.build(this.connection));\n        entityMetadata.embeddeds.forEach(embedded => {\n            embedded.columnsFromTree.forEach(column => column.build(this.connection));\n            embedded.relationsFromTree.forEach(relation => relation.build());\n        });\n        entityMetadata.ownColumns.forEach(column => column.build(this.connection));\n        entityMetadata.ownRelations.forEach(relation => relation.build());\n        entityMetadata.relations = entityMetadata.embeddeds.reduce((relations, embedded) => relations.concat(embedded.relationsFromTree), entityMetadata.ownRelations);\n        entityMetadata.eagerRelations = entityMetadata.relations.filter(relation => relation.isEager);\n        entityMetadata.lazyRelations = entityMetadata.relations.filter(relation => relation.isLazy);\n        entityMetadata.oneToOneRelations = entityMetadata.relations.filter(relation => relation.isOneToOne);\n        entityMetadata.oneToManyRelations = entityMetadata.relations.filter(relation => relation.isOneToMany);\n        entityMetadata.manyToOneRelations = entityMetadata.relations.filter(relation => relation.isManyToOne);\n        entityMetadata.manyToManyRelations = entityMetadata.relations.filter(relation => relation.isManyToMany);\n        entityMetadata.ownerOneToOneRelations = entityMetadata.relations.filter(relation => relation.isOneToOneOwner);\n        entityMetadata.ownerManyToManyRelations = entityMetadata.relations.filter(relation => relation.isManyToManyOwner);\n        entityMetadata.treeParentRelation = entityMetadata.relations.find(relation => relation.isTreeParent);\n        entityMetadata.treeChildrenRelation = entityMetadata.relations.find(relation => relation.isTreeChildren);\n        entityMetadata.columns = entityMetadata.embeddeds.reduce((columns, embedded) => columns.concat(embedded.columnsFromTree), entityMetadata.ownColumns);\n        entityMetadata.listeners = entityMetadata.embeddeds.reduce((columns, embedded) => columns.concat(embedded.listenersFromTree), entityMetadata.ownListeners);\n        entityMetadata.afterLoadListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes.AFTER_LOAD);\n        entityMetadata.afterInsertListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes.AFTER_INSERT);\n        entityMetadata.afterUpdateListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes.AFTER_UPDATE);\n        entityMetadata.afterRemoveListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes.AFTER_REMOVE);\n        entityMetadata.beforeInsertListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes.BEFORE_INSERT);\n        entityMetadata.beforeUpdateListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes.BEFORE_UPDATE);\n        entityMetadata.beforeRemoveListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes.BEFORE_REMOVE);\n        entityMetadata.indices = entityMetadata.embeddeds.reduce((columns, embedded) => columns.concat(embedded.indicesFromTree), entityMetadata.ownIndices);\n        entityMetadata.uniques = entityMetadata.embeddeds.reduce((columns, embedded) => columns.concat(embedded.uniquesFromTree), entityMetadata.ownUniques);\n        entityMetadata.primaryColumns = entityMetadata.columns.filter(column => column.isPrimary);\n        entityMetadata.nonVirtualColumns = entityMetadata.columns.filter(column => !column.isVirtual);\n        entityMetadata.ancestorColumns = entityMetadata.columns.filter(column => column.closureType === \"ancestor\");\n        entityMetadata.descendantColumns = entityMetadata.columns.filter(column => column.closureType === \"descendant\");\n        entityMetadata.hasMultiplePrimaryKeys = entityMetadata.primaryColumns.length > 1;\n        entityMetadata.generatedColumns = entityMetadata.columns.filter(column => column.isGenerated || column.isObjectId);\n        entityMetadata.hasUUIDGeneratedColumns = entityMetadata.columns.filter(column => column.isGenerated || column.generationStrategy === \"uuid\").length > 0;\n        entityMetadata.createDateColumn = entityMetadata.columns.find(column => column.isCreateDate);\n        entityMetadata.updateDateColumn = entityMetadata.columns.find(column => column.isUpdateDate);\n        entityMetadata.deleteDateColumn = entityMetadata.columns.find(column => column.isDeleteDate);\n        entityMetadata.versionColumn = entityMetadata.columns.find(column => column.isVersion);\n        entityMetadata.discriminatorColumn = entityMetadata.columns.find(column => column.isDiscriminator);\n        entityMetadata.treeLevelColumn = entityMetadata.columns.find(column => column.isTreeLevel);\n        entityMetadata.nestedSetLeftColumn = entityMetadata.columns.find(column => column.isNestedSetLeft);\n        entityMetadata.nestedSetRightColumn = entityMetadata.columns.find(column => column.isNestedSetRight);\n        entityMetadata.materializedPathColumn = entityMetadata.columns.find(column => column.isMaterializedPath);\n        entityMetadata.objectIdColumn = entityMetadata.columns.find(column => column.isObjectId);\n        entityMetadata.foreignKeys.forEach(foreignKey => foreignKey.build(this.connection.namingStrategy));\n        entityMetadata.propertiesMap = entityMetadata.createPropertiesMap();\n        entityMetadata.relationIds.forEach(relationId => relationId.build());\n        entityMetadata.relationCounts.forEach(relationCount => relationCount.build());\n        entityMetadata.embeddeds.forEach(embedded => {\n            embedded.relationIdsFromTree.forEach(relationId => relationId.build());\n            embedded.relationCountsFromTree.forEach(relationCount => relationCount.build());\n        });\n    }\n\n    /**\n     * Computes entity metadata's relations inverse side properties.\n     */\n    protected computeInverseProperties(entityMetadata: EntityMetadata, entityMetadatas: EntityMetadata[]) {\n        entityMetadata.relations.forEach(relation => {\n\n            // compute inverse side (related) entity metadatas for all relation metadatas\n            const inverseEntityMetadata = entityMetadatas.find(m => m.target === relation.type || (typeof relation.type === \"string\" && m.targetName === relation.type));\n            if (!inverseEntityMetadata)\n                throw new Error(\"Entity metadata for \" + entityMetadata.name + \"#\" + relation.propertyPath + \" was not found. Check if you specified a correct entity object and if it's connected in the connection options.\");\n\n            relation.inverseEntityMetadata = inverseEntityMetadata;\n            relation.inverseSidePropertyPath = relation.buildInverseSidePropertyPath();\n\n            // and compute inverse relation and mark if it has such\n            relation.inverseRelation = inverseEntityMetadata.relations.find(foundRelation => foundRelation.propertyPath === relation.inverseSidePropertyPath);\n        });\n    }\n\n    /**\n     * Creates indices for the table of single table inheritance.\n     */\n    protected createKeysForTableInheritance(entityMetadata: EntityMetadata) {\n        entityMetadata.indices.push(\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: [entityMetadata.discriminatorColumn!],\n                args: {\n                    target: entityMetadata.target,\n                    unique: false\n                }\n            }),\n        );\n    }\n\n}\n","import {RelationMetadataArgs} from \"./RelationMetadataArgs\";\nimport {ColumnMetadataArgs} from \"./ColumnMetadataArgs\";\nimport {RelationCountMetadataArgs} from \"./RelationCountMetadataArgs\";\nimport {IndexMetadataArgs} from \"./IndexMetadataArgs\";\nimport {EntityListenerMetadataArgs} from \"./EntityListenerMetadataArgs\";\nimport {TableMetadataArgs} from \"./TableMetadataArgs\";\nimport {NamingStrategyMetadataArgs} from \"./NamingStrategyMetadataArgs\";\nimport {JoinTableMetadataArgs} from \"./JoinTableMetadataArgs\";\nimport {JoinColumnMetadataArgs} from \"./JoinColumnMetadataArgs\";\nimport {EmbeddedMetadataArgs} from \"./EmbeddedMetadataArgs\";\nimport {EntitySubscriberMetadataArgs} from \"./EntitySubscriberMetadataArgs\";\nimport {RelationIdMetadataArgs} from \"./RelationIdMetadataArgs\";\nimport {InheritanceMetadataArgs} from \"./InheritanceMetadataArgs\";\nimport {DiscriminatorValueMetadataArgs} from \"./DiscriminatorValueMetadataArgs\";\nimport {EntityRepositoryMetadataArgs} from \"./EntityRepositoryMetadataArgs\";\nimport {TransactionEntityMetadataArgs} from \"./TransactionEntityMetadataArgs\";\nimport {TransactionRepositoryMetadataArgs} from \"./TransactionRepositoryMetadataArgs\";\nimport {MetadataUtils} from \"../metadata-builder/MetadataUtils\";\nimport {GeneratedMetadataArgs} from \"./GeneratedMetadataArgs\";\nimport {TreeMetadataArgs} from \"./TreeMetadataArgs\";\nimport {UniqueMetadataArgs} from \"./UniqueMetadataArgs\";\nimport {CheckMetadataArgs} from \"./CheckMetadataArgs\";\nimport {ExclusionMetadataArgs} from \"./ExclusionMetadataArgs\";\n\n/**\n * Storage all metadatas args of all available types: tables, columns, subscribers, relations, etc.\n * Each metadata args represents some specifications of what it represents.\n * MetadataArgs used to create a real Metadata objects.\n */\nexport class MetadataArgsStorage {\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    readonly tables: TableMetadataArgs[] = [];\n    readonly trees: TreeMetadataArgs[] = [];\n    readonly entityRepositories: EntityRepositoryMetadataArgs[] = [];\n    readonly transactionEntityManagers: TransactionEntityMetadataArgs[] = [];\n    readonly transactionRepositories: TransactionRepositoryMetadataArgs[] = [];\n    readonly namingStrategies: NamingStrategyMetadataArgs[] = [];\n    readonly entitySubscribers: EntitySubscriberMetadataArgs[] = [];\n    readonly indices: IndexMetadataArgs[] = [];\n    readonly uniques: UniqueMetadataArgs[] = [];\n    readonly checks: CheckMetadataArgs[] = [];\n    readonly exclusions: ExclusionMetadataArgs[] = [];\n    readonly columns: ColumnMetadataArgs[] = [];\n    readonly generations: GeneratedMetadataArgs[] = [];\n    readonly relations: RelationMetadataArgs[] = [];\n    readonly joinColumns: JoinColumnMetadataArgs[] = [];\n    readonly joinTables: JoinTableMetadataArgs[] = [];\n    readonly entityListeners: EntityListenerMetadataArgs[] = [];\n    readonly relationCounts: RelationCountMetadataArgs[] = [];\n    readonly relationIds: RelationIdMetadataArgs[] = [];\n    readonly embeddeds: EmbeddedMetadataArgs[] = [];\n    readonly inheritances: InheritanceMetadataArgs[] = [];\n    readonly discriminatorValues: DiscriminatorValueMetadataArgs[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    filterTables(target: Function|string): TableMetadataArgs[];\n    filterTables(target: (Function|string)[]): TableMetadataArgs[];\n    filterTables(target: (Function|string)|(Function|string)[]): TableMetadataArgs[] {\n        return this.filterByTarget(this.tables, target);\n    }\n\n    filterColumns(target: Function|string): ColumnMetadataArgs[];\n    filterColumns(target: (Function|string)[]): ColumnMetadataArgs[];\n    filterColumns(target: (Function|string)|(Function|string)[]): ColumnMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateProperties(this.columns, target);\n    }\n\n    findGenerated(target: Function|string, propertyName: string): GeneratedMetadataArgs|undefined;\n    findGenerated(target: (Function|string)[], propertyName: string): GeneratedMetadataArgs|undefined;\n    findGenerated(target: (Function|string)|(Function|string)[], propertyName: string): GeneratedMetadataArgs|undefined {\n        return this.generations.find(generated => {\n            return (Array.isArray(target) ? target.indexOf(generated.target) !== -1 : generated.target === target) && generated.propertyName === propertyName;\n        });\n    }\n\n    findTree(target: (Function|string)|(Function|string)[]): TreeMetadataArgs|undefined {\n        return this.trees.find(tree => {\n            return (Array.isArray(target) ? target.indexOf(tree.target) !== -1 : tree.target === target);\n        });\n    }\n\n    filterRelations(target: Function|string): RelationMetadataArgs[];\n    filterRelations(target: (Function|string)[]): RelationMetadataArgs[];\n    filterRelations(target: (Function|string)|(Function|string)[]): RelationMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateProperties(this.relations, target);\n    }\n\n    filterRelationIds(target: Function|string): RelationIdMetadataArgs[];\n    filterRelationIds(target: (Function|string)[]): RelationIdMetadataArgs[];\n    filterRelationIds(target: (Function|string)|(Function|string)[]): RelationIdMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateProperties(this.relationIds, target);\n    }\n\n    filterRelationCounts(target: Function|string): RelationCountMetadataArgs[];\n    filterRelationCounts(target: (Function|string)[]): RelationCountMetadataArgs[];\n    filterRelationCounts(target: (Function|string)|(Function|string)[]): RelationCountMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateProperties(this.relationCounts, target);\n    }\n\n    filterIndices(target: Function|string): IndexMetadataArgs[];\n    filterIndices(target: (Function|string)[]): IndexMetadataArgs[];\n    filterIndices(target: (Function|string)|(Function|string)[]): IndexMetadataArgs[] {\n        // todo: implement parent-entity overrides?\n        return this.indices.filter(index => {\n            return Array.isArray(target) ? target.indexOf(index.target) !== -1 : index.target === target;\n        });\n    }\n\n    filterUniques(target: Function|string): UniqueMetadataArgs[];\n    filterUniques(target: (Function|string)[]): UniqueMetadataArgs[];\n    filterUniques(target: (Function|string)|(Function|string)[]): UniqueMetadataArgs[] {\n        return this.uniques.filter(unique => {\n            return Array.isArray(target) ? target.indexOf(unique.target) !== -1 : unique.target === target;\n        });\n    }\n\n    filterChecks(target: Function|string): CheckMetadataArgs[];\n    filterChecks(target: (Function|string)[]): CheckMetadataArgs[];\n    filterChecks(target: (Function|string)|(Function|string)[]): CheckMetadataArgs[] {\n        return this.checks.filter(check => {\n            return Array.isArray(target) ? target.indexOf(check.target) !== -1 : check.target === target;\n        });\n    }\n\n    filterExclusions(target: Function|string): ExclusionMetadataArgs[];\n    filterExclusions(target: (Function|string)[]): ExclusionMetadataArgs[];\n    filterExclusions(target: (Function|string)|(Function|string)[]): ExclusionMetadataArgs[] {\n        return this.exclusions.filter(exclusion => {\n            return Array.isArray(target) ? target.indexOf(exclusion.target) !== -1 : exclusion.target === target;\n        });\n    }\n\n    filterListeners(target: Function|string): EntityListenerMetadataArgs[];\n    filterListeners(target: (Function|string)[]): EntityListenerMetadataArgs[];\n    filterListeners(target: (Function|string)|(Function|string)[]): EntityListenerMetadataArgs[] {\n        return this.filterByTarget(this.entityListeners, target);\n    }\n\n    filterEmbeddeds(target: Function|string): EmbeddedMetadataArgs[];\n    filterEmbeddeds(target: (Function|string)[]): EmbeddedMetadataArgs[];\n    filterEmbeddeds(target: (Function|string)|(Function|string)[]): EmbeddedMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateEmbeddedProperties(this.embeddeds, target);\n    }\n\n    findJoinTable(target: Function|string, propertyName: string): JoinTableMetadataArgs|undefined {\n        return this.joinTables.find(joinTable => {\n            return joinTable.target === target && joinTable.propertyName === propertyName;\n        });\n    }\n\n    filterJoinColumns(target: Function|string, propertyName: string): JoinColumnMetadataArgs[] {\n        // todo: implement parent-entity overrides?\n        return this.joinColumns.filter(joinColumn => {\n            return joinColumn.target === target && joinColumn.propertyName === propertyName;\n        });\n    }\n\n    filterSubscribers(target: Function|string): EntitySubscriberMetadataArgs[];\n    filterSubscribers(target: (Function|string)[]): EntitySubscriberMetadataArgs[];\n    filterSubscribers(target: (Function|string)|(Function|string)[]): EntitySubscriberMetadataArgs[] {\n        return this.filterByTarget(this.entitySubscribers, target);\n    }\n\n    filterNamingStrategies(target: Function|string): NamingStrategyMetadataArgs[];\n    filterNamingStrategies(target: (Function|string)[]): NamingStrategyMetadataArgs[];\n    filterNamingStrategies(target: (Function|string)|(Function|string)[]): NamingStrategyMetadataArgs[] {\n        return this.filterByTarget(this.namingStrategies, target);\n    }\n\n    filterTransactionEntityManagers(target: Function|string, propertyName: string): TransactionEntityMetadataArgs[] {\n        return this.transactionEntityManagers.filter(transactionEm => {\n            return (Array.isArray(target) ? target.indexOf(transactionEm.target) !== -1 : transactionEm.target === target) && transactionEm.methodName === propertyName;\n        });\n    }\n\n    filterTransactionRepository(target: Function|string, propertyName: string): TransactionRepositoryMetadataArgs[] {\n        return this.transactionRepositories.filter(transactionEm => {\n            return (Array.isArray(target) ? target.indexOf(transactionEm.target) !== -1 : transactionEm.target === target) && transactionEm.methodName === propertyName;\n        });\n    }\n\n    filterSingleTableChildren(target: Function|string): TableMetadataArgs[] {\n        return this.tables.filter(table => {\n            return table.target instanceof Function\n                && target instanceof Function\n                && MetadataUtils.isInherited(table.target, target)\n                && table.type === \"entity-child\";\n        });\n    }\n\n    findInheritanceType(target: Function|string): InheritanceMetadataArgs|undefined {\n        return this.inheritances.find(inheritance => inheritance.target === target);\n    }\n\n    findDiscriminatorValue(target: Function|string): DiscriminatorValueMetadataArgs|undefined {\n        return this.discriminatorValues.find(discriminatorValue => discriminatorValue.target === target);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Filters given array by a given target or targets.\n     */\n    protected filterByTarget<T extends { target: Function|string }>(array: T[], target: (Function|string)|(Function|string)[]): T[] {\n        return array.filter(table => {\n            return Array.isArray(target) ? target.indexOf(table.target) !== -1 : table.target === target;\n        });\n    }\n\n    /**\n     * Filters given array by a given target or targets and prevents duplicate property names.\n     */\n    protected filterByTargetAndWithoutDuplicateProperties<T extends { target: Function|string, propertyName: string }>(array: T[], target: (Function|string)|(Function|string)[]): T[] {\n        const newArray: T[] = [];\n        array.forEach(item => {\n            const sameTarget = Array.isArray(target) ? target.indexOf(item.target) !== -1 : item.target === target;\n            if (sameTarget) {\n                if (!newArray.find(newItem => newItem.propertyName === item.propertyName))\n                    newArray.push(item);\n            }\n        });\n        return newArray;\n    }\n\n    /**\n     * Filters given array by a given target or targets and prevents duplicate embedded property names.\n     */\n    protected filterByTargetAndWithoutDuplicateEmbeddedProperties<T extends EmbeddedMetadataArgs>(array: T[], target: (Function|string)|(Function|string)[]): T[] {\n        const newArray: T[] = [];\n        array.forEach(item => {\n            const sameTarget = Array.isArray(target) ? target.indexOf(item.target) !== -1 : item.target === target;\n            if (sameTarget) {\n                const isDuplicateEmbeddedProperty = newArray.find((newItem: EmbeddedMetadataArgs): boolean =>\n                    newItem.prefix === item.prefix && newItem.propertyName === item.propertyName\n                );\n                if (!isDuplicateEmbeddedProperty)\n                    newArray.push(item);\n            }\n        });\n        return newArray;\n    }\n\n}\n","import {EntitySchema} from \"./EntitySchema\";\nimport {MetadataArgsStorage} from \"../metadata-args/MetadataArgsStorage\";\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\nimport {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\nimport {RelationMetadataArgs} from \"../metadata-args/RelationMetadataArgs\";\nimport {JoinColumnMetadataArgs} from \"../metadata-args/JoinColumnMetadataArgs\";\nimport {JoinTableMetadataArgs} from \"../metadata-args/JoinTableMetadataArgs\";\nimport {JoinTableOptions} from \"../decorator/options/JoinTableOptions\";\nimport {JoinTableMultipleColumnsOptions} from \"../decorator/options/JoinTableMultipleColumnsOptions\";\nimport {ColumnMode} from \"../metadata-args/types/ColumnMode\";\nimport {GeneratedMetadataArgs} from \"../metadata-args/GeneratedMetadataArgs\";\nimport {UniqueMetadataArgs} from \"../metadata-args/UniqueMetadataArgs\";\nimport {CheckMetadataArgs} from \"../metadata-args/CheckMetadataArgs\";\nimport {ExclusionMetadataArgs} from \"../metadata-args/ExclusionMetadataArgs\";\n\n/**\n * Transforms entity schema into metadata args storage.\n * The result will be just like entities read from decorators.\n */\nexport class EntitySchemaTransformer {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Transforms entity schema into new metadata args storage object.\n     */\n    transform(schemas: EntitySchema<any>[]): MetadataArgsStorage {\n        const metadataArgsStorage = new MetadataArgsStorage();\n\n        schemas.forEach(entitySchema => {\n            const options = entitySchema.options;\n\n            // add table metadata args from the schema\n            const tableMetadata: TableMetadataArgs = {\n                target: options.target || options.name,\n                name: options.tableName,\n                database: options.database,\n                schema: options.schema,\n                type: options.type || \"regular\",\n                orderBy: options.orderBy,\n                synchronize: options.synchronize,\n                expression: options.expression\n            };\n            metadataArgsStorage.tables.push(tableMetadata);\n\n            // add columns metadata args from the schema\n            Object.keys(options.columns).forEach(columnName => {\n                const column = options.columns[columnName]!;\n                let mode: ColumnMode = \"regular\";\n                if (column.createDate)\n                    mode = \"createDate\";\n                if (column.updateDate)\n                    mode = \"updateDate\";\n                if (column.deleteDate)\n                    mode = \"deleteDate\";\n                if (column.version)\n                    mode = \"version\";\n                if (column.treeChildrenCount)\n                    mode = \"treeChildrenCount\";\n                if (column.treeLevel)\n                    mode = \"treeLevel\";\n                if (column.objectId)\n                    mode = \"objectId\";\n\n                const columnAgrs: ColumnMetadataArgs = {\n                    target: options.target || options.name,\n                    mode: mode,\n                    propertyName: columnName,\n                    options: {\n                        type: column.type,\n                        name: column.objectId ? \"_id\" : column.name,\n                        length: column.length,\n                        width: column.width,\n                        nullable: column.nullable,\n                        readonly: column.readonly,\n                        update: column.update,\n                        select: column.select,\n                        insert: column.insert,\n                        primary: column.primary,\n                        unique: column.unique,\n                        comment: column.comment,\n                        default: column.default,\n                        onUpdate: column.onUpdate,\n                        precision: column.precision,\n                        scale: column.scale,\n                        zerofill: column.zerofill,\n                        unsigned: column.unsigned,\n                        charset: column.charset,\n                        collation: column.collation,\n                        enum: column.enum,\n                        asExpression: column.asExpression,\n                        generatedType: column.generatedType,\n                        hstoreType: column.hstoreType,\n                        array: column.array,\n                        transformer: column.transformer,\n                        spatialFeatureType: column.spatialFeatureType,\n                        srid: column.srid\n                    }\n                };\n                metadataArgsStorage.columns.push(columnAgrs);\n\n                if (column.generated) {\n                    const generationArgs: GeneratedMetadataArgs = {\n                        target: options.target || options.name,\n                        propertyName: columnName,\n                        strategy: typeof column.generated === \"string\" ? column.generated : \"increment\"\n                    };\n                    metadataArgsStorage.generations.push(generationArgs);\n                }\n\n                if (column.unique)\n                    metadataArgsStorage.uniques.push({ target: options.target || options.name, columns: [columnName] });\n            });\n\n            // add relation metadata args from the schema\n            if (options.relations) {\n                Object.keys(options.relations).forEach(relationName => {\n                    const relationSchema = options.relations![relationName]!;\n                    const relation: RelationMetadataArgs = {\n                        target: options.target || options.name,\n                        propertyName: relationName,\n                        relationType: relationSchema.type,\n                        isLazy: relationSchema.lazy || false,\n                        type: relationSchema.target,\n                        inverseSideProperty: relationSchema.inverseSide,\n                        isTreeParent: relationSchema.treeParent,\n                        isTreeChildren: relationSchema.treeChildren,\n                        options: {\n                            eager: relationSchema.eager || false,\n                            cascade: relationSchema.cascade,\n                            nullable: relationSchema.nullable,\n                            onDelete: relationSchema.onDelete,\n                            onUpdate: relationSchema.onUpdate,\n                            deferrable: relationSchema.deferrable,\n                            primary: relationSchema.primary,\n                            persistence: relationSchema.persistence\n                        }\n                    };\n\n                    metadataArgsStorage.relations.push(relation);\n\n                    // add join column\n                    if (relationSchema.joinColumn) {\n                        if (typeof relationSchema.joinColumn === \"boolean\") {\n                            const joinColumn: JoinColumnMetadataArgs = {\n                                target: options.target || options.name,\n                                propertyName: relationName\n                            };\n                            metadataArgsStorage.joinColumns.push(joinColumn);\n                        } else {\n                            const joinColumnsOptions = Array.isArray(relationSchema.joinColumn) ? relationSchema.joinColumn : [relationSchema.joinColumn];\n\n                            for (const joinColumnOption of joinColumnsOptions) {\n                                const joinColumn: JoinColumnMetadataArgs = {\n                                    target: options.target || options.name,\n                                    propertyName: relationName,\n                                    name: joinColumnOption.name,\n                                    referencedColumnName: joinColumnOption.referencedColumnName\n                                };\n                                metadataArgsStorage.joinColumns.push(joinColumn);\n                            }\n                        }\n                    }\n\n                    // add join table\n                    if (relationSchema.joinTable) {\n                        if (typeof relationSchema.joinTable === \"boolean\") {\n                            const joinTable: JoinTableMetadataArgs = {\n                                target: options.target || options.name,\n                                propertyName: relationName\n                            };\n                            metadataArgsStorage.joinTables.push(joinTable);\n                        } else {\n                            const joinTable: JoinTableMetadataArgs = {\n                                target: options.target || options.name,\n                                propertyName: relationName,\n                                name: relationSchema.joinTable.name,\n                                database: relationSchema.joinTable.database,\n                                schema: relationSchema.joinTable.schema,\n                                joinColumns: ((relationSchema.joinTable as JoinTableOptions).joinColumn ? [(relationSchema.joinTable as JoinTableOptions).joinColumn!] : (relationSchema.joinTable as JoinTableMultipleColumnsOptions).joinColumns) as any,\n                                inverseJoinColumns: ((relationSchema.joinTable as JoinTableOptions).inverseJoinColumn ? [(relationSchema.joinTable as JoinTableOptions).inverseJoinColumn!] : (relationSchema.joinTable as JoinTableMultipleColumnsOptions).inverseJoinColumns) as any,\n                            };\n                            metadataArgsStorage.joinTables.push(joinTable);\n                        }\n                    }\n                });\n            }\n\n            // add index metadata args from the schema\n            if (options.indices) {\n                options.indices.forEach(index => {\n                    const indexAgrs: IndexMetadataArgs = {\n                        target: options.target || options.name,\n                        name: index.name,\n                        unique: index.unique === true ? true : false,\n                        spatial: index.spatial === true ? true : false,\n                        fulltext: index.fulltext === true ? true : false,\n                        parser: index.parser,\n                        synchronize: index.synchronize === false ? false : true,\n                        where: index.where,\n                        sparse: index.sparse,\n                        columns: index.columns\n                    };\n                    metadataArgsStorage.indices.push(indexAgrs);\n                });\n            }\n\n            // add unique metadata args from the schema\n            if (options.uniques) {\n                options.uniques.forEach(unique => {\n                    const uniqueAgrs: UniqueMetadataArgs = {\n                        target: options.target || options.name,\n                        name: unique.name,\n                        columns: unique.columns\n                    };\n                    metadataArgsStorage.uniques.push(uniqueAgrs);\n                });\n            }\n\n            // add check metadata args from the schema\n            if (options.checks) {\n                options.checks.forEach(check => {\n                    const checkAgrs: CheckMetadataArgs = {\n                        target: options.target || options.name,\n                        name: check.name,\n                        expression: check.expression\n                    };\n                    metadataArgsStorage.checks.push(checkAgrs);\n                });\n            }\n\n            // add exclusion metadata args from the schema\n            if (options.exclusions) {\n                options.exclusions.forEach(exclusion => {\n                    const exclusionArgs: ExclusionMetadataArgs = {\n                        target: options.target || options.name,\n                        name: exclusion.name,\n                        expression: exclusion.expression\n                    };\n                    metadataArgsStorage.exclusions.push(exclusionArgs);\n                });\n            }\n\n        });\n\n        return metadataArgsStorage;\n    }\n}\n","import {importClassesFromDirectories} from \"../util/DirectoryExportedClassesLoader\";\nimport {OrmUtils} from \"../util/OrmUtils\";\nimport {getFromContainer} from \"../container\";\nimport {MigrationInterface} from \"../migration/MigrationInterface\";\nimport {getMetadataArgsStorage} from \"../index\";\nimport {EntityMetadataBuilder} from \"../metadata-builder/EntityMetadataBuilder\";\nimport {EntitySchemaTransformer} from \"../entity-schema/EntitySchemaTransformer\";\nimport {Connection} from \"./Connection\";\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {EntitySubscriberInterface} from \"../subscriber/EntitySubscriberInterface\";\n\n/**\n * Builds migration instances, subscriber instances and entity metadatas for the given classes.\n */\nexport class ConnectionMetadataBuilder {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds migration instances for the given classes or directories.\n     */\n    buildMigrations(migrations: (Function|string)[]): MigrationInterface[] {\n        const [migrationClasses, migrationDirectories] = OrmUtils.splitClassesAndStrings(migrations);\n        const allMigrationClasses = [...migrationClasses, ...importClassesFromDirectories(this.connection.logger, migrationDirectories)];\n        return allMigrationClasses.map(migrationClass => getFromContainer<MigrationInterface>(migrationClass));\n    }\n\n    /**\n     * Builds subscriber instances for the given classes or directories.\n     */\n    buildSubscribers(subscribers: (Function|string)[]): EntitySubscriberInterface<any>[] {\n        const [subscriberClasses, subscriberDirectories] = OrmUtils.splitClassesAndStrings(subscribers || []);\n        const allSubscriberClasses = [...subscriberClasses, ...importClassesFromDirectories(this.connection.logger, subscriberDirectories)];\n        return getMetadataArgsStorage()\n            .filterSubscribers(allSubscriberClasses)\n            .map(metadata => getFromContainer<EntitySubscriberInterface<any>>(metadata.target));\n    }\n\n    /**\n     * Builds entity metadatas for the given classes or directories.\n     */\n    buildEntityMetadatas(entities: (Function|EntitySchema<any>|string)[]): EntityMetadata[] {\n        // todo: instead we need to merge multiple metadata args storages\n\n        const [entityClassesOrSchemas, entityDirectories] = OrmUtils.splitClassesAndStrings(entities || []);\n        const entityClasses: Function[] = entityClassesOrSchemas.filter(entityClass => (entityClass instanceof EntitySchema) === false) as any;\n        const entitySchemas: EntitySchema<any>[] = entityClassesOrSchemas.filter(entityClass => entityClass instanceof EntitySchema) as any;\n\n        const allEntityClasses = [...entityClasses, ...importClassesFromDirectories(this.connection.logger, entityDirectories)];\n        allEntityClasses.forEach(entityClass => { // if we have entity schemas loaded from directories\n            if (entityClass instanceof EntitySchema) {\n                entitySchemas.push(entityClass);\n                allEntityClasses.slice(allEntityClasses.indexOf(entityClass), 1);\n            }\n        });\n        const decoratorEntityMetadatas = new EntityMetadataBuilder(this.connection, getMetadataArgsStorage()).build(allEntityClasses);\n\n        const metadataArgsStorageFromSchema = new EntitySchemaTransformer().transform(entitySchemas);\n        const schemaEntityMetadatas = new EntityMetadataBuilder(this.connection, metadataArgsStorageFromSchema).build();\n\n        return [...decoratorEntityMetadatas, ...schemaEntityMetadatas];\n    }\n\n}","import {LoggerOptions} from \"./LoggerOptions\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {Logger} from \"./Logger\";\n\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger uses console to log events and does not use syntax highlighting.\n */\nexport class SimpleConsoleLogger implements Logger {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private options?: LoggerOptions) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery(query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (this.options === \"all\" || this.options === true || (Array.isArray(this.options) && this.options.indexOf(\"query\") !== -1)) {\n            const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n            console.log(\"query\" + \": \" + sql);\n        }\n    }\n\n    /**\n     * Logs query that is failed.\n     */\n    logQueryError(error: string, query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (this.options === \"all\" || this.options === true || (Array.isArray(this.options) && this.options.indexOf(\"error\") !== -1)) {\n            const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n            console.log(`query failed: ` + sql);\n            console.log(`error:`, error);\n        }\n    }\n\n    /**\n     * Logs query that is slow.\n     */\n    logQuerySlow(time: number, query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n        console.log(`query is slow: ` + sql);\n        console.log(`execution time: ` + time);\n    }\n\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild(message: string, queryRunner?: QueryRunner) {\n        if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"schema\") !== -1)) {\n            console.log(message);\n        }\n    }\n\n    /**\n     * Logs events from the migrations run process.\n     */\n    logMigration(message: string, queryRunner?: QueryRunner) {\n        console.log(message);\n    }\n\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    log(level: \"log\"|\"info\"|\"warn\", message: any, queryRunner?: QueryRunner) {\n        switch (level) {\n            case \"log\":\n                if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"log\") !== -1))\n                    console.log(message);\n                break;\n            case \"info\":\n                if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"info\") !== -1))\n                    console.info(message);\n                break;\n            case \"warn\":\n                if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"warn\") !== -1))\n                    console.warn(message);\n                break;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Converts parameters to a string.\n     * Sometimes parameters can have circular objects and therefor we are handle this case too.\n     */\n    protected stringifyParams(parameters: any[]) {\n        try {\n            return JSON.stringify(parameters);\n\n        } catch (error) { // most probably circular objects in parameters\n            return parameters;\n        }\n    }\n\n}\n","import {LoggerOptions} from \"./LoggerOptions\";\nimport {PlatformTools} from \"../platform/PlatformTools\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {Logger} from \"./Logger\";\n\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger uses console to log events and use syntax highlighting.\n */\nexport class AdvancedConsoleLogger implements Logger {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private options?: LoggerOptions) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery(query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (this.options === \"all\" || this.options === true || (Array.isArray(this.options) && this.options.indexOf(\"query\") !== -1)) {\n            const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n            PlatformTools.logInfo(\"query:\", PlatformTools.highlightSql(sql));\n        }\n    }\n\n    /**\n     * Logs query that is failed.\n     */\n    logQueryError(error: string, query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (this.options === \"all\" || this.options === true || (Array.isArray(this.options) && this.options.indexOf(\"error\") !== -1)) {\n            const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n            PlatformTools.logError(`query failed:`, PlatformTools.highlightSql(sql));\n            PlatformTools.logError(`error:`, error);\n        }\n    }\n\n    /**\n     * Logs query that is slow.\n     */\n    logQuerySlow(time: number, query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n        PlatformTools.logWarn(`query is slow:`, PlatformTools.highlightSql(sql));\n        PlatformTools.logWarn(`execution time:`, time);\n    }\n\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild(message: string, queryRunner?: QueryRunner) {\n        if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"schema\") !== -1)) {\n            PlatformTools.log(message);\n        }\n    }\n\n    /**\n     * Logs events from the migration run process.\n     */\n    logMigration(message: string, queryRunner?: QueryRunner) {\n        PlatformTools.log(message);\n    }\n\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    log(level: \"log\"|\"info\"|\"warn\", message: any, queryRunner?: QueryRunner) {\n        switch (level) {\n            case \"log\":\n                if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"log\") !== -1))\n                    PlatformTools.log(message);\n                break;\n            case \"info\":\n                if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"info\") !== -1))\n                    PlatformTools.logInfo(\"INFO:\", message);\n                break;\n            case \"warn\":\n                if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"warn\") !== -1))\n                    console.warn(PlatformTools.warn(message));\n                break;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Converts parameters to a string.\n     * Sometimes parameters can have circular objects and therefor we are handle this case too.\n     */\n    protected stringifyParams(parameters: any[]) {\n        try {\n            return JSON.stringify(parameters);\n\n        } catch (error) { // most probably circular objects in parameters\n            return parameters;\n        }\n    }\n\n}\n","/**\n * Performs logging of the events in TypeORM.\n * This version of logger logs everything into ormlogs.log file.\n */\nexport class DummyLogger {\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery() {\n        throw new Error('This logger is not applicable in a browser context');\n    }\n\n    /**\n     * Logs query that is failed.\n     */\n    logQueryError() {\n        throw new Error('This logger is not applicable in a browser context');\n    }\n\n    /**\n     * Logs query that is slow.\n     */\n    logQuerySlow() {\n        throw new Error('This logger is not applicable in a browser context');\n    }\n\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild() {\n        throw new Error('This logger is not applicable in a browser context');\n    }\n\n    /**\n     * Logs events from the migrations run process.\n     */\n    logMigration() {\n        throw new Error('This logger is not applicable in a browser context');\n    }\n\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    log() {\n        throw new Error('This logger is not applicable in a browser context');\n    }\n}\n\nexport class FileLogger extends DummyLogger {}\n","import debug from \"debug\";\nimport {Logger} from \"./Logger\";\nimport {QueryRunner} from \"../\";\nimport {PlatformTools} from \"../platform/PlatformTools\";\n\n/**\n * Performs logging of the events in TypeORM via debug library.\n */\nexport class DebugLogger implements Logger {\n    private debugQueryLog = debug(\"typeorm:query:log\");\n    private debugQueryError = debug(\"typeorm:query:error\");\n    private debugQuerySlow = debug(\"typeorm:query:slow\");\n    private debugSchemaBuild = debug(\"typeorm:schema\");\n    private debugMigration = debug(\"typeorm:migration\");\n\n    private debugLog = debug(\"typeorm:log\");\n    private debugInfo = debug(\"typeorm:info\");\n    private debugWarn = debug(\"typeorm:warn\");\n\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery(query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (this.debugQueryLog.enabled) {\n            this.debugQueryLog(PlatformTools.highlightSql(query) + \";\");\n            if (parameters && parameters.length) {\n                this.debugQueryLog(\"parameters:\", parameters);\n            }\n        }\n    }\n\n    /**\n     * Logs query that failed.\n     */\n    logQueryError(error: string, query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (this.debugQueryError.enabled) {\n            this.debugQueryError(PlatformTools.highlightSql(query) + \";\");\n            if (parameters && parameters.length) {\n                this.debugQueryError(\"parameters:\", parameters);\n            }\n            this.debugQueryError(\"error: \", error);\n        }\n    }\n\n    /**\n     * Logs query that is slow.\n     */\n    logQuerySlow(time: number, query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (this.debugQuerySlow.enabled) {\n            this.debugQuerySlow(PlatformTools.highlightSql(query) + \";\");\n            if (parameters && parameters.length) {\n                this.debugQuerySlow(\"parameters:\", parameters);\n            }\n            this.debugQuerySlow(\"execution time:\", time);\n        }\n    }\n\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild(message: string, queryRunner?: QueryRunner) {\n        if (this.debugSchemaBuild.enabled) {\n            this.debugSchemaBuild(message);\n        }\n    }\n\n    /**\n     * Logs events from the migration run process.\n     */\n    logMigration(message: string, queryRunner?: QueryRunner) {\n        if (this.debugMigration.enabled) {\n            this.debugMigration(message);\n        }\n    }\n\n    /**\n     * Perform logging using given logger.\n     * Log has its own level and message.\n     */\n    log(level: \"log\" | \"info\" | \"warn\", message: any, queryRunner?: QueryRunner) {\n        switch (level) {\n            case \"log\":\n                if (this.debugLog.enabled) {\n                    this.debugLog(message);\n                }\n                break;\n            case \"info\":\n                if (this.debugInfo.enabled) {\n                    this.debugInfo(message);\n                }\n                break;\n            case \"warn\":\n                if (this.debugWarn.enabled) {\n                    this.debugWarn(message);\n                }\n                break;\n        }\n    }\n}\n","import {Logger} from \"./Logger\";\nimport {LoggerOptions} from \"./LoggerOptions\";\nimport {SimpleConsoleLogger} from \"./SimpleConsoleLogger\";\nimport {AdvancedConsoleLogger} from \"./AdvancedConsoleLogger\";\nimport {FileLogger} from \"./FileLogger\";\nimport {DebugLogger} from \"./DebugLogger\";\n\n/**\n * Helps to create logger instances.\n */\nexport class LoggerFactory {\n\n    /**\n     * Creates a new logger depend on a given connection's driver.\n     */\n    create(logger?: \"advanced-console\"|\"simple-console\"|\"file\"|\"debug\"|Logger, options?: LoggerOptions): Logger {\n        if (logger instanceof Object)\n            return logger as Logger;\n\n        if (logger) {\n            switch (logger) {\n                case \"simple-console\":\n                    return new SimpleConsoleLogger(options);\n\n                case \"file\":\n                    return new FileLogger(options);\n\n                case \"advanced-console\":\n                    return new AdvancedConsoleLogger(options);\n\n                case \"debug\":\n                    return new DebugLogger();\n            }\n        }\n\n        return new AdvancedConsoleLogger(options);\n    }\n\n}\n","import {QueryResultCache} from \"./QueryResultCache\";\nimport {QueryResultCacheOptions} from \"./QueryResultCacheOptions\";\nimport {PlatformTools} from \"../platform/PlatformTools\";\nimport {Connection} from \"../connection/Connection\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\n\n/**\n * Caches query result into Redis database.\n */\nexport class RedisQueryResultCache implements QueryResultCache {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Redis module instance loaded dynamically.\n     */\n    protected redis: any;\n\n    /**\n     * Connected redis client.\n     */\n    protected client: any;\n\n    /**\n     * Type of the Redis Client (redis or ioredis).\n     */\n    protected clientType: \"redis\" | \"ioredis\" | \"ioredis/cluster\";\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection, clientType: \"redis\" | \"ioredis\" | \"ioredis/cluster\") {\n        this.clientType = clientType;\n        this.redis = this.loadRedis();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a connection with given cache provider.\n     */\n\n\n    async connect(): Promise<void> {\n        const cacheOptions: any = this.connection.options.cache;\n        if (this.clientType === \"redis\") {\n            if (cacheOptions && cacheOptions.options) {\n                this.client = this.redis.createClient(cacheOptions.options);\n            } else {\n                this.client = this.redis.createClient();\n            }\n        } else if (this.clientType === \"ioredis\") {\n            if (cacheOptions && cacheOptions.options) {\n                this.client = new this.redis(cacheOptions.options);\n            } else {\n                this.client = new this.redis();\n            }\n        } else if (this.clientType === \"ioredis/cluster\") {\n            if (cacheOptions && cacheOptions.options && Array.isArray(cacheOptions.options)) {\n                this.client = new this.redis.Cluster(cacheOptions.options);\n            } else if (cacheOptions && cacheOptions.options && cacheOptions.options.startupNodes) {\n                this.client = new this.redis.Cluster(cacheOptions.options.startupNodes, cacheOptions.options.options);\n            } else {\n                throw new Error(`options.startupNodes required for ${this.clientType}.`);\n            }\n        }\n    }\n\n    /**\n     * Disconnects the connection\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.client.quit((err: any, result: any) => {\n                if (err) return fail(err);\n                ok();\n                this.client = undefined;\n            });\n        });\n    }\n\n    /**\n     * Creates table for storing cache if it does not exist yet.\n     */\n    async synchronize(queryRunner: QueryRunner): Promise<void> {\n    }\n\n    /**\n     * Caches given query result.\n     * Returns cache result if found.\n     * Returns undefined if result is not cached.\n     */\n    getFromCache(options: QueryResultCacheOptions, queryRunner?: QueryRunner): Promise<QueryResultCacheOptions|undefined> {\n        return new Promise<QueryResultCacheOptions|undefined>((ok, fail) => {\n\n            if (options.identifier) {\n                this.client.get(options.identifier, (err: any, result: any) => {\n                    if (err) return fail(err);\n                    ok(JSON.parse(result));\n                });\n\n            } else if (options.query) {\n                this.client.get(options.query, (err: any, result: any) => {\n                    if (err) return fail(err);\n                    ok(JSON.parse(result));\n                });\n\n            } else {\n                ok(undefined);\n            }\n        });\n    }\n\n    /**\n     * Checks if cache is expired or not.\n     */\n    isExpired(savedCache: QueryResultCacheOptions): boolean {\n        return (savedCache.time! + savedCache.duration) < new Date().getTime();\n    }\n\n    /**\n     * Stores given query result in the cache.\n     */\n    async storeInCache(options: QueryResultCacheOptions, savedCache: QueryResultCacheOptions, queryRunner?: QueryRunner): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            if (options.identifier) {\n                this.client.set(options.identifier, JSON.stringify(options), \"PX\", options.duration, (err: any, result: any) => {\n                    if (err) return fail(err);\n                    ok();\n                });\n\n            } else if (options.query) {\n                this.client.set(options.query, JSON.stringify(options), \"PX\", options.duration, (err: any, result: any) => {\n                    if (err) return fail(err);\n                    ok();\n                });\n            }\n        });\n    }\n\n    /**\n     * Clears everything stored in the cache.\n     */\n    async clear(queryRunner?: QueryRunner): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.client.flushdb((err: any, result: any) => {\n                if (err) return fail(err);\n                ok();\n            });\n        });\n    }\n\n    /**\n     * Removes all cached results by given identifiers from cache.\n     */\n    async remove(identifiers: string[], queryRunner?: QueryRunner): Promise<void> {\n        await Promise.all(identifiers.map(identifier => {\n            return this.deleteKey(identifier);\n        }));\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Removes a single key from redis database.\n     */\n    protected deleteKey(key: string): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.client.del(key, (err: any, result: any) => {\n                if (err) return fail(err);\n                ok();\n            });\n        });\n    }\n\n    /**\n     * Loads redis dependency.\n     */\n    protected loadRedis(): any {\n        try {\n            if (this.clientType === \"ioredis/cluster\") {\n                return PlatformTools.load(\"ioredis\");\n            } else {\n                return PlatformTools.load(this.clientType);\n            }\n        } catch (e) {\n            throw new Error(`Cannot use cache because ${this.clientType} is not installed. Please run \"npm i ${this.clientType} --save\".`);\n        }\n    }\n\n\n}\n","import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {Connection} from \"../connection/Connection\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {PostgresConnectionOptions} from \"../driver/postgres/PostgresConnectionOptions\";\nimport {MssqlParameter} from \"../driver/sqlserver/MssqlParameter\";\nimport {SqlServerConnectionOptions} from \"../driver/sqlserver/SqlServerConnectionOptions\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {Table} from \"../schema-builder/table/Table\";\nimport {QueryResultCache} from \"./QueryResultCache\";\nimport {QueryResultCacheOptions} from \"./QueryResultCacheOptions\";\n\n/**\n * Caches query result into current database, into separate table called \"query-result-cache\".\n */\nexport class DbQueryResultCache implements QueryResultCache {\n\n    // -------------------------------------------------------------------------\n    // Private properties\n    // -------------------------------------------------------------------------\n\n    private queryResultCacheTable: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n\n        const options = <SqlServerConnectionOptions|PostgresConnectionOptions>this.connection.driver.options;\n        const cacheOptions = typeof this.connection.options.cache === \"object\" ? this.connection.options.cache : {};\n        const cacheTableName = cacheOptions.tableName || \"query-result-cache\";\n\n        this.queryResultCacheTable = this.connection.driver.buildTableName(cacheTableName, options.schema, options.database);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a connection with given cache provider.\n     */\n    async connect(): Promise<void> {\n    }\n\n    /**\n     * Disconnects with given cache provider.\n     */\n    async disconnect(): Promise<void> {\n    }\n\n    /**\n     * Creates table for storing cache if it does not exist yet.\n     */\n    async synchronize(queryRunner?: QueryRunner): Promise<void> {\n        queryRunner = this.getQueryRunner(queryRunner);\n        const driver = this.connection.driver;\n        const tableExist = await queryRunner.hasTable(this.queryResultCacheTable); // todo: table name should be configurable\n        if (tableExist)\n            return;\n\n        await queryRunner.createTable(new Table(\n            {\n                name: this.queryResultCacheTable,\n                columns: [\n                    {\n                        name: \"id\",\n                        isPrimary: true,\n                        isNullable: false,\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheId}),\n                        generationStrategy: \"increment\",\n                        isGenerated: true\n                    },\n                    {\n                        name: \"identifier\",\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheIdentifier}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"time\",\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheTime}),\n                        isPrimary: false,\n                        isNullable: false\n                    },\n                    {\n                        name: \"duration\",\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheDuration}),\n                        isPrimary: false,\n                        isNullable: false\n                    },\n                    {\n                        name: \"query\",\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheQuery}),\n                        isPrimary: false,\n                        isNullable: false\n                    },\n                    {\n                        name: \"result\",\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheResult}),\n                        isNullable: false\n                    },\n                ]\n            },\n        ));\n    }\n\n    /**\n     * Caches given query result.\n     * Returns cache result if found.\n     * Returns undefined if result is not cached.\n     */\n    getFromCache(options: QueryResultCacheOptions, queryRunner?: QueryRunner): Promise<QueryResultCacheOptions|undefined> {\n        queryRunner = this.getQueryRunner(queryRunner);\n        const qb = this.connection\n            .createQueryBuilder(queryRunner)\n            .select()\n            .from(this.queryResultCacheTable, \"cache\");\n\n        if (options.identifier) {\n            return qb\n                .where(`${qb.escape(\"cache\")}.${qb.escape(\"identifier\")} = :identifier`)\n                .setParameters({ identifier: this.connection.driver instanceof SqlServerDriver ? new MssqlParameter(options.identifier, \"nvarchar\") : options.identifier })\n                .getRawOne();\n\n        } else if (options.query) {\n            if (this.connection.driver instanceof OracleDriver) {\n                return qb\n                    .where(`dbms_lob.compare(${qb.escape(\"cache\")}.${qb.escape(\"query\")}, :query) = 0`, { query: options.query })\n                    .getRawOne();\n            }\n\n            return qb\n                .where(`${qb.escape(\"cache\")}.${qb.escape(\"query\")} = :query`)\n                .setParameters({ query: this.connection.driver instanceof SqlServerDriver ? new MssqlParameter(options.query, \"nvarchar\") : options.query })\n                .getRawOne();\n        }\n\n        return Promise.resolve(undefined);\n    }\n\n    /**\n     * Checks if cache is expired or not.\n     */\n    isExpired(savedCache: QueryResultCacheOptions): boolean {\n        const duration = typeof savedCache.duration === \"string\" ? parseInt(savedCache.duration) : savedCache.duration;\n        return ((typeof savedCache.time === \"string\" ? parseInt(savedCache.time as any) : savedCache.time)! + duration) < new Date().getTime();\n    }\n\n    /**\n     * Stores given query result in the cache.\n     */\n    async storeInCache(options: QueryResultCacheOptions, savedCache: QueryResultCacheOptions|undefined, queryRunner?: QueryRunner): Promise<void> {\n        queryRunner = this.getQueryRunner(queryRunner);\n\n        let insertedValues: ObjectLiteral = options;\n        if (this.connection.driver instanceof SqlServerDriver) { // todo: bad abstraction, re-implement this part, probably better if we create an entity metadata for cache table\n            insertedValues = {\n                identifier: new MssqlParameter(options.identifier, \"nvarchar\"),\n                time: new MssqlParameter(options.time, \"bigint\"),\n                duration: new MssqlParameter(options.duration, \"int\"),\n                query: new MssqlParameter(options.query, \"nvarchar\"),\n                result: new MssqlParameter(options.result, \"nvarchar\"),\n            };\n        }\n\n        if (savedCache && savedCache.identifier) { // if exist then update\n            const qb = queryRunner.manager\n                .createQueryBuilder()\n                .update(this.queryResultCacheTable)\n                .set(insertedValues);\n\n            qb.where(`${qb.escape(\"identifier\")} = :condition`, { condition: insertedValues.identifier });\n            await qb.execute();\n\n        } else if (savedCache && savedCache.query) { // if exist then update\n            const qb = queryRunner.manager\n                .createQueryBuilder()\n                .update(this.queryResultCacheTable)\n                .set(insertedValues);\n\n            if (this.connection.driver instanceof OracleDriver) {\n                qb.where(`dbms_lob.compare(\"query\", :condition) = 0`, { condition: insertedValues.query });\n\n            } else {\n                qb.where(`${qb.escape(\"query\")} = :condition`, { condition: insertedValues.query });\n            }\n\n            await qb.execute();\n\n        } else { // otherwise insert\n            await queryRunner.manager\n                .createQueryBuilder()\n                .insert()\n                .into(this.queryResultCacheTable)\n                .values(insertedValues)\n                .execute();\n        }\n    }\n\n    /**\n     * Clears everything stored in the cache.\n     */\n    async clear(queryRunner: QueryRunner): Promise<void> {\n        return this.getQueryRunner(queryRunner).clearTable(this.queryResultCacheTable);\n    }\n\n    /**\n     * Removes all cached results by given identifiers from cache.\n     */\n    async remove(identifiers: string[], queryRunner?: QueryRunner): Promise<void> {\n        await Promise.all(identifiers.map(identifier => {\n            const qb = this.getQueryRunner(queryRunner).manager.createQueryBuilder();\n            return qb.delete()\n                .from(this.queryResultCacheTable)\n                .where(`${qb.escape(\"identifier\")} = :identifier`, {identifier})\n                .execute();\n        }));\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets a query runner to work with.\n     */\n    protected getQueryRunner(queryRunner: QueryRunner|undefined): QueryRunner {\n        if (queryRunner)\n            return queryRunner;\n\n        return this.connection.createQueryRunner();\n    }\n\n}\n","import {RedisQueryResultCache} from \"./RedisQueryResultCache\";\nimport {DbQueryResultCache} from \"./DbQueryResultCache\";\nimport {QueryResultCache} from \"./QueryResultCache\";\nimport {Connection} from \"../connection/Connection\";\n\n/**\n * Caches query result into Redis database.\n */\nexport class QueryResultCacheFactory {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query result cache based on connection options.\n     */\n    create(): QueryResultCache {\n        if (!this.connection.options.cache)\n            throw new Error(`To use cache you need to enable it in connection options by setting cache: true or providing some caching options. Example: { host: ..., username: ..., cache: true }`);\n\n        const cache: any = this.connection.options.cache;\n\n        if (cache.provider && typeof cache.provider === \"function\") {\n            return cache.provider(this.connection);\n        }\n\n        if (cache.type === \"redis\" || cache.type === \"ioredis\" || cache.type === \"ioredis/cluster\") {\n            return new RedisQueryResultCache(this.connection, cache.type);\n        } else {\n            return new DbQueryResultCache(this.connection);\n        }\n    }\n\n}\n","import {Connection, ObjectLiteral, QueryRunner} from \"../\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\n\n/**\n * Wraps entities and creates getters/setters for their relations\n * to be able to lazily load relations when accessing these relations.\n */\nexport class RelationLoader {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads relation data for the given entity and its relation.\n     */\n    load(relation: RelationMetadata, entityOrEntities: ObjectLiteral|ObjectLiteral[], queryRunner?: QueryRunner): Promise<any[]> { // todo: check all places where it uses non array\n        if (queryRunner && queryRunner.isReleased) queryRunner = undefined; // get new one if already closed\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n            return this.loadManyToOneOrOneToOneOwner(relation, entityOrEntities, queryRunner);\n\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            return this.loadOneToManyOrOneToOneNotOwner(relation, entityOrEntities, queryRunner);\n\n        } else if (relation.isManyToManyOwner) {\n            return this.loadManyToManyOwner(relation, entityOrEntities, queryRunner);\n\n        } else { // many-to-many non owner\n            return this.loadManyToManyNotOwner(relation, entityOrEntities, queryRunner);\n        }\n    }\n\n    /**\n     * Loads data for many-to-one and one-to-one owner relations.\n     *\n     * (ow) post.category<=>category.post\n     * loaded: category from post\n     * example: SELECT category.id AS category_id, category.name AS category_name FROM category category\n     *              INNER JOIN post Post ON Post.category=category.id WHERE Post.id=1\n     */\n    loadManyToOneOrOneToOneOwner(relation: RelationMetadata, entityOrEntities: ObjectLiteral|ObjectLiteral[], queryRunner?: QueryRunner): Promise<any> {\n        const entities = Array.isArray(entityOrEntities) ? entityOrEntities : [entityOrEntities];\n        const columns = relation.entityMetadata.primaryColumns;\n        const joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation!.joinColumns;\n        const conditions = joinColumns.map(joinColumn => {\n            return `${relation.entityMetadata.name}.${joinColumn.propertyName} = ${relation.propertyName}.${joinColumn.referencedColumn!.propertyName}`;\n        }).join(\" AND \");\n\n        const joinAliasName = relation.entityMetadata.name;\n        const qb = this.connection\n            .createQueryBuilder(queryRunner)\n            .select(relation.propertyName) // category\n            .from(relation.type, relation.propertyName) // Category, category\n            .innerJoin(relation.entityMetadata.target as Function, joinAliasName, conditions);\n\n        if (columns.length === 1) {\n            qb.where(`${joinAliasName}.${columns[0].propertyPath} IN (:...${joinAliasName + \"_\" + columns[0].propertyName})`);\n            qb.setParameter(joinAliasName + \"_\" + columns[0].propertyName, entities.map(entity => columns[0].getEntityValue(entity)));\n\n        } else {\n            const condition = entities.map((entity, entityIndex) => {\n                return columns.map((column, columnIndex) => {\n                    const paramName = joinAliasName + \"_entity_\" + entityIndex + \"_\" + columnIndex;\n                    qb.setParameter(paramName, column.getEntityValue(entity));\n                    return joinAliasName + \".\" + column.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(condition => \"(\" + condition + \")\").join(\" OR \");\n            qb.where(condition);\n        }\n\n        return qb.getMany();\n        // return qb.getOne(); todo: fix all usages\n    }\n\n    /**\n     * Loads data for one-to-many and one-to-one not owner relations.\n     *\n     * SELECT post\n     * FROM post post\n     * WHERE post.[joinColumn.name] = entity[joinColumn.referencedColumn]\n     */\n    loadOneToManyOrOneToOneNotOwner(relation: RelationMetadata, entityOrEntities: ObjectLiteral|ObjectLiteral[], queryRunner?: QueryRunner): Promise<any> {\n        const entities = Array.isArray(entityOrEntities) ? entityOrEntities : [entityOrEntities];\n        const aliasName = relation.propertyName;\n        const columns = relation.inverseRelation!.joinColumns;\n        const qb = this.connection\n            .createQueryBuilder(queryRunner)\n            .select(aliasName)\n            .from(relation.inverseRelation!.entityMetadata.target, aliasName);\n\n        if (columns.length === 1) {\n            qb.where(`${aliasName}.${columns[0].propertyPath} IN (:...${aliasName + \"_\" + columns[0].propertyName})`);\n            qb.setParameter(aliasName + \"_\" + columns[0].propertyName, entities.map(entity => columns[0].referencedColumn!.getEntityValue(entity)));\n\n        } else {\n            const condition = entities.map((entity, entityIndex) => {\n                return columns.map((column, columnIndex) => {\n                    const paramName = aliasName + \"_entity_\" + entityIndex + \"_\" + columnIndex;\n                    qb.setParameter(paramName, column.referencedColumn!.getEntityValue(entity));\n                    return aliasName + \".\" + column.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(condition => \"(\" + condition + \")\").join(\" OR \");\n            qb.where(condition);\n        }\n        return qb.getMany();\n        // return relation.isOneToMany ? qb.getMany() : qb.getOne(); todo: fix all usages\n    }\n\n    /**\n     * Loads data for many-to-many owner relations.\n     *\n     * SELECT category\n     * FROM category category\n     * INNER JOIN post_categories post_categories\n     * ON post_categories.postId = :postId\n     * AND post_categories.categoryId = category.id\n     */\n    loadManyToManyOwner(relation: RelationMetadata, entityOrEntities: ObjectLiteral|ObjectLiteral[], queryRunner?: QueryRunner): Promise<any> {\n        const entities = Array.isArray(entityOrEntities) ? entityOrEntities : [entityOrEntities];\n        const mainAlias = relation.propertyName;\n        const joinAlias = relation.junctionEntityMetadata!.tableName;\n        const joinColumnConditions = relation.joinColumns.map(joinColumn => {\n            return `${joinAlias}.${joinColumn.propertyName} IN (:...${joinColumn.propertyName})`;\n        });\n        const inverseJoinColumnConditions = relation.inverseJoinColumns.map(inverseJoinColumn => {\n            return `${joinAlias}.${inverseJoinColumn.propertyName}=${mainAlias}.${inverseJoinColumn.referencedColumn!.propertyName}`;\n        });\n        const parameters = relation.joinColumns.reduce((parameters, joinColumn) => {\n            parameters[joinColumn.propertyName] = entities.map(entity => joinColumn.referencedColumn!.getEntityValue(entity));\n            return parameters;\n        }, {} as ObjectLiteral);\n\n        return this.connection\n            .createQueryBuilder(queryRunner)\n            .select(mainAlias)\n            .from(relation.type, mainAlias)\n            .innerJoin(joinAlias, joinAlias, [...joinColumnConditions, ...inverseJoinColumnConditions].join(\" AND \"))\n            .setParameters(parameters)\n            .getMany();\n    }\n\n    /**\n     * Loads data for many-to-many not owner relations.\n     *\n     * SELECT post\n     * FROM post post\n     * INNER JOIN post_categories post_categories\n     * ON post_categories.postId = post.id\n     * AND post_categories.categoryId = post_categories.categoryId\n     */\n    loadManyToManyNotOwner(relation: RelationMetadata, entityOrEntities: ObjectLiteral|ObjectLiteral[], queryRunner?: QueryRunner): Promise<any> {\n        const entities = Array.isArray(entityOrEntities) ? entityOrEntities : [entityOrEntities];\n        const mainAlias = relation.propertyName;\n        const joinAlias = relation.junctionEntityMetadata!.tableName;\n        const joinColumnConditions = relation.inverseRelation!.joinColumns.map(joinColumn => {\n            return `${joinAlias}.${joinColumn.propertyName} = ${mainAlias}.${joinColumn.referencedColumn!.propertyName}`;\n        });\n        const inverseJoinColumnConditions = relation.inverseRelation!.inverseJoinColumns.map(inverseJoinColumn => {\n            return `${joinAlias}.${inverseJoinColumn.propertyName} IN (:...${inverseJoinColumn.propertyName})`;\n        });\n        const parameters = relation.inverseRelation!.inverseJoinColumns.reduce((parameters, joinColumn) => {\n            parameters[joinColumn.propertyName] = entities.map(entity => joinColumn.referencedColumn!.getEntityValue(entity));\n            return parameters;\n        }, {} as ObjectLiteral);\n\n        return this.connection\n            .createQueryBuilder(queryRunner)\n            .select(mainAlias)\n            .from(relation.type, mainAlias)\n            .innerJoin(joinAlias, joinAlias, [...joinColumnConditions, ...inverseJoinColumnConditions].join(\" AND \"))\n            .setParameters(parameters)\n            .getMany();\n    }\n\n    /**\n     * Wraps given entity and creates getters/setters for its given relation\n     * to be able to lazily load data when accessing this relation.\n     */\n    enableLazyLoad(relation: RelationMetadata, entity: ObjectLiteral, queryRunner?: QueryRunner) {\n        const relationLoader = this;\n        const dataIndex = \"__\" + relation.propertyName + \"__\"; // in what property of the entity loaded data will be stored\n        const promiseIndex = \"__promise_\" + relation.propertyName + \"__\"; // in what property of the entity loading promise will be stored\n        const resolveIndex = \"__has_\" + relation.propertyName + \"__\"; // indicates if relation data already was loaded or not, we need this flag if loaded data is empty\n\n        const setData = (entity: ObjectLiteral, value: any) => {\n            entity[dataIndex] = value;\n            entity[resolveIndex] = true;\n            delete entity[promiseIndex];\n            return value;\n        };\n        const setPromise = (entity: ObjectLiteral, value: Promise<any>) => {\n            delete entity[resolveIndex];\n            delete entity[dataIndex];\n            entity[promiseIndex] = value;\n            value.then(\n              // ensure different value is not assigned yet\n              result => entity[promiseIndex] === value ? setData(entity, result) : result\n            );\n            return value;\n        };\n\n        Object.defineProperty(entity, relation.propertyName, {\n            get: function() {\n                if (this[resolveIndex] === true || this[dataIndex] !== undefined) // if related data already was loaded then simply return it\n                    return Promise.resolve(this[dataIndex]);\n\n                if (this[promiseIndex]) // if related data is loading then return a promise relationLoader loads it\n                    return this[promiseIndex];\n\n                // nothing is loaded yet, load relation data and save it in the model once they are loaded\n                const loader = relationLoader.load(relation, this, queryRunner).then(\n                    result => relation.isOneToOne || relation.isManyToOne ? (result.length === 0 ? null : result[0]) : result\n                );\n                return setPromise(this, loader);\n            },\n            set: function(value: any|Promise<any>) {\n                if (value instanceof Promise) { // if set data is a promise then wait for its resolve and save in the object\n                    setPromise(this, value);\n                } else { // if its direct data set (non promise, probably not safe-typed)\n                    setData(this, value);\n                }\n            },\n            configurable: true\n        });\n    }\n\n}\n","import {Connection, ObjectLiteral} from \"../\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\n\n/**\n * Loads relation ids for the given entities.\n */\nexport class RelationIdLoader {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads relation ids of the given entity or entities.\n     */\n    async load(target: Function|string, relation: string, entities: ObjectLiteral|ObjectLiteral[], relatedEntities?: ObjectLiteral|ObjectLiteral[]): Promise<any[]>;\n\n    /**\n     * Loads relation ids of the given entity or entities.\n     */\n    async load(relation: RelationMetadata, entities: ObjectLiteral|ObjectLiteral[], relatedEntities?: ObjectLiteral|ObjectLiteral[]): Promise<any[]>;\n\n    /**\n     * Loads relation ids of the given entity or entities.\n     */\n    async load(relationOrTarget: RelationMetadata|Function|string, relationNameOrEntities: string|ObjectLiteral|ObjectLiteral[], entitiesOrRelatedEntities?: ObjectLiteral|ObjectLiteral[], maybeRelatedEntities?: ObjectLiteral|ObjectLiteral[]): Promise<any[]> {\n\n        // normalize arguments\n        let relation: RelationMetadata|undefined, entities: ObjectLiteral[], relatedEntities: ObjectLiteral[]|undefined;\n        if (relationOrTarget instanceof RelationMetadata) {\n            relation = relationOrTarget;\n            entities = Array.isArray(relationNameOrEntities) ? relationNameOrEntities as ObjectLiteral[] : [relationNameOrEntities as ObjectLiteral];\n            relatedEntities = Array.isArray(entitiesOrRelatedEntities) ? entitiesOrRelatedEntities as ObjectLiteral[] : (entitiesOrRelatedEntities ? [entitiesOrRelatedEntities as ObjectLiteral] : undefined);\n\n        } else {\n            const entityMetadata = this.connection.getMetadata(relationOrTarget);\n            relation = entityMetadata.findRelationWithPropertyPath(relationNameOrEntities as string);\n            if (!relation)\n                throw new Error(`Relation \"${relation}\" was not found in \"${entityMetadata.name}\".`);\n\n            entities = Array.isArray(entitiesOrRelatedEntities) ? entitiesOrRelatedEntities as ObjectLiteral[] : [entitiesOrRelatedEntities as ObjectLiteral];\n            relatedEntities = Array.isArray(maybeRelatedEntities) ? maybeRelatedEntities as ObjectLiteral[] : (maybeRelatedEntities ? [maybeRelatedEntities as ObjectLiteral] : undefined);\n        }\n\n        // load relation ids depend of relation type\n        if (relation.isManyToMany) {\n            return this.loadForManyToMany(relation, entities, relatedEntities);\n\n        } else if (relation.isManyToOne || relation.isOneToOneOwner) {\n            return this.loadForManyToOneAndOneToOneOwner(relation, entities, relatedEntities);\n\n        } else { // if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            return this.loadForOneToManyAndOneToOneNotOwner(relation, entities, relatedEntities);\n        }\n    }\n\n    /**\n     * Loads relation ids of the given entities and groups them into the object with parent and children.\n     *\n     * todo: extract this method?\n     */\n    async loadManyToManyRelationIdsAndGroup<E1, E2>(\n        relation: RelationMetadata,\n        entitiesOrEntities: E1|E1[],\n        relatedEntityOrEntities?: E2|E2[]\n    ): Promise<{ entity: E1, related?: E2|E2[] }[]> {\n\n        // console.log(\"relation:\", relation.propertyName);\n        // console.log(\"entitiesOrEntities\", entitiesOrEntities);\n        const isMany = relation.isManyToMany || relation.isOneToMany;\n        const entities: E1[] = Array.isArray(entitiesOrEntities) ? entitiesOrEntities : [entitiesOrEntities];\n\n        if (!relatedEntityOrEntities) {\n            relatedEntityOrEntities = await this.connection.relationLoader.load(relation, entitiesOrEntities);\n            if (!relatedEntityOrEntities.length)\n                return entities.map(entity => ({ entity: entity, related: isMany ? [] : undefined }));\n        }\n        // const relationIds = await this.load(relation, relatedEntityOrEntities!, entitiesOrEntities);\n        const relationIds = await this.load(relation, entitiesOrEntities, relatedEntityOrEntities);\n        // console.log(\"relationIds\", relationIds);\n\n        const relatedEntities: E2[] = Array.isArray(relatedEntityOrEntities) ? relatedEntityOrEntities : [relatedEntityOrEntities!];\n\n        let columns: ColumnMetadata[], inverseColumns: ColumnMetadata[];\n        if (relation.isManyToManyOwner) {\n            columns = relation.junctionEntityMetadata!.inverseColumns.map(column => column.referencedColumn!);\n            inverseColumns = relation.junctionEntityMetadata!.ownerColumns.map(column => column.referencedColumn!);\n\n        } else if (relation.isManyToManyNotOwner) {\n            columns = relation.junctionEntityMetadata!.ownerColumns.map(column => column.referencedColumn!);\n            inverseColumns = relation.junctionEntityMetadata!.inverseColumns.map(column => column.referencedColumn!);\n\n        } else if (relation.isManyToOne || relation.isOneToOneOwner) {\n            columns = relation.joinColumns.map(column => column.referencedColumn!);\n            inverseColumns = relation.entityMetadata.primaryColumns;\n\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            columns = relation.inverseRelation!.entityMetadata.primaryColumns;\n            inverseColumns = relation.inverseRelation!.joinColumns.map(column => column.referencedColumn!);\n\n        } else {\n\n        }\n\n        return entities.map(entity => {\n            const group: { entity: E1, related?: E2|E2[] } = { entity: entity, related: isMany ? [] : undefined };\n            relationIds.forEach(relationId => {\n                const entityMatched = inverseColumns.every(column => {\n                    return column.getEntityValue(entity) === relationId[column.entityMetadata.name + \"_\" + column.propertyPath.replace(\".\", \"_\")];\n                });\n                if (entityMatched) {\n                    relatedEntities.forEach(relatedEntity => {\n                        const relatedEntityMatched = columns.every(column => {\n                            return column.getEntityValue(relatedEntity) === relationId[column.entityMetadata.name + \"_\" + relation.propertyPath.replace(\".\", \"_\") + \"_\" + column.propertyPath.replace(\".\", \"_\")];\n                        });\n                        if (relatedEntityMatched) {\n                            if (isMany) {\n                                (group.related as E2[]).push(relatedEntity);\n                            } else {\n                                group.related = relatedEntity;\n                            }\n                        }\n                    });\n                }\n            });\n            return group;\n        });\n    }\n\n    /**\n     * Loads relation ids of the given entities and maps them into the given entity property.\n\n    async loadManyToManyRelationIdsAndMap(\n        relation: RelationMetadata,\n        entityOrEntities: ObjectLiteral|ObjectLiteral[],\n        mapToEntityOrEntities: ObjectLiteral|ObjectLiteral[],\n        propertyName: string\n    ): Promise<void> {\n\n        const relationIds = await this.loadManyToManyRelationIds(relation, entityOrEntities, mapToEntityOrEntities);\n        const mapToEntities = mapToEntityOrEntities instanceof Array ? mapToEntityOrEntities : [mapToEntityOrEntities];\n        const junctionMetadata = relation.junctionEntityMetadata!;\n        const mainAlias = junctionMetadata.name;\n        const columns = relation.isOwning ? junctionMetadata.inverseColumns : junctionMetadata.ownerColumns;\n        const inverseColumns = relation.isOwning ? junctionMetadata.ownerColumns : junctionMetadata.inverseColumns;\n\n        mapToEntities.forEach(mapToEntity => {\n            mapToEntity[propertyName] = [];\n            relationIds.forEach(relationId => {\n                const match = inverseColumns.every(column => {\n                    return column.referencedColumn!.getEntityValue(mapToEntity) === relationId[mainAlias + \"_\" + column.propertyName];\n                });\n                if (match) {\n                    if (columns.length === 1) {\n                        mapToEntity[propertyName].push(relationId[mainAlias + \"_\" + columns[0].propertyName]);\n\n                    } else {\n                        const value = {};\n                        columns.forEach(column => {\n                            column.referencedColumn!.setEntityValue(value, relationId[mainAlias + \"_\" + column.propertyName]);\n                        });\n                        mapToEntity[propertyName].push(value);\n                    }\n                }\n            });\n        });\n    }*/\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads relation ids for the many-to-many relation.\n     */\n    protected loadForManyToMany(relation: RelationMetadata, entities: ObjectLiteral[], relatedEntities?: ObjectLiteral[]) {\n\n        const junctionMetadata = relation.junctionEntityMetadata!;\n        const mainAlias = junctionMetadata.name;\n        const columns = relation.isOwning ? junctionMetadata.ownerColumns : junctionMetadata.inverseColumns;\n        const inverseColumns = relation.isOwning ? junctionMetadata.inverseColumns : junctionMetadata.ownerColumns;\n        const qb = this.connection.createQueryBuilder();\n\n        // select all columns from junction table\n        junctionMetadata.ownerColumns.forEach(column => {\n            const columnName = column.referencedColumn!.entityMetadata.name + \"_\" + column.referencedColumn!.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n        junctionMetadata.inverseColumns.forEach(column => {\n            const columnName = column.referencedColumn!.entityMetadata.name + \"_\" + relation.propertyPath.replace(\".\", \"_\") + \"_\" + column.referencedColumn!.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n\n        // add conditions for the given entities\n        let condition1 = \"\";\n        if (columns.length === 1) {\n            qb.setParameter(\"values1\", entities.map(entity => columns[0].referencedColumn!.getEntityValue(entity)));\n            condition1 = mainAlias + \".\" + columns[0].propertyPath + \" IN (:...values1)\"; // todo: use ANY for postgres\n\n        } else {\n            condition1 = \"(\" + entities.map((entity, entityIndex) => {\n                return columns.map(column => {\n                    const paramName = \"entity1_\" + entityIndex + \"_\" + column.propertyName;\n                    qb.setParameter(paramName, column.referencedColumn!.getEntityValue(entity));\n                    return mainAlias + \".\" + column.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(condition => \"(\" + condition + \")\").join(\" OR \") + \")\";\n        }\n\n        // add conditions for the given inverse entities\n        let condition2 = \"\";\n        if (relatedEntities) {\n            if (inverseColumns.length === 1) {\n                qb.setParameter(\"values2\", relatedEntities.map(entity => inverseColumns[0].referencedColumn!.getEntityValue(entity)));\n                condition2 = mainAlias + \".\" + inverseColumns[0].propertyPath + \" IN (:...values2)\"; // todo: use ANY for postgres\n\n            } else {\n                condition2 = \"(\" + relatedEntities.map((entity, entityIndex) => {\n                    return inverseColumns.map(column => {\n                        const paramName = \"entity2_\" + entityIndex + \"_\" + column.propertyName;\n                        qb.setParameter(paramName, column.referencedColumn!.getEntityValue(entity));\n                        return mainAlias + \".\" + column.propertyPath + \" = :\" + paramName;\n                    }).join(\" AND \");\n                }).map(condition => \"(\" + condition + \")\").join(\" OR \") + \")\";\n            }\n        }\n\n        // execute query\n        return qb\n            .from(junctionMetadata.target, mainAlias)\n            .where(condition1 + (condition2 ? \" AND \" + condition2 : \"\"))\n            .getRawMany();\n    }\n\n    /**\n     * Loads relation ids for the many-to-one and one-to-one owner relations.\n     */\n    protected loadForManyToOneAndOneToOneOwner(relation: RelationMetadata, entities: ObjectLiteral[], relatedEntities?: ObjectLiteral[]) {\n        const mainAlias = relation.entityMetadata.targetName;\n\n        // select all columns we need\n        const qb = this.connection.createQueryBuilder();\n        relation.entityMetadata.primaryColumns.forEach(primaryColumn => {\n            const columnName = primaryColumn.entityMetadata.name + \"_\" + primaryColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + primaryColumn.propertyPath, columnName);\n        });\n        relation.joinColumns.forEach(column => {\n            const columnName = column.referencedColumn!.entityMetadata.name + \"_\" + relation.propertyPath.replace(\".\", \"_\") + \"_\" + column.referencedColumn!.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n\n        // add condition for entities\n        let condition: string = \"\";\n        if (relation.entityMetadata.primaryColumns.length === 1) {\n            qb.setParameter(\"values\", entities.map(entity => relation.entityMetadata.primaryColumns[0].getEntityValue(entity)));\n            condition = mainAlias + \".\" + relation.entityMetadata.primaryColumns[0].propertyPath + \" IN (:...values)\";\n\n        } else {\n            condition = entities.map((entity, entityIndex) => {\n                return relation.entityMetadata.primaryColumns.map((column, columnIndex) => {\n                    const paramName = \"entity\" + entityIndex + \"_\" + columnIndex;\n                    qb.setParameter(paramName, column.getEntityValue(entity));\n                    return mainAlias + \".\" + column.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(condition => \"(\" + condition + \")\").join(\" OR \");\n        }\n\n        // execute query\n        return qb.from(relation.entityMetadata.target, mainAlias)\n            .where(condition)\n            .getRawMany();\n    }\n\n    /**\n     * Loads relation ids for the one-to-many and one-to-one not owner relations.\n     */\n    protected loadForOneToManyAndOneToOneNotOwner(relation: RelationMetadata, entities: ObjectLiteral[], relatedEntities?: ObjectLiteral[]) {\n        relation = relation.inverseRelation!;\n        const mainAlias = relation.entityMetadata.targetName;\n\n        // select all columns we need\n        const qb = this.connection.createQueryBuilder();\n        relation.entityMetadata.primaryColumns.forEach(primaryColumn => {\n            const columnName = primaryColumn.entityMetadata.name + \"_\" + relation.inverseRelation!.propertyPath.replace(\".\", \"_\") + \"_\" + primaryColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + primaryColumn.propertyPath, columnName);\n        });\n        relation.joinColumns.forEach(column => {\n            const columnName = column.referencedColumn!.entityMetadata.name + \"_\" + column.referencedColumn!.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n\n        // add condition for entities\n        let condition: string = \"\";\n        if (relation.joinColumns.length === 1) {\n            qb.setParameter(\"values\", entities.map(entity => relation.joinColumns[0].referencedColumn!.getEntityValue(entity)));\n            condition = mainAlias + \".\" + relation.joinColumns[0].propertyPath + \" IN (:...values)\";\n\n        } else {\n            condition = entities.map((entity, entityIndex) => {\n                return relation.joinColumns.map((joinColumn, joinColumnIndex) => {\n                    const paramName = \"entity\" + entityIndex + \"_\" + joinColumnIndex;\n                    qb.setParameter(paramName, joinColumn.referencedColumn!.getEntityValue(entity));\n                    return mainAlias + \".\" + joinColumn.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(condition => \"(\" + condition + \")\").join(\" OR \");\n        }\n\n        // execute query\n        return qb.from(relation.entityMetadata.target, mainAlias)\n            .where(condition)\n            .getRawMany();\n    }\n\n}\n","import {Driver} from \"../driver/Driver\";\nimport {Repository} from \"../repository/Repository\";\nimport {EntitySubscriberInterface} from \"../subscriber/EntitySubscriberInterface\";\nimport {EntityTarget} from \"../common/EntityTarget\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {DefaultNamingStrategy} from \"../naming-strategy/DefaultNamingStrategy\";\nimport {CannotExecuteNotConnectedError} from \"../error/CannotExecuteNotConnectedError\";\nimport {CannotConnectAlreadyConnectedError} from \"../error/CannotConnectAlreadyConnectedError\";\nimport {TreeRepository} from \"../repository/TreeRepository\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Logger} from \"../logger/Logger\";\nimport {EntityMetadataNotFoundError} from \"../error/EntityMetadataNotFoundError\";\nimport {MigrationInterface} from \"../migration/MigrationInterface\";\nimport {MigrationExecutor} from \"../migration/MigrationExecutor\";\nimport {Migration} from \"../migration/Migration\";\nimport {MongoRepository} from \"../repository/MongoRepository\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {MongoEntityManager} from \"../entity-manager/MongoEntityManager\";\nimport {EntityMetadataValidator} from \"../metadata-builder/EntityMetadataValidator\";\nimport {ConnectionOptions} from \"./ConnectionOptions\";\nimport {QueryRunnerProviderAlreadyReleasedError} from \"../error/QueryRunnerProviderAlreadyReleasedError\";\nimport {EntityManagerFactory} from \"../entity-manager/EntityManagerFactory\";\nimport {DriverFactory} from \"../driver/DriverFactory\";\nimport {ConnectionMetadataBuilder} from \"./ConnectionMetadataBuilder\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {LoggerFactory} from \"../logger/LoggerFactory\";\nimport {QueryResultCacheFactory} from \"../cache/QueryResultCacheFactory\";\nimport {QueryResultCache} from \"../cache/QueryResultCache\";\nimport {SqljsEntityManager} from \"../entity-manager/SqljsEntityManager\";\nimport {RelationLoader} from \"../query-builder/RelationLoader\";\nimport {RelationIdLoader} from \"../query-builder/RelationIdLoader\";\nimport {EntitySchema} from \"../\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {ObjectUtils} from \"../util/ObjectUtils\";\nimport {IsolationLevel} from \"../driver/types/IsolationLevel\";\nimport {AuroraDataApiDriver} from \"../driver/aurora-data-api/AuroraDataApiDriver\";\nimport {DriverUtils} from \"../driver/DriverUtils\";\nimport {ReplicationMode} from \"../driver/types/ReplicationMode\";\n\n/**\n * Connection is a single database ORM connection to a specific database.\n * Its not required to be a database connection, depend on database type it can create connection pool.\n * You can have multiple connections to multiple databases in your application.\n */\nexport class Connection {\n\n    // -------------------------------------------------------------------------\n    // Public Readonly Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection name.\n     */\n    readonly name: string;\n\n    /**\n     * Connection options.\n     */\n    readonly options: ConnectionOptions;\n\n    /**\n     * Indicates if connection is initialized or not.\n     */\n    readonly isConnected: boolean;\n\n    /**\n     * Database driver used by this connection.\n     */\n    readonly driver: Driver;\n\n    /**\n     * EntityManager of this connection.\n     */\n    readonly manager: EntityManager;\n\n    /**\n     * Naming strategy used in the connection.\n     */\n    readonly namingStrategy: NamingStrategyInterface;\n\n    /**\n     * Logger used to log orm events.\n     */\n    readonly logger: Logger;\n\n    /**\n     * Migration instances that are registered for this connection.\n     */\n    readonly migrations: MigrationInterface[] = [];\n\n    /**\n     * Entity subscriber instances that are registered for this connection.\n     */\n    readonly subscribers: EntitySubscriberInterface<any>[] = [];\n\n    /**\n     * All entity metadatas that are registered for this connection.\n     */\n    readonly entityMetadatas: EntityMetadata[] = [];\n\n    /**\n     * Used to work with query result cache.\n     */\n    readonly queryResultCache?: QueryResultCache;\n\n    /**\n     * Used to load relations and work with lazy relations.\n     */\n    readonly relationLoader: RelationLoader;\n\n    /**\n     * Used to load relation ids of specific entity relations.\n     */\n    readonly relationIdLoader: RelationIdLoader;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: ConnectionOptions) {\n        this.name = options.name || \"default\";\n        this.options = options;\n        this.logger = new LoggerFactory().create(this.options.logger, this.options.logging);\n        this.driver = new DriverFactory().create(this);\n        this.manager = this.createEntityManager();\n        this.namingStrategy = options.namingStrategy || new DefaultNamingStrategy();\n        this.queryResultCache = options.cache ? new QueryResultCacheFactory(this).create() : undefined;\n        this.relationLoader = new RelationLoader(this);\n        this.relationIdLoader = new RelationIdLoader(this);\n        this.isConnected = false;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets the mongodb entity manager that allows to perform mongodb-specific repository operations\n     * with any entity in this connection.\n     *\n     * Available only in mongodb connections.\n     */\n    get mongoManager(): MongoEntityManager {\n        if (!(this.manager instanceof MongoEntityManager))\n            throw new Error(`MongoEntityManager is only available for MongoDB databases.`);\n\n        return this.manager as MongoEntityManager;\n    }\n\n    /**\n     * Gets a sql.js specific Entity Manager that allows to perform special load and save operations\n     *\n     * Available only in connection with the sqljs driver.\n     */\n    get sqljsManager(): SqljsEntityManager {\n        if (!(this.manager instanceof SqljsEntityManager))\n            throw new Error(`SqljsEntityManager is only available for Sqljs databases.`);\n\n        return this.manager as SqljsEntityManager;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * This method should be called once on application bootstrap.\n     * This method not necessarily creates database connection (depend on database type),\n     * but it also can setup a connection pool with database to use.\n     */\n    async connect(): Promise<this> {\n        if (this.isConnected)\n            throw new CannotConnectAlreadyConnectedError(this.name);\n\n        // connect to the database via its driver\n        await this.driver.connect();\n\n        // connect to the cache-specific database if cache is enabled\n        if (this.queryResultCache)\n            await this.queryResultCache.connect();\n\n        // set connected status for the current connection\n        ObjectUtils.assign(this, { isConnected: true });\n\n        try {\n\n            // build all metadatas registered in the current connection\n            this.buildMetadatas();\n\n            await this.driver.afterConnect();\n\n            // if option is set - drop schema once connection is done\n            if (this.options.dropSchema)\n                await this.dropDatabase();\n\n            // if option is set - automatically synchronize a schema\n            if (this.options.synchronize)\n                await this.synchronize();\n\n            // if option is set - automatically synchronize a schema\n            if (this.options.migrationsRun)\n                await this.runMigrations({ transaction: this.options.migrationsTransactionMode });\n\n        } catch (error) {\n\n            // if for some reason build metadata fail (for example validation error during entity metadata check)\n            // connection needs to be closed\n            await this.close();\n            throw error;\n        }\n\n        return this;\n    }\n\n    /**\n     * Closes connection with the database.\n     * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.\n     */\n    async close(): Promise<void> {\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        await this.driver.disconnect();\n\n        // disconnect from the cache-specific database if cache was enabled\n        if (this.queryResultCache)\n            await this.queryResultCache.disconnect();\n\n        ObjectUtils.assign(this, { isConnected: false });\n    }\n\n    /**\n     * Creates database schema for all entities registered in this connection.\n     * Can be used only after connection to the database is established.\n     *\n     * @param dropBeforeSync If set to true then it drops the database with all its tables and data\n     */\n    async synchronize(dropBeforeSync: boolean = false): Promise<void> {\n\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        if (dropBeforeSync)\n            await this.dropDatabase();\n\n        const schemaBuilder = this.driver.createSchemaBuilder();\n        await schemaBuilder.build();\n    }\n\n    /**\n     * Drops the database and all its data.\n     * Be careful with this method on production since this method will erase all your database tables and their data.\n     * Can be used only after connection to the database is established.\n     */\n    // TODO rename\n    async dropDatabase(): Promise<void> {\n        const queryRunner = this.createQueryRunner();\n        try {\n            if (this.driver instanceof SqlServerDriver || this.driver instanceof MysqlDriver || this.driver instanceof AuroraDataApiDriver) {\n                const databases: string[] = this.driver.database ? [this.driver.database] : [];\n                this.entityMetadatas.forEach(metadata => {\n                    if (metadata.database && databases.indexOf(metadata.database) === -1)\n                        databases.push(metadata.database);\n                });\n\n                for (const database of databases) {\n                    await queryRunner.clearDatabase(database);\n                }\n            } else {\n                await queryRunner.clearDatabase();\n            }\n        } finally {\n            await queryRunner.release();\n        }\n    }\n\n    /**\n     * Runs all pending migrations.\n     * Can be used only after connection to the database is established.\n     */\n    async runMigrations(options?: { transaction?: \"all\" | \"none\" | \"each\" }): Promise<Migration[]> {\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        const migrationExecutor = new MigrationExecutor(this);\n        migrationExecutor.transaction = (options && options.transaction) || \"all\";\n\n        const successMigrations = await migrationExecutor.executePendingMigrations();\n        return successMigrations;\n    }\n\n    /**\n     * Reverts last executed migration.\n     * Can be used only after connection to the database is established.\n     */\n    async undoLastMigration(options?: { transaction?: \"all\" | \"none\" | \"each\" }): Promise<void> {\n\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        const migrationExecutor = new MigrationExecutor(this);\n        migrationExecutor.transaction = (options && options.transaction) || \"all\";\n\n        await migrationExecutor.undoLastMigration();\n    }\n\n    /**\n     * Lists all migrations and whether they have been run.\n     * Returns true if there are pending migrations\n     */\n    async showMigrations(): Promise<boolean> {\n        if (!this.isConnected) {\n            throw new CannotExecuteNotConnectedError(this.name);\n        }\n        const migrationExecutor = new MigrationExecutor(this);\n        return await migrationExecutor.showMigrations();\n    }\n\n    /**\n     * Checks if entity metadata exist for the given entity class, target name or table name.\n     */\n    hasMetadata(target: EntityTarget<any>): boolean {\n        return !!this.findMetadata(target);\n    }\n\n    /**\n     * Gets entity metadata for the given entity class or schema name.\n     */\n    getMetadata(target: EntityTarget<any>): EntityMetadata {\n        const metadata = this.findMetadata(target);\n        if (!metadata)\n            throw new EntityMetadataNotFoundError(target);\n\n        return metadata;\n    }\n\n    /**\n     * Gets repository for the given entity.\n     */\n    getRepository<Entity>(target: EntityTarget<Entity>): Repository<Entity> {\n        return this.manager.getRepository(target);\n    }\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * Only tree-type entities can have a TreeRepository, like ones decorated with @Tree decorator.\n     */\n    getTreeRepository<Entity>(target: EntityTarget<Entity>): TreeRepository<Entity> {\n        return this.manager.getTreeRepository(target);\n    }\n\n    /**\n     * Gets mongodb-specific repository for the given entity class or name.\n     * Works only if connection is mongodb-specific.\n     */\n    getMongoRepository<Entity>(target: EntityTarget<Entity>): MongoRepository<Entity> {\n        if (!(this.driver instanceof MongoDriver))\n            throw new Error(`You can use getMongoRepository only for MongoDB connections.`);\n\n        return this.manager.getRepository(target) as any;\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        return this.manager.getCustomRepository(customRepository);\n    }\n\n    /**\n     * Wraps given function execution (and all operations made there) into a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(runInTransaction: (entityManager: EntityManager) => Promise<T>): Promise<T>;\n    async transaction<T>(isolationLevel: IsolationLevel, runInTransaction: (entityManager: EntityManager) => Promise<T>): Promise<T>;\n    async transaction<T>(\n        isolationOrRunInTransaction: IsolationLevel | ((entityManager: EntityManager) => Promise<T>),\n        runInTransactionParam?: (entityManager: EntityManager) => Promise<T>\n    ): Promise<any> {\n        return this.manager.transaction(\n            isolationOrRunInTransaction as any,\n            runInTransactionParam as any\n        );\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query(query: string, parameters?: any[], queryRunner?: QueryRunner): Promise<any> {\n        if (this instanceof MongoEntityManager)\n            throw new Error(`Queries aren't supported by MongoDB.`);\n\n        if (queryRunner && queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError();\n\n        const usedQueryRunner = queryRunner || this.createQueryRunner();\n\n        try {\n            return await usedQueryRunner.query(query, parameters);  // await is needed here because we are using finally\n\n        } finally {\n            if (!queryRunner)\n                await usedQueryRunner.release();\n        }\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityClass: EntityTarget<Entity>, alias: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityOrRunner?: EntityTarget<Entity>|QueryRunner, alias?: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\n        if (this instanceof MongoEntityManager)\n            throw new Error(`Query Builder is not supported by MongoDB.`);\n\n        if (alias) {\n            const metadata = this.getMetadata(entityOrRunner as EntityTarget<Entity>);\n            return new SelectQueryBuilder(this, queryRunner)\n                .select(alias)\n                .from(metadata.target, alias);\n\n        } else {\n            return new SelectQueryBuilder(this, entityOrRunner as QueryRunner|undefined);\n        }\n    }\n\n    /**\n     * Creates a query runner used for perform queries on a single database connection.\n     * Using query runners you can control your queries to execute using single database connection and\n     * manually control your database transaction.\n     *\n     * Mode is used in replication mode and indicates whatever you want to connect\n     * to master database or any of slave databases.\n     * If you perform writes you must use master database,\n     * if you perform reads you can use slave databases.\n     */\n    createQueryRunner(mode: ReplicationMode = \"master\"): QueryRunner {\n        const queryRunner = this.driver.createQueryRunner(mode);\n        const manager = this.createEntityManager(queryRunner);\n        Object.assign(queryRunner, { manager: manager });\n        return queryRunner;\n    }\n\n    /**\n     * Gets entity metadata of the junction table (many-to-many table).\n     */\n    getManyToManyMetadata(entityTarget: EntityTarget<any>, relationPropertyPath: string) {\n        const relationMetadata = this.getMetadata(entityTarget).findRelationWithPropertyPath(relationPropertyPath);\n        if (!relationMetadata)\n            throw new Error(`Relation \"${relationPropertyPath}\" was not found in ${entityTarget} entity.`);\n        if (!relationMetadata.isManyToMany)\n            throw new Error(`Relation \"${entityTarget}#${relationPropertyPath}\" does not have a many-to-many relationship.` +\n                `You can use this method only on many-to-many relations.`);\n\n        return relationMetadata.junctionEntityMetadata;\n    }\n\n    /**\n     * Creates an Entity Manager for the current connection with the help of the EntityManagerFactory.\n     */\n    createEntityManager(queryRunner?: QueryRunner): EntityManager {\n        return new EntityManagerFactory().create(this, queryRunner);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds exist entity metadata by the given entity class, target name or table name.\n     */\n    protected findMetadata(target: EntityTarget<any>): EntityMetadata|undefined {\n        return this.entityMetadatas.find(metadata => {\n            if (metadata.target === target)\n                return true;\n            if (target instanceof EntitySchema) {\n                return metadata.name === target.options.name;\n            }\n            if (typeof target === \"string\") {\n                if (target.indexOf(\".\") !== -1) {\n                    return metadata.tablePath === target;\n                } else {\n                    return metadata.name === target || metadata.tableName === target;\n                }\n            }\n\n            return false;\n        });\n    }\n\n    /**\n     * Builds metadatas for all registered classes inside this connection.\n     */\n    protected buildMetadatas(): void {\n\n        const connectionMetadataBuilder = new ConnectionMetadataBuilder(this);\n        const entityMetadataValidator = new EntityMetadataValidator();\n\n        // create subscribers instances if they are not disallowed from high-level (for example they can disallowed from migrations run process)\n        const subscribers = connectionMetadataBuilder.buildSubscribers(this.options.subscribers || []);\n        ObjectUtils.assign(this, { subscribers: subscribers });\n\n        // build entity metadatas\n        const entityMetadatas = connectionMetadataBuilder.buildEntityMetadatas(this.options.entities || []);\n        ObjectUtils.assign(this, { entityMetadatas: entityMetadatas });\n\n        // create migration instances\n        const migrations = connectionMetadataBuilder.buildMigrations(this.options.migrations || []);\n        ObjectUtils.assign(this, { migrations: migrations });\n\n        this.driver.database = this.getDatabaseName();\n\n        // validate all created entity metadatas to make sure user created entities are valid and correct\n        entityMetadataValidator.validateMany(this.entityMetadatas.filter(metadata => metadata.tableType !== \"view\"), this.driver);\n    }\n\n    // This database name property is nested for replication configs.\n    protected getDatabaseName(): string {\n        const options = this.options;\n        switch (options.type) {\n            case \"mysql\" :\n            case \"mariadb\" :\n            case \"postgres\":\n            case \"cockroachdb\":\n            case \"mssql\":\n            case \"oracle\":\n                return DriverUtils.buildDriverOptions(options.replication ? options.replication.master : options).database;\n            default:\n                return DriverUtils.buildDriverOptions(options).database;\n    }\n}\n\n}\n","/**\n * Thrown when consumer tries to get connection that does not exist.\n */\nexport class ConnectionNotFoundError extends Error {\n    name = \"ConnectionNotFoundError\";\n\n    constructor(name: string) {\n        super();\n        Object.setPrototypeOf(this, ConnectionNotFoundError.prototype);\n        this.message = `Connection \"${name}\" was not found.`;\n    }\n\n}","/**\n * Thrown when consumer tries to recreate connection with the same name, but previous connection was not closed yet.\n */\nexport class AlreadyHasActiveConnectionError extends Error {\n    name = \"AlreadyHasActiveConnectionError\";\n\n    constructor(connectionName: string) {\n        super();\n        Object.setPrototypeOf(this, AlreadyHasActiveConnectionError.prototype);\n        this.message = `Cannot create a new connection named \"${connectionName}\", because connection with such name ` +\n            `already exist and it now has an active connection session.`;\n    }\n\n}","import {Connection} from \"./Connection\";\nimport {ConnectionNotFoundError} from \"../error/ConnectionNotFoundError\";\nimport {ConnectionOptions} from \"./ConnectionOptions\";\nimport {AlreadyHasActiveConnectionError} from \"../error/AlreadyHasActiveConnectionError\";\n\n/**\n * ConnectionManager is used to store and manage multiple orm connections.\n * It also provides useful factory methods to simplify connection creation.\n */\nexport class ConnectionManager {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * List of connections registered in this connection manager.\n     */\n    public readonly connections: Connection[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if connection with the given name exist in the manager.\n     */\n    has(name: string): boolean {\n        return !!this.connections.find(connection => connection.name === name);\n    }\n\n    /**\n     * Gets registered connection with the given name.\n     * If connection name is not given then it will get a default connection.\n     * Throws error if connection with the given name was not found.\n     */\n    get(name: string = \"default\"): Connection {\n        const connection = this.connections.find(connection => connection.name === name);\n        if (!connection)\n            throw new ConnectionNotFoundError(name);\n\n        return connection;\n    }\n\n    /**\n     * Creates a new connection based on the given connection options and registers it in the manager.\n     * Connection won't be established, you'll need to manually call connect method to establish connection.\n     */\n    create(options: ConnectionOptions): Connection {\n\n        // check if such connection is already registered\n        const existConnection = this.connections.find(connection => connection.name === (options.name || \"default\"));\n        if (existConnection) {\n\n            // if connection is registered and its not closed then throw an error\n            if (existConnection.isConnected)\n                throw new AlreadyHasActiveConnectionError(options.name || \"default\");\n\n            // if its registered but closed then simply remove it from the manager\n            this.connections.splice(this.connections.indexOf(existConnection), 1);\n        }\n\n        // create a new connection\n        const connection = new Connection(options);\n        this.connections.push(connection);\n        return connection;\n    }\n\n}\n","/**\n * Thrown when ORM cannot get column's type automatically.\n * Basically, when reflect-metadata is not available or tsconfig is not properly setup.\n */\nexport class ColumnTypeUndefinedError extends Error {\n    name = \"ColumnTypeUndefinedError\";\n\n    constructor(object: Object, propertyName: string) {\n        super();\n        Object.setPrototypeOf(this, ColumnTypeUndefinedError.prototype);\n        this.message = `Column type for ${object.constructor.name}#${propertyName} is not defined and cannot be guessed. ` +\n            `Make sure you have turned on an \"emitDecoratorMetadata\": true option in tsconfig.json. ` +\n            `Also make sure you have imported \"reflect-metadata\" on top of the main entry file in your application (before any entity imported).` +\n            `If you are using JavaScript instead of TypeScript you must explicitly provide a column type.`;\n    }\n\n}","/**\n * Dummy class for replacement via `package.json` in browser builds.\n *\n * If we don't include these functions typeorm will throw an error on runtime\n * as well as during webpack builds.\n */\nexport class ConnectionOptionsEnvReader {\n    async read() {\n        throw new Error(`Cannot read connection options in a browser context.`);\n    }\n}\n\n/**\n * Dummy class for replacement via `package.json` in browser builds.\n *\n * If we don't include these functions typeorm will throw an error on runtime\n * as well as during webpack builds.\n */\nexport class ConnectionOptionsXmlReader {\n    async read(path: string) {\n        throw new Error(`Cannot read connection options in a browser context.`);\n    }\n}\n\n/**\n * Dummy class for replacement via `package.json` in browser builds.\n *\n * If we don't include these functions typeorm will throw an error on runtime\n * as well as during webpack builds.\n */\nexport class ConnectionOptionsYmlReader {\n    async read(path: string) {\n        throw new Error(`Cannot read connection options in a browser context.`);\n    }\n}\n\n/**\n * Dummy class for replacement via `package.json` in browser builds.\n *\n * If we don't include these functions typeorm will throw an error on runtime\n * as well as during webpack builds.\n */\nexport class ConnectionOptionsReader {\n    async all() {\n        throw new Error(`Cannot read connection options in a browser context.`);\n    }\n\n    async get() {\n        throw new Error(`Cannot read connection options in a browser context.`);\n    }\n\n    async has() {\n        throw new Error(`Cannot read connection options in a browser context.`);\n    }\n}\n","import {ColumnOptions, getMetadataArgsStorage} from \"../../\";\nimport {\n    ColumnType,\n    SimpleColumnType,\n    SpatialColumnType,\n    WithLengthColumnType,\n    WithPrecisionColumnType,\n    WithWidthColumnType\n} from \"../../driver/types/ColumnTypes\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\nimport {ColumnCommonOptions} from \"../options/ColumnCommonOptions\";\nimport {SpatialColumnOptions} from \"../options/SpatialColumnOptions\";\nimport {ColumnWithLengthOptions} from \"../options/ColumnWithLengthOptions\";\nimport {ColumnNumericOptions} from \"../options/ColumnNumericOptions\";\nimport {ColumnEnumOptions} from \"../options/ColumnEnumOptions\";\nimport {ColumnEmbeddedOptions} from \"../options/ColumnEmbeddedOptions\";\nimport {EmbeddedMetadataArgs} from \"../../metadata-args/EmbeddedMetadataArgs\";\nimport {ColumnTypeUndefinedError} from \"../../error/ColumnTypeUndefinedError\";\nimport {ColumnHstoreOptions} from \"../options/ColumnHstoreOptions\";\nimport {ColumnWithWidthOptions} from \"../options/ColumnWithWidthOptions\";\nimport {GeneratedMetadataArgs} from \"../../metadata-args/GeneratedMetadataArgs\";\n\n/**\n * Column decorator is used to mark a specific class property as a table column. Only properties decorated with this\n * decorator will be persisted to the database when entity be saved.\n */\nexport function Column(): PropertyDecorator;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(options: ColumnOptions): PropertyDecorator;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: SimpleColumnType, options?: ColumnCommonOptions): PropertyDecorator;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: SpatialColumnType, options?: ColumnCommonOptions & SpatialColumnOptions): PropertyDecorator;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: WithLengthColumnType, options?: ColumnCommonOptions & ColumnWithLengthOptions): PropertyDecorator;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: WithWidthColumnType, options?: ColumnCommonOptions & ColumnWithWidthOptions): PropertyDecorator;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: WithPrecisionColumnType, options?: ColumnCommonOptions & ColumnNumericOptions): PropertyDecorator;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: \"enum\", options?: ColumnCommonOptions & ColumnEnumOptions): PropertyDecorator;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: \"simple-enum\", options?: ColumnCommonOptions & ColumnEnumOptions): PropertyDecorator;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: \"set\", options?: ColumnCommonOptions & ColumnEnumOptions): PropertyDecorator;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: \"hstore\", options?: ColumnCommonOptions & ColumnHstoreOptions): PropertyDecorator;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n *\n * Property in entity can be marked as Embedded, and on persist all columns from the embedded are mapped to the\n * single table of the entity where Embedded is used. And on hydration all columns which supposed to be in the\n * embedded will be mapped to it from the single table.\n */\nexport function Column(type: (type?: any) => Function, options?: ColumnEmbeddedOptions): PropertyDecorator;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(typeOrOptions?: ((type?: any) => Function)|ColumnType|(ColumnOptions&ColumnEmbeddedOptions), options?: (ColumnOptions&ColumnEmbeddedOptions)): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n\n        // normalize parameters\n        let type: ColumnType|undefined;\n        if (typeof typeOrOptions === \"string\" || typeOrOptions instanceof Function) {\n            type = <ColumnType> typeOrOptions;\n\n        } else if (typeOrOptions) {\n            options = <ColumnOptions> typeOrOptions;\n            type = typeOrOptions.type;\n        }\n        if (!options) options = {} as ColumnOptions;\n\n        // if type is not given explicitly then try to guess it\n        const reflectMetadataType = Reflect && (Reflect as any).getMetadata ? (Reflect as any).getMetadata(\"design:type\", object, propertyName) : undefined;\n        if (!type && reflectMetadataType) // if type is not given explicitly then try to guess it\n            type = reflectMetadataType;\n\n        // check if there is no type in column options then set type from first function argument, or guessed one\n        if (!options.type && type)\n            options.type = type;\n\n        // specify HSTORE type if column is HSTORE\n        if (options.type === \"hstore\" && !options.hstoreType)\n            options.hstoreType = reflectMetadataType === Object ? \"object\" : \"string\";\n\n        if (typeOrOptions instanceof Function) { // register an embedded\n            getMetadataArgsStorage().embeddeds.push({\n                target: object.constructor,\n                propertyName: propertyName,\n                isArray: reflectMetadataType === Array || options.array === true,\n                prefix: options.prefix !== undefined ? options.prefix : undefined,\n                type: typeOrOptions as (type?: any) => Function\n            } as EmbeddedMetadataArgs);\n\n        } else { // register a regular column\n\n            // if we still don't have a type then we need to give error to user that type is required\n            if (!options.type)\n                throw new ColumnTypeUndefinedError(object, propertyName);\n\n            // create unique\n            if (options.unique === true)\n                getMetadataArgsStorage().uniques.push({ target: object.constructor, columns: [propertyName] });\n\n            getMetadataArgsStorage().columns.push({\n                target: object.constructor,\n                propertyName: propertyName,\n                mode: \"regular\",\n                options: options\n            } as ColumnMetadataArgs);\n\n            if (options.generated) {\n                getMetadataArgsStorage().generations.push({\n                    target: object.constructor,\n                    propertyName: propertyName,\n                    strategy: typeof options.generated === \"string\" ? options.generated : \"increment\"\n                } as GeneratedMetadataArgs);\n            }\n        }\n    };\n}\n","import {ColumnOptions, getMetadataArgsStorage} from \"../../\";\nimport {PrimaryGeneratedColumnNumericOptions} from \"../options/PrimaryGeneratedColumnNumericOptions\";\nimport {PrimaryGeneratedColumnUUIDOptions} from \"../options/PrimaryGeneratedColumnUUIDOptions\";\nimport {GeneratedMetadataArgs} from \"../../metadata-args/GeneratedMetadataArgs\";\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(): PropertyDecorator;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(options: PrimaryGeneratedColumnNumericOptions): PropertyDecorator;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(strategy: \"increment\", options?: PrimaryGeneratedColumnNumericOptions): PropertyDecorator;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(strategy: \"uuid\", options?: PrimaryGeneratedColumnUUIDOptions): PropertyDecorator;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(strategy: \"rowid\", options?: PrimaryGeneratedColumnUUIDOptions): PropertyDecorator;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * This column creates an integer PRIMARY COLUMN with generated set to true.\n */\nexport function PrimaryGeneratedColumn(strategyOrOptions?: \"increment\"|\"uuid\"|\"rowid\"|PrimaryGeneratedColumnNumericOptions|PrimaryGeneratedColumnUUIDOptions,\n                                       maybeOptions?: PrimaryGeneratedColumnNumericOptions|PrimaryGeneratedColumnUUIDOptions): PropertyDecorator {\n\n    // normalize parameters\n    const options: ColumnOptions = {};\n    let strategy: \"increment\"|\"uuid\"|\"rowid\";\n    if (strategyOrOptions) {\n        if (typeof strategyOrOptions === \"string\")\n            strategy = strategyOrOptions as \"increment\"|\"uuid\"|\"rowid\";\n\n        if (strategyOrOptions instanceof Object) {\n            strategy = \"increment\";\n            Object.assign(options, strategyOrOptions);\n        }\n    } else {\n        strategy = \"increment\";\n    }\n    if (maybeOptions instanceof Object)\n        Object.assign(options, maybeOptions);\n\n    return function (object: Object, propertyName: string) {\n\n        // if column type is not explicitly set then determine it based on generation strategy\n        if (!options.type) {\n            if (strategy === \"increment\") {\n                options.type = Number;\n            } else if (strategy === \"uuid\") {\n                options.type = \"uuid\";\n            } else if (strategy === \"rowid\") {\n                options.type = \"int\";\n            }\n        }\n\n        // explicitly set a primary and generated to column options\n        options.primary = true;\n\n        // register column metadata args\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"regular\",\n            options: options\n        });\n\n        // register generated metadata args\n        getMetadataArgsStorage().generations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            strategy: strategy\n        } as GeneratedMetadataArgs);\n    };\n}\n","export class PrimaryColumnCannotBeNullableError extends Error {\n    name = \"PrimaryColumnCannotBeNullableError\";\n\n    constructor(object: Object, propertyName: string) {\n        super();\n        Object.setPrototypeOf(this, PrimaryColumnCannotBeNullableError.prototype);\n        this.message = `Primary column ${(<any>object.constructor).name}#${propertyName} cannot be nullable. ` +\n            `Its not allowed for primary keys. Try to remove nullable option.`;\n    }\n\n}","import {getMetadataArgsStorage, JoinColumnOptions} from \"../../\";\nimport {JoinColumnMetadataArgs} from \"../../metadata-args/JoinColumnMetadataArgs\";\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(): PropertyDecorator;\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(options: JoinColumnOptions): PropertyDecorator;\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(options: JoinColumnOptions[]): PropertyDecorator;\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(optionsOrOptionsArray?: JoinColumnOptions|JoinColumnOptions[]): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        const options = Array.isArray(optionsOrOptionsArray) ? optionsOrOptionsArray : [optionsOrOptionsArray || {}];\n        options.forEach(options => {\n            getMetadataArgsStorage().joinColumns.push({\n                target: object.constructor,\n                propertyName: propertyName,\n                name: options.name,\n                referencedColumnName: options.referencedColumnName\n            } as JoinColumnMetadataArgs);\n        });\n    };\n}\n","import {getMetadataArgsStorage, ObjectType, RelationOptions} from \"../../\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\n\n/**\n * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but\n * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id\n * on its own side.\n */\nexport function ManyToOne<T>(typeFunctionOrTarget: string|((type?: any) => ObjectType<T>), options?: RelationOptions): PropertyDecorator;\n\n/**\n * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but\n * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id\n * on its own side.\n */\nexport function ManyToOne<T>(typeFunctionOrTarget: string|((type?: any) => ObjectType<T>),\n                             inverseSide?: string|((object: T) => any),\n                             options?: RelationOptions): PropertyDecorator;\n\n/**\n * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but\n * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id\n * on its own side.\n */\nexport function ManyToOne<T>(typeFunctionOrTarget: string|((type?: any) => ObjectType<T>),\n                             inverseSideOrOptions?: string|((object: T) => any)|RelationOptions,\n                             options?: RelationOptions): PropertyDecorator {\n\n    // normalize parameters\n    let inverseSideProperty: string|((object: T) => any);\n    if (typeof inverseSideOrOptions === \"object\") {\n        options = <RelationOptions> inverseSideOrOptions;\n    } else {\n        inverseSideProperty = <string|((object: T) => any)> inverseSideOrOptions;\n    }\n\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions;\n\n        // now try to determine it its lazy relation\n        let isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n\n        getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            relationType: \"many-to-one\",\n            isLazy: isLazy,\n            type: typeFunctionOrTarget,\n            inverseSideProperty: inverseSideProperty,\n            options: options\n        } as RelationMetadataArgs);\n    };\n}\n","import {getMetadataArgsStorage, ObjectType, RelationOptions} from \"../../\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\n\n/**\n * One-to-many relation allows us to create a type of relation where Entity1 can have multiple instances of Entity2.\n * Entity2 has only one Entity1. Entity2 is the owner of the relationship and stores Entity1's id on its own side.\n */\nexport function OneToMany<T>(typeFunctionOrTarget: string|((type?: any) => ObjectType<T>), inverseSide: string|((object: T) => any), options?: RelationOptions): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions;\n\n        // now try to determine it its lazy relation\n        let isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n\n        getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            isLazy: isLazy,\n            relationType: \"one-to-many\",\n            type: typeFunctionOrTarget,\n            inverseSideProperty: inverseSide,\n            options: options\n        } as RelationMetadataArgs);\n    };\n}\n","import {EntityOptions, getMetadataArgsStorage} from \"../../\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\n\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(options?: EntityOptions): ClassDecorator;\n\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(name?: string, options?: EntityOptions): ClassDecorator;\n\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(nameOrOptions?: string|EntityOptions, maybeOptions?: EntityOptions): ClassDecorator {\n    const options = (typeof nameOrOptions === \"object\" ? nameOrOptions as EntityOptions : maybeOptions) || {};\n    const name = typeof nameOrOptions === \"string\" ? nameOrOptions : options.name;\n\n    return function (target) {\n        getMetadataArgsStorage().tables.push({\n            target: target,\n            name: name,\n            type: \"regular\",\n            orderBy: options.orderBy ? options.orderBy : undefined,\n            engine: options.engine ? options.engine : undefined,\n            database: options.database ? options.database : undefined,\n            schema: options.schema ? options.schema : undefined,\n            synchronize: options.synchronize,\n            withoutRowid: options.withoutRowid\n        } as TableMetadataArgs);\n    };\n}\n","/**\n * Thrown when ORM cannot get method parameter's type.\n * Basically, when reflect-metadata is not available or tsconfig is not properly setup.\n */\nexport class CannotReflectMethodParameterTypeError extends Error {\n    name = \"CannotReflectMethodParameterTypeError\";\n\n    constructor(target: Function, methodName: string) {\n        super();\n        Object.setPrototypeOf(this, CannotReflectMethodParameterTypeError.prototype);\n        this.message = `Cannot get reflected type for a \"${methodName}\" method's parameter of \"${target.name}\" class. ` +\n            `Make sure you have turned on an \"emitDecoratorMetadata\": true option in tsconfig.json. ` +\n            `Also make sure you have imported \"reflect-metadata\" on top of the main entry file in your application.`;\n    }\n\n}","import {getMetadataArgsStorage, IndexOptions} from \"../\";\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(options?: IndexOptions): ClassDecorator & PropertyDecorator;\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(name: string, options?: IndexOptions): ClassDecorator & PropertyDecorator;\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(name: string, options: { synchronize: false }): ClassDecorator & PropertyDecorator;\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(name: string, fields: string[], options?: IndexOptions): ClassDecorator & PropertyDecorator;\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(fields: string[], options?: IndexOptions): ClassDecorator & PropertyDecorator;\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(fields: (object?: any) => (any[]|{ [key: string]: number }), options?: IndexOptions): ClassDecorator & PropertyDecorator;\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(name: string, fields: (object?: any) => (any[]|{ [key: string]: number }), options?: IndexOptions): ClassDecorator & PropertyDecorator;\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(nameOrFieldsOrOptions?: string|string[]|((object: any) => (any[]|{ [key: string]: number }))|IndexOptions,\n                      maybeFieldsOrOptions?: ((object?: any) => (any[]|{ [key: string]: number }))|IndexOptions|string[]|{ synchronize: false },\n                      maybeOptions?: IndexOptions): ClassDecorator & PropertyDecorator {\n\n    // normalize parameters\n    const name = typeof nameOrFieldsOrOptions === \"string\" ? nameOrFieldsOrOptions : undefined;\n    const fields = typeof nameOrFieldsOrOptions === \"string\" ? <((object?: any) => (any[]|{ [key: string]: number }))|string[]> maybeFieldsOrOptions : nameOrFieldsOrOptions as string[];\n    let options = (typeof nameOrFieldsOrOptions === \"object\" && !Array.isArray(nameOrFieldsOrOptions)) ? nameOrFieldsOrOptions as IndexOptions : maybeOptions;\n    if (!options)\n        options = (typeof maybeFieldsOrOptions === \"object\" && !Array.isArray(maybeFieldsOrOptions)) ? maybeFieldsOrOptions as IndexOptions : maybeOptions;\n\n    return function (clsOrObject: Function|Object, propertyName?: string | symbol) {\n\n        getMetadataArgsStorage().indices.push({\n            target: propertyName ? clsOrObject.constructor : clsOrObject as Function,\n            name: name,\n            columns: propertyName ? [propertyName] : fields,\n            synchronize: options && (options as { synchronize: false }).synchronize === false ? false : true,\n            where: options ? options.where : undefined,\n            unique: options && options.unique ? true : false,\n            spatial: options && options.spatial ? true : false,\n            fulltext: options && options.fulltext ? true : false,\n            parser: options ? options.parser : undefined,\n            sparse: options && options.sparse ? true : false,\n            background: options && options.background ? true : false,\n            expireAfterSeconds: options ? options.expireAfterSeconds : undefined\n        } as IndexMetadataArgs);\n    };\n}\n","import {Repository} from \"./Repository\";\nimport {FindConditions, getConnection} from \"../index\";\nimport {DeepPartial} from \"../common/DeepPartial\";\nimport {SaveOptions} from \"./SaveOptions\";\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\nimport {RemoveOptions} from \"./RemoveOptions\";\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\nimport {Connection} from \"../connection/Connection\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {InsertResult} from \"../query-builder/result/InsertResult\";\nimport {UpdateResult} from \"../query-builder/result/UpdateResult\";\nimport {DeleteResult} from \"../query-builder/result/DeleteResult\";\nimport {ObjectID} from \"../driver/mongodb/typings\";\nimport {ObjectUtils} from \"../util/ObjectUtils\";\nimport {QueryDeepPartialEntity} from \"../query-builder/QueryPartialEntity\";\n\n/**\n * Base abstract entity for all entities, used in ActiveRecord patterns.\n */\nexport class BaseEntity {\n\n    // -------------------------------------------------------------------------\n    // Private Static Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used in all static methods of the BaseEntity.\n     */\n    // @ts-ignore: Unused variable which is actually used\n    private static usedConnection?: Connection;\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    hasId(): boolean {\n        return (this.constructor as any).getRepository().hasId(this);\n    }\n\n    /**\n     * Saves current entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save(options?: SaveOptions): Promise<this> {\n        return (this.constructor as any).getRepository().save(this, options);\n    }\n\n    /**\n     * Removes current entity from the database.\n     */\n    remove(options?: RemoveOptions): Promise<this> {\n        return (this.constructor as any).getRepository().remove(this, options);\n    }\n\n    /**\n     * Records the delete date of current entity.\n     */\n    softRemove(options?: SaveOptions): Promise<this> {\n        return (this.constructor as any).getRepository().softRemove(this, options);\n    }\n\n    /**\n     * Recovers a given entity in the database.\n     */\n    recover(options?: SaveOptions): Promise<this> {\n        return (this.constructor as any).getRepository().recover(this, options);\n    }\n\n    /**\n     * Reloads entity data from the database.\n     */\n    async reload(): Promise<void> {\n        const base: any = this.constructor;\n        const newestEntity: BaseEntity = await base.getRepository().findOneOrFail(base.getId(this));\n\n        ObjectUtils.assign(this, newestEntity);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Sets connection to be used by entity.\n     */\n    static useConnection(connection: Connection) {\n        this.usedConnection = connection;\n    }\n\n    /**\n     * Gets current entity's Repository.\n     */\n    static getRepository<T extends BaseEntity>(this: ObjectType<T>): Repository<T> {\n        const connection: Connection = (this as any).usedConnection || getConnection();\n        return connection.getRepository<T>(this);\n    }\n\n    /**\n     * Returns object that is managed by this repository.\n     * If this repository manages entity from schema,\n     * then it returns a name of that schema instead.\n     */\n    static get target(): Function|string {\n        return this.getRepository().target;\n    }\n\n    /**\n     * Checks entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    static hasId(entity: BaseEntity): boolean {\n        return this.getRepository().hasId(entity);\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    static getId<T extends BaseEntity>(this: ObjectType<T>, entity: T): any {\n        return (this as any).getRepository().getId(entity);\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    static createQueryBuilder<T extends BaseEntity>(this: ObjectType<T>, alias?: string): SelectQueryBuilder<T> {\n        return (this as any).getRepository().createQueryBuilder(alias);\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    static create<T extends BaseEntity>(this: ObjectType<T>): T;\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    static create<T extends BaseEntity>(this: ObjectType<T>, entityLikeArray: DeepPartial<T>[]): T[];\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    static create<T extends BaseEntity>(this: ObjectType<T>, entityLike: DeepPartial<T>): T;\n   /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    static create<T extends BaseEntity>(this: ObjectType<T>, entityOrEntities?: any): T {\n        return (this as any).getRepository().create(entityOrEntities);\n    }\n\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    static merge<T extends BaseEntity>(this: ObjectType<T>, mergeIntoEntity: T, ...entityLikes: DeepPartial<T>[]): T {\n        return (this as any).getRepository().merge(mergeIntoEntity, ...entityLikes);\n    }\n\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    static preload<T extends BaseEntity>(this: ObjectType<T>, entityLike: DeepPartial<T>): Promise<T|undefined> {\n        return (this as any).getRepository().preload(entityLike);\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    static save<T extends BaseEntity>(this: ObjectType<T>, entities: T[], options?: SaveOptions): Promise<T[]>;\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    static save<T extends BaseEntity>(this: ObjectType<T>, entity: T, options?: SaveOptions): Promise<T>;\n\n    /**\n     * Saves one or many given entities.\n     */\n    static save<T extends BaseEntity>(this: ObjectType<T>, entityOrEntities: T|T[], options?: SaveOptions): Promise<T|T[]> {\n        return (this as any).getRepository().save(entityOrEntities as any, options);\n    }\n\n    /**\n     * Removes a given entities from the database.\n     */\n    static remove<T extends BaseEntity>(this: ObjectType<T>, entities: T[], options?: RemoveOptions): Promise<T[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    static remove<T extends BaseEntity>(this: ObjectType<T>, entity: T, options?: RemoveOptions): Promise<T>;\n\n    /**\n     * Removes one or many given entities.\n     */\n    static remove<T extends BaseEntity>(this: ObjectType<T>, entityOrEntities: T|T[], options?: RemoveOptions): Promise<T|T[]> {\n        return (this as any).getRepository().remove(entityOrEntities as any, options);\n    }\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    static softRemove<T extends BaseEntity>(this: ObjectType<T>, entities: T[], options?: SaveOptions): Promise<T[]>;\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    static softRemove<T extends BaseEntity>(this: ObjectType<T>, entity: T, options?: SaveOptions): Promise<T>;\n\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    static softRemove<T extends BaseEntity>(this: ObjectType<T>, entityOrEntities: T|T[], options?: SaveOptions): Promise<T|T[]> {\n        return (this as any).getRepository().softRemove(entityOrEntities as any, options);\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     */\n    static insert<T extends BaseEntity>(this: ObjectType<T>, entity: QueryDeepPartialEntity<T>|QueryDeepPartialEntity<T>[], options?: SaveOptions): Promise<InsertResult> {\n        return (this as any).getRepository().insert(entity, options);\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    static update<T extends BaseEntity>(this: ObjectType<T>, criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindConditions<T>, partialEntity: QueryDeepPartialEntity<T>, options?: SaveOptions): Promise<UpdateResult> {\n        return (this as any).getRepository().update(criteria, partialEntity, options);\n    }\n\n    /**\n     * Deletes entities by a given criteria.\n     * Unlike remove method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    static delete<T extends BaseEntity>(this: ObjectType<T>, criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindConditions<T>, options?: RemoveOptions): Promise<DeleteResult> {\n        return (this as any).getRepository().delete(criteria, options);\n    }\n\n    /**\n     * Counts entities that match given options.\n     */\n    static count<T extends BaseEntity>(this: ObjectType<T>, options?: FindManyOptions<T>): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    static count<T extends BaseEntity>(this: ObjectType<T>, conditions?: FindConditions<T>): Promise<number>;\n\n    /**\n     * Counts entities that match given find options or conditions.\n     */\n    static count<T extends BaseEntity>(this: ObjectType<T>, optionsOrConditions?: FindManyOptions<T>|FindConditions<T>): Promise<number> {\n        return (this as any).getRepository().count(optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities that match given options.\n     */\n    static find<T extends BaseEntity>(this: ObjectType<T>, options?: FindManyOptions<T>): Promise<T[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    static find<T extends BaseEntity>(this: ObjectType<T>, conditions?: FindConditions<T>): Promise<T[]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    static find<T extends BaseEntity>(this: ObjectType<T>, optionsOrConditions?: FindManyOptions<T>|FindConditions<T>): Promise<T[]> {\n        return (this as any).getRepository().find(optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    static findAndCount<T extends BaseEntity>(this: ObjectType<T>, options?: FindManyOptions<T>): Promise<[ T[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    static findAndCount<T extends BaseEntity>(this: ObjectType<T>, conditions?: FindConditions<T>): Promise<[ T[], number ]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    static findAndCount<T extends BaseEntity>(this: ObjectType<T>, optionsOrConditions?: FindManyOptions<T>|FindConditions<T>): Promise<[ T[], number ]> {\n        return (this as any).getRepository().findAndCount(optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    static findByIds<T extends BaseEntity>(this: ObjectType<T>, ids: any[], options?: FindManyOptions<T>): Promise<T[]>;\n\n    /**\n     * Finds entities by ids.\n     * Optionally conditions can be applied.\n     */\n    static findByIds<T extends BaseEntity>(this: ObjectType<T>, ids: any[], conditions?: FindConditions<T>): Promise<T[]>;\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    static findByIds<T extends BaseEntity>(this: ObjectType<T>, ids: any[], optionsOrConditions?: FindManyOptions<T>|FindConditions<T>): Promise<T[]> {\n        return (this as any).getRepository().findByIds(ids, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    static findOne<T extends BaseEntity>(this: ObjectType<T>, id?: string|number|Date|ObjectID, options?: FindOneOptions<T>): Promise<T|undefined>;\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    static findOne<T extends BaseEntity>(this: ObjectType<T>, options?: FindOneOptions<T>): Promise<T|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    static findOne<T extends BaseEntity>(this: ObjectType<T>, conditions?: FindConditions<T>, options?: FindOneOptions<T>): Promise<T|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    static findOne<T extends BaseEntity>(this: ObjectType<T>, optionsOrConditions?: string|number|Date|ObjectID|FindOneOptions<T>|FindConditions<T>, maybeOptions?: FindOneOptions<T>): Promise<T|undefined> {\n        return (this as any).getRepository().findOne(optionsOrConditions as any, maybeOptions);\n    }\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    static findOneOrFail<T extends BaseEntity>(this: ObjectType<T>, id?: string|number|Date|ObjectID, options?: FindOneOptions<T>): Promise<T>;\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    static findOneOrFail<T extends BaseEntity>(this: ObjectType<T>, options?: FindOneOptions<T>): Promise<T>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    static findOneOrFail<T extends BaseEntity>(this: ObjectType<T>, conditions?: FindConditions<T>, options?: FindOneOptions<T>): Promise<T>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    static findOneOrFail<T extends BaseEntity>(this: ObjectType<T>, optionsOrConditions?: string|number|Date|ObjectID|FindOneOptions<T>|FindConditions<T>, maybeOptions?: FindOneOptions<T>): Promise<T> {\n        return (this as any).getRepository().findOneOrFail(optionsOrConditions as any, maybeOptions);\n    }\n\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     */\n    static query<T extends BaseEntity>(this: ObjectType<T>, query: string, parameters?: any[]): Promise<any> {\n        return (this as any).getRepository().query(query, parameters);\n    }\n\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     */\n    static clear<T extends BaseEntity>(this: ObjectType<T>, ): Promise<void> {\n        return (this as any).getRepository().clear();\n    }\n\n}\n","/*!\n */\nimport \"reflect-metadata\";\nimport {ConnectionManager} from \"./connection/ConnectionManager\";\nimport {Connection} from \"./connection/Connection\";\nimport {MetadataArgsStorage} from \"./metadata-args/MetadataArgsStorage\";\nimport {ConnectionOptions} from \"./connection/ConnectionOptions\";\nimport {getFromContainer} from \"./container\";\nimport {ObjectType} from \"./common/ObjectType\";\nimport {Repository} from \"./repository/Repository\";\nimport {EntityManager} from \"./entity-manager/EntityManager\";\nimport {PlatformTools} from \"./platform/PlatformTools\";\nimport {TreeRepository} from \"./repository/TreeRepository\";\nimport {MongoRepository} from \"./repository/MongoRepository\";\nimport {ConnectionOptionsReader} from \"./connection/ConnectionOptionsReader\";\nimport {MongoEntityManager} from \"./entity-manager/MongoEntityManager\";\nimport {SqljsEntityManager} from \"./entity-manager/SqljsEntityManager\";\nimport {SelectQueryBuilder} from \"./query-builder/SelectQueryBuilder\";\nimport {EntityTarget} from \"./common/EntityTarget\";\n\n// -------------------------------------------------------------------------\n// Commonly Used exports\n// -------------------------------------------------------------------------\n\nexport * from \"./container\";\nexport * from \"./common/EntityTarget\";\nexport * from \"./common/ObjectType\";\nexport * from \"./common/ObjectLiteral\";\nexport * from \"./common/DeepPartial\";\nexport * from \"./error/QueryFailedError\";\nexport * from \"./decorator/columns/Column\";\nexport * from \"./decorator/columns/CreateDateColumn\";\nexport * from \"./decorator/columns/DeleteDateColumn\";\nexport * from \"./decorator/columns/PrimaryGeneratedColumn\";\nexport * from \"./decorator/columns/PrimaryColumn\";\nexport * from \"./decorator/columns/UpdateDateColumn\";\nexport * from \"./decorator/columns/VersionColumn\";\nexport * from \"./decorator/columns/ViewColumn\";\nexport * from \"./decorator/columns/ObjectIdColumn\";\nexport * from \"./decorator/listeners/AfterInsert\";\nexport * from \"./decorator/listeners/AfterLoad\";\nexport * from \"./decorator/listeners/AfterRemove\";\nexport * from \"./decorator/listeners/AfterUpdate\";\nexport * from \"./decorator/listeners/BeforeInsert\";\nexport * from \"./decorator/listeners/BeforeRemove\";\nexport * from \"./decorator/listeners/BeforeUpdate\";\nexport * from \"./decorator/listeners/EventSubscriber\";\nexport * from \"./decorator/options/ColumnOptions\";\nexport * from \"./decorator/options/IndexOptions\";\nexport * from \"./decorator/options/JoinColumnOptions\";\nexport * from \"./decorator/options/JoinTableOptions\";\nexport * from \"./decorator/options/RelationOptions\";\nexport * from \"./decorator/options/EntityOptions\";\nexport * from \"./decorator/options/ValueTransformer\";\nexport * from \"./decorator/relations/JoinColumn\";\nexport * from \"./decorator/relations/JoinTable\";\nexport * from \"./decorator/relations/ManyToMany\";\nexport * from \"./decorator/relations/ManyToOne\";\nexport * from \"./decorator/relations/OneToMany\";\nexport * from \"./decorator/relations/OneToOne\";\nexport * from \"./decorator/relations/RelationCount\";\nexport * from \"./decorator/relations/RelationId\";\nexport * from \"./decorator/entity/Entity\";\nexport * from \"./decorator/entity/ChildEntity\";\nexport * from \"./decorator/entity/TableInheritance\";\nexport * from \"./decorator/entity-view/ViewEntity\";\nexport * from \"./decorator/transaction/Transaction\";\nexport * from \"./decorator/transaction/TransactionManager\";\nexport * from \"./decorator/transaction/TransactionRepository\";\nexport * from \"./decorator/tree/TreeLevelColumn\";\nexport * from \"./decorator/tree/TreeParent\";\nexport * from \"./decorator/tree/TreeChildren\";\nexport * from \"./decorator/tree/Tree\";\nexport * from \"./decorator/Index\";\nexport * from \"./decorator/Unique\";\nexport * from \"./decorator/Check\";\nexport * from \"./decorator/Exclusion\";\nexport * from \"./decorator/Generated\";\nexport * from \"./decorator/EntityRepository\";\nexport * from \"./find-options/operator/Any\";\nexport * from \"./find-options/operator/Between\";\nexport * from \"./find-options/operator/Equal\";\nexport * from \"./find-options/operator/In\";\nexport * from \"./find-options/operator/IsNull\";\nexport * from \"./find-options/operator/LessThan\";\nexport * from \"./find-options/operator/LessThanOrEqual\";\nexport * from \"./find-options/operator/ILike\";\nexport * from \"./find-options/operator/Like\";\nexport * from \"./find-options/operator/MoreThan\";\nexport * from \"./find-options/operator/MoreThanOrEqual\";\nexport * from \"./find-options/operator/Not\";\nexport * from \"./find-options/operator/Raw\";\nexport * from \"./find-options/FindConditions\";\nexport * from \"./find-options/FindManyOptions\";\nexport * from \"./find-options/FindOneOptions\";\nexport * from \"./find-options/FindOperator\";\nexport * from \"./find-options/FindOperatorType\";\nexport * from \"./find-options/JoinOptions\";\nexport * from \"./find-options/OrderByCondition\";\nexport * from \"./find-options/FindOptionsUtils\";\nexport * from \"./logger/Logger\";\nexport * from \"./logger/LoggerOptions\";\nexport * from \"./logger/AdvancedConsoleLogger\";\nexport * from \"./logger/SimpleConsoleLogger\";\nexport * from \"./logger/FileLogger\";\nexport * from \"./metadata/EntityMetadata\";\nexport * from \"./entity-manager/EntityManager\";\nexport * from \"./repository/AbstractRepository\";\nexport * from \"./repository/Repository\";\nexport * from \"./repository/BaseEntity\";\nexport * from \"./repository/TreeRepository\";\nexport * from \"./repository/MongoRepository\";\nexport * from \"./repository/RemoveOptions\";\nexport * from \"./repository/SaveOptions\";\nexport * from \"./schema-builder/table/TableCheck\";\nexport * from \"./schema-builder/table/TableColumn\";\nexport * from \"./schema-builder/table/TableExclusion\";\nexport * from \"./schema-builder/table/TableForeignKey\";\nexport * from \"./schema-builder/table/TableIndex\";\nexport * from \"./schema-builder/table/TableUnique\";\nexport * from \"./schema-builder/table/Table\";\nexport * from \"./driver/mongodb/typings\";\nexport * from \"./driver/types/DatabaseType\";\nexport * from \"./driver/types/ReplicationMode\";\nexport * from \"./driver/sqlserver/MssqlParameter\";\n\nexport {ConnectionOptionsReader} from \"./connection/ConnectionOptionsReader\";\nexport {Connection} from \"./connection/Connection\";\nexport {ConnectionManager} from \"./connection/ConnectionManager\";\nexport {ConnectionOptions} from \"./connection/ConnectionOptions\";\nexport {Driver} from \"./driver/Driver\";\nexport {QueryBuilder} from \"./query-builder/QueryBuilder\";\nexport {SelectQueryBuilder} from \"./query-builder/SelectQueryBuilder\";\nexport {DeleteQueryBuilder} from \"./query-builder/DeleteQueryBuilder\";\nexport {InsertQueryBuilder} from \"./query-builder/InsertQueryBuilder\";\nexport {UpdateQueryBuilder} from \"./query-builder/UpdateQueryBuilder\";\nexport {RelationQueryBuilder} from \"./query-builder/RelationQueryBuilder\";\nexport {Brackets} from \"./query-builder/Brackets\";\nexport {WhereExpression} from \"./query-builder/WhereExpression\";\nexport {InsertResult} from \"./query-builder/result/InsertResult\";\nexport {UpdateResult} from \"./query-builder/result/UpdateResult\";\nexport {DeleteResult} from \"./query-builder/result/DeleteResult\";\nexport {QueryRunner} from \"./query-runner/QueryRunner\";\nexport {MongoEntityManager} from \"./entity-manager/MongoEntityManager\";\nexport {Migration} from \"./migration/Migration\";\nexport {MigrationExecutor} from \"./migration/MigrationExecutor\";\nexport {MigrationInterface} from \"./migration/MigrationInterface\";\nexport {DefaultNamingStrategy} from \"./naming-strategy/DefaultNamingStrategy\";\nexport {NamingStrategyInterface} from \"./naming-strategy/NamingStrategyInterface\";\nexport {FindOneOptions} from \"./find-options/FindOneOptions\";\nexport {FindManyOptions} from \"./find-options/FindManyOptions\";\nexport {InsertEvent} from \"./subscriber/event/InsertEvent\";\nexport {LoadEvent} from \"./subscriber/event/LoadEvent\";\nexport {UpdateEvent} from \"./subscriber/event/UpdateEvent\";\nexport {RemoveEvent} from \"./subscriber/event/RemoveEvent\";\nexport {EntitySubscriberInterface} from \"./subscriber/EntitySubscriberInterface\";\nexport {EntitySchema} from \"./entity-schema/EntitySchema\";\nexport {EntitySchemaColumnOptions} from \"./entity-schema/EntitySchemaColumnOptions\";\nexport {EntitySchemaIndexOptions} from \"./entity-schema/EntitySchemaIndexOptions\";\nexport {EntitySchemaRelationOptions} from \"./entity-schema/EntitySchemaRelationOptions\";\nexport {ColumnType} from \"./driver/types/ColumnTypes\";\n\n// -------------------------------------------------------------------------\n// Deprecated\n// -------------------------------------------------------------------------\n\n// -------------------------------------------------------------------------\n// Commonly used functionality\n// -------------------------------------------------------------------------\n\n/**\n * Gets metadata args storage.\n */\nexport function getMetadataArgsStorage(): MetadataArgsStorage {\n    // we should store metadata storage in a global variable otherwise it brings too much problems\n    // one of the problem is that if any entity (or any other) will be imported before consumer will call\n    // useContainer method with his own container implementation, that entity will be registered in the\n    // old old container (default one post probably) and consumer will his entity.\n    // calling useContainer before he imports any entity (or any other) is not always convenient.\n    // another reason is that when we run migrations typeorm is being called from a global package\n    // and it may load entities which register decorators in typeorm of local package\n    // this leads to impossibility of usage of entities in migrations and cli related operations\n    const globalScope = PlatformTools.getGlobalVariable();\n    if (!globalScope.typeormMetadataArgsStorage)\n        globalScope.typeormMetadataArgsStorage = new MetadataArgsStorage();\n\n    return globalScope.typeormMetadataArgsStorage;\n}\n\n/**\n * Reads connection options stored in ormconfig configuration file.\n */\nexport async function getConnectionOptions(connectionName: string = \"default\"): Promise<ConnectionOptions> {\n    return new ConnectionOptionsReader().get(connectionName);\n}\n\n/**\n * Gets a ConnectionManager which creates connections.\n */\nexport function getConnectionManager(): ConnectionManager {\n    return getFromContainer(ConnectionManager);\n}\n\n/**\n * Creates a new connection and registers it in the manager.\n * Only one connection from ormconfig will be created (name \"default\" or connection without name).\n */\nexport async function createConnection(): Promise<Connection>;\n\n/**\n * Creates a new connection from the ormconfig file with a given name.\n */\nexport async function createConnection(name: string): Promise<Connection>;\n\n/**\n * Creates a new connection and registers it in the manager.\n */\nexport async function createConnection(options: ConnectionOptions): Promise<Connection>;\n\n/**\n * Creates a new connection and registers it in the manager.\n *\n * If connection options were not specified, then it will try to create connection automatically,\n * based on content of ormconfig (json/js/yml/xml/env) file or environment variables.\n * Only one connection from ormconfig will be created (name \"default\" or connection without name).\n */\nexport async function createConnection(optionsOrName?: any): Promise<Connection> {\n    const connectionName = typeof optionsOrName === \"string\" ? optionsOrName : \"default\";\n    const options = optionsOrName instanceof Object ? optionsOrName : await getConnectionOptions(connectionName);\n    return getConnectionManager().create(options).connect();\n}\n\n/**\n * Creates new connections and registers them in the manager.\n *\n * If connection options were not specified, then it will try to create connection automatically,\n * based on content of ormconfig (json/js/yml/xml/env) file or environment variables.\n * All connections from the ormconfig will be created.\n */\nexport async function createConnections(options?: ConnectionOptions[]): Promise<Connection[]> {\n    if (!options)\n        options = await new ConnectionOptionsReader().all();\n    const connections = options.map(options => getConnectionManager().create(options));\n    return Promise.all(connections.map(connection => connection.connect()));\n}\n\n/**\n * Gets connection from the connection manager.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n */\nexport function getConnection(connectionName: string = \"default\"): Connection {\n    return getConnectionManager().get(connectionName);\n}\n\n/**\n * Gets entity manager from the connection.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n */\nexport function getManager(connectionName: string = \"default\"): EntityManager {\n    return getConnectionManager().get(connectionName).manager;\n}\n\n/**\n * Gets MongoDB entity manager from the connection.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n */\nexport function getMongoManager(connectionName: string = \"default\"): MongoEntityManager {\n    return getConnectionManager().get(connectionName).manager as MongoEntityManager;\n}\n\n/**\n * Gets Sqljs entity manager from connection name.\n * \"default\" connection is used, when no name is specified.\n * Only works when Sqljs driver is used.\n */\nexport function getSqljsManager(connectionName: string = \"default\"): SqljsEntityManager {\n    return getConnectionManager().get(connectionName).manager as SqljsEntityManager;\n}\n\n/**\n * Gets repository for the given entity class.\n */\nexport function getRepository<Entity>(entityClass: EntityTarget<Entity>, connectionName: string = \"default\"): Repository<Entity> {\n    return getConnectionManager().get(connectionName).getRepository<Entity>(entityClass);\n}\n\n/**\n * Gets tree repository for the given entity class.\n */\nexport function getTreeRepository<Entity>(entityClass: EntityTarget<Entity>, connectionName: string = \"default\"): TreeRepository<Entity> {\n    return getConnectionManager().get(connectionName).getTreeRepository<Entity>(entityClass);\n}\n\n/**\n * Gets tree repository for the given entity class.\n */\nexport function getCustomRepository<T>(customRepository: ObjectType<T>, connectionName: string = \"default\"): T {\n    return getConnectionManager().get(connectionName).getCustomRepository(customRepository);\n}\n\n/**\n * Gets mongodb repository for the given entity class or name.\n */\nexport function getMongoRepository<Entity>(entityClass: EntityTarget<Entity>, connectionName: string = \"default\"): MongoRepository<Entity> {\n    return getConnectionManager().get(connectionName).getMongoRepository<Entity>(entityClass);\n}\n\n/**\n * Creates a new query builder.\n */\nexport function createQueryBuilder<Entity>(entityClass?: EntityTarget<Entity>, alias?: string, connectionName: string = \"default\"): SelectQueryBuilder<Entity> {\n    if (entityClass) {\n        return getRepository(entityClass, connectionName).createQueryBuilder(alias);\n    }\n\n    return getConnection(connectionName).createQueryBuilder();\n}\n","import {ObjectLiteral} from \"../common/ObjectLiteral\";\n\nexport class OrmUtils {\n\n    // -------------------------------------------------------------------------\n    // Public methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Chunks array into peaces.\n     */\n    static chunk<T>(array: T[], size: number): T[][] {\n        return Array.from(Array(Math.ceil(array.length / size)), (_, i) => {\n            return array.slice(i * size, i * size + size);\n        });\n    }\n\n    static splitClassesAndStrings<T>(clsesAndStrings: (string | T)[]): [T[], string[]] {\n        return [\n            (clsesAndStrings).filter((cls): cls is T => typeof cls !== \"string\"),\n            (clsesAndStrings).filter((str): str is string => typeof str === \"string\"),\n        ];\n    }\n\n    static groupBy<T, R>(array: T[], propertyCallback: (item: T) => R): { id: R, items: T[] }[] {\n        return array.reduce((groupedArray, value) => {\n            const key = propertyCallback(value);\n            let grouped = groupedArray.find(i => i.id === key);\n            if (!grouped) {\n                grouped = { id: key, items: [] };\n                groupedArray.push(grouped);\n            }\n            grouped.items.push(value);\n            return groupedArray;\n        }, [] as Array<{ id: R, items: T[] }>);\n    }\n\n    static uniq<T>(array: T[], criteria?: (item: T) => any): T[];\n    static uniq<T, K extends keyof T>(array: T[], property: K): T[];\n    static uniq<T, K extends keyof T>(array: T[], criteriaOrProperty?: ((item: T) => any) | K): T[] {\n        return array.reduce((uniqueArray, item) => {\n            let found: boolean = false;\n            if (criteriaOrProperty instanceof Function) {\n                const itemValue = criteriaOrProperty(item);\n                found = !!uniqueArray.find(uniqueItem => criteriaOrProperty(uniqueItem) === itemValue);\n\n            } else if (typeof criteriaOrProperty === \"string\") {\n                found = !!uniqueArray.find(uniqueItem => uniqueItem[criteriaOrProperty] === item[criteriaOrProperty]);\n\n            } else {\n                found = uniqueArray.indexOf(item) !== -1;\n            }\n\n            if (!found)\n                uniqueArray.push(item);\n\n            return uniqueArray;\n        }, [] as T[]);\n    }\n\n    static isObject(item: any) {\n        return (item && typeof item === \"object\" && !Array.isArray(item));\n    }\n\n    /**\n     * Deep Object.assign.\n     *\n     * @see http://stackoverflow.com/a/34749873\n     */\n    static mergeDeep(target: any, ...sources: any[]): any {\n        if (!sources.length) return target;\n        const source = sources.shift();\n\n        if (this.isObject(target) && this.isObject(source)) {\n            for (const key in source) {\n                const value = source[key];\n                if (key === \"__proto__\" || value instanceof Promise)\n                    continue;\n\n                if (this.isObject(value)\n                && !(value instanceof Map)\n                && !(value instanceof Set)\n                && !(value instanceof Date)\n                && !(value instanceof Buffer)\n                && !(value instanceof RegExp)) {\n                    if (!target[key])\n                        Object.assign(target, { [key]: Object.create(Object.getPrototypeOf(value)) });\n                    this.mergeDeep(target[key], value);\n                } else {\n                    Object.assign(target, { [key]: value });\n                }\n            }\n        }\n\n        return this.mergeDeep(target, ...sources);\n    }\n\n    /**\n     * Deep compare objects.\n     *\n     * @see http://stackoverflow.com/a/1144249\n     */\n    static deepCompare(...args: any[]): boolean {\n        let i: any, l: any, leftChain: any, rightChain: any;\n\n        if (arguments.length < 1) {\n            return true; // Die silently? Don't know how to handle such case, please help...\n            // throw \"Need two or more arguments to compare\";\n        }\n\n        for (i = 1, l = arguments.length; i < l; i++) {\n\n            leftChain = []; // Todo: this can be cached\n            rightChain = [];\n\n            if (!this.compare2Objects(leftChain, rightChain, arguments[0], arguments[i])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Check if two entity-id-maps are the same\n     */\n    static compareIds(firstId: ObjectLiteral|undefined, secondId: ObjectLiteral|undefined): boolean {\n        if (firstId === undefined || firstId === null || secondId === undefined || secondId === null)\n            return false;\n\n        // Optimized version for the common case\n        if (\n            ((typeof firstId.id === \"string\" && typeof secondId.id === \"string\") ||\n            (typeof firstId.id === \"number\" && typeof secondId.id === \"number\")) &&\n            Object.keys(firstId).length === 1 &&\n            Object.keys(secondId).length === 1\n        ) {\n            return firstId.id === secondId.id;\n        }\n\n        return OrmUtils.deepCompare(firstId, secondId);\n    }\n\n    /**\n     * Transforms given value into boolean value.\n     */\n    static toBoolean(value: any): boolean {\n        if (typeof value === \"boolean\")\n            return value;\n\n        if (typeof value === \"string\")\n            return value === \"true\" || value === \"1\";\n\n        if (typeof value === \"number\")\n            return value > 0;\n\n        return false;\n    }\n\n    /**\n     * Composes an object from the given array of keys and values.\n     */\n    static zipObject(keys: any[], values: any[]): ObjectLiteral {\n        return keys.reduce((object, column, index) => {\n            object[column] = values[index];\n            return object;\n        }, {} as ObjectLiteral);\n    }\n\n    /**\n     * Compares two arrays.\n     */\n    static isArraysEqual(arr1: any[], arr2: any[]): boolean {\n        if (arr1.length !== arr2.length) return false;\n        return arr1.every(element => {\n            return arr2.indexOf(element) !== -1;\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Private methods\n    // -------------------------------------------------------------------------\n\n    private static compare2Objects(leftChain: any, rightChain: any, x: any, y: any) {\n        let p;\n\n        // remember that NaN === NaN returns false\n        // and isNaN(undefined) returns true\n        if (Number.isNaN(x) && Number.isNaN(y))\n            return true;\n\n        // Compare primitives and functions.\n        // Check if both arguments link to the same object.\n        // Especially useful on the step where we compare prototypes\n        if (x === y)\n            return true;\n\n        // Unequal, but either is null or undefined (use case: jsonb comparasion)\n        // PR #3776, todo: add tests\n        if (x === null || y === null || x === undefined || y === undefined)\n          return false;\n\n        // Fix the buffer compare bug.\n        // See: https://github.com/typeorm/typeorm/issues/3654\n        if ((typeof x.equals === \"function\" || x.equals instanceof Function) && x.equals(y))\n            return true;\n\n        // Works in case when functions are created in constructor.\n        // Comparing dates is a common scenario. Another built-ins?\n        // We can even handle functions passed across iframes\n        if ((typeof x === \"function\" && typeof y === \"function\") ||\n            (x instanceof Date && y instanceof Date) ||\n            (x instanceof RegExp && y instanceof RegExp) ||\n            (x instanceof String && y instanceof String) ||\n            (x instanceof Number && y instanceof Number))\n            return x.toString() === y.toString();\n\n        // At last checking prototypes as good as we can\n        if (!(x instanceof Object && y instanceof Object))\n            return false;\n\n        if (x.isPrototypeOf(y) || y.isPrototypeOf(x))\n            return false;\n\n        if (x.constructor !== y.constructor)\n            return false;\n\n        if (x.prototype !== y.prototype)\n            return false;\n\n        // Check for infinitive linking loops\n        if (leftChain.indexOf(x) > -1 || rightChain.indexOf(y) > -1)\n            return false;\n\n        // Quick checking of one object being a subset of another.\n        // todo: cache the structure of arguments[0] for performance\n        for (p in y) {\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                return false;\n            }\n            else if (typeof y[p] !== typeof x[p]) {\n                return false;\n            }\n        }\n\n        for (p in x) {\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                return false;\n            }\n            else if (typeof y[p] !== typeof x[p]) {\n                return false;\n            }\n\n            switch (typeof (x[p])) {\n                case \"object\":\n                case \"function\":\n\n                    leftChain.push(x);\n                    rightChain.push(y);\n\n                    if (!this.compare2Objects(leftChain, rightChain, x[p], y[p])) {\n                        return false;\n                    }\n\n                    leftChain.pop();\n                    rightChain.pop();\n                    break;\n\n                default:\n                    if (x[p] !== y[p]) {\n                        return false;\n                    }\n                    break;\n            }\n        }\n\n        return true;\n    }\n\n}\n","/**\n * Broadcaster execution result - promises executed by operations and number of executed listeners and subscribers.\n */\nexport class BroadcasterResult {\n\n    /**\n     * Number of executed listeners and subscribers.\n     */\n    count: number = 0;\n\n    /**\n     * Promises returned by listeners and subscribers which needs to be awaited.\n     */\n    promises: Promise<any>[] = [];\n\n}","import { ColumnMetadata } from \"../metadata/ColumnMetadata\";\n\n/**\n * Provides utilities to transform hydrated and persisted data.\n */\nexport class DateUtils {\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Normalizes date object hydrated from the database.\n     */\n    static normalizeHydratedDate(mixedDate: Date|string|undefined): Date|string|undefined {\n        if (!mixedDate)\n            return mixedDate;\n\n        return typeof mixedDate === \"string\" ? new Date(mixedDate) : mixedDate as Date;\n    }\n\n    /**\n     * Converts given value into date string in a \"YYYY-MM-DD\" format.\n     */\n    static mixedDateToDateString(value: Date|any): string|any {\n        if (value instanceof Date)\n            return this.formatZerolessValue(value.getFullYear()) + \"-\" + this.formatZerolessValue(value.getMonth() + 1) + \"-\" + this.formatZerolessValue(value.getDate());\n\n        return value;\n    }\n\n    /**\n     * Converts given value into date object.\n     */\n    static mixedDateToDate(mixedDate: Date|string, toUtc: boolean = false, useMilliseconds = true): Date {\n        let date = typeof mixedDate === \"string\" ? new Date(mixedDate) : mixedDate;\n\n        if (toUtc)\n            date = new Date(\n                date.getUTCFullYear(),\n                date.getUTCMonth(),\n                date.getUTCDate(),\n                date.getUTCHours(),\n                date.getUTCMinutes(),\n                date.getUTCSeconds(),\n                date.getUTCMilliseconds()\n            );\n\n        if (!useMilliseconds)\n            date.setUTCMilliseconds(0);\n\n        return date;\n    }\n\n    /**\n     * Converts given value into time string in a \"HH:mm:ss\" format.\n     */\n    static mixedDateToTimeString(value: Date|any, skipSeconds: boolean = false): string|any {\n        if (value instanceof Date)\n            return this.formatZerolessValue(value.getHours()) +\n                \":\" + this.formatZerolessValue(value.getMinutes()) +\n                (!skipSeconds ? \":\" + this.formatZerolessValue(value.getSeconds()) : \"\");\n\n        return value;\n    }\n\n    /**\n     * Converts given value into time string in a \"HH:mm:ss\" format.\n     */\n    static mixedTimeToDate(value: Date|any): string|any {\n        if (typeof value === \"string\") {\n            const [hours, minutes, seconds] = value.split(\":\");\n            const date = new Date();\n            if (hours)\n                date.setHours(parseInt(hours));\n            if (minutes)\n                date.setMinutes(parseInt(minutes));\n            if (seconds)\n                date.setSeconds(parseInt(seconds));\n            return date;\n        }\n\n        return value;\n    }\n\n    /**\n     * Converts given string value with \"-\" separator into a \"HH:mm:ss\" format.\n     */\n    static mixedTimeToString(value: string|any, skipSeconds: boolean = false): string|any {\n        value = value instanceof Date ? (value.getHours() + \":\" + value.getMinutes() + (!skipSeconds ? \":\" + value.getSeconds() : \"\")) : value;\n        if (typeof value === \"string\") {\n            return value.split(\":\")\n                .map(v => v.length === 1 ? \"0\" + v : v) // append zero at beginning if we have a first-zero-less number\n                .join(\":\");\n        }\n\n        return value;\n    }\n\n    /**\n     * Converts given value into datetime string in a \"YYYY-MM-DD HH-mm-ss\" format.\n     */\n    static mixedDateToDatetimeString(value: Date|any, useMilliseconds?: boolean): string|any {\n        if (typeof value === \"string\") {\n            value = new Date(value);\n        }\n        if (value instanceof Date) {\n            let finalValue = this.formatZerolessValue(value.getFullYear()) + \"-\" +\n                this.formatZerolessValue(value.getMonth() + 1) + \"-\" +\n                this.formatZerolessValue(value.getDate()) + \" \" +\n                this.formatZerolessValue(value.getHours()) + \":\" +\n                this.formatZerolessValue(value.getMinutes()) + \":\" +\n                this.formatZerolessValue(value.getSeconds());\n\n            if (useMilliseconds)\n                finalValue += `.${this.formatMilliseconds(value.getMilliseconds())}`;\n\n            value = finalValue;\n        }\n\n\n        return value;\n    }\n\n    /**\n     * Converts given value into utc datetime string in a \"YYYY-MM-DD HH-mm-ss.sss\" format.\n     */\n    static mixedDateToUtcDatetimeString(value: Date|any): string|any {\n        if (typeof value === \"string\") {\n            value = new Date(value);\n        }\n        if (value instanceof Date) {\n            return this.formatZerolessValue(value.getUTCFullYear()) + \"-\" +\n                this.formatZerolessValue(value.getUTCMonth() + 1) + \"-\" +\n                this.formatZerolessValue(value.getUTCDate()) + \" \" +\n                this.formatZerolessValue(value.getUTCHours()) + \":\" +\n                this.formatZerolessValue(value.getUTCMinutes()) + \":\" +\n                this.formatZerolessValue(value.getUTCSeconds()) + \".\" +\n                this.formatMilliseconds(value.getUTCMilliseconds());\n        }\n\n        return value;\n    }\n\n    /**\n     * Converts each item in the given array to string joined by \",\" separator.\n     */\n    static simpleArrayToString(value: any[]|any): string[]|any {\n        if (Array.isArray(value)) {\n            return (value as any[])\n                .map(i => String(i))\n                .join(\",\");\n        }\n\n        return value;\n    }\n\n    /**\n     * Converts given string to simple array split by \",\" separator.\n     */\n    static stringToSimpleArray(value: string|any): string|any {\n        if (value instanceof String || typeof value === \"string\") {\n            if (value.length > 0) {\n                return value.split(\",\");\n            } else {\n                return [];\n            }\n        }\n\n        return value;\n    }\n\n    static simpleJsonToString(value: any): string {\n        return JSON.stringify(value);\n    }\n\n    static stringToSimpleJson(value: any) {\n        return typeof value === \"string\" ? JSON.parse(value) : value;\n    }\n\n    static simpleEnumToString(value: any) {\n        return \"\" + value;\n    }\n\n    static stringToSimpleEnum(value: any, columnMetadata: ColumnMetadata) {\n        if (\n            columnMetadata.enum\n            && !isNaN(value)\n            && columnMetadata.enum.indexOf(parseInt(value)) >= 0\n        ) {\n            // convert to number if that exists in poosible enum options\n            value = parseInt(value);\n        }\n\n        return value;\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Formats given number to \"0x\" format, e.g. if it is 1 then it will return \"01\".\n     */\n    private static formatZerolessValue(value: number): string {\n        if (value < 10)\n            return \"0\" + value;\n\n        return String(value);\n    }\n\n    /**\n     * Formats given number to \"0x\" format, e.g. if it is 1 then it will return \"01\".\n     */\n    private static formatMilliseconds(value: number): string {\n        if (value < 10) {\n            return \"00\" + value;\n        } else if (value < 100) {\n            return \"0\" + value;\n        } else {\n            return String(value);\n        }\n    }\n\n}\n","export default function _initializerDefineProperty(target, property, descriptor, context) {\n  if (!descriptor) return;\n  Object.defineProperty(target, property, {\n    enumerable: descriptor.enumerable,\n    configurable: descriptor.configurable,\n    writable: descriptor.writable,\n    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0\n  });\n}","export default function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object.keys(descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object.defineProperty(target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}","import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../../error/ConnectionIsNotSetError\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\nimport {DriverUtils} from \"../DriverUtils\";\nimport {SqlServerQueryRunner} from \"./SqlServerQueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {DateUtils} from \"../../util/DateUtils\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport {SqlServerConnectionOptions} from \"./SqlServerConnectionOptions\";\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\nimport {ColumnType} from \"../types/ColumnTypes\";\nimport {DataTypeDefaults} from \"../types/DataTypeDefaults\";\nimport {MssqlParameter} from \"./MssqlParameter\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {SqlServerConnectionCredentialsOptions} from \"./SqlServerConnectionCredentialsOptions\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {ApplyValueTransformers} from \"../../util/ApplyValueTransformers\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\n\n/**\n * Organizes communication with SQL Server DBMS.\n */\nexport class SqlServerDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * SQL Server library.\n     */\n    mssql: any;\n\n    /**\n     * Pool for master database.\n     */\n    master: any;\n\n    /**\n     * Pool for slave databases.\n     * Used in replication.\n     */\n    slaves: any[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: SqlServerConnectionOptions;\n\n    /**\n     * Master database used to perform all write queries.\n     */\n    database?: string;\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false;\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true;\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://docs.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"int\",\n        \"bigint\",\n        \"bit\",\n        \"decimal\",\n        \"money\",\n        \"numeric\",\n        \"smallint\",\n        \"smallmoney\",\n        \"tinyint\",\n        \"float\",\n        \"real\",\n        \"date\",\n        \"datetime2\",\n        \"datetime\",\n        \"datetimeoffset\",\n        \"smalldatetime\",\n        \"time\",\n        \"char\",\n        \"varchar\",\n        \"text\",\n        \"nchar\",\n        \"nvarchar\",\n        \"ntext\",\n        \"binary\",\n        \"image\",\n        \"varbinary\",\n        \"hierarchyid\",\n        \"sql_variant\",\n        \"timestamp\",\n        \"uniqueidentifier\",\n        \"xml\",\n        \"geometry\",\n        \"geography\",\n        \"rowversion\"\n    ];\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = [\n        \"geometry\",\n        \"geography\"\n    ];\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\n        \"char\",\n        \"varchar\",\n        \"nchar\",\n        \"nvarchar\",\n        \"binary\",\n        \"varbinary\"\n    ];\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = [\n        \"decimal\",\n        \"numeric\",\n        \"time\",\n        \"datetime2\",\n        \"datetimeoffset\"\n    ];\n\n    /**\n     * Gets list of column data types that support scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = [\n        \"decimal\",\n        \"numeric\"\n    ];\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"datetime2\",\n        createDateDefault: \"getdate()\",\n        updateDate: \"datetime2\",\n        updateDateDefault: \"getdate()\",\n        deleteDate: \"datetime2\",\n        deleteDateNullable: true,\n        version: \"int\",\n        treeLevel: \"int\",\n        migrationId: \"int\",\n        migrationName: \"varchar\",\n        migrationTimestamp: \"bigint\",\n        cacheId: \"int\",\n        cacheIdentifier: \"nvarchar\",\n        cacheTime: \"bigint\",\n        cacheDuration: \"int\",\n        cacheQuery: \"nvarchar(MAX)\" as any,\n        cacheResult: \"nvarchar(MAX)\" as any,\n        metadataType: \"varchar\",\n        metadataDatabase: \"varchar\",\n        metadataSchema: \"varchar\",\n        metadataTable: \"varchar\",\n        metadataName: \"varchar\",\n        metadataValue: \"nvarchar(MAX)\" as any,\n    };\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults = {\n        \"char\": { length: 1 },\n        \"nchar\": { length: 1 },\n        \"varchar\": { length: 255 },\n        \"nvarchar\": { length: 255 },\n        \"binary\": { length: 1 },\n        \"varbinary\": { length: 1 },\n        \"decimal\": { precision: 18, scale: 0 },\n        \"numeric\": { precision: 18, scale: 0 },\n        \"time\": { precision: 7 },\n        \"datetime2\": { precision: 7 },\n        \"datetimeoffset\": { precision: 7 }\n    };\n\n    /**\n     * Max length allowed by MSSQL Server for aliases (identifiers).\n     * @see https://docs.microsoft.com/en-us/sql/sql-server/maximum-capacity-specifications-for-sql-server\n     */\n    maxAliasLength = 128;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        this.connection = connection;\n        this.options = connection.options as SqlServerConnectionOptions;\n        this.isReplicated = this.options.replication ? true : false;\n\n        // load mssql package\n        this.loadDependencies();\n\n        // Object.assign(connection.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way\n        // validate options to make sure everything is set\n        // if (!this.options.host)\n            // throw new DriverOptionNotSetError(\"host\");\n        // if (!this.options.username)\n        //     throw new DriverOptionNotSetError(\"username\");\n        // if (!this.options.database)\n        //     throw new DriverOptionNotSetError(\"database\");\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect(): Promise<void> {\n\n        if (this.options.replication) {\n            this.slaves = await Promise.all(this.options.replication.slaves.map(slave => {\n                return this.createPool(this.options, slave);\n            }));\n            this.master = await this.createPool(this.options, this.options.replication.master);\n            this.database = this.options.replication.master.database;\n\n        } else {\n            this.master = await this.createPool(this.options, this.options);\n            this.database = this.options.database;\n        }\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        if (!this.master)\n            return Promise.reject(new ConnectionIsNotSetError(\"mssql\"));\n\n        await this.closePool(this.master);\n        await Promise.all(this.slaves.map(slave => this.closePool(slave)));\n        this.master = undefined;\n        this.slaves = [];\n    }\n\n\n    /**\n     * Closes connection pool.\n     */\n    protected async closePool(pool: any): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            pool.close((err: any) => err ? fail(err) : ok());\n        });\n    }\n\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode) {\n        return new SqlServerQueryRunner(this, mode);\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral, nativeParameters: ObjectLiteral): [string, any[]] {\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(key => nativeParameters[key]);\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters];\n\n        const keys = Object.keys(parameters).map(parameter => \"(:(\\\\.\\\\.\\\\.)?\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\n            let value: any;\n            let isArray = false;\n            if (key.substr(0, 4) === \":...\") {\n                isArray = true;\n                value = parameters[key.substr(4)];\n            } else {\n                value = parameters[key.substr(1)];\n            }\n\n            if (isArray) {\n                return value.map((v: any) => {\n                    escapedParameters.push(v);\n                    return \"@\" + (escapedParameters.length - 1);\n                }).join(\", \");\n\n            } else if (value instanceof Function) {\n                return value();\n\n            } else {\n                escapedParameters.push(value);\n                return \"@\" + (escapedParameters.length - 1);\n            }\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return `\"${columnName}\"`;\n    }\n\n    /**\n     * Build full table name with database name, schema name and table name.\n     * E.g. \"myDB\".\"mySchema\".\"myTable\"\n     */\n    buildTableName(tableName: string, schema?: string, database?: string): string {\n        let fullName = tableName;\n        if (schema)\n            fullName = schema + \".\" + tableName;\n        if (database) {\n            if (!schema) {\n                fullName = database + \"..\" + tableName;\n            } else {\n                fullName = database + \".\" + fullName;\n            }\n        }\n\n        return fullName;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n\n        if (value === null || value === undefined)\n            return value;\n\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0;\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDate(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedTimeToDate(value);\n\n        } else if (columnMetadata.type === \"datetime\"\n            || columnMetadata.type === \"smalldatetime\"\n            || columnMetadata.type === Date) {\n            return DateUtils.mixedDateToDate(value, false, false);\n\n        } else if (columnMetadata.type === \"datetime2\"\n            || columnMetadata.type === \"datetimeoffset\") {\n            return DateUtils.mixedDateToDate(value, false, true);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value);\n\n        } else if (columnMetadata.type === \"simple-enum\") {\n            return DateUtils.simpleEnumToString(value);\n\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;\n\n        if (columnMetadata.type === Boolean) {\n            value = value ? true : false;\n\n        } else if (columnMetadata.type === \"datetime\"\n            || columnMetadata.type === Date\n            || columnMetadata.type === \"datetime2\"\n            || columnMetadata.type === \"smalldatetime\"\n            || columnMetadata.type === \"datetimeoffset\") {\n            value = DateUtils.normalizeHydratedDate(value);\n\n        } else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value);\n\n        } else if (columnMetadata.type === \"simple-enum\") {\n            value = DateUtils.stringToSimpleEnum(value, columnMetadata);\n\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n\n        return value;\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: { type?: ColumnType, length?: number | string, precision?: number|null, scale?: number }): string {\n        if (column.type === Number || column.type === \"integer\") {\n            return \"int\";\n\n        } else if (column.type === String) {\n            return \"nvarchar\";\n\n        } else if (column.type === Date) {\n            return \"datetime\";\n\n        } else if (column.type === Boolean) {\n            return \"bit\";\n\n        } else if ((column.type as any) === Buffer) {\n            return \"binary\";\n\n        } else if (column.type === \"uuid\") {\n            return \"uniqueidentifier\";\n\n        } else if (column.type === \"simple-array\" || column.type === \"simple-json\") {\n            return \"ntext\";\n\n        } else if (column.type === \"simple-enum\") {\n            return \"nvarchar\";\n\n        } else if (column.type === \"dec\") {\n            return \"decimal\";\n\n        } else if (column.type === \"double precision\") {\n            return \"float\";\n\n        } else if (column.type === \"rowversion\") {\n            return \"timestamp\";  // the rowversion type's name in SQL server metadata is timestamp\n\n        } else {\n            return column.type as string || \"\";\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string {\n        const defaultValue = columnMetadata.default;\n\n        if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue;\n\n        } else if (typeof defaultValue === \"boolean\") {\n            return defaultValue === true ? \"1\" : \"0\";\n\n        } else if (typeof defaultValue === \"function\") {\n            return /*\"(\" + */defaultValue()/* + \")\"*/;\n\n        } else if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`;\n\n        } else {\n            return defaultValue;\n        }\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.uniques.some(uq => uq.columns.length === 1 && uq.columns[0] === column);\n    }\n\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    getColumnLength(column: ColumnMetadata|TableColumn): string {\n        if (column.length)\n            return column.length.toString();\n\n        if (column.type === \"varchar\" || column.type === \"nvarchar\" || column.type === String)\n            return \"255\";\n\n        return \"\";\n    }\n\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    createFullType(column: TableColumn): string {\n        let type = column.type;\n\n        // used 'getColumnLength()' method, because SqlServer sets `varchar` and `nvarchar` length to 1 by default.\n        if (this.getColumnLength(column)) {\n            type += `(${this.getColumnLength(column)})`;\n\n        } else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\n            type += `(${column.precision},${column.scale})`;\n\n        } else if (column.precision !== null && column.precision !== undefined) {\n            type +=  `(${column.precision})`;\n        }\n\n        if (column.isArray)\n            type += \" array\";\n\n        return type;\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        return Promise.resolve(this.master);\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        if (!this.slaves.length)\n            return this.obtainMasterConnection();\n\n        const random = Math.floor(Math.random() * this.slaves.length);\n        return Promise.resolve(this.slaves[random]);\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: ObjectLiteral) {\n        if (!insertResult)\n            return undefined;\n\n        return Object.keys(insertResult).reduce((map, key) => {\n            const column = metadata.findColumnWithDatabaseName(key);\n            if (column) {\n                OrmUtils.mergeDeep(map, column.createValueMap(this.prepareHydratedValue(insertResult[key], column)));\n            }\n            return map;\n        }, {} as ObjectLiteral);\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(tableColumns: TableColumn[], columnMetadatas: ColumnMetadata[]): ColumnMetadata[] {\n        return columnMetadatas.filter(columnMetadata => {\n            const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n\n            return  tableColumn.name !== columnMetadata.databaseName\n                || tableColumn.type !== this.normalizeType(columnMetadata)\n                || tableColumn.length !== columnMetadata.length\n                || tableColumn.precision !== columnMetadata.precision\n                || tableColumn.scale !== columnMetadata.scale\n                // || tableColumn.comment !== columnMetadata.comment || // todo\n                || (!tableColumn.isGenerated && this.lowerDefaultValueIfNessesary(this.normalizeDefault(columnMetadata)) !== this.lowerDefaultValueIfNessesary(tableColumn.default)) // we included check for generated here, because generated columns already can have default values\n                || tableColumn.isPrimary !== columnMetadata.isPrimary\n                || tableColumn.isNullable !== columnMetadata.isNullable\n                || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)\n                || tableColumn.isGenerated !== columnMetadata.isGenerated;\n        });\n    }\n    private lowerDefaultValueIfNessesary(value: string | undefined) {\n        // SqlServer saves function calls in default value as lowercase https://github.com/typeorm/typeorm/issues/2733\n        if (!value) {\n            return value;\n        }\n        return value.split(`'`).map((v, i) => {\n            return i % 2 === 1 ? v : v.toLowerCase();\n        }).join(`'`);\n    }\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        if (this.options.options && this.options.options.disableOutputReturning) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return true;\n    }\n\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported(): boolean {\n        return false;\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        return \"@\" + index;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Sql server's parameters needs to be wrapped into special object with type information about this value.\n     * This method wraps given value into MssqlParameter based on its column definition.\n     */\n    parametrizeValue(column: ColumnMetadata, value: any) {\n\n        // if its already MssqlParameter then simply return it\n        if (value instanceof MssqlParameter)\n            return value;\n\n        const normalizedType = this.normalizeType({ type: column.type });\n        if (column.length) {\n            return new MssqlParameter(value, normalizedType as any, column.length as any);\n\n        } else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\n            return new MssqlParameter(value, normalizedType as any, column.precision, column.scale);\n\n        } else if (column.precision !== null && column.precision !== undefined) {\n            return new MssqlParameter(value, normalizedType as any, column.precision);\n\n        } else if (column.scale !== null && column.scale !== undefined) {\n            return new MssqlParameter(value, normalizedType as any, column.scale);\n        }\n\n        return new MssqlParameter(value, normalizedType as any);\n    }\n\n    /**\n     * Sql server's parameters needs to be wrapped into special object with type information about this value.\n     * This method wraps all values of the given object into MssqlParameter based on their column definitions in the given table.\n     */\n    parametrizeMap(tablePath: string, map: ObjectLiteral): ObjectLiteral {\n\n        // find metadata for the given table\n        if (!this.connection.hasMetadata(tablePath)) // if no metadata found then we can't proceed because we don't have columns and their types\n            return map;\n        const metadata = this.connection.getMetadata(tablePath);\n\n        return Object.keys(map).reduce((newMap, key) => {\n            const value = map[key];\n\n            // find column metadata\n            const column = metadata.findColumnWithDatabaseName(key);\n            if (!column) // if we didn't find a column then we can't proceed because we don't have a column type\n                return value;\n\n            newMap[key] = this.parametrizeValue(column, value);\n            return newMap;\n        }, {} as ObjectLiteral);\n    }\n\n    buildTableVariableDeclaration(identifier: string, columns: ColumnMetadata[]): string {\n        const outputColumns = columns.map(column => {\n            return `${this.escape(column.databaseName)} ${this.createFullType(new TableColumn({\n                name: column.databaseName,\n                type: this.normalizeType(column),\n                length: column.length,\n                isNullable: column.isNullable,\n                isArray: column.isArray,\n            }))}`;\n        });\n\n        return `DECLARE ${identifier} TABLE (${outputColumns.join(\", \")})`;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.mssql = PlatformTools.load(\"mssql\");\n\n        } catch (e) { // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"SQL Server\", \"mssql\");\n        }\n    }\n\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    protected createPool(options: SqlServerConnectionOptions, credentials: SqlServerConnectionCredentialsOptions): Promise<any> {\n\n        credentials = Object.assign({}, credentials, DriverUtils.buildDriverOptions(credentials)); // todo: do it better way\n\n        // build connection options for the driver\n        const connectionOptions = Object.assign({}, {\n            connectionTimeout: this.options.connectionTimeout,\n            requestTimeout: this.options.requestTimeout,\n            stream: this.options.stream,\n            pool: this.options.pool,\n            options: this.options.options,\n        }, {\n            server: credentials.host,\n            user: credentials.username,\n            password: credentials.password,\n            database: credentials.database,\n            port: credentials.port,\n            domain: credentials.domain,\n        }, options.extra || {});\n\n        // set default useUTC option if it hasn't been set\n        if (!connectionOptions.options) connectionOptions.options = { useUTC: false };\n        else if (!connectionOptions.options.useUTC) connectionOptions.options.useUTC = false;\n\n        // pooling is enabled either when its set explicitly to true,\n        // either when its not defined at all (e.g. enabled by default)\n        return new Promise<void>((ok, fail) => {\n            const pool = new this.mssql.ConnectionPool(connectionOptions);\n\n            const { logger } = this.connection;\n\n            const poolErrorHandler = (options.pool && options.pool.errorHandler) || ((error: any) => logger.log(\"warn\", `MSSQL pool raised an error. ${error}`));\n            /*\n              Attaching an error handler to pool errors is essential, as, otherwise, errors raised will go unhandled and\n              cause the hosting app to crash.\n             */\n            pool.on(\"error\", poolErrorHandler);\n\n            const connection = pool.connect((err: any) => {\n                if (err) return fail(err);\n                ok(connection);\n            });\n        });\n    }\n\n}\n","import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../../error/ConnectionIsNotSetError\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\nimport {OracleQueryRunner} from \"./OracleQueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {DateUtils} from \"../../util/DateUtils\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport {OracleConnectionOptions} from \"./OracleConnectionOptions\";\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\nimport {ColumnType} from \"../types/ColumnTypes\";\nimport {DataTypeDefaults} from \"../types/DataTypeDefaults\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {OracleConnectionCredentialsOptions} from \"./OracleConnectionCredentialsOptions\";\nimport {DriverUtils} from \"../DriverUtils\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {ApplyValueTransformers} from \"../../util/ApplyValueTransformers\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\n\n/**\n * Organizes communication with Oracle RDBMS.\n */\nexport class OracleDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * Underlying oracle library.\n     */\n    oracle: any;\n\n    /**\n     * Pool for master database.\n     */\n    master: any;\n\n    /**\n     * Pool for slave databases.\n     * Used in replication.\n     */\n    slaves: any[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: OracleConnectionOptions;\n\n    /**\n     * Master database used to perform all write queries.\n     */\n    database?: string;\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false;\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true;\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://www.techonthenet.com/oracle/datatypes.php\n     * @see https://docs.oracle.com/cd/B28359_01/server.111/b28318/datatype.htm#CNCPT012\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"char\",\n        \"nchar\",\n        \"nvarchar2\",\n        \"varchar2\",\n        \"long\",\n        \"raw\",\n        \"long raw\",\n        \"number\",\n        \"numeric\",\n        \"float\",\n        \"dec\",\n        \"decimal\",\n        \"integer\",\n        \"int\",\n        \"smallint\",\n        \"real\",\n        \"double precision\",\n        \"date\",\n        \"timestamp\",\n        \"timestamp with time zone\",\n        \"timestamp with local time zone\",\n        \"interval year to month\",\n        \"interval day to second\",\n        \"bfile\",\n        \"blob\",\n        \"clob\",\n        \"nclob\",\n        \"rowid\",\n        \"urowid\"\n    ];\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = [];\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\n        \"char\",\n        \"nchar\",\n        \"nvarchar2\",\n        \"varchar2\",\n        \"varchar\",\n        \"raw\"\n    ];\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = [\n        \"number\",\n        \"float\",\n        \"timestamp\",\n        \"timestamp with time zone\",\n        \"timestamp with local time zone\"\n    ];\n\n    /**\n     * Gets list of column data types that support scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = [\n        \"number\"\n    ];\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"timestamp\",\n        createDateDefault: \"CURRENT_TIMESTAMP\",\n        updateDate: \"timestamp\",\n        updateDateDefault: \"CURRENT_TIMESTAMP\",\n        deleteDate: \"timestamp\",\n        deleteDateNullable: true,\n        version: \"number\",\n        treeLevel: \"number\",\n        migrationId: \"number\",\n        migrationName: \"varchar2\",\n        migrationTimestamp: \"number\",\n        cacheId: \"number\",\n        cacheIdentifier: \"varchar2\",\n        cacheTime: \"number\",\n        cacheDuration: \"number\",\n        cacheQuery: \"clob\",\n        cacheResult: \"clob\",\n        metadataType: \"varchar2\",\n        metadataDatabase: \"varchar2\",\n        metadataSchema: \"varchar2\",\n        metadataTable: \"varchar2\",\n        metadataName: \"varchar2\",\n        metadataValue: \"clob\",\n    };\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults = {\n        \"char\": { length: 1 },\n        \"nchar\": { length: 1 },\n        \"varchar\": { length: 255 },\n        \"varchar2\": { length: 255 },\n        \"nvarchar2\": { length: 255 },\n        \"raw\": { length: 2000 },\n        \"float\": { precision: 126 },\n        \"timestamp\": { precision: 6 },\n        \"timestamp with time zone\": { precision: 6 },\n        \"timestamp with local time zone\": { precision: 6 }\n    };\n\n    /**\n     * Max length allowed by Oracle for aliases.\n     * @see https://docs.oracle.com/database/121/SQLRF/sql_elements008.htm#SQLRF51129\n     * > The following list of rules applies to both quoted and nonquoted identifiers unless otherwise indicated\n     * > Names must be from 1 to 30 bytes long with these exceptions:\n     * > [...]\n     *\n     * Since Oracle 12.2 (with a compatible driver/client), the limit has been set to 128.\n     * @see https://docs.oracle.com/en/database/oracle/oracle-database/12.2/sqlrf/Database-Object-Names-and-Qualifiers.html\n     *\n     * > If COMPATIBLE is set to a value of 12.2 or higher, then names must be from 1 to 128 bytes long with these exceptions\n     */\n    maxAliasLength = 30;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        this.connection = connection;\n        this.options = connection.options as OracleConnectionOptions;\n\n        // load oracle package\n        this.loadDependencies();\n\n        // extra oracle setup\n        this.oracle.outFormat = this.oracle.OBJECT;\n\n        // Object.assign(connection.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way\n        // validate options to make sure everything is set\n        // if (!this.options.host)\n        //     throw new DriverOptionNotSetError(\"host\");\n        // if (!this.options.username)\n        //     throw new DriverOptionNotSetError(\"username\");\n        // if (!this.options.sid)\n        //     throw new DriverOptionNotSetError(\"sid\");\n        //\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect(): Promise<void> {\n        this.oracle.fetchAsString = [ this.oracle.CLOB ];\n        this.oracle.fetchAsBuffer = [ this.oracle.BLOB ];\n        if (this.options.replication) {\n            this.slaves = await Promise.all(this.options.replication.slaves.map(slave => {\n                return this.createPool(this.options, slave);\n            }));\n            this.master = await this.createPool(this.options, this.options.replication.master);\n            this.database = this.options.replication.master.database;\n\n        } else {\n            this.master = await this.createPool(this.options, this.options);\n            this.database = this.options.database;\n        }\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        if (!this.master)\n            return Promise.reject(new ConnectionIsNotSetError(\"oracle\"));\n\n        await this.closePool(this.master);\n        await Promise.all(this.slaves.map(slave => this.closePool(slave)));\n        this.master = undefined;\n        this.slaves = [];\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode) {\n        return new OracleQueryRunner(this, mode);\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral, nativeParameters: ObjectLiteral): [string, any[]] {\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(key => {\n            if (typeof nativeParameters[key] === \"boolean\")\n                return nativeParameters[key] ? 1 : 0;\n            return nativeParameters[key];\n        });\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters];\n\n        const keys = Object.keys(parameters).map(parameter => \"(:(\\\\.\\\\.\\\\.)?\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\n            let value: any;\n            let isArray = false;\n            if (key.substr(0, 4) === \":...\") {\n                isArray = true;\n                value = parameters[key.substr(4)];\n            } else {\n                value = parameters[key.substr(1)];\n            }\n\n            if (isArray) {\n                return value.map((v: any, index: number) => {\n                    escapedParameters.push(v);\n                    return `:${key.substr(4)}${index}`;\n                }).join(\", \");\n\n            } else if (value instanceof Function) {\n                return value();\n\n            } else if (typeof value === \"boolean\") {\n                return value ? 1 : 0;\n\n            } else {\n                escapedParameters.push(value);\n                return key;\n            }\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return `\"${columnName}\"`;\n    }\n\n    /**\n     * Build full table name with database name, schema name and table name.\n     * Oracle does not support table schemas. One user can have only one schema.\n     */\n    buildTableName(tableName: string, schema?: string, database?: string): string {\n        return tableName;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n\n        if (value === null || value === undefined)\n            return value;\n\n        if (columnMetadata.type === Boolean) {\n            return value ? 1 : 0;\n\n        } else if (columnMetadata.type === \"date\") {\n            if (typeof value === \"string\")\n                value = value.replace(/[^0-9-]/g, \"\");\n            return () => `TO_DATE('${DateUtils.mixedDateToDateString(value)}', 'YYYY-MM-DD')`;\n\n        } else if (columnMetadata.type === Date\n            || columnMetadata.type === \"timestamp\"\n            || columnMetadata.type === \"timestamp with time zone\"\n            || columnMetadata.type === \"timestamp with local time zone\") {\n            return DateUtils.mixedDateToDate(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;\n\n        if (columnMetadata.type === Boolean) {\n            value = !!value;\n\n        } else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value);\n\n        } else if (columnMetadata.type === Date\n            || columnMetadata.type === \"timestamp\"\n            || columnMetadata.type === \"timestamp with time zone\"\n            || columnMetadata.type === \"timestamp with local time zone\") {\n            value = DateUtils.normalizeHydratedDate(value);\n\n        } else if (columnMetadata.type === \"json\") {\n            value = JSON.parse(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value);\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n\n        return value;\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: { type?: ColumnType, length?: number|string, precision?: number|null, scale?: number, isArray?: boolean }): string {\n        if (column.type === Number || column.type === Boolean || column.type === \"numeric\"\n            || column.type === \"dec\" || column.type === \"decimal\" || column.type === \"int\"\n            || column.type === \"integer\" || column.type === \"smallint\") {\n            return \"number\";\n\n        } else if (column.type === \"real\" || column.type === \"double precision\") {\n            return \"float\";\n\n        } else if (column.type === String || column.type === \"varchar\") {\n            return \"varchar2\";\n\n        } else if (column.type === Date) {\n            return \"timestamp\";\n\n        } else if ((column.type as any) === Buffer) {\n            return \"blob\";\n\n        } else if (column.type === \"uuid\") {\n            return \"varchar2\";\n\n        } else if (column.type === \"simple-array\") {\n            return \"clob\";\n\n        } else if (column.type === \"simple-json\") {\n            return \"clob\";\n\n        } else {\n            return column.type as string || \"\";\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string {\n        const defaultValue = columnMetadata.default;\n\n        if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue;\n\n        } else if (typeof defaultValue === \"boolean\") {\n            return defaultValue === true ? \"1\" : \"0\";\n\n        } else if (typeof defaultValue === \"function\") {\n            return defaultValue();\n\n        } else if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`;\n\n        } else {\n            return defaultValue;\n        }\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.uniques.some(uq => uq.columns.length === 1 && uq.columns[0] === column);\n    }\n\n    /**\n     * Calculates column length taking into account the default length values.\n     */\n    getColumnLength(column: ColumnMetadata|TableColumn): string {\n        if (column.length)\n            return column.length.toString();\n\n        switch (column.type) {\n            case String:\n            case \"varchar\":\n            case \"varchar2\":\n            case \"nvarchar2\":\n                return \"255\";\n            case \"raw\":\n                return \"2000\";\n            case \"uuid\":\n                return \"36\";\n            default:\n                return \"\";\n        }\n    }\n\n    createFullType(column: TableColumn): string {\n        let type = column.type;\n\n        // used 'getColumnLength()' method, because in Oracle column length is required for some data types.\n        if (this.getColumnLength(column)) {\n            type += `(${this.getColumnLength(column)})`;\n\n        } else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\n\n        } else if (column.precision !== null && column.precision !== undefined) {\n            type += \"(\" + column.precision + \")\";\n        }\n\n        if (column.type === \"timestamp with time zone\") {\n            type = \"TIMESTAMP\" + (column.precision !== null && column.precision !== undefined ? \"(\" + column.precision + \")\" : \"\") + \" WITH TIME ZONE\";\n\n        } else if (column.type === \"timestamp with local time zone\") {\n            type = \"TIMESTAMP\" + (column.precision !== null && column.precision !== undefined ? \"(\" + column.precision + \")\" : \"\") + \" WITH LOCAL TIME ZONE\";\n        }\n\n        if (column.isArray)\n            type += \" array\";\n\n        return type;\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        return new Promise<any>((ok, fail) => {\n            this.master.getConnection((err: any, connection: any, release: Function) => {\n                if (err) return fail(err);\n                ok(connection);\n            });\n        });\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        if (!this.slaves.length)\n            return this.obtainMasterConnection();\n\n        return new Promise<any>((ok, fail) => {\n            const random = Math.floor(Math.random() * this.slaves.length);\n\n            this.slaves[random].getConnection((err: any, connection: any) => {\n                if (err) return fail(err);\n                ok(connection);\n            });\n        });\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: ObjectLiteral) {\n        if (!insertResult)\n            return undefined;\n\n        return Object.keys(insertResult).reduce((map, key) => {\n            const column = metadata.findColumnWithDatabaseName(key);\n            if (column) {\n                OrmUtils.mergeDeep(map, column.createValueMap(this.prepareHydratedValue(insertResult[key], column)));\n            }\n            return map;\n        }, {} as ObjectLiteral);\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(tableColumns: TableColumn[], columnMetadatas: ColumnMetadata[]): ColumnMetadata[] {\n        return columnMetadatas.filter(columnMetadata => {\n            const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n\n            return tableColumn.name !== columnMetadata.databaseName\n                || tableColumn.type !== this.normalizeType(columnMetadata)\n                || tableColumn.length !== columnMetadata.length\n                || tableColumn.precision !== columnMetadata.precision\n                || tableColumn.scale !== columnMetadata.scale\n                // || tableColumn.comment !== columnMetadata.comment || // todo\n                || this.normalizeDefault(columnMetadata) !== tableColumn.default\n                || tableColumn.isPrimary !== columnMetadata.isPrimary\n                || tableColumn.isNullable !== columnMetadata.isNullable\n                || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)\n                || (columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated);\n        });\n    }\n\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        return true;\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return false;\n    }\n\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported(): boolean {\n        return false;\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        return \":\" + (index + 1);\n    }\n\n    /**\n     * Converts column type in to native oracle type.\n     */\n    columnTypeToNativeParameter(type: ColumnType): any {\n        switch (this.normalizeType({ type: type as any })) {\n            case \"number\":\n            case \"numeric\":\n            case \"int\":\n            case \"integer\":\n            case \"smallint\":\n            case \"dec\":\n            case \"decimal\":\n                return this.oracle.NUMBER;\n            case \"char\":\n            case \"nchar\":\n            case \"nvarchar2\":\n            case \"varchar2\":\n                return this.oracle.STRING;\n            case \"blob\":\n                return this.oracle.BLOB;\n            case \"clob\":\n                return this.oracle.CLOB;\n            case \"date\":\n            case \"timestamp\":\n            case \"timestamp with time zone\":\n            case \"timestamp with local time zone\":\n                return this.oracle.DATE;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads all driver dependencies.\n     */\n    protected loadDependencies(): void {\n        try {\n            this.oracle = PlatformTools.load(\"oracledb\");\n\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\"Oracle\", \"oracledb\");\n        }\n    }\n\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    protected async createPool(options: OracleConnectionOptions, credentials: OracleConnectionCredentialsOptions): Promise<any> {\n\n        credentials = Object.assign({}, credentials, DriverUtils.buildDriverOptions(credentials)); // todo: do it better way\n\n        // build connection options for the driver\n        const connectionOptions = Object.assign({}, {\n            user: credentials.username,\n            password: credentials.password,\n            connectString: credentials.connectString ? credentials.connectString : credentials.host + \":\" + credentials.port + \"/\" + credentials.sid,\n        }, options.extra || {});\n\n        // pooling is enabled either when its set explicitly to true,\n        // either when its not defined at all (e.g. enabled by default)\n        return new Promise<void>((ok, fail) => {\n            this.oracle.createPool(connectionOptions, (err: any, pool: any) => {\n                if (err)\n                    return fail(err);\n                ok(pool);\n            });\n        });\n\n    }\n\n    /**\n     * Closes connection pool.\n     */\n    protected async closePool(pool: any): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            pool.close((err: any) => err ? fail(err) : ok());\n            pool = undefined;\n        });\n    }\n\n}\n","import {TableColumnOptions} from \"../options/TableColumnOptions\";\n\n/**\n * Table's columns in the database represented in this class.\n */\nexport class TableColumn {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Column name.\n     */\n    name: string;\n\n    /**\n     * Column type.\n     */\n    type: string;\n\n    /**\n     * Column's default value.\n     */\n    default?: any;\n\n    /**\n     * ON UPDATE trigger. Works only for MySQL.\n     */\n    onUpdate?: string;\n\n    /**\n     * Indicates if column is NULL, or is NOT NULL in the database.\n     */\n    isNullable: boolean = false;\n\n    /**\n     * Indicates if column is auto-generated sequence.\n     */\n    isGenerated: boolean = false;\n\n    /**\n     * Specifies generation strategy if this column will use auto increment.\n     * `rowid` option supported only in CockroachDB.\n     */\n    generationStrategy?: \"uuid\"|\"increment\"|\"rowid\";\n\n    /**\n     * Indicates if column is a primary key.\n     */\n    isPrimary: boolean = false;\n\n    /**\n     * Indicates if column has unique value.\n     */\n    isUnique: boolean = false;\n\n    /**\n     * Indicates if column stores array.\n     */\n    isArray: boolean = false;\n\n    /**\n     * Column's comment.\n     */\n    comment?: string;\n\n    /**\n     * Column type's length. Used only on some column types.\n     * For example type = \"string\" and length = \"100\" means that ORM will create a column with type varchar(100).\n     */\n    length: string = \"\";\n\n    /**\n     * Column type's display width. Used only on some column types in MySQL.\n     * For example, INT(4) specifies an INT with a display width of four digits.\n     */\n    width?: number;\n\n    /**\n     * Defines column character set.\n     */\n    charset?: string;\n\n    /**\n     * Defines column collation.\n     */\n    collation?: string;\n\n    /**\n     * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\n     * number of digits that are stored for the values.\n     */\n    precision?: number|null;\n\n    /**\n     * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\n     * of digits to the right of the decimal point and must not be greater than precision.\n     */\n    scale?: number;\n\n    /**\n     * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.\n     * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n     */\n    zerofill: boolean = false;\n\n    /**\n     * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.\n     */\n    unsigned: boolean = false;\n\n    /**\n     * Array of possible enumerated values.\n     */\n    enum?: string[];\n\n    /**\n     * Exact name of enum\n     */\n    enumName?: string;\n\n    /**\n     * Generated column expression. Supports only in MySQL.\n     */\n    asExpression?: string;\n\n    /**\n     * Generated column type. Supports only in MySQL.\n     */\n    generatedType?: \"VIRTUAL\"|\"STORED\";\n\n    /**\n     * Spatial Feature Type (Geometry, Point, Polygon, etc.)\n     */\n    spatialFeatureType?: string;\n\n    /**\n     * SRID (Spatial Reference ID (EPSG code))\n     */\n    srid?: number;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options?: TableColumnOptions) {\n        if (options) {\n            this.name = options.name;\n            this.type = options.type || \"\";\n            this.length = options.length || \"\";\n            this.width = options.width;\n            this.charset = options.charset;\n            this.collation = options.collation;\n            this.precision = options.precision;\n            this.scale = options.scale;\n            this.zerofill = options.zerofill || false;\n            this.unsigned = this.zerofill ? true : (options.unsigned || false);\n            this.default = options.default;\n            this.onUpdate = options.onUpdate;\n            this.isNullable = options.isNullable || false;\n            this.isGenerated = options.isGenerated || false;\n            this.generationStrategy = options.generationStrategy;\n            this.isPrimary = options.isPrimary || false;\n            this.isUnique = options.isUnique || false;\n            this.isArray = options.isArray || false;\n            this.comment = options.comment;\n            this.enum = options.enum;\n            this.enumName = options.enumName;\n            this.asExpression = options.asExpression;\n            this.generatedType = options.generatedType;\n            this.spatialFeatureType = options.spatialFeatureType;\n            this.srid = options.srid;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this column to a new column with exact same properties as this column has.\n     */\n    clone(): TableColumn {\n        return new TableColumn(<TableColumnOptions>{\n            name: this.name,\n            type: this.type,\n            length: this.length,\n            width: this.width,\n            charset: this.charset,\n            collation: this.collation,\n            precision: this.precision,\n            scale: this.scale,\n            zerofill: this.zerofill,\n            unsigned: this.unsigned,\n            enum: this.enum,\n            enumName: this.enumName,\n            asExpression: this.asExpression,\n            generatedType: this.generatedType,\n            default: this.default,\n            onUpdate: this.onUpdate,\n            isNullable: this.isNullable,\n            isGenerated: this.isGenerated,\n            generationStrategy: this.generationStrategy,\n            isPrimary: this.isPrimary,\n            isUnique: this.isUnique,\n            isArray: this.isArray,\n            comment: this.comment,\n            spatialFeatureType: this.spatialFeatureType,\n            srid: this.srid\n        });\n    }\n\n}\n","/**\n * Browser's implementation of the platform-specific tools.\n *\n * This file gonna replace PlatformTools for browser environment.\n * For node.js environment this class is not getting packaged.\n * Don't use methods of this class in the code, use PlatformTools methods instead.\n */\nexport class PlatformTools {\n\n    /**\n     * Type of the currently running platform.\n     */\n    static type: \"browser\"|\"node\" = \"browser\";\n\n    /**\n     * Gets global variable where global stuff can be stored.\n     */\n    static getGlobalVariable(): any {\n        if (typeof window !== \"undefined\") {\n            return window\n        } else {\n            // NativeScript uses global, not window\n            return global\n        }\n    }\n\n    /**\n     * Loads (\"require\"-s) given file or package.\n     * This operation only supports on node platform\n     */\n    static load(name: string): any {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: require(\"${name}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Normalizes given path. Does \"path.normalize\".\n     */\n    static pathNormalize(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.normalize(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Gets file extension. Does \"path.extname\".\n     */\n    static pathExtname(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.extname(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Resolved given path. Does \"path.resolve\".\n     */\n    static pathResolve(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.resolve(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Synchronously checks if file exist. Does \"fs.existsSync\".\n     */\n    static fileExist(pathStr: string): boolean {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.existsSync(\"${pathStr}\").`);\n\n        return false;\n    }\n\n    static dotenv(pathStr: string): void {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: dotenv.config({ path: \"${pathStr}\" }).`);\n    }\n\n    /**\n     * Gets environment variable.\n     */\n    static getEnvVariable(name: string): any {\n        // if (this.type === \"browser\")\n        //     throw new Error(`This option/function is not supported in the browser environment. Failed operation: process.env[\"${name}\"].`);\n        return undefined;\n    }\n\n    static readFileSync(filename: string): any {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.readFileSync(\"${filename}\").`);\n        return null;\n    }\n\n    static appendFileSync(filename: string, data: any) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.appendFileSync(\"${filename}\").`);\n    }\n\n    static writeFile(path: string, data: any): Promise<void> {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.writeFile(\"${path}\").`);\n        return Promise.reject(null);\n    }\n\n    /**\n     * Highlights sql string to be print in the console.\n     */\n    static highlightSql(sql: string) {\n        return sql;\n    }\n\n    /**\n     * Highlights json string to be print in the console.\n     */\n    static highlightJson(json: string) {\n        return json;\n    }\n\n    /**\n     * Logging functions needed by AdvancedConsoleLogger (but here without chalk)\n     */\n    static logInfo(prefix: string, info: any) {\n        console.info(prefix + \" \", info);\n    }\n\n    static logError(prefix: string, error: any) {\n        console.error(prefix + \" \", error);\n    }\n\n    static logWarn(prefix: string, warning: any) {\n        console.warn(prefix + \" \", warning);\n    }\n\n    static log(message: string) {\n        console.log(message);\n    }\n\n    static warn(message: string) {\n        return message;\n    }\n}\n\n/**\n * These classes are needed for stream operations or\n * in the mongodb driver. Both aren't supported in the browser.\n */\nexport class EventEmitter {}\n\nexport class Readable {}\n\nexport class Writable {}\n\nexport interface ReadStream {}\n\n/**\n * This loads a polyfill to enable Buffers in the browser.\n */\ninterface Window {\n    Buffer: any;\n}\n\ndeclare var window: Window;\nif (typeof window !== \"undefined\") {\n    window.Buffer = require(\"buffer/\").Buffer;\n}\n// NativeScript uses global, not window\nif (typeof global !== \"undefined\") {\n    global.Buffer = require(\"buffer/\").Buffer;\n}\n","import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {FindOperatorType} from \"./FindOperatorType\";\n\ntype SqlGeneratorType = (aliasPath: string) => string;\n\n/**\n * Find Operator used in Find Conditions.\n */\nexport class FindOperator<T> {\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Operator type.\n     */\n    private _type: FindOperatorType;\n\n    /**\n     * Parameter value.\n     */\n    private _value: T|FindOperator<T>;\n\n    /**\n     * ObjectLiteral parameters.\n     */\n    private _objectLiteralParameters: ObjectLiteral|undefined;\n\n    /**\n     * Indicates if parameter is used or not for this operator.\n     */\n    private _useParameter: boolean;\n\n    /**\n     * Indicates if multiple parameters must be used for this operator.\n     */\n    private _multipleParameters: boolean;\n\n    /**\n     * SQL generator\n     */\n    private _getSql: SqlGeneratorType|undefined;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        type: FindOperatorType,\n        value: T|FindOperator<T>,\n        useParameter: boolean = true,\n        multipleParameters: boolean = false,\n        getSql?: SqlGeneratorType,\n        objectLiteralParameters?: ObjectLiteral,\n    ) {\n        this._type = type;\n        this._value = value;\n        this._useParameter = useParameter;\n        this._multipleParameters = multipleParameters;\n        this._getSql = getSql; \n        this._objectLiteralParameters = objectLiteralParameters;\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if parameter is used or not for this operator.\n     * Extracts final value if value is another find operator.\n     */\n    get useParameter(): boolean {\n        if (this._value instanceof FindOperator)\n            return this._value.useParameter;\n\n        return this._useParameter;\n    }\n\n    /**\n     * Indicates if multiple parameters must be used for this operator.\n     * Extracts final value if value is another find operator.\n     */\n    get multipleParameters(): boolean {\n        if (this._value instanceof FindOperator)\n            return this._value.multipleParameters;\n\n        return this._multipleParameters;\n    }\n\n    /**\n     * Gets the Type of this FindOperator\n     */\n    get type(): string {\n        return this._type;\n    }\n\n    /**\n     * Gets the final value needs to be used as parameter value.\n     */\n    get value(): T {\n        if (this._value instanceof FindOperator)\n            return this._value.value;\n\n        return this._value;\n    }\n\n    /**\n     * Gets ObjectLiteral parameters.\n     */\n    get objectLiteralParameters(): ObjectLiteral|undefined {\n        if (this._value instanceof FindOperator)\n            return this._value.objectLiteralParameters;\n\n        return this._objectLiteralParameters;\n    }\n\n\n    /**\n     * Gets the child FindOperator if it exists\n     */\n    get child(): FindOperator<T>|undefined {\n        if (this._value instanceof FindOperator)\n            return this._value;\n\n        return undefined;\n    }\n\n    /**\n     * Gets the SQL generator\n     */\n    get getSql(): SqlGeneratorType|undefined {\n        if (this._value instanceof FindOperator)\n            return this._value.getSql;\n\n        return this._getSql;\n    }\n}\n","import {TableUniqueOptions} from \"../options/TableUniqueOptions\";\nimport {UniqueMetadata} from \"../../metadata/UniqueMetadata\";\n\n/**\n * Database's table unique constraint stored in this class.\n */\nexport class TableUnique {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Constraint name.\n     */\n    name?: string;\n\n    /**\n     * Columns that contains this constraint.\n     */\n    columnNames: string[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: TableUniqueOptions) {\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this constraint with exactly same properties.\n     */\n    clone(): TableUnique {\n        return new TableUnique(<TableUniqueOptions>{\n            name: this.name,\n            columnNames: [...this.columnNames]\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates unique from the unique metadata object.\n     */\n    static create(uniqueMetadata: UniqueMetadata): TableUnique {\n        return new TableUnique(<TableUniqueOptions>{\n            name: uniqueMetadata.name,\n            columnNames: uniqueMetadata.columns.map(column => column.databaseName)\n        });\n    }\n\n}","import {IndexMetadata} from \"../../metadata/IndexMetadata\";\nimport {TableIndexOptions} from \"../options/TableIndexOptions\";\n\n/**\n * Database's table index stored in this class.\n */\nexport class TableIndex {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Index name.\n     */\n    name?: string;\n\n    /**\n     * Columns included in this index.\n     */\n    columnNames: string[] = [];\n\n    /**\n     * Indicates if this index is unique.\n     */\n    isUnique: boolean;\n\n    /**\n     * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\n     * Works only in MySQL.\n     */\n    isSpatial: boolean;\n\n    /**\n     * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\n     * Works only in MySQL.\n     */\n    isFulltext: boolean;\n\n    /**\n     * Fulltext parser.\n     * Works only in MySQL.\n     */\n    parser?: string;\n\n    /**\n     * Index filter condition.\n     */\n    where: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: TableIndexOptions) {\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n        this.isUnique = !!options.isUnique;\n        this.isSpatial = !!options.isSpatial;\n        this.isFulltext = !!options.isFulltext;\n        this.parser = options.parser;\n        this.where = options.where ? options.where : \"\";\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this index with exactly same properties.\n     */\n    clone(): TableIndex {\n        return new TableIndex(<TableIndexOptions>{\n            name: this.name,\n            columnNames: [...this.columnNames],\n            isUnique: this.isUnique,\n            isSpatial: this.isSpatial,\n            isFulltext: this.isFulltext,\n            parser: this.parser,\n            where: this.where\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates index from the index metadata object.\n     */\n    static create(indexMetadata: IndexMetadata): TableIndex {\n        return new TableIndex(<TableIndexOptions>{\n            name: indexMetadata.name,\n            columnNames: indexMetadata.columns.map(column => column.databaseName),\n            isUnique: indexMetadata.isUnique,\n            isSpatial: indexMetadata.isSpatial,\n            isFulltext: indexMetadata.isFulltext,\n            parser: indexMetadata.parser,\n            where: indexMetadata.where\n        });\n    }\n\n}\n","import {ForeignKeyMetadata} from \"../../metadata/ForeignKeyMetadata\";\nimport {TableForeignKeyOptions} from \"../options/TableForeignKeyOptions\";\n\n/**\n * Foreign key from the database stored in this class.\n */\nexport class TableForeignKey {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Name of the foreign key constraint.\n     */\n    name?: string;\n\n    /**\n     * Column names which included by this foreign key.\n     */\n    columnNames: string[] = [];\n\n    /**\n     * Table referenced in the foreign key.\n     */\n    referencedTableName: string;\n\n    /**\n     * Column names which included by this foreign key.\n     */\n    referencedColumnNames: string[] = [];\n\n    /**\n     * \"ON DELETE\" of this foreign key, e.g. what action database should perform when\n     * referenced stuff is being deleted.\n     */\n    onDelete?: string;\n\n    /**\n     * \"ON UPDATE\" of this foreign key, e.g. what action database should perform when\n     * referenced stuff is being updated.\n     */\n    onUpdate?: string;\n\n    /**\n     * Set this foreign key constraint as \"DEFERRABLE\" e.g. check constraints at start\n     * or at the end of a transaction\n     */\n    deferrable?: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: TableForeignKeyOptions) {\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n        this.referencedColumnNames = options.referencedColumnNames;\n        this.referencedTableName = options.referencedTableName;\n        this.onDelete = options.onDelete;\n        this.onUpdate = options.onUpdate;\n        this.deferrable = options.deferrable;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this foreign key with exactly same properties.\n     */\n    clone(): TableForeignKey {\n        return new TableForeignKey(<TableForeignKeyOptions>{\n            name: this.name,\n            columnNames: [...this.columnNames],\n            referencedColumnNames: [...this.referencedColumnNames],\n            referencedTableName: this.referencedTableName,\n            onDelete: this.onDelete,\n            onUpdate: this.onUpdate,\n            deferrable: this.deferrable,\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new table foreign key from the given foreign key metadata.\n     */\n    static create(metadata: ForeignKeyMetadata): TableForeignKey {\n        return new TableForeignKey(<TableForeignKeyOptions>{\n            name: metadata.name,\n            columnNames: metadata.columnNames,\n            referencedColumnNames: metadata.referencedColumnNames,\n            referencedTableName: metadata.referencedTablePath,\n            onDelete: metadata.onDelete,\n            onUpdate: metadata.onUpdate,\n            deferrable: metadata.deferrable,\n        });\n    }\n\n}\n","/**\n */\nexport class QueryRunnerAlreadyReleasedError extends Error {\n    name = \"QueryRunnerAlreadyReleasedError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, QueryRunnerAlreadyReleasedError.prototype);\n        this.message = `Query runner already released. Cannot run queries anymore.`;\n    }\n\n}","import {Driver} from \"../Driver\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {DateUtils} from \"../../util/DateUtils\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\nimport {ColumnType} from \"../types/ColumnTypes\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {DataTypeDefaults} from \"../types/DataTypeDefaults\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {BaseConnectionOptions} from \"../../connection/BaseConnectionOptions\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {ApplyValueTransformers} from \"../../util/ApplyValueTransformers\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\n\n/**\n * Organizes communication with sqlite DBMS.\n */\nexport abstract class AbstractSqliteDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * Sqlite has a single QueryRunner because it works on a single database connection.\n     */\n    queryRunner?: QueryRunner;\n\n    /**\n     * Real database connection with sqlite database.\n     */\n    databaseConnection: any;\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: BaseConnectionOptions;\n\n    /**\n     * Master database used to perform all write queries.\n     */\n    database?: string;\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false;\n\n    /**\n     * SQLite underlying library.\n     */\n    sqlite: any;\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true;\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://www.tutorialspoint.com/sqlite/sqlite_data_types.htm\n     * @see https://sqlite.org/datatype3.html\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"int\",\n        \"integer\",\n        \"tinyint\",\n        \"smallint\",\n        \"mediumint\",\n        \"bigint\",\n        \"unsigned big int\",\n        \"int2\",\n        \"int8\",\n        \"integer\",\n        \"character\",\n        \"varchar\",\n        \"varying character\",\n        \"nchar\",\n        \"native character\",\n        \"nvarchar\",\n        \"text\",\n        \"clob\",\n        \"text\",\n        \"blob\",\n        \"real\",\n        \"double\",\n        \"double precision\",\n        \"float\",\n        \"real\",\n        \"numeric\",\n        \"decimal\",\n        \"boolean\",\n        \"date\",\n        \"time\",\n        \"datetime\"\n    ];\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\n        \"character\",\n        \"varchar\",\n        \"varying character\",\n        \"nchar\",\n        \"native character\",\n        \"nvarchar\",\n        \"text\",\n        \"blob\",\n        \"clob\"\n    ];\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = [];\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = [\n        \"real\",\n        \"double\",\n        \"double precision\",\n        \"float\",\n        \"real\",\n        \"numeric\",\n        \"decimal\",\n        \"date\",\n        \"time\",\n        \"datetime\"\n    ];\n\n    /**\n     * Gets list of column data types that support scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = [\n        \"real\",\n        \"double\",\n        \"double precision\",\n        \"float\",\n        \"real\",\n        \"numeric\",\n        \"decimal\",\n    ];\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"datetime\",\n        createDateDefault: \"datetime('now')\",\n        updateDate: \"datetime\",\n        updateDateDefault: \"datetime('now')\",\n        deleteDate: \"datetime\",\n        deleteDateNullable: true,\n        version: \"integer\",\n        treeLevel: \"integer\",\n        migrationId: \"integer\",\n        migrationName: \"varchar\",\n        migrationTimestamp: \"bigint\",\n        cacheId: \"int\",\n        cacheIdentifier: \"varchar\",\n        cacheTime: \"bigint\",\n        cacheDuration: \"int\",\n        cacheQuery: \"text\",\n        cacheResult: \"text\",\n        metadataType: \"varchar\",\n        metadataDatabase: \"varchar\",\n        metadataSchema: \"varchar\",\n        metadataTable: \"varchar\",\n        metadataName: \"varchar\",\n        metadataValue: \"text\",\n    };\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults;\n\n    /**\n     * No documentation specifying a maximum length for identifiers could be found\n     * for SQLite.\n     */\n    maxAliasLength?: number;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        this.connection = connection;\n        this.options = connection.options as BaseConnectionOptions;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Abstract\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    abstract createQueryRunner(mode: ReplicationMode): QueryRunner;\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n        this.databaseConnection = await this.createDatabaseConnection();\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.queryRunner = undefined;\n            this.databaseConnection.close((err: any) => err ? fail(err) : ok());\n        });\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n\n        if (value === null || value === undefined)\n            return value;\n\n        if (columnMetadata.type === Boolean || columnMetadata.type === \"boolean\") {\n            return value === true ? 1 : 0;\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value);\n\n        } else if (columnMetadata.type === \"datetime\" || columnMetadata.type === Date) {\n            // to string conversation needs because SQLite stores date as integer number, when date came as Object\n            // TODO: think about `toUTC` conversion\n            return DateUtils.mixedDateToUtcDatetimeString(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value);\n        } else if (columnMetadata.type === \"simple-enum\") {\n            return DateUtils.simpleEnumToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be hydrated, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;\n\n        if (columnMetadata.type === Boolean || columnMetadata.type === \"boolean\") {\n            value = value ? true : false;\n\n        } else if (columnMetadata.type === \"datetime\" || columnMetadata.type === Date) {\n            /**\n             * Fix date conversion issue\n             *\n             * If the format of the date string is \"2018-03-14 02:33:33.906\", Safari (and iOS WKWebView) will convert it to an invalid date object.\n             * We need to modify the date string to \"2018-03-14T02:33:33.906Z\" and Safari will convert it correctly.\n             *\n             * ISO 8601\n             * https://www.w3.org/TR/NOTE-datetime\n             */\n            if (value && typeof value === \"string\") {\n                // There are various valid time string formats a sqlite time string might have:\n                // https://www.sqlite.org/lang_datefunc.html\n                // There are two separate fixes we may need to do:\n                //   1) Add 'T' separator if space is used instead\n                //   2) Add 'Z' UTC suffix if no timezone or offset specified\n\n                if (/^\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d/.test(value)) {\n                    value = value.replace(\" \", \"T\");\n                }\n                if (/^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d(:\\d\\d(\\.\\d\\d\\d)?)?$/.test(value)) {\n                    value += \"Z\";\n                }\n            }\n\n            value = DateUtils.normalizeHydratedDate(value);\n\n        } else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value);\n\n        } else if ( columnMetadata.type === \"simple-enum\" ) {\n            value = DateUtils.stringToSimpleEnum(value, columnMetadata);\n\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n\n        return value;\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral, nativeParameters: ObjectLiteral): [string, any[]] {\n        const builtParameters: any[] = Object.keys(nativeParameters).map(key => {\n            // Mapping boolean values to their numeric representation\n            if (typeof nativeParameters[key] === \"boolean\") {\n                return nativeParameters[key] === true ? 1 : 0;\n            }\n\n            return nativeParameters[key];\n        });\n\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, builtParameters];\n\n        const keys = Object.keys(parameters).map(parameter => \"(:(\\\\.\\\\.\\\\.)?\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string): string => {\n            let value: any;\n            let isArray = false;\n            if (key.substr(0, 4) === \":...\") {\n                isArray = true;\n                value = parameters[key.substr(4)];\n            } else {\n                value = parameters[key.substr(1)];\n            }\n\n            if (isArray) {\n                return value.map((v: any) => {\n                    builtParameters.push(v);\n                    return \"?\";\n                    // return \"$\" + builtParameters.length;\n                }).join(\", \");\n\n            } else if (value instanceof Function) {\n                return value();\n\n            } else {\n                builtParameters.push(value);\n                return \"?\";\n                // return \"$\" + builtParameters.length;\n            }\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, builtParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return \"\\\"\" + columnName + \"\\\"\";\n    }\n\n    /**\n     * Build full table name with database name, schema name and table name.\n     * E.g. \"myDB\".\"mySchema\".\"myTable\"\n     *\n     * Returns only simple table name because all inherited drivers does not supports schema and database.\n     */\n    buildTableName(tableName: string, schema?: string, database?: string): string {\n        return tableName;\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: { type?: ColumnType, length?: number | string, precision?: number|null, scale?: number }): string {\n        if (column.type === Number || column.type === \"int\") {\n            return \"integer\";\n\n        } else if (column.type === String) {\n            return \"varchar\";\n\n        } else if (column.type === Date) {\n            return \"datetime\";\n\n        } else if (column.type === Boolean) {\n            return \"boolean\";\n\n        } else if (column.type === \"uuid\") {\n            return \"varchar\";\n\n        } else if (column.type === \"simple-array\") {\n            return \"text\";\n\n        } else if (column.type === \"simple-json\") {\n            return \"text\";\n\n        } else if (column.type === \"simple-enum\") {\n            return \"varchar\";\n\n        } else {\n            return column.type as string || \"\";\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string {\n        const defaultValue = columnMetadata.default;\n\n        if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue;\n\n        } else if (typeof defaultValue === \"boolean\") {\n            return defaultValue === true ? \"1\" : \"0\";\n\n        } else if (typeof defaultValue === \"function\") {\n            return defaultValue();\n\n        } else if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`;\n\n        } else {\n            return defaultValue;\n        }\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.uniques.some(uq => uq.columns.length === 1 && uq.columns[0] === column);\n    }\n\n    /**\n     * Calculates column length taking into account the default length values.\n     */\n    getColumnLength(column: ColumnMetadata): string {\n        return column.length ? column.length.toString() : \"\";\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    createFullType(column: TableColumn): string {\n        let type = column.type;\n        if (column.enum) {\n            return \"varchar\";\n        }\n        if (column.length) {\n            type += \"(\" + column.length + \")\";\n\n        } else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\n\n        } else if (column.precision !== null && column.precision !== undefined) {\n            type +=  \"(\" + column.precision + \")\";\n        }\n\n        if (column.isArray)\n            type += \" array\";\n\n        return type;\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: any, entityIndex: number, entityNum: number) {\n        const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\n            let value: any;\n            if (generatedColumn.generationStrategy === \"increment\" && insertResult) {\n                // NOTE: When INSERT statement is successfully completed, the last inserted row ID is returned.\n                // see also: SqliteQueryRunner.query()\n                value = insertResult - entityNum + entityIndex + 1;\n            // } else if (generatedColumn.generationStrategy === \"uuid\") {\n            //     value = insertValue[generatedColumn.databaseName];\n            }\n\n            if (!value) return map;\n            return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n        }, {} as ObjectLiteral);\n\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(tableColumns: TableColumn[], columnMetadatas: ColumnMetadata[]): ColumnMetadata[] {\n        return columnMetadatas.filter(columnMetadata => {\n            const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n\n            // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\n            // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\n            // console.log(\"type:\", tableColumn.type, this.normalizeType(columnMetadata));\n            // console.log(\"length:\", tableColumn.length, columnMetadata.length);\n            // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\n            // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\n            // console.log(\"comment:\", tableColumn.comment, columnMetadata.comment);\n            // console.log(\"default:\", tableColumn.default, columnMetadata.default);\n            // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\n            // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\n            // console.log(\"isUnique:\", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));\n            // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\n            // console.log(\"==========================================\");\n\n            return tableColumn.name !== columnMetadata.databaseName\n                || tableColumn.type !== this.normalizeType(columnMetadata)\n                || tableColumn.length !== columnMetadata.length\n                || tableColumn.precision !== columnMetadata.precision\n                || tableColumn.scale !== columnMetadata.scale\n                //  || tableColumn.comment !== columnMetadata.comment || // todo\n                || this.normalizeDefault(columnMetadata) !== tableColumn.default\n                || tableColumn.isPrimary !== columnMetadata.isPrimary\n                || tableColumn.isNullable !== columnMetadata.isNullable\n                || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)\n                || (columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated);\n        });\n    }\n\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        return false;\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return false;\n    }\n\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported(): boolean {\n        return false;\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        // return \"$\" + (index + 1);\n        return \"?\";\n        // return \"$\" + parameterName;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        throw new Error(\"Do not use AbstractSqlite directly, it has to be used with one of the sqlite drivers\");\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        // dependencies have to be loaded in the specific driver\n    }\n\n}\n","import {Driver} from \"./Driver\";\nimport { hash } from \"../util/StringUtils\";\n\n/**\n * Common driver utility functions.\n */\nexport class DriverUtils {\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Normalizes and builds a new driver options.\n     * Extracts settings from connection url and sets to a new options object.\n     */\n    static buildDriverOptions(options: any, buildOptions?: { useSid: boolean }): any {\n        if (options.url) {\n            const urlDriverOptions = this.parseConnectionUrl(options.url) as { [key: string]: any };\n\n            if (buildOptions && buildOptions.useSid && urlDriverOptions.database) {\n                urlDriverOptions.sid = urlDriverOptions.database;\n            }\n\n            for (const key of Object.keys(urlDriverOptions)) {\n                if (typeof urlDriverOptions[key] === \"undefined\") {\n                    delete urlDriverOptions[key];\n                }\n            }\n\n            return Object.assign({}, options, urlDriverOptions);\n        }\n        return Object.assign({}, options);\n    }\n\n    /**\n     * Builds column alias from given alias name and column name.\n     *\n     * If alias length is greater than the limit (if any) allowed by the current\n     * driver, replaces it with a hashed string.\n     *\n     * @param driver Current `Driver`.\n     * @param alias Alias part.\n     * @param column Name of the column to be concatened to `alias`.\n     *\n     * @return An alias allowing to select/transform the target `column`.\n     */\n    static buildColumnAlias({ maxAliasLength }: Driver, alias: string, column: string): string {\n        const columnAliasName = alias + \"_\" + column;\n\n        if (maxAliasLength && maxAliasLength > 0 && columnAliasName.length > maxAliasLength) {\n            return hash(columnAliasName, { length: maxAliasLength });\n        }\n\n        return columnAliasName;\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Extracts connection data from the connection url.\n     */\n    private static parseConnectionUrl(url: string) {\n        const type = url.split(\":\")[0];\n        const firstSlashes = url.indexOf(\"//\");\n        const preBase = url.substr(firstSlashes + 2);\n        const secondSlash = preBase.indexOf(\"/\");\n        const base = (secondSlash !== -1) ? preBase.substr(0, secondSlash) : preBase;\n        let afterBase = (secondSlash !== -1) ? preBase.substr(secondSlash + 1) : undefined;\n        // remove mongodb query params\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"));\n        }\n\n        const lastAtSign = base.lastIndexOf(\"@\");\n        const usernameAndPassword = base.substr(0, lastAtSign);\n        const hostAndPort = base.substr(lastAtSign + 1);\n\n        let username = usernameAndPassword;\n        let password = \"\";\n        const firstColon = usernameAndPassword.indexOf(\":\");\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon);\n            password = usernameAndPassword.substr(firstColon + 1);\n        }\n        const [host, port] = hostAndPort.split(\":\");\n\n        return {\n            type: type,\n            host: host,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined\n        };\n    }\n}\n","import {Connection, Driver, EntityMetadata, SelectQueryBuilder} from \"../..\";\nimport {ViewOptions} from \"../options/ViewOptions\";\n\n/**\n * View in the database represented in this class.\n */\nexport class View {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Contains database name, schema name and table name.\n     * E.g. \"myDB\".\"mySchema\".\"myTable\"\n     */\n    name: string;\n\n\n    /**\n     * Indicates if view is materialized.\n     */\n    materialized: boolean;\n\n    /**\n     * View definition.\n     */\n    expression: string | ((connection: Connection) => SelectQueryBuilder<any>);\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options?: ViewOptions) {\n        if (options) {\n            this.name = options.name;\n            this.expression = options.expression;\n            this.materialized = !!options.materialized;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this table to a new table with all properties cloned.\n     */\n    clone(): View {\n        return new View(<ViewOptions>{\n            name: this.name,\n            expression: this.expression,\n            materialized: this.materialized,\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates view from a given entity metadata.\n     */\n    static create(entityMetadata: EntityMetadata, driver: Driver): View {\n        const options: ViewOptions = {\n            name: driver.buildTableName(entityMetadata.tableName, entityMetadata.schema, entityMetadata.database),\n            expression: entityMetadata.expression!,\n            materialized: entityMetadata.tableMetadataArgs.materialized\n        };\n\n        return new View(options);\n    }\n\n}\n","import {TableCheckOptions} from \"../options/TableCheckOptions\";\nimport {CheckMetadata} from \"../../metadata/CheckMetadata\";\n\n/**\n * Database's table check constraint stored in this class.\n */\nexport class TableCheck {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Constraint name.\n     */\n    name?: string;\n\n    /**\n     * Column that contains this constraint.\n     */\n    columnNames?: string[] = [];\n\n    /**\n     * Check expression.\n     */\n    expression?: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: TableCheckOptions) {\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n        this.expression = options.expression;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this constraint with exactly same properties.\n     */\n    clone(): TableCheck {\n        return new TableCheck(<TableCheckOptions>{\n            name: this.name,\n            columnNames: this.columnNames ? [...this.columnNames] : [],\n            expression: this.expression,\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates checks from the check metadata object.\n     */\n    static create(checkMetadata: CheckMetadata): TableCheck {\n        return new TableCheck(<TableCheckOptions>{\n            name: checkMetadata.name,\n            expression: checkMetadata.expression\n        });\n    }\n\n}","/**\n * Sql server driver requires parameter types to be specified fo input parameters used in the query.\n *\n * @see https://github.com/patriksimek/node-mssql#data-types\n */\nexport class MssqlParameter {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    public params: any[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(value: any, type: \"bit\");\n    constructor(value: any, type: \"bigint\");\n    constructor(value: any, type: \"decimal\", precision?: number, scale?: number);\n    constructor(value: any, type: \"float\");\n    constructor(value: any, type: \"int\");\n    constructor(value: any, type: \"money\");\n    constructor(value: any, type: \"numeric\", precision?: number, scale?: number);\n    constructor(value: any, type: \"smallint\");\n    constructor(value: any, type: \"smallmoney\");\n    constructor(value: any, type: \"real\");\n    constructor(value: any, type: \"tinyint\");\n    constructor(value: any, type: \"char\", length?: number);\n    constructor(value: any, type: \"nchar\", length?: number);\n    constructor(value: any, type: \"text\");\n    constructor(value: any, type: \"ntext\");\n    constructor(value: any, type: \"varchar\", length?: number);\n    constructor(value: any, type: \"nvarchar\", length?: number);\n    constructor(value: any, type: \"xml\");\n    constructor(value: any, type: \"time\", scale?: number);\n    constructor(value: any, type: \"date\");\n    constructor(value: any, type: \"datetime\");\n    constructor(value: any, type: \"datetime2\", scale?: number);\n    constructor(value: any, type: \"datetimeoffset\", scale?: number);\n    constructor(value: any, type: \"smalldatetime\");\n    constructor(value: any, type: \"uniqueidentifier\");\n    constructor(value: any, type: \"variant\");\n    constructor(value: any, type: \"binary\");\n    constructor(value: any, type: \"varbinary\", length?: number);\n    constructor(value: any, type: \"image\");\n    constructor(value: any, type: \"udt\");\n    constructor(value: any, type: \"geography\");\n    constructor(value: any, type: \"geometry\");\n    constructor(value: any, type: \"rowversion\");\n    constructor(public value: any, public type: string, ...params: number[]) {\n        this.params = params || [];\n    }\n\n}","import {ColumnType, Connection, EntityMetadata, ObjectLiteral, TableColumn} from \"../..\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport {ApplyValueTransformers} from \"../../util/ApplyValueTransformers\";\nimport {DateUtils} from \"../../util/DateUtils\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {Driver} from \"../Driver\";\nimport {DataTypeDefaults} from \"../types/DataTypeDefaults\";\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\nimport {SapConnectionOptions} from \"./SapConnectionOptions\";\nimport {SapQueryRunner} from \"./SapQueryRunner\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\n\n/**\n * Organizes communication with SAP Hana DBMS.\n *\n * todo: looks like there is no built in support for connection pooling, we need to figure out something\n */\nexport class SapDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * Hana Pool instance.\n     */\n    client: any;\n\n    /**\n     * Pool for master database.\n     */\n    master: any;\n\n    /**\n     * Pool for slave databases.\n     * Used in replication.\n     */\n    slaves: any[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: SapConnectionOptions;\n\n    /**\n     * Master database used to perform all write queries.\n     */\n    database?: string;\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false;\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true;\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://help.sap.com/viewer/4fe29514fd584807ac9f2a04f6754767/2.0.03/en-US/20a1569875191014b507cf392724b7eb.html\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"tinyint\",\n        \"smallint\",\n        \"int\",\n        \"integer\",\n        \"bigint\",\n        \"smalldecimal\",\n        \"decimal\",\n        \"dec\",\n        \"real\",\n        \"double\",\n        \"float\",\n        \"date\",\n        \"time\",\n        \"seconddate\",\n        \"timestamp\",\n        \"boolean\",\n        \"char\",\n        \"nchar\",\n        \"varchar\",\n        \"nvarchar\",\n        \"text\",\n        \"alphanum\",\n        \"shorttext\",\n        \"array\",\n        \"varbinary\",\n        \"blob\",\n        \"clob\",\n        \"nclob\",\n        \"st_geometry\",\n        \"st_point\",\n    ];\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = [\n        \"st_geometry\",\n        \"st_point\",\n    ];\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\n        \"varchar\",\n        \"nvarchar\",\n        \"alphanum\",\n        \"shorttext\",\n        \"varbinary\"\n    ];\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = [\n        \"decimal\",\n    ];\n\n    /**\n     * Gets list of column data types that support scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = [\n        \"decimal\",\n    ];\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"timestamp\",\n        createDateDefault: \"CURRENT_TIMESTAMP\",\n        updateDate: \"timestamp\",\n        updateDateDefault: \"CURRENT_TIMESTAMP\",\n        deleteDate: \"timestamp\",\n        deleteDateNullable: true,\n        version: \"integer\",\n        treeLevel: \"integer\",\n        migrationId: \"integer\",\n        migrationName: \"nvarchar\",\n        migrationTimestamp: \"bigint\",\n        cacheId: \"integer\",\n        cacheIdentifier: \"nvarchar\",\n        cacheTime: \"bigint\",\n        cacheDuration: \"integer\",\n        cacheQuery: \"nvarchar(5000)\" as any,\n        cacheResult: \"text\",\n        metadataType: \"nvarchar\",\n        metadataDatabase: \"nvarchar\",\n        metadataSchema: \"nvarchar\",\n        metadataTable: \"nvarchar\",\n        metadataName: \"nvarchar\",\n        metadataValue: \"nvarchar(5000)\" as any,\n    };\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults = {\n        \"char\": { length: 1 },\n        \"nchar\": { length: 1 },\n        \"varchar\": { length: 255 },\n        \"nvarchar\": { length: 255 },\n        \"shorttext\": { length: 255 },\n        \"varbinary\": { length: 255 },\n        \"decimal\": { precision: 18, scale: 0 },\n    };\n\n    /**\n     * Max length allowed by SAP HANA for aliases (identifiers).\n     * @see https://help.sap.com/viewer/4fe29514fd584807ac9f2a04f6754767/2.0.03/en-US/20a760537519101497e3cfe07b348f3c.html\n     */\n    maxAliasLength = 128;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        this.connection = connection;\n        this.options = connection.options as SapConnectionOptions;\n        this.loadDependencies();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect(): Promise<void> {\n        // HANA connection info\n        const dbParams = {\n            hostName: this.options.host,\n            port: this.options.port,\n            userName: this.options.username,\n            password: this.options.password,\n            ...this.options.extra\n        };\n\n        if (this.options.database) dbParams.databaseName = this.options.database;\n        if (this.options.encrypt) dbParams.encrypt = this.options.encrypt;\n        if (this.options.sslValidateCertificate) dbParams.validateCertificate = this.options.sslValidateCertificate;\n        if (this.options.key) dbParams.key = this.options.key;\n        if (this.options.cert) dbParams.cert = this.options.cert;\n        if (this.options.ca) dbParams.ca = this.options.ca;\n\n        // pool options\n        const options: any = {\n            min: this.options.pool && this.options.pool.min ? this.options.pool.min : 1,\n            max: this.options.pool && this.options.pool.max ? this.options.pool.max : 10,\n        };\n\n        if (this.options.pool && this.options.pool.checkInterval) options.checkInterval = this.options.pool.checkInterval;\n        if (this.options.pool && this.options.pool.maxWaitingRequests) options.maxWaitingRequests = this.options.pool.maxWaitingRequests;\n        if (this.options.pool && this.options.pool.requestTimeout) options.requestTimeout = this.options.pool.requestTimeout;\n        if (this.options.pool && this.options.pool.idleTimeout) options.idleTimeout = this.options.pool.idleTimeout;\n\n        const { logger } = this.connection;\n\n        const poolErrorHandler = options.poolErrorHandler || ((error: any) => logger.log(\"warn\", `SAP Hana pool raised an error. ${error}`));\n        this.client.eventEmitter.on(\"poolError\", poolErrorHandler);\n\n        // create the pool\n        this.master = this.client.createPool(dbParams, options);\n\n        this.database = this.options.database;\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        const promise = this.master.clear();\n        this.master = undefined;\n        return promise;\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode) {\n        return new SapQueryRunner(this, mode);\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral, nativeParameters: ObjectLiteral): [string, any[]] {\n        const builtParameters: any[] = Object.keys(nativeParameters).map(key => {\n\n            if (nativeParameters[key] instanceof Date)\n                return DateUtils.mixedDateToDatetimeString(nativeParameters[key], true);\n\n            return nativeParameters[key];\n        });\n\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, builtParameters];\n\n        const keys = Object.keys(parameters).map(parameter => \"(:(\\\\.\\\\.\\\\.)?\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string): string => {\n            let value: any;\n            let isArray = false;\n            if (key.substr(0, 4) === \":...\") {\n                isArray = true;\n                value = parameters[key.substr(4)];\n            } else {\n                value = parameters[key.substr(1)];\n            }\n\n            if (isArray) {\n                return value.map((v: any) => {\n                    builtParameters.push(v);\n                    return \"?\";\n                    // return \"$\" + builtParameters.length;\n                }).join(\", \");\n\n            } else if (value instanceof Function) {\n                return value();\n\n            } else if (value instanceof Date) {\n                return DateUtils.mixedDateToDatetimeString(value, true);\n\n            } else {\n                builtParameters.push(value);\n                return \"?\";\n                // return \"$\" + builtParameters.length;\n            }\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, builtParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return `\"${columnName}\"`;\n    }\n\n    /**\n     * Build full table name with schema name and table name.\n     * E.g. \"mySchema\".\"myTable\"\n     */\n    buildTableName(tableName: string, schema?: string): string {\n        return schema ? `${schema}.${tableName}` : tableName;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n\n        if (value === null || value === undefined)\n            return value;\n\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0;\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value);\n\n        } else if (columnMetadata.type === \"timestamp\"\n            || columnMetadata.type === Date) {\n            return DateUtils.mixedDateToDatetimeString(value, true);\n\n        } else if (columnMetadata.type === \"seconddate\") {\n            return DateUtils.mixedDateToDatetimeString(value, false);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value);\n\n        } else if (columnMetadata.type === \"simple-enum\") {\n            return DateUtils.simpleEnumToString(value);\n\n        } else if (columnMetadata.isArray) {\n            return () => `ARRAY(${value.map((it: any) => `'${it}'`)})`;\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;\n\n        if (columnMetadata.type === Boolean) {\n            value = value ? true : false;\n\n        } else if (columnMetadata.type === \"timestamp\"\n            || columnMetadata.type === \"seconddate\"\n            || columnMetadata.type === Date) {\n            value = DateUtils.normalizeHydratedDate(value);\n\n        } else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value);\n\n        } else if (columnMetadata.type === \"simple-enum\") {\n            value = DateUtils.stringToSimpleEnum(value, columnMetadata);\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n\n        return value;\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: { type?: ColumnType, length?: number | string, precision?: number|null, scale?: number }): string {\n        if (column.type === Number || column.type === \"int\") {\n            return \"integer\";\n\n        } else if (column.type === String) {\n            return \"nvarchar\";\n\n        } else if (column.type === Date) {\n            return \"timestamp\";\n\n        } else if (column.type === Boolean) {\n            return \"boolean\";\n\n        } else if ((column.type as any) === Buffer) {\n            return \"blob\";\n\n        } else if (column.type === \"uuid\") {\n            return \"nvarchar\";\n\n        } else if (column.type === \"simple-array\" || column.type === \"simple-json\") {\n            return \"text\";\n\n        } else if (column.type === \"simple-enum\") {\n            return \"nvarchar\";\n\n        } else {\n            return column.type as string || \"\";\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string {\n        const defaultValue = columnMetadata.default;\n\n        if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue;\n\n        } else if (typeof defaultValue === \"boolean\") {\n            return defaultValue === true ? \"true\" : \"false\";\n\n        } else if (typeof defaultValue === \"function\") {\n            return defaultValue();\n\n        } else if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`;\n\n        } else {\n            return defaultValue;\n        }\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.indices.some(idx => idx.isUnique && idx.columns.length === 1 && idx.columns[0] === column);\n    }\n\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    getColumnLength(column: ColumnMetadata|TableColumn): string {\n        if (column.length)\n            return column.length.toString();\n\n        if (column.generationStrategy === \"uuid\")\n            return \"36\";\n\n        switch (column.type) {\n            case \"varchar\":\n            case \"nvarchar\":\n            case \"shorttext\":\n            case String:\n                return \"255\";\n            case \"alphanum\":\n                return \"127\";\n            case \"varbinary\":\n                return \"255\";\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    createFullType(column: TableColumn): string {\n        let type = column.type;\n\n        // used 'getColumnLength()' method, because SqlServer sets `varchar` and `nvarchar` length to 1 by default.\n        if (this.getColumnLength(column)) {\n            type += `(${this.getColumnLength(column)})`;\n\n        } else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\n            type += `(${column.precision},${column.scale})`;\n\n        } else if (column.precision !== null && column.precision !== undefined) {\n            type += `(${column.precision})`;\n        }\n\n        if (column.isArray)\n            type += \" array\";\n\n        return type;\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        return this.master.getConnection();\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        return this.obtainMasterConnection();\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: ObjectLiteral) {\n        const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\n            let value: any;\n            if (generatedColumn.generationStrategy === \"increment\" && insertResult) {\n                value = insertResult;\n                // } else if (generatedColumn.generationStrategy === \"uuid\") {\n                //     console.log(\"getting db value:\", generatedColumn.databaseName);\n                //     value = generatedColumn.getEntityValue(uuidMap);\n            }\n\n            return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n        }, {} as ObjectLiteral);\n\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(tableColumns: TableColumn[], columnMetadatas: ColumnMetadata[]): ColumnMetadata[] {\n        return columnMetadatas.filter(columnMetadata => {\n            const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n\n            // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\n            // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\n            // console.log(\"type:\", tableColumn.type, _this.normalizeType(columnMetadata));\n            // console.log(\"length:\", tableColumn.length, _this.getColumnLength(columnMetadata));\n            // console.log(\"width:\", tableColumn.width, columnMetadata.width);\n            // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\n            // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\n            // console.log(\"default:\", tableColumn.default, columnMetadata.default);\n            // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\n            // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\n            // console.log(\"isUnique:\", tableColumn.isUnique, _this.normalizeIsUnique(columnMetadata));\n            // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\n            // console.log((columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated));\n            // console.log(\"==========================================\");\n\n            const normalizeDefault = this.normalizeDefault(columnMetadata);\n            const hanaNullComapatibleDefault = normalizeDefault == null ? undefined : normalizeDefault;\n\n            return tableColumn.name !== columnMetadata.databaseName\n                || tableColumn.type !== this.normalizeType(columnMetadata)\n                || columnMetadata.length && tableColumn.length !== this.getColumnLength(columnMetadata)\n                || tableColumn.precision !== columnMetadata.precision\n                || tableColumn.scale !== columnMetadata.scale\n                // || tableColumn.comment !== columnMetadata.comment || // todo\n                || (!tableColumn.isGenerated && (hanaNullComapatibleDefault !== tableColumn.default)) // we included check for generated here, because generated columns already can have default values\n                || tableColumn.isPrimary !== columnMetadata.isPrimary\n                || tableColumn.isNullable !== columnMetadata.isNullable\n                || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)\n                || (columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated);\n        });\n    }\n\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        return false;\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return false;\n    }\n\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported(): boolean {\n        return true;\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        return \"?\";\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.client = PlatformTools.load(\"hdb-pool\");\n\n        } catch (e) { // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"SAP Hana\", \"hdb-pool\");\n        }\n\n        try {\n            PlatformTools.load(\"@sap/hana-client\");\n\n        } catch (e) { // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"SAP Hana\", \"@sap/hana-client\");\n        }\n    }\n\n}\n","export class ObjectUtils {\n  /**\n   * Copy the values of all of the enumerable own properties from one or more source objects to a\n   * target object. Returns the target object.\n   * @param target The target object to copy to.\n   * @param source The source object from which to copy properties.\n   */\n  static assign<T, U>(target: T, source: U): T & U;\n\n  /**\n   * Copy the values of all of the enumerable own properties from one or more source objects to a\n   * target object. Returns the target object.\n   * @param target The target object to copy to.\n   * @param source1 The first source object from which to copy properties.\n   * @param source2 The second source object from which to copy properties.\n   */\n  static assign<T, U, V>(target: T, source1: U, source2: V): T & U & V;\n\n  /**\n   * Copy the values of all of the enumerable own properties from one or more source objects to a\n   * target object. Returns the target object.\n   * @param target The target object to copy to.\n   * @param source1 The first source object from which to copy properties.\n   * @param source2 The second source object from which to copy properties.\n   * @param source3 The third source object from which to copy properties.\n   */\n  static assign<T, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;\n\n  /**\n   * Copy the values of all of the enumerable own properties from one or more source objects to a\n   * target object. Returns the target object.\n   * @param target The target object to copy to.\n   * @param sources One or more source objects from which to copy properties\n   */\n  static assign(target: object, ...sources: any[]): any {\n    for (const source of sources) {\n      for (const prop of Object.getOwnPropertyNames(source)) {\n          (target as any)[prop] = source[prop];\n      }\n    }\n  }\n}","import createNamedContext from \"./createNameContext\";\n\nconst historyContext = /*#__PURE__*/ createNamedContext(\"Router-History\");\nexport default historyContext;\n","// TODO: Replace with React.createContext once we can assume React 16+\nimport createContext from \"mini-create-react-context\";\n\nconst createNamedContext = name => {\n  const context = createContext();\n  context.displayName = name;\n\n  return context;\n};\n\nexport default createNamedContext;\n","// TODO: Replace with React.createContext once we can assume React 16+\nimport createContext from \"mini-create-react-context\";\n\nconst createNamedContext = name => {\n  const context = createContext();\n  context.displayName = name;\n\n  return context;\n};\n\nconst context = /*#__PURE__*/ createNamedContext(\"Router\");\nexport default context;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport warning from \"tiny-warning\";\n\nimport HistoryContext from \"./HistoryContext.js\";\nimport RouterContext from \"./RouterContext.js\";\n\n/**\n * The public API for putting history on context.\n */\nclass Router extends React.Component {\n  static computeRootMatch(pathname) {\n    return { path: \"/\", url: \"/\", params: {}, isExact: pathname === \"/\" };\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      location: props.history.location\n    };\n\n    // This is a bit of a hack. We have to start listening for location\n    // changes here in the constructor in case there are any <Redirect>s\n    // on the initial render. If there are, they will replace/push when\n    // they mount and since cDM fires in children before parents, we may\n    // get a new location before the <Router> is mounted.\n    this._isMounted = false;\n    this._pendingLocation = null;\n\n    if (!props.staticContext) {\n      this.unlisten = props.history.listen(location => {\n        if (this._isMounted) {\n          this.setState({ location });\n        } else {\n          this._pendingLocation = location;\n        }\n      });\n    }\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n\n    if (this._pendingLocation) {\n      this.setState({ location: this._pendingLocation });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.unlisten) this.unlisten();\n  }\n\n  render() {\n    return (\n      <RouterContext.Provider\n        value={{\n          history: this.props.history,\n          location: this.state.location,\n          match: Router.computeRootMatch(this.state.location.pathname),\n          staticContext: this.props.staticContext\n        }}\n      >\n        <HistoryContext.Provider\n          children={this.props.children || null}\n          value={this.props.history}\n        />\n      </RouterContext.Provider>\n    );\n  }\n}\n\nif (__DEV__) {\n  Router.propTypes = {\n    children: PropTypes.node,\n    history: PropTypes.object.isRequired,\n    staticContext: PropTypes.object\n  };\n\n  Router.prototype.componentDidUpdate = function(prevProps) {\n    warning(\n      prevProps.history === this.props.history,\n      \"You cannot change <Router history>\"\n    );\n  };\n}\n\nexport default Router;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { createMemoryHistory as createHistory } from \"history\";\nimport warning from \"tiny-warning\";\n\nimport Router from \"./Router.js\";\n\n/**\n * The public API for a <Router> that stores location in memory.\n */\nclass MemoryRouter extends React.Component {\n  history = createHistory(this.props);\n\n  render() {\n    return <Router history={this.history} children={this.props.children} />;\n  }\n}\n\nif (__DEV__) {\n  MemoryRouter.propTypes = {\n    initialEntries: PropTypes.array,\n    initialIndex: PropTypes.number,\n    getUserConfirmation: PropTypes.func,\n    keyLength: PropTypes.number,\n    children: PropTypes.node\n  };\n\n  MemoryRouter.prototype.componentDidMount = function() {\n    warning(\n      !this.props.history,\n      \"<MemoryRouter> ignores the history prop. To use a custom history, \" +\n        \"use `import { Router }` instead of `import { MemoryRouter as Router }`.\"\n    );\n  };\n}\n\nexport default MemoryRouter;\n","import React from \"react\";\n\nclass Lifecycle extends React.Component {\n  componentDidMount() {\n    if (this.props.onMount) this.props.onMount.call(this, this);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);\n  }\n\n  componentWillUnmount() {\n    if (this.props.onUnmount) this.props.onUnmount.call(this, this);\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default Lifecycle;\n","import pathToRegexp from \"path-to-regexp\";\n\nconst cache = {};\nconst cacheLimit = 10000;\nlet cacheCount = 0;\n\nfunction compilePath(path, options) {\n  const cacheKey = `${options.end}${options.strict}${options.sensitive}`;\n  const pathCache = cache[cacheKey] || (cache[cacheKey] = {});\n\n  if (pathCache[path]) return pathCache[path];\n\n  const keys = [];\n  const regexp = pathToRegexp(path, keys, options);\n  const result = { regexp, keys };\n\n  if (cacheCount < cacheLimit) {\n    pathCache[path] = result;\n    cacheCount++;\n  }\n\n  return result;\n}\n\n/**\n * Public API for matching a URL pathname to a path.\n */\nfunction matchPath(pathname, options = {}) {\n  if (typeof options === \"string\" || Array.isArray(options)) {\n    options = { path: options };\n  }\n\n  const { path, exact = false, strict = false, sensitive = false } = options;\n\n  const paths = [].concat(path);\n\n  return paths.reduce((matched, path) => {\n    if (!path && path !== \"\") return null;\n    if (matched) return matched;\n\n    const { regexp, keys } = compilePath(path, {\n      end: exact,\n      strict,\n      sensitive\n    });\n    const match = regexp.exec(pathname);\n\n    if (!match) return null;\n\n    const [url, ...values] = match;\n    const isExact = pathname === url;\n\n    if (exact && !isExact) return null;\n\n    return {\n      path, // the path used to match\n      url: path === \"/\" && url === \"\" ? \"/\" : url, // the matched portion of the URL\n      isExact, // whether or not we matched exactly\n      params: keys.reduce((memo, key, index) => {\n        memo[key.name] = values[index];\n        return memo;\n      }, {})\n    };\n  }, null);\n}\n\nexport default matchPath;\n","import React from \"react\";\nimport { isValidElementType } from \"react-is\";\nimport PropTypes from \"prop-types\";\nimport invariant from \"tiny-invariant\";\nimport warning from \"tiny-warning\";\n\nimport RouterContext from \"./RouterContext.js\";\nimport matchPath from \"./matchPath.js\";\n\nfunction isEmptyChildren(children) {\n  return React.Children.count(children) === 0;\n}\n\nfunction evalChildrenDev(children, props, path) {\n  const value = children(props);\n\n  warning(\n    value !== undefined,\n    \"You returned `undefined` from the `children` function of \" +\n      `<Route${path ? ` path=\"${path}\"` : \"\"}>, but you ` +\n      \"should have returned a React element or `null`\"\n  );\n\n  return value || null;\n}\n\n/**\n * The public API for matching a single path and rendering.\n */\nclass Route extends React.Component {\n  render() {\n    return (\n      <RouterContext.Consumer>\n        {context => {\n          invariant(context, \"You should not use <Route> outside a <Router>\");\n\n          const location = this.props.location || context.location;\n          const match = this.props.computedMatch\n            ? this.props.computedMatch // <Switch> already computed the match for us\n            : this.props.path\n            ? matchPath(location.pathname, this.props)\n            : context.match;\n\n          const props = { ...context, location, match };\n\n          let { children, component, render } = this.props;\n\n          // Preact uses an empty array as children by\n          // default, so use null if that's the case.\n          if (Array.isArray(children) && children.length === 0) {\n            children = null;\n          }\n\n          return (\n            <RouterContext.Provider value={props}>\n              {props.match\n                ? children\n                  ? typeof children === \"function\"\n                    ? __DEV__\n                      ? evalChildrenDev(children, props, this.props.path)\n                      : children(props)\n                    : children\n                  : component\n                  ? React.createElement(component, props)\n                  : render\n                  ? render(props)\n                  : null\n                : typeof children === \"function\"\n                ? __DEV__\n                  ? evalChildrenDev(children, props, this.props.path)\n                  : children(props)\n                : null}\n            </RouterContext.Provider>\n          );\n        }}\n      </RouterContext.Consumer>\n    );\n  }\n}\n\nif (__DEV__) {\n  Route.propTypes = {\n    children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n    component: (props, propName) => {\n      if (props[propName] && !isValidElementType(props[propName])) {\n        return new Error(\n          `Invalid prop 'component' supplied to 'Route': the prop is not a valid React component`\n        );\n      }\n    },\n    exact: PropTypes.bool,\n    location: PropTypes.object,\n    path: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.arrayOf(PropTypes.string)\n    ]),\n    render: PropTypes.func,\n    sensitive: PropTypes.bool,\n    strict: PropTypes.bool\n  };\n\n  Route.prototype.componentDidMount = function() {\n    warning(\n      !(\n        this.props.children &&\n        !isEmptyChildren(this.props.children) &&\n        this.props.component\n      ),\n      \"You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored\"\n    );\n\n    warning(\n      !(\n        this.props.children &&\n        !isEmptyChildren(this.props.children) &&\n        this.props.render\n      ),\n      \"You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored\"\n    );\n\n    warning(\n      !(this.props.component && this.props.render),\n      \"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored\"\n    );\n  };\n\n  Route.prototype.componentDidUpdate = function(prevProps) {\n    warning(\n      !(this.props.location && !prevProps.location),\n      '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no \"location\" prop and then provided one on a subsequent render.'\n    );\n\n    warning(\n      !(!this.props.location && prevProps.location),\n      '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a \"location\" prop initially but omitted it on a subsequent render.'\n    );\n  };\n}\n\nexport default Route;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { createLocation, createPath } from \"history\";\nimport invariant from \"tiny-invariant\";\nimport warning from \"tiny-warning\";\n\nimport Router from \"./Router.js\";\n\nfunction addLeadingSlash(path) {\n  return path.charAt(0) === \"/\" ? path : \"/\" + path;\n}\n\nfunction addBasename(basename, location) {\n  if (!basename) return location;\n\n  return {\n    ...location,\n    pathname: addLeadingSlash(basename) + location.pathname\n  };\n}\n\nfunction stripBasename(basename, location) {\n  if (!basename) return location;\n\n  const base = addLeadingSlash(basename);\n\n  if (location.pathname.indexOf(base) !== 0) return location;\n\n  return {\n    ...location,\n    pathname: location.pathname.substr(base.length)\n  };\n}\n\nfunction createURL(location) {\n  return typeof location === \"string\" ? location : createPath(location);\n}\n\nfunction staticHandler(methodName) {\n  return () => {\n    invariant(false, \"You cannot %s with <StaticRouter>\", methodName);\n  };\n}\n\nfunction noop() {}\n\n/**\n * The public top-level API for a \"static\" <Router>, so-called because it\n * can't actually change the current location. Instead, it just records\n * location changes in a context object. Useful mainly in testing and\n * server-rendering scenarios.\n */\nclass StaticRouter extends React.Component {\n  navigateTo(location, action) {\n    const { basename = \"\", context = {} } = this.props;\n    context.action = action;\n    context.location = addBasename(basename, createLocation(location));\n    context.url = createURL(context.location);\n  }\n\n  handlePush = location => this.navigateTo(location, \"PUSH\");\n  handleReplace = location => this.navigateTo(location, \"REPLACE\");\n  handleListen = () => noop;\n  handleBlock = () => noop;\n\n  render() {\n    const { basename = \"\", context = {}, location = \"/\", ...rest } = this.props;\n\n    const history = {\n      createHref: path => addLeadingSlash(basename + createURL(path)),\n      action: \"POP\",\n      location: stripBasename(basename, createLocation(location)),\n      push: this.handlePush,\n      replace: this.handleReplace,\n      go: staticHandler(\"go\"),\n      goBack: staticHandler(\"goBack\"),\n      goForward: staticHandler(\"goForward\"),\n      listen: this.handleListen,\n      block: this.handleBlock\n    };\n\n    return <Router {...rest} history={history} staticContext={context} />;\n  }\n}\n\nif (__DEV__) {\n  StaticRouter.propTypes = {\n    basename: PropTypes.string,\n    context: PropTypes.object,\n    location: PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n  };\n\n  StaticRouter.prototype.componentDidMount = function() {\n    warning(\n      !this.props.history,\n      \"<StaticRouter> ignores the history prop. To use a custom history, \" +\n        \"use `import { Router }` instead of `import { StaticRouter as Router }`.\"\n    );\n  };\n}\n\nexport default StaticRouter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport invariant from \"tiny-invariant\";\nimport warning from \"tiny-warning\";\n\nimport RouterContext from \"./RouterContext.js\";\nimport matchPath from \"./matchPath.js\";\n\n/**\n * The public API for rendering the first <Route> that matches.\n */\nclass Switch extends React.Component {\n  render() {\n    return (\n      <RouterContext.Consumer>\n        {context => {\n          invariant(context, \"You should not use <Switch> outside a <Router>\");\n\n          const location = this.props.location || context.location;\n\n          let element, match;\n\n          // We use React.Children.forEach instead of React.Children.toArray().find()\n          // here because toArray adds keys to all child elements and we do not want\n          // to trigger an unmount/remount for two <Route>s that render the same\n          // component at different URLs.\n          React.Children.forEach(this.props.children, child => {\n            if (match == null && React.isValidElement(child)) {\n              element = child;\n\n              const path = child.props.path || child.props.from;\n\n              match = path\n                ? matchPath(location.pathname, { ...child.props, path })\n                : context.match;\n            }\n          });\n\n          return match\n            ? React.cloneElement(element, { location, computedMatch: match })\n            : null;\n        }}\n      </RouterContext.Consumer>\n    );\n  }\n}\n\nif (__DEV__) {\n  Switch.propTypes = {\n    children: PropTypes.node,\n    location: PropTypes.object\n  };\n\n  Switch.prototype.componentDidUpdate = function(prevProps) {\n    warning(\n      !(this.props.location && !prevProps.location),\n      '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no \"location\" prop and then provided one on a subsequent render.'\n    );\n\n    warning(\n      !(!this.props.location && prevProps.location),\n      '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a \"location\" prop initially but omitted it on a subsequent render.'\n    );\n  };\n}\n\nexport default Switch;\n","import React from \"react\";\nimport invariant from \"tiny-invariant\";\n\nimport Context from \"./RouterContext.js\";\nimport HistoryContext from \"./HistoryContext.js\";\nimport matchPath from \"./matchPath.js\";\n\nconst useContext = React.useContext;\n\nexport function useHistory() {\n  if (__DEV__) {\n    invariant(\n      typeof useContext === \"function\",\n      \"You must use React >= 16.8 in order to use useHistory()\"\n    );\n  }\n\n  return useContext(HistoryContext);\n}\n\nexport function useLocation() {\n  if (__DEV__) {\n    invariant(\n      typeof useContext === \"function\",\n      \"You must use React >= 16.8 in order to use useLocation()\"\n    );\n  }\n\n  return useContext(Context).location;\n}\n\nexport function useParams() {\n  if (__DEV__) {\n    invariant(\n      typeof useContext === \"function\",\n      \"You must use React >= 16.8 in order to use useParams()\"\n    );\n  }\n\n  const match = useContext(Context).match;\n  return match ? match.params : {};\n}\n\nexport function useRouteMatch(path) {\n  if (__DEV__) {\n    invariant(\n      typeof useContext === \"function\",\n      \"You must use React >= 16.8 in order to use useRouteMatch()\"\n    );\n  }\n\n  const location = useLocation();\n  const match = useContext(Context).match;\n\n  return path ? matchPath(location.pathname, path) : match;\n}\n","/**\n * Thrown when transaction is not started yet and user tries to run commit or rollback.\n */\nexport class TransactionNotStartedError extends Error {\n    name = \"TransactionNotStartedError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, TransactionNotStartedError.prototype);\n        this.message = `Transaction is not started yet, start transaction before committing or rolling it back.`;\n    }\n\n}","import {ValueTransformer} from \"../decorator/options/ValueTransformer\";\n\nexport class ApplyValueTransformers {\n    static transformFrom(transformer: ValueTransformer | ValueTransformer[], databaseValue: any) {\n        if (Array.isArray(transformer)) {\n            const reverseTransformers = transformer.slice().reverse();\n            return reverseTransformers.reduce((transformedValue, _transformer) => {\n                return _transformer.from(transformedValue);\n            }, databaseValue);\n        }\n        return transformer.from(databaseValue);\n    }\n    static transformTo(transformer: ValueTransformer | ValueTransformer[], entityValue: any) {\n        if (Array.isArray(transformer)) {\n            return transformer.reduce((transformedValue, _transformer) => {\n                return _transformer.to(transformedValue);\n            }, entityValue);\n        }\n        return transformer.to(entityValue);\n    }\n}\n","module.exports = require(\"regenerator-runtime\");\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import {ObjectUtils} from \"../util/ObjectUtils\";\n\n/**\n * Thrown when query execution has failed.\n*/\nexport class QueryFailedError extends Error {\n\n    constructor(query: string, parameters: any[]|undefined, driverError: any) {\n        super();\n        Object.setPrototypeOf(this, QueryFailedError.prototype);\n        this.message = driverError.toString()\n            .replace(/^error: /, \"\")\n            .replace(/^Error: /, \"\")\n            .replace(/^Request/, \"\");\n        ObjectUtils.assign(this, {\n            ...driverError,\n            name: \"QueryFailedError\",\n            query: query,\n            parameters: parameters || []\n        });\n    }\n\n}\n","import {EntitySubscriberInterface} from \"./EntitySubscriberInterface\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {BroadcasterResult} from \"./BroadcasterResult\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\n\n/**\n * Broadcaster provides a helper methods to broadcast events to the subscribers.\n */\nexport class Broadcaster {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private queryRunner: QueryRunner) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Broadcasts \"BEFORE_INSERT\" event.\n     * Before insert event is executed before entity is being inserted to the database for the first time.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastBeforeInsertEvent(result: BroadcasterResult, metadata: EntityMetadata, entity?: ObjectLiteral): void {\n\n        if (entity && metadata.beforeInsertListeners.length) {\n            metadata.beforeInsertListeners.forEach(listener => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(subscriber => {\n                if (this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.beforeInsert) {\n                    const executionResult = subscriber.beforeInsert({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n\n    /**\n     * Broadcasts \"BEFORE_UPDATE\" event.\n     * Before update event is executed before entity is being updated in the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastBeforeUpdateEvent(result: BroadcasterResult, metadata: EntityMetadata, entity?: ObjectLiteral, databaseEntity?: ObjectLiteral, updatedColumns?: ColumnMetadata[], updatedRelations?: RelationMetadata[]): void { // todo: send relations too?\n        if (entity && metadata.beforeUpdateListeners.length) {\n            metadata.beforeUpdateListeners.forEach(listener => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(subscriber => {\n                if (this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.beforeUpdate) {\n                    const executionResult = subscriber.beforeUpdate({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        updatedColumns: updatedColumns || [],\n                        updatedRelations: updatedRelations || []\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n\n    /**\n     * Broadcasts \"BEFORE_REMOVE\" event.\n     * Before remove event is executed before entity is being removed from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastBeforeRemoveEvent(result: BroadcasterResult, metadata: EntityMetadata, entity?: ObjectLiteral, databaseEntity?: ObjectLiteral): void {\n        if (entity && metadata.beforeRemoveListeners.length) {\n            metadata.beforeRemoveListeners.forEach(listener => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(subscriber => {\n                if (this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.beforeRemove) {\n                    const executionResult = subscriber.beforeRemove({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        entityId: metadata.getEntityIdMixedMap(databaseEntity)\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n\n    /**\n     * Broadcasts \"AFTER_INSERT\" event.\n     * After insert event is executed after entity is being persisted to the database for the first time.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastAfterInsertEvent(result: BroadcasterResult, metadata: EntityMetadata, entity?: ObjectLiteral): void {\n\n        if (entity && metadata.afterInsertListeners.length) {\n            metadata.afterInsertListeners.forEach(listener => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(subscriber => {\n                if (this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.afterInsert) {\n                    const executionResult = subscriber.afterInsert({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n\n    /**\n     * Broadcasts \"BEFORE_TRANSACTION_START\" event.\n     */\n    broadcastBeforeTransactionStartEvent(result: BroadcasterResult): void {\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(subscriber => {\n                if (subscriber.beforeTransactionStart) {\n                    const executionResult = subscriber.beforeTransactionStart({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n\n    /**\n     * Broadcasts \"AFTER_TRANSACTION_START\" event.\n     */\n    broadcastAfterTransactionStartEvent(result: BroadcasterResult): void {\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(subscriber => {\n                if (subscriber.afterTransactionStart) {\n                    const executionResult = subscriber.afterTransactionStart({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n\n    /**\n     * Broadcasts \"BEFORE_TRANSACTION_COMMIT\" event.\n     */\n    broadcastBeforeTransactionCommitEvent(result: BroadcasterResult): void {\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(subscriber => {\n                if (subscriber.beforeTransactionCommit) {\n                    const executionResult = subscriber.beforeTransactionCommit({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n\n    /**\n     * Broadcasts \"AFTER_TRANSACTION_COMMIT\" event.\n     */\n    broadcastAfterTransactionCommitEvent(result: BroadcasterResult): void {\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(subscriber => {\n                if (subscriber.afterTransactionCommit) {\n                    const executionResult = subscriber.afterTransactionCommit({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n\n    /**\n     * Broadcasts \"BEFORE_TRANSACTION_ROLLBACK\" event.\n     */\n    broadcastBeforeTransactionRollbackEvent(result: BroadcasterResult): void {\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(subscriber => {\n                if (subscriber.beforeTransactionRollback) {\n                    const executionResult = subscriber.beforeTransactionRollback({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n\n    /**\n     * Broadcasts \"AFTER_TRANSACTION_ROLLBACK\" event.\n     */\n    broadcastAfterTransactionRollbackEvent(result: BroadcasterResult): void {\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(subscriber => {\n                if (subscriber.afterTransactionRollback) {\n                    const executionResult = subscriber.afterTransactionRollback({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n\n    /**\n     * Broadcasts \"AFTER_UPDATE\" event.\n     * After update event is executed after entity is being updated in the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastAfterUpdateEvent(result: BroadcasterResult, metadata: EntityMetadata, entity?: ObjectLiteral, databaseEntity?: ObjectLiteral, updatedColumns?: ColumnMetadata[], updatedRelations?: RelationMetadata[]): void {\n\n        if (entity && metadata.afterUpdateListeners.length) {\n            metadata.afterUpdateListeners.forEach(listener => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(subscriber => {\n                if (this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.afterUpdate) {\n                    const executionResult = subscriber.afterUpdate({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        updatedColumns: updatedColumns || [],\n                        updatedRelations: updatedRelations || []\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n\n    /**\n     * Broadcasts \"AFTER_REMOVE\" event.\n     * After remove event is executed after entity is being removed from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastAfterRemoveEvent(result: BroadcasterResult, metadata: EntityMetadata, entity?: ObjectLiteral, databaseEntity?: ObjectLiteral): void {\n\n        if (entity && metadata.afterRemoveListeners.length) {\n            metadata.afterRemoveListeners.forEach(listener => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(subscriber => {\n                if (this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.afterRemove) {\n                    const executionResult = subscriber.afterRemove({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        entityId: metadata.getEntityIdMixedMap(databaseEntity)\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n\n    /**\n     * Broadcasts \"AFTER_LOAD\" event for all given entities, and their sub-entities.\n     * After load event is executed after entity has been loaded from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastLoadEventsForAll(result: BroadcasterResult, metadata: EntityMetadata, entities: ObjectLiteral[]): void {\n        entities.forEach(entity => {\n            if (entity instanceof Promise) // todo: check why need this?\n                return;\n\n            // collect load events for all children entities that were loaded with the main entity\n            if (metadata.relations.length) {\n                metadata.relations.forEach(relation => {\n\n                    // in lazy relations we cannot simply access to entity property because it will cause a getter and a database query\n                    if (relation.isLazy && !entity.hasOwnProperty(relation.propertyName))\n                        return;\n\n                    const value = relation.getEntityValue(entity);\n                    if (value instanceof Object)\n                        this.broadcastLoadEventsForAll(result, relation.inverseEntityMetadata, Array.isArray(value) ? value : [value]);\n                });\n            }\n\n            if (metadata.afterLoadListeners.length) {\n                metadata.afterLoadListeners.forEach(listener => {\n                    if (listener.isAllowed(entity)) {\n                        const executionResult = listener.execute(entity);\n                        if (executionResult instanceof Promise)\n                            result.promises.push(executionResult);\n                        result.count++;\n                    }\n                });\n            }\n\n            if (this.queryRunner.connection.subscribers.length) {\n                this.queryRunner.connection.subscribers.forEach(subscriber => {\n                    if (this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.afterLoad) {\n                        const executionResult = subscriber.afterLoad!(entity, {\n                            connection: this.queryRunner.connection,\n                            queryRunner: this.queryRunner,\n                            manager: this.queryRunner.manager,\n                            entity: entity,\n                            metadata: metadata\n                        });\n                        if (executionResult instanceof Promise)\n                            result.promises.push(executionResult);\n                        result.count++;\n                    }\n                });\n            }\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if subscriber's methods can be executed by checking if its don't listen to the particular entity,\n     * or listens our entity.\n     */\n    protected isAllowedSubscriber(subscriber: EntitySubscriberInterface<any>, target: Function|string): boolean {\n        return  !subscriber.listenTo ||\n            !subscriber.listenTo() ||\n            subscriber.listenTo() === Object ||\n            subscriber.listenTo() === target ||\n            subscriber.listenTo().isPrototypeOf(target);\n    }\n\n}\n","import {ColumnType} from \"../driver/types/ColumnTypes\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\nimport {RelationMetadata} from \"./RelationMetadata\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\nimport {Connection} from \"../connection/Connection\";\nimport {OrmUtils} from \"../util/OrmUtils\";\nimport {ValueTransformer} from \"../decorator/options/ValueTransformer\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {FindOperator} from \"../find-options/FindOperator\";\nimport {ApplyValueTransformers} from \"../util/ApplyValueTransformers\";\n\n/**\n * This metadata contains all information about entity's column.\n */\nexport class ColumnMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Target class where column decorator is used.\n     * This may not be always equal to entity metadata (for example embeds or inheritance cases).\n     */\n    target: Function|string;\n\n    /**\n     * Entity metadata where this column metadata is.\n     *\n     * For example for @Column() name: string in Post, entityMetadata will be metadata of Post entity.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Embedded metadata where this column metadata is.\n     * If this column is not in embed then this property value is undefined.\n     */\n    embeddedMetadata?: EmbeddedMetadata;\n\n    /**\n     * If column is a foreign key of some relation then this relation's metadata will be there.\n     * If this column does not have a foreign key then this property value is undefined.\n     */\n    relationMetadata?: RelationMetadata;\n\n    /**\n     * Class's property name on which this column is applied.\n     */\n    propertyName: string;\n\n    /**\n     * The database type of the column.\n     */\n    type: ColumnType;\n\n    /**\n     * Type's length in the database.\n     */\n    length: string = \"\";\n\n    /**\n     * Type's display width in the database.\n     */\n    width?: number;\n\n    /**\n     * Defines column character set.\n     */\n    charset?: string;\n\n    /**\n     * Defines column collation.\n     */\n    collation?: string;\n\n    /**\n     * Indicates if this column is a primary key.\n     */\n    isPrimary: boolean = false;\n\n    /**\n     * Indicates if this column is generated (auto increment or generated other way).\n     */\n    isGenerated: boolean = false;\n\n    /**\n     * Indicates if column can contain nulls or not.\n     */\n    isNullable: boolean = false;\n\n    /**\n     * Indicates if column is selected by query builder or not.\n     */\n    isSelect: boolean = true;\n\n    /**\n     * Indicates if column is inserted by default or not.\n     */\n    isInsert: boolean = true;\n\n    /**\n     * Indicates if column allows updates or not.\n     */\n    isUpdate: boolean = true;\n\n    /**\n     * Specifies generation strategy if this column will use auto increment.\n     */\n    generationStrategy?: \"uuid\"|\"increment\"|\"rowid\";\n\n    /**\n     * Column comment.\n     * This feature is not supported by all databases.\n     */\n    comment: string = \"\";\n\n    /**\n     * Default database value.\n     */\n    default?: any;\n\n    /**\n     * ON UPDATE trigger. Works only for MySQL.\n     */\n    onUpdate?: string;\n\n    /**\n     * The precision for a decimal (exact numeric) column (applies only for decimal column),\n     * which is the maximum number of digits that are stored for the values.\n     */\n    precision?: number|null;\n\n    /**\n     * The scale for a decimal (exact numeric) column (applies only for decimal column),\n     * which represents the number of digits to the right of the decimal point and must not be greater than precision.\n     */\n    scale?: number;\n\n    /**\n     * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.\n     * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n     */\n    zerofill: boolean = false;\n\n    /**\n     * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.\n     */\n    unsigned: boolean = false;\n\n    /**\n     * Array of possible enumerated values.\n     *\n     * `postgres` and `mysql` store enum values as strings but we want to keep support\n     * for numeric and heterogeneous based typescript enums, so we need (string|number)[]\n     */\n    enum?: (string|number)[];\n\n    /**\n     * Exact name of enum\n     */\n    enumName?: string;\n\n    /**\n     * Generated column expression. Supports only in MySQL.\n     */\n    asExpression?: string;\n\n    /**\n     * Generated column type. Supports only in MySQL.\n     */\n    generatedType?: \"VIRTUAL\"|\"STORED\";\n\n    /**\n     * Return type of HSTORE column.\n     * Returns value as string or as object.\n     */\n    hstoreType?: \"object\"|\"string\";\n\n    /**\n     * Indicates if this column is an array.\n     */\n    isArray: boolean = false;\n\n    /**\n     * Gets full path to this column property (including column property name).\n     * Full path is relevant when column is used in embeds (one or multiple nested).\n     * For example it will return \"counters.subcounters.likes\".\n     * If property is not in embeds then it returns just property name of the column.\n     */\n    propertyPath: string;\n\n    /**\n     * Same as property path, but dots are replaced with '_'.\n     * Used in query builder statements.\n     */\n    propertyAliasName: string;\n\n    /**\n     * Gets full path to this column database name (including column database name).\n     * Full path is relevant when column is used in embeds (one or multiple nested).\n     * For example it will return \"counters.subcounters.likes\".\n     * If property is not in embeds then it returns just database name of the column.\n     */\n    databasePath: string;\n\n    /**\n     * Complete column name in the database including its embedded prefixes.\n     */\n    databaseName: string;\n\n    /**\n     * Database name in the database without embedded prefixes applied.\n     */\n    databaseNameWithoutPrefixes: string;\n\n    /**\n     * Database name set by entity metadata builder, not yet passed naming strategy process and without embedded prefixes.\n     */\n    givenDatabaseName?: string;\n\n    /**\n     * Indicates if column is virtual. Virtual columns are not mapped to the entity.\n     */\n    isVirtual: boolean = false;\n\n    /**\n     * Indicates if column is discriminator. Discriminator columns are not mapped to the entity.\n     */\n    isDiscriminator: boolean = false;\n\n    /**\n     * Indicates if column is tree-level column. Tree-level columns are used in closure entities.\n     */\n    isTreeLevel: boolean = false;\n\n    /**\n     * Indicates if this column contains an entity creation date.\n     */\n    isCreateDate: boolean = false;\n\n    /**\n     * Indicates if this column contains an entity update date.\n     */\n    isUpdateDate: boolean = false;\n\n    /**\n     * Indicates if this column contains an entity delete date.\n     */\n    isDeleteDate: boolean = false;\n\n    /**\n     * Indicates if this column contains an entity version.\n     */\n    isVersion: boolean = false;\n\n    /**\n     * Indicates if this column contains an object id.\n     */\n    isObjectId: boolean = false;\n\n    /**\n     * If this column is foreign key then it references some other column,\n     * and this property will contain reference to this column.\n     */\n    referencedColumn: ColumnMetadata|undefined;\n\n    /**\n     * Specifies a value transformer that is to be used to (un)marshal\n     * this column when reading or writing to the database.\n     */\n    transformer?: ValueTransformer|ValueTransformer[];\n\n    /**\n     * Column type in the case if this column is in the closure table.\n     * Column can be ancestor or descendant in the closure tables.\n     */\n    closureType?: \"ancestor\"|\"descendant\";\n\n    /**\n     * Indicates if this column is nested set's left column.\n     * Used only in tree entities with nested-set type.\n     */\n    isNestedSetLeft: boolean = false;\n\n    /**\n     * Indicates if this column is nested set's right column.\n     * Used only in tree entities with nested-set type.\n     */\n    isNestedSetRight: boolean = false;\n\n    /**\n     * Indicates if this column is materialized path's path column.\n     * Used only in tree entities with materialized path type.\n     */\n    isMaterializedPath: boolean = false;\n\n    /**\n     * Spatial Feature Type (Geometry, Point, Polygon, etc.)\n     */\n    spatialFeatureType?: string;\n\n    /**\n     * SRID (Spatial Reference ID (EPSG code))\n     */\n    srid?: number;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        connection: Connection,\n        entityMetadata: EntityMetadata,\n        embeddedMetadata?: EmbeddedMetadata,\n        referencedColumn?: ColumnMetadata,\n        args: ColumnMetadataArgs,\n        closureType?: \"ancestor\"|\"descendant\",\n        nestedSetLeft?: boolean,\n        nestedSetRight?: boolean,\n        materializedPath?: boolean,\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata!;\n        this.referencedColumn = options.referencedColumn;\n        if (options.args.target)\n            this.target = options.args.target;\n        if (options.args.propertyName)\n            this.propertyName = options.args.propertyName;\n        if (options.args.options.name)\n            this.givenDatabaseName = options.args.options.name;\n        if (options.args.options.type)\n            this.type = options.args.options.type;\n        if (options.args.options.length)\n            this.length = options.args.options.length ? options.args.options.length.toString() : \"\";\n        if (options.args.options.width)\n            this.width = options.args.options.width;\n        if (options.args.options.charset)\n            this.charset = options.args.options.charset;\n        if (options.args.options.collation)\n            this.collation = options.args.options.collation;\n        if (options.args.options.primary)\n            this.isPrimary = options.args.options.primary;\n        if (options.args.options.default === null) // to make sure default: null is the same as nullable: true\n            this.isNullable = true;\n        if (options.args.options.nullable !== undefined)\n            this.isNullable = options.args.options.nullable;\n        if (options.args.options.select !== undefined)\n            this.isSelect = options.args.options.select;\n        if (options.args.options.insert !== undefined)\n            this.isInsert = options.args.options.insert;\n        if (options.args.options.update !== undefined)\n            this.isUpdate = options.args.options.update;\n        if (options.args.options.readonly !== undefined)\n            this.isUpdate = !options.args.options.readonly;\n        if (options.args.options.comment)\n            this.comment = options.args.options.comment;\n        if (options.args.options.default !== undefined)\n            this.default = options.args.options.default;\n        if (options.args.options.onUpdate)\n            this.onUpdate = options.args.options.onUpdate;\n        if (options.args.options.scale !== null && options.args.options.scale !== undefined)\n            this.scale = options.args.options.scale;\n        if (options.args.options.zerofill) {\n            this.zerofill = options.args.options.zerofill;\n            this.unsigned = true; // if you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n        }\n        if (options.args.options.unsigned)\n            this.unsigned = options.args.options.unsigned;\n        if (options.args.options.precision !== undefined)\n            this.precision = options.args.options.precision;\n        if (options.args.options.enum) {\n            if (options.args.options.enum instanceof Object && !Array.isArray(options.args.options.enum)) {\n                this.enum = Object.keys(options.args.options.enum)\n                    .filter(key => isNaN(+key))     // remove numeric keys - typescript numeric enum types generate them\n                    .map(key => (options.args.options.enum as ObjectLiteral)[key]);\n\n            } else {\n                this.enum = options.args.options.enum;\n            }\n        }\n        if (options.args.options.enumName) {\n            this.enumName = options.args.options.enumName;\n        }\n        if (options.args.options.asExpression) {\n            this.asExpression = options.args.options.asExpression;\n            this.generatedType = options.args.options.generatedType ? options.args.options.generatedType : \"VIRTUAL\";\n        }\n        if (options.args.options.hstoreType)\n            this.hstoreType = options.args.options.hstoreType;\n        if (options.args.options.array)\n            this.isArray = options.args.options.array;\n        if (options.args.mode) {\n            this.isVirtual = options.args.mode === \"virtual\";\n            this.isTreeLevel = options.args.mode === \"treeLevel\";\n            this.isCreateDate = options.args.mode === \"createDate\";\n            this.isUpdateDate = options.args.mode === \"updateDate\";\n            this.isDeleteDate = options.args.mode === \"deleteDate\";\n            this.isVersion = options.args.mode === \"version\";\n            this.isObjectId = options.args.mode === \"objectId\";\n        }\n        if (options.args.options.transformer)\n            this.transformer = options.args.options.transformer;\n        if (options.args.options.spatialFeatureType)\n            this.spatialFeatureType = options.args.options.spatialFeatureType;\n        if (options.args.options.srid !== undefined)\n            this.srid = options.args.options.srid;\n        if (this.isTreeLevel)\n            this.type = options.connection.driver.mappedDataTypes.treeLevel;\n        if (this.isCreateDate) {\n            if (!this.type)\n                this.type = options.connection.driver.mappedDataTypes.createDate;\n            if (!this.default)\n                this.default = () => options.connection.driver.mappedDataTypes.createDateDefault;\n            if (this.precision === undefined && options.connection.driver.mappedDataTypes.createDatePrecision)\n                this.precision = options.connection.driver.mappedDataTypes.createDatePrecision;\n        }\n        if (this.isUpdateDate) {\n            if (!this.type)\n                this.type = options.connection.driver.mappedDataTypes.updateDate;\n            if (!this.default)\n                this.default = () => options.connection.driver.mappedDataTypes.updateDateDefault;\n            if (!this.onUpdate)\n                this.onUpdate = options.connection.driver.mappedDataTypes.updateDateDefault;\n            if (this.precision === undefined && options.connection.driver.mappedDataTypes.updateDatePrecision)\n                this.precision = options.connection.driver.mappedDataTypes.updateDatePrecision;\n        }\n        if (this.isDeleteDate) {\n            if (!this.type)\n                this.type = options.connection.driver.mappedDataTypes.deleteDate;\n            if (!this.isNullable)\n                this.isNullable = options.connection.driver.mappedDataTypes.deleteDateNullable;\n            if (this.precision === undefined && options.connection.driver.mappedDataTypes.deleteDatePrecision)\n                this.precision = options.connection.driver.mappedDataTypes.deleteDatePrecision;\n        }\n        if (this.isVersion)\n            this.type = options.connection.driver.mappedDataTypes.version;\n        if (options.closureType)\n            this.closureType = options.closureType;\n        if (options.nestedSetLeft)\n            this.isNestedSetLeft = options.nestedSetLeft;\n        if (options.nestedSetRight)\n            this.isNestedSetRight = options.nestedSetRight;\n        if (options.materializedPath)\n            this.isMaterializedPath = options.materializedPath;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Creates entity id map from the given entity ids array.\n     */\n    createValueMap(value: any, useDatabaseName = false) {\n\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\n\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            const extractEmbeddedColumnValue = (propertyNames: string[], map: ObjectLiteral): any => {\n                const propertyName = propertyNames.shift();\n                if (propertyName) {\n                    map[propertyName] = {};\n                    extractEmbeddedColumnValue(propertyNames, map[propertyName]);\n                    return map;\n                }\n\n                // this is bugfix for #720 when increment number is bigint we need to make sure its a string\n                if ((this.generationStrategy === \"increment\" || this.generationStrategy === \"rowid\") && this.type === \"bigint\" && value !== null)\n                    value = String(value);\n\n                map[useDatabaseName ? this.databaseName : this.propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue(propertyNames, {});\n\n        } else { // no embeds - no problems. Simply return column property name and its value of the entity\n\n            // this is bugfix for #720 when increment number is bigint we need to make sure its a string\n            if ((this.generationStrategy === \"increment\" || this.generationStrategy === \"rowid\") && this.type === \"bigint\" && value !== null)\n                value = String(value);\n\n            return { [useDatabaseName ? this.databaseName : this.propertyName]: value };\n        }\n    }\n\n    /**\n     * Extracts column value and returns its column name with this value in a literal object.\n     * If column is in embedded (or recursive embedded) it returns complex literal object.\n     *\n     * Examples what this method can return depend if this column is in embeds.\n     * { id: 1 } or { title: \"hello\" }, { counters: { code: 1 } }, { data: { information: { counters: { code: 1 } } } }\n     */\n    getEntityValueMap(entity: ObjectLiteral, options?: { skipNulls?: boolean }): ObjectLiteral|undefined {\n        const returnNulls = false; // options && options.skipNulls === false ? false : true; // todo: remove if current will not bring problems, uncomment if it will.\n\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\n\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            const extractEmbeddedColumnValue = (propertyNames: string[], value: ObjectLiteral, map: ObjectLiteral): any => {\n                const propertyName = propertyNames.shift();\n                if (value === undefined)\n                    return map;\n\n                if (propertyName) {\n                    const submap: ObjectLiteral = {};\n                    extractEmbeddedColumnValue(propertyNames, value[propertyName], submap);\n                    if (Object.keys(submap).length > 0) {\n                        map[propertyName] = submap;\n                    }\n                    return map;\n                }\n                if (value[this.propertyName] !== undefined && (returnNulls === false || value[this.propertyName] !== null))\n                    map[this.propertyName] = value[this.propertyName];\n                return map;\n            };\n            const map: ObjectLiteral = {};\n            extractEmbeddedColumnValue(propertyNames, entity, map);\n            return Object.keys(map).length > 0 ? map : undefined;\n\n        } else { // no embeds - no problems. Simply return column property name and its value of the entity\n            if (this.relationMetadata && entity[this.propertyName] && entity[this.propertyName] instanceof Object) {\n                const map = this.relationMetadata.joinColumns.reduce((map, joinColumn) => {\n                    const value = joinColumn.referencedColumn!.getEntityValueMap(entity[this.propertyName]);\n                    if (value === undefined) return map;\n                    return OrmUtils.mergeDeep(map, value);\n                }, {});\n                if (Object.keys(map).length > 0)\n                    return { [this.propertyName]: map };\n\n                return undefined;\n            } else {\n                if (entity[this.propertyName] !== undefined && (returnNulls === false || entity[this.propertyName] !== null))\n                    return { [this.propertyName]: entity[this.propertyName] };\n\n                return undefined;\n            }\n        }\n    }\n\n    /**\n     * Extracts column value from the given entity.\n     * If column is in embedded (or recursive embedded) it extracts its value from there.\n     */\n    getEntityValue(entity: ObjectLiteral, transform: boolean = false): any|undefined {\n        if (entity === undefined || entity === null) return undefined;\n\n        // extract column value from embeddeds of entity if column is in embedded\n        let value: any = undefined;\n        if (this.embeddedMetadata) {\n\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\n\n            // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters\n            // this recursive function takes array of generated property names and gets the post[data][information][counters] embed\n            const extractEmbeddedColumnValue = (propertyNames: string[], value: ObjectLiteral): any => {\n                const propertyName = propertyNames.shift();\n                return propertyName && value ? extractEmbeddedColumnValue(propertyNames, value[propertyName]) : value;\n            };\n\n            // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]\n            const embeddedObject = extractEmbeddedColumnValue(propertyNames, entity);\n            if (embeddedObject) {\n                if (this.relationMetadata && this.referencedColumn) {\n                    const relatedEntity = this.relationMetadata.getEntityValue(embeddedObject);\n                    if (relatedEntity && relatedEntity instanceof Object && !(relatedEntity instanceof FindOperator)) {\n                        value = this.referencedColumn.getEntityValue(relatedEntity);\n\n                    } else if (embeddedObject[this.propertyName] && embeddedObject[this.propertyName] instanceof Object && !(embeddedObject[this.propertyName] instanceof FindOperator)) {\n                        value = this.referencedColumn.getEntityValue(embeddedObject[this.propertyName]);\n\n                    } else {\n                        value = embeddedObject[this.propertyName];\n\n                    }\n\n                } else if (this.referencedColumn) {\n                    value = this.referencedColumn.getEntityValue(embeddedObject[this.propertyName]);\n\n                } else {\n                    value = embeddedObject[this.propertyName];\n                }\n            }\n\n        } else { // no embeds - no problems. Simply return column name by property name of the entity\n            if (this.relationMetadata && this.referencedColumn) {\n                const relatedEntity = this.relationMetadata.getEntityValue(entity);\n                if (relatedEntity && relatedEntity instanceof Object && !(relatedEntity instanceof FindOperator) && !(relatedEntity instanceof Function)) {\n                    value = this.referencedColumn.getEntityValue(relatedEntity);\n\n                } else if (entity[this.propertyName] && entity[this.propertyName] instanceof Object && !(entity[this.propertyName] instanceof FindOperator) && !(entity[this.propertyName] instanceof Function)) {\n                    value = this.referencedColumn.getEntityValue(entity[this.propertyName]);\n\n                } else {\n                    value = entity[this.propertyName];\n                }\n\n            } else if (this.referencedColumn) {\n                value = this.referencedColumn.getEntityValue(entity[this.propertyName]);\n\n            } else {\n                value = entity[this.propertyName];\n            }\n        }\n\n        if (transform && this.transformer)\n            value = ApplyValueTransformers.transformTo(this.transformer, value);\n\n        return value;\n    }\n\n    /**\n     * Sets given entity's column value.\n     * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.\n     */\n    setEntityValue(entity: ObjectLiteral, value: any): void {\n        if (this.embeddedMetadata) {\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const extractEmbeddedColumnValue = (embeddedMetadatas: EmbeddedMetadata[], map: ObjectLiteral): any => {\n                // if (!object[embeddedMetadata.propertyName])\n                //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();\n\n                const embeddedMetadata = embeddedMetadatas.shift();\n                if (embeddedMetadata) {\n                    if (!map[embeddedMetadata.propertyName])\n                        map[embeddedMetadata.propertyName] = embeddedMetadata.create();\n\n                    extractEmbeddedColumnValue(embeddedMetadatas, map[embeddedMetadata.propertyName]);\n                    return map;\n                }\n                map[this.propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue([...this.embeddedMetadata.embeddedMetadataTree], entity);\n\n        } else {\n            // we write a deep object in this entity only if the column is virtual\n            // because if its not virtual it means the user defined a real column for this relation\n            // also we don't do it if column is inside a junction table\n            if (!this.entityMetadata.isJunction && this.isVirtual && this.referencedColumn && this.referencedColumn.propertyName !== this.propertyName) {\n                if (!(this.propertyName in entity)) {\n                    entity[this.propertyName] = {};\n                }\n\n                entity[this.propertyName][this.referencedColumn.propertyName] = value;\n            } else {\n                entity[this.propertyName] = value;\n            }\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n\n    build(connection: Connection): this {\n        this.propertyPath = this.buildPropertyPath();\n        this.propertyAliasName = this.propertyPath.replace(\".\", \"_\");\n        this.databaseName = this.buildDatabaseName(connection);\n        this.databasePath = this.buildDatabasePath();\n        this.databaseNameWithoutPrefixes = connection.namingStrategy.columnName(this.propertyName, this.givenDatabaseName, []);\n        return this;\n    }\n\n    protected buildPropertyPath(): string {\n        let path = \"\";\n        if (this.embeddedMetadata && this.embeddedMetadata.parentPropertyNames.length)\n            path = this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\";\n\n        path += this.propertyName;\n\n        // we add reference column to property path only if this column is virtual\n        // because if its not virtual it means user defined a real column for this relation\n        // also we don't do it if column is inside a junction table\n        if (!this.entityMetadata.isJunction && this.isVirtual && this.referencedColumn && this.referencedColumn.propertyName !== this.propertyName)\n            path += \".\" + this.referencedColumn.propertyName;\n\n        return path;\n    }\n\n    protected buildDatabasePath(): string {\n        let path = \"\";\n        if (this.embeddedMetadata && this.embeddedMetadata.parentPropertyNames.length)\n            path = this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\";\n\n        path += this.databaseName;\n\n        // we add reference column to property path only if this column is virtual\n        // because if its not virtual it means user defined a real column for this relation\n        // also we don't do it if column is inside a junction table\n        if (!this.entityMetadata.isJunction && this.isVirtual && this.referencedColumn && this.referencedColumn.databaseName !== this.databaseName)\n            path += \".\" + this.referencedColumn.databaseName;\n\n        return path;\n    }\n\n    protected buildDatabaseName(connection: Connection): string {\n        let propertyNames = this.embeddedMetadata ? this.embeddedMetadata.parentPrefixes : [];\n        if (connection.driver instanceof MongoDriver) // we don't need to include embedded name for the mongodb column names\n            propertyNames = [];\n        return connection.namingStrategy.columnName(this.propertyName, this.givenDatabaseName, propertyNames);\n    }\n\n}\n","import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\n\n/**\n * Thrown when user tries to create entity id map from the mixed id value,\n * but id value is a single value when entity requires multiple values.\n */\nexport class CannotCreateEntityIdMapError extends Error {\n    name = \"CannotCreateEntityIdMapError\";\n\n    constructor(metadata: EntityMetadata, id: any) {\n        super();\n        Object.setPrototypeOf(this, CannotCreateEntityIdMapError.prototype);\n        const objectExample = metadata.primaryColumns.reduce((object, column, index) => {\n            column.setEntityValue(object, index + 1);\n            return object;\n        }, {} as ObjectLiteral);\n        this.message = `Cannot use given entity id \"${id}\" because \"${metadata.targetName}\" contains multiple primary columns, you must provide object in following form: ${JSON.stringify(objectExample)} as an id.`;\n    }\n\n}","import {QueryRunner, SelectQueryBuilder} from \"..\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {Connection} from \"../connection/Connection\";\nimport {PostgresConnectionOptions} from \"../driver/postgres/PostgresConnectionOptions\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {SapDriver} from \"../driver/sap/SapDriver\";\nimport {SqlServerConnectionOptions} from \"../driver/sqlserver/SqlServerConnectionOptions\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {CannotCreateEntityIdMapError} from \"../error/CannotCreateEntityIdMapError\";\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\nimport {TreeMetadataArgs} from \"../metadata-args/TreeMetadataArgs\";\nimport {OrmUtils} from \"../util/OrmUtils\";\nimport {shorten} from \"../util/StringUtils\";\nimport {CheckMetadata} from \"./CheckMetadata\";\nimport {ColumnMetadata} from \"./ColumnMetadata\";\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\nimport {EntityListenerMetadata} from \"./EntityListenerMetadata\";\nimport {ExclusionMetadata} from \"./ExclusionMetadata\";\nimport {ForeignKeyMetadata} from \"./ForeignKeyMetadata\";\nimport {IndexMetadata} from \"./IndexMetadata\";\nimport {RelationCountMetadata} from \"./RelationCountMetadata\";\nimport {RelationIdMetadata} from \"./RelationIdMetadata\";\nimport {RelationMetadata} from \"./RelationMetadata\";\nimport {TableType} from \"./types/TableTypes\";\nimport {TreeType} from \"./types/TreeTypes\";\nimport {UniqueMetadata} from \"./UniqueMetadata\";\nimport {ClosureTreeOptions} from \"./types/ClosureTreeOptions\";\n\n/**\n * Contains all entity metadata.\n */\nexport class EntityMetadata {\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection where this entity metadata is created.\n     */\n    connection: Connection;\n\n    /**\n     * Metadata arguments used to build this entity metadata.\n     */\n    tableMetadataArgs: TableMetadataArgs;\n\n    /**\n     * If entity's table is a closure-typed table, then this entity will have a closure junction table metadata.\n     */\n    closureJunctionTable: EntityMetadata;\n\n    /**\n     * If this is entity metadata for a junction closure table then its owner closure table metadata will be set here.\n     */\n    parentClosureEntityMetadata: EntityMetadata;\n\n    /**\n     * Parent's entity metadata. Used in inheritance patterns.\n     */\n    parentEntityMetadata: EntityMetadata;\n\n    /**\n     * Children entity metadatas. Used in inheritance patterns.\n     */\n    childEntityMetadatas: EntityMetadata[] = [];\n\n    /**\n     * All \"inheritance tree\" from a target entity.\n     * For example for target Post < ContentModel < Unit it will be an array of [Post, ContentModel, Unit].\n     * It also contains child entities for single table inheritance.\n     */\n    inheritanceTree: Function[] = [];\n\n    /**\n     * Table type. Tables can be abstract, closure, junction, embedded, etc.\n     */\n    tableType: TableType = \"regular\";\n\n    /**\n     * Target class to which this entity metadata is bind.\n     * Note, that when using table inheritance patterns target can be different rather then table's target.\n     * For virtual tables which lack of real entity (like junction tables) target is equal to their table name.\n     */\n    target: Function|string;\n\n    /**\n     * Gets the name of the target.\n     */\n    targetName: string;\n\n    /**\n     * Entity's name.\n     * Equal to entity target class's name if target is set to table.\n     * If target class is not then then it equals to table name.\n     */\n    name: string;\n\n    /**\n     * View's expression.\n     * Used in views\n     */\n    expression?: string|((connection: Connection) => SelectQueryBuilder<any>);\n\n    /**\n     * Enables Sqlite \"WITHOUT ROWID\" modifier for the \"CREATE TABLE\" statement\n     */\n    withoutRowid?: boolean = false;\n\n    /**\n     * Original user-given table name (taken from schema or @Entity(tableName) decorator).\n     * If user haven't specified a table name this property will be undefined.\n     */\n    givenTableName?: string;\n\n    /**\n     * Entity table name in the database.\n     * This is final table name of the entity.\n     * This name already passed naming strategy, and generated based on\n     * multiple criteria, including user table name and global table prefix.\n     */\n    tableName: string;\n\n    /**\n     * Entity table path. Contains database name, schema name and table name.\n     * E.g. myDB.mySchema.myTable\n     */\n    tablePath: string;\n\n    /**\n     * Entity schema path. Contains database name and schema name.\n     * E.g. myDB.mySchema\n     */\n    schemaPath?: string;\n\n    /**\n     * Gets the table name without global table prefix.\n     * When querying table you need a table name with prefix, but in some scenarios,\n     * for example when you want to name a junction table that contains names of two other tables,\n     * you may want a table name without prefix.\n     */\n    tableNameWithoutPrefix: string;\n\n    /**\n     * Indicates if schema will be synchronized for this entity or not.\n     */\n    synchronize: boolean = true;\n\n    /**\n     * Table's database engine type (like \"InnoDB\", \"MyISAM\", etc).\n     */\n    engine?: string;\n\n    /**\n     * Database name.\n     */\n    database?: string;\n\n    /**\n     * Schema name. Used in Postgres and Sql Server.\n     */\n    schema?: string;\n\n    /**\n     * Specifies a default order by used for queries from this table when no explicit order by is specified.\n     */\n    orderBy?: OrderByCondition;\n\n    /**\n     * If this entity metadata's table using one of the inheritance patterns,\n     * then this will contain what pattern it uses.\n     */\n    inheritancePattern?: \"STI\"/*|\"CTI\"*/;\n\n    /**\n     * Checks if there any non-nullable column exist in this entity.\n     */\n    hasNonNullableRelations: boolean = false;\n\n    /**\n     * Indicates if this entity metadata of a junction table, or not.\n     * Junction table is a table created by many-to-many relationship.\n     *\n     * Its also possible to understand if entity is junction via tableType.\n     */\n    isJunction: boolean = false;\n\n    /**\n     * Indicates if this entity is a tree, what type of tree it is.\n     */\n    treeType?: TreeType;\n\n    /**\n     * Indicates if this entity is a tree, what options of tree it has.\n     */\n    treeOptions?: ClosureTreeOptions;\n\n    /**\n     * Checks if this table is a junction table of the closure table.\n     * This type is for tables that contain junction metadata of the closure tables.\n     */\n    isClosureJunction: boolean = false;\n\n    /**\n     * Checks if entity's table has multiple primary columns.\n     */\n    hasMultiplePrimaryKeys: boolean = false;\n\n    /**\n     * Indicates if this entity metadata has uuid generated columns.\n     */\n    hasUUIDGeneratedColumns: boolean = false;\n\n    /**\n     * If this entity metadata is a child table of some table, it should have a discriminator value.\n     * Used to store a value in a discriminator column.\n     */\n    discriminatorValue?: string;\n\n    /**\n     * Entity's column metadatas defined by user.\n     */\n    ownColumns: ColumnMetadata[] = [];\n\n    /**\n     * Columns of the entity, including columns that are coming from the embeddeds of this entity.\n     */\n    columns: ColumnMetadata[] = [];\n\n    /**\n     * Ancestor columns used only in closure junction tables.\n     */\n    ancestorColumns: ColumnMetadata[] = [];\n\n    /**\n     * Descendant columns used only in closure junction tables.\n     */\n    descendantColumns: ColumnMetadata[] = [];\n\n    /**\n     * All columns except for virtual columns.\n     */\n    nonVirtualColumns: ColumnMetadata[] = [];\n\n    /**\n     * In the case if this entity metadata is junction table's entity metadata,\n     * this will contain all referenced columns of owner entity.\n     */\n    ownerColumns: ColumnMetadata[] = [];\n\n    /**\n     * In the case if this entity metadata is junction table's entity metadata,\n     * this will contain all referenced columns of inverse entity.\n     */\n    inverseColumns: ColumnMetadata[] = [];\n\n    /**\n     * Gets the column with generated flag.\n     */\n    generatedColumns: ColumnMetadata[] = [];\n\n    /**\n     * Gets the object id column used with mongodb database.\n     */\n    objectIdColumn?: ColumnMetadata;\n\n    /**\n     * Gets entity column which contains a create date value.\n     */\n    createDateColumn?: ColumnMetadata;\n\n    /**\n     * Gets entity column which contains an update date value.\n     */\n    updateDateColumn?: ColumnMetadata;\n\n    /**\n     * Gets entity column which contains a delete date value.\n     */\n    deleteDateColumn?: ColumnMetadata;\n\n    /**\n     * Gets entity column which contains an entity version.\n     */\n    versionColumn?: ColumnMetadata;\n\n    /**\n     * Gets the discriminator column used to store entity identificator in single-table inheritance tables.\n     */\n    discriminatorColumn?: ColumnMetadata;\n\n    /**\n     * Special column that stores tree level in tree entities.\n     */\n    treeLevelColumn?: ColumnMetadata;\n\n    /**\n     * Nested set's left value column.\n     * Used only in tree entities with nested set pattern applied.\n     */\n    nestedSetLeftColumn?: ColumnMetadata;\n\n    /**\n     * Nested set's right value column.\n     * Used only in tree entities with nested set pattern applied.\n     */\n    nestedSetRightColumn?: ColumnMetadata;\n\n    /**\n     * Materialized path column.\n     * Used only in tree entities with materialized path pattern applied.\n     */\n    materializedPathColumn?: ColumnMetadata;\n\n    /**\n     * Gets the primary columns.\n     */\n    primaryColumns: ColumnMetadata[] = [];\n\n    /**\n     * Entity's relation metadatas.\n     */\n    ownRelations: RelationMetadata[] = [];\n\n    /**\n     * Relations of the entity, including relations that are coming from the embeddeds of this entity.\n     */\n    relations: RelationMetadata[] = [];\n\n    /**\n     * List of eager relations this metadata has.\n     */\n    eagerRelations: RelationMetadata[] = [];\n\n    /**\n     * List of eager relations this metadata has.\n     */\n    lazyRelations: RelationMetadata[] = [];\n\n    /**\n     * Gets only one-to-one relations of the entity.\n     */\n    oneToOneRelations: RelationMetadata[] = [];\n\n    /**\n     * Gets only owner one-to-one relations of the entity.\n     */\n    ownerOneToOneRelations: RelationMetadata[] = [];\n\n    /**\n     * Gets only one-to-many relations of the entity.\n     */\n    oneToManyRelations: RelationMetadata[] = [];\n\n    /**\n     * Gets only many-to-one relations of the entity.\n     */\n    manyToOneRelations: RelationMetadata[] = [];\n\n    /**\n     * Gets only many-to-many relations of the entity.\n     */\n    manyToManyRelations: RelationMetadata[] = [];\n\n    /**\n     * Gets only owner many-to-many relations of the entity.\n     */\n    ownerManyToManyRelations: RelationMetadata[] = [];\n\n    /**\n     * Gets only owner one-to-one and many-to-one relations.\n     */\n    relationsWithJoinColumns: RelationMetadata[] = [];\n\n    /**\n     * Tree parent relation. Used only in tree-tables.\n     */\n    treeParentRelation?: RelationMetadata;\n\n    /**\n     * Tree children relation. Used only in tree-tables.\n     */\n    treeChildrenRelation?: RelationMetadata;\n\n    /**\n     * Entity's relation id metadatas.\n     */\n    relationIds: RelationIdMetadata[] = [];\n\n    /**\n     * Entity's relation id metadatas.\n     */\n    relationCounts: RelationCountMetadata[] = [];\n\n    /**\n     * Entity's foreign key metadatas.\n     */\n    foreignKeys: ForeignKeyMetadata[] = [];\n\n    /**\n     * Entity's embedded metadatas.\n     */\n    embeddeds: EmbeddedMetadata[] = [];\n\n    /**\n     * All embeddeds - embeddeds from this entity metadata and from all child embeddeds, etc.\n     */\n    allEmbeddeds: EmbeddedMetadata[] = [];\n\n    /**\n     * Entity's own indices.\n     */\n    ownIndices: IndexMetadata[] = [];\n\n    /**\n     * Entity's index metadatas.\n     */\n    indices: IndexMetadata[] = [];\n\n    /**\n     * Entity's unique metadatas.\n     */\n    uniques: UniqueMetadata[] = [];\n\n    /**\n     * Entity's own uniques.\n     */\n    ownUniques: UniqueMetadata[] = [];\n\n    /**\n     * Entity's check metadatas.\n     */\n    checks: CheckMetadata[] = [];\n\n    /**\n     * Entity's exclusion metadatas.\n     */\n    exclusions: ExclusionMetadata[] = [];\n\n    /**\n     * Entity's own listener metadatas.\n     */\n    ownListeners: EntityListenerMetadata[] = [];\n\n    /**\n     * Entity listener metadatas.\n     */\n    listeners: EntityListenerMetadata[] = [];\n\n    /**\n     * Listener metadatas with \"AFTER LOAD\" type.\n     */\n    afterLoadListeners: EntityListenerMetadata[] = [];\n\n    /**\n     * Listener metadatas with \"AFTER INSERT\" type.\n     */\n    beforeInsertListeners: EntityListenerMetadata[] = [];\n\n    /**\n     * Listener metadatas with \"AFTER INSERT\" type.\n     */\n    afterInsertListeners: EntityListenerMetadata[] = [];\n\n    /**\n     * Listener metadatas with \"AFTER UPDATE\" type.\n     */\n    beforeUpdateListeners: EntityListenerMetadata[] = [];\n\n    /**\n     * Listener metadatas with \"AFTER UPDATE\" type.\n     */\n    afterUpdateListeners: EntityListenerMetadata[] = [];\n\n    /**\n     * Listener metadatas with \"AFTER REMOVE\" type.\n     */\n    beforeRemoveListeners: EntityListenerMetadata[] = [];\n\n    /**\n     * Listener metadatas with \"AFTER REMOVE\" type.\n     */\n    afterRemoveListeners: EntityListenerMetadata[] = [];\n\n    /**\n     * Map of columns and relations of the entity.\n     *\n     * example: Post{ id: number, name: string, counterEmbed: { count: number }, category: Category }.\n     * This method will create following object:\n     * { id: \"id\", counterEmbed: { count: \"counterEmbed.count\" }, category: \"category\" }\n     */\n    propertiesMap: ObjectLiteral;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        connection: Connection,\n        inheritanceTree?: Function[],\n        inheritancePattern?: \"STI\"/*|\"CTI\"*/,\n        tableTree?: TreeMetadataArgs,\n        parentClosureEntityMetadata?: EntityMetadata,\n        args: TableMetadataArgs\n    }) {\n        this.connection = options.connection;\n        this.inheritanceTree = options.inheritanceTree || [];\n        this.inheritancePattern = options.inheritancePattern;\n        this.treeType = options.tableTree ? options.tableTree.type : undefined;\n        this.treeOptions = options.tableTree ? options.tableTree.options : undefined;\n        this.parentClosureEntityMetadata = options.parentClosureEntityMetadata!;\n        this.tableMetadataArgs = options.args;\n        this.target = this.tableMetadataArgs.target;\n        this.tableType = this.tableMetadataArgs.type;\n        this.expression = this.tableMetadataArgs.expression;\n        this.withoutRowid = this.tableMetadataArgs.withoutRowid;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new entity.\n     */\n    create(queryRunner?: QueryRunner): any {\n        // if target is set to a function (e.g. class) that can be created then create it\n        let ret: any;\n        if (this.target instanceof Function) {\n            ret = new (<any> this.target)();\n            this.lazyRelations.forEach(relation => this.connection.relationLoader.enableLazyLoad(relation, ret, queryRunner));\n            return ret;\n        }\n\n        // otherwise simply return a new empty object\n        const newObject = {};\n        this.lazyRelations.forEach(relation => this.connection.relationLoader.enableLazyLoad(relation, newObject, queryRunner));\n        return newObject;\n    }\n\n    /**\n     * Checks if given entity has an id.\n     */\n    hasId(entity: ObjectLiteral): boolean {\n        if (!entity)\n            return false;\n\n        return this.primaryColumns.every(primaryColumn => {\n            const value = primaryColumn.getEntityValue(entity);\n            return value !== null && value !== undefined && value !== \"\";\n        });\n    }\n\n    /**\n     * Checks if given entity / object contains ALL primary keys entity must have.\n     * Returns true if it contains all of them, false if at least one of them is not defined.\n     */\n    hasAllPrimaryKeys(entity: ObjectLiteral): boolean {\n        return this.primaryColumns.every(primaryColumn => {\n            const value = primaryColumn.getEntityValue(entity);\n            return value !== null && value !== undefined;\n        });\n    }\n\n    /**\n     * Ensures that given object is an entity id map.\n     * If given id is an object then it means its already id map.\n     * If given id isn't an object then it means its a value of the id column\n     * and it creates a new id map with this value and name of the primary column.\n     */\n    ensureEntityIdMap(id: any): ObjectLiteral {\n        if (id instanceof Object)\n            return id;\n\n        if (this.hasMultiplePrimaryKeys)\n            throw new CannotCreateEntityIdMapError(this, id);\n\n        return this.primaryColumns[0].createValueMap(id);\n    }\n\n    /**\n     * Gets primary keys of the entity and returns them in a literal object.\n     * For example, for Post{ id: 1, title: \"hello\" } where id is primary it will return { id: 1 }\n     * For multiple primary keys it returns multiple keys in object.\n     * For primary keys inside embeds it returns complex object literal with keys in them.\n     */\n    getEntityIdMap(entity: ObjectLiteral|undefined): ObjectLiteral|undefined {\n        if (!entity)\n            return undefined;\n\n        return EntityMetadata.getValueMap(entity, this.primaryColumns, { skipNulls: true });\n    }\n\n    /**\n     * Creates a \"mixed id map\".\n     * If entity has multiple primary keys (ids) then it will return just regular id map, like what getEntityIdMap returns.\n     * But if entity has a single primary key then it will return just value of the id column of the entity, just value.\n     * This is called mixed id map.\n     */\n    getEntityIdMixedMap(entity: ObjectLiteral|undefined): ObjectLiteral|undefined {\n        if (!entity)\n            return entity;\n\n        const idMap = this.getEntityIdMap(entity);\n        if (this.hasMultiplePrimaryKeys) {\n            return idMap;\n\n        } else if (idMap) {\n            return this.primaryColumns[0].getEntityValue(idMap); // todo: what about parent primary column?\n        }\n\n        return idMap;\n    }\n\n    /**\n     * Compares two different entities by their ids.\n     * Returns true if they match, false otherwise.\n     */\n    compareEntities(firstEntity: ObjectLiteral, secondEntity: ObjectLiteral): boolean {\n\n        const firstEntityIdMap = this.getEntityIdMap(firstEntity);\n        if (!firstEntityIdMap) return false;\n\n        const secondEntityIdMap = this.getEntityIdMap(secondEntity);\n        if (!secondEntityIdMap) return false;\n\n        return OrmUtils.compareIds(firstEntityIdMap, secondEntityIdMap);\n    }\n\n    /**\n     * Finds column with a given property name.\n     */\n    findColumnWithPropertyName(propertyName: string): ColumnMetadata|undefined {\n        return this.columns.find(column => column.propertyName === propertyName);\n    }\n\n    /**\n     * Finds column with a given database name.\n     */\n    findColumnWithDatabaseName(databaseName: string): ColumnMetadata|undefined {\n        return this.columns.find(column => column.databaseName === databaseName);\n    }\n\n    /**\n     * Finds column with a given property path.\n     */\n    findColumnWithPropertyPath(propertyPath: string): ColumnMetadata|undefined {\n        const column = this.columns.find(column => column.propertyPath === propertyPath);\n        if (column)\n            return column;\n\n        // in the case if column with property path was not found, try to find a relation with such property path\n        // if we find relation and it has a single join column then its the column user was seeking\n        const relation = this.relations.find(relation => relation.propertyPath === propertyPath);\n        if (relation && relation.joinColumns.length === 1)\n            return relation.joinColumns[0];\n\n        return undefined;\n    }\n\n    /**\n     * Finds columns with a given property path.\n     * Property path can match a relation, and relations can contain multiple columns.\n     */\n    findColumnsWithPropertyPath(propertyPath: string): ColumnMetadata[] {\n        const column = this.columns.find(column => column.propertyPath === propertyPath);\n        if (column)\n            return [column];\n\n        // in the case if column with property path was not found, try to find a relation with such property path\n        // if we find relation and it has a single join column then its the column user was seeking\n        const relation = this.relations.find(relation => relation.propertyPath === propertyPath);\n        if (relation && relation.joinColumns)\n            return relation.joinColumns;\n\n        return [];\n    }\n\n    /**\n     * Finds relation with the given property path.\n     */\n    findRelationWithPropertyPath(propertyPath: string): RelationMetadata|undefined {\n        return this.relations.find(relation => relation.propertyPath === propertyPath);\n    }\n\n    /**\n     * Checks if there is an embedded with a given property path.\n     */\n    hasEmbeddedWithPropertyPath(propertyPath: string): boolean {\n        return this.allEmbeddeds.some(embedded => embedded.propertyPath === propertyPath);\n    }\n\n    /**\n     * Finds embedded with a given property path.\n     */\n    findEmbeddedWithPropertyPath(propertyPath: string): EmbeddedMetadata|undefined {\n        return this.allEmbeddeds.find(embedded => embedded.propertyPath === propertyPath);\n    }\n\n    /**\n     * Iterates through entity and finds and extracts all values from relations in the entity.\n     * If relation value is an array its being flattened.\n     */\n    extractRelationValuesFromEntity(entity: ObjectLiteral, relations: RelationMetadata[]): [RelationMetadata, any, EntityMetadata][] {\n        const relationsAndValues: [RelationMetadata, any, EntityMetadata][] = [];\n        relations.forEach(relation => {\n            const value = relation.getEntityValue(entity);\n            if (Array.isArray(value)) {\n                value.forEach(subValue => relationsAndValues.push([relation, subValue, this.getInverseEntityMetadata(subValue, relation)]));\n            } else if (value) {\n                relationsAndValues.push([relation, value, this.getInverseEntityMetadata(value, relation)]);\n            }\n        });\n        return relationsAndValues;\n    }\n\n    private getInverseEntityMetadata(value: any, relation: RelationMetadata): EntityMetadata {\n        const childEntityMetadata = relation.inverseEntityMetadata.childEntityMetadatas.find(metadata =>\n            metadata.target === value.constructor\n        );\n        return childEntityMetadata ? childEntityMetadata : relation.inverseEntityMetadata;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a property paths for a given entity.\n     */\n    static createPropertyPath(metadata: EntityMetadata, entity: ObjectLiteral, prefix: string = \"\") {\n        const paths: string[] = [];\n        Object.keys(entity).forEach(key => {\n\n            // check for function is needed in the cases when createPropertyPath used on values containg a function as a value\n            // example: .update().set({ name: () => `SUBSTR('', 1, 2)` })\n            const parentPath = prefix ? prefix + \".\" + key : key;\n            if (metadata.hasEmbeddedWithPropertyPath(parentPath)) {\n                const subPaths = this.createPropertyPath(metadata, entity[key], parentPath);\n                paths.push(...subPaths);\n            } else {\n                const path = prefix ? prefix + \".\" + key : key;\n                paths.push(path);\n            }\n        });\n        return paths;\n    }\n\n    /**\n     * Finds difference between two entity id maps.\n     * Returns items that exist in the first array and absent in the second array.\n     */\n    static difference(firstIdMaps: ObjectLiteral[], secondIdMaps: ObjectLiteral[]): ObjectLiteral[] {\n        return firstIdMaps.filter(firstIdMap => {\n            return !secondIdMaps.find(secondIdMap => OrmUtils.compareIds(firstIdMap, secondIdMap));\n        });\n    }\n\n    /**\n     * Creates value map from the given values and columns.\n     * Examples of usages are primary columns map and join columns map.\n     */\n    static getValueMap(entity: ObjectLiteral, columns: ColumnMetadata[], options?: { skipNulls?: boolean }): ObjectLiteral|undefined {\n        return columns.reduce((map, column) => {\n            const value = column.getEntityValueMap(entity, options);\n\n            // make sure that none of the values of the columns are not missing\n            if (map === undefined || value === null || value === undefined)\n                return undefined;\n\n            return column.isObjectId ? Object.assign(map, value) : OrmUtils.mergeDeep(map, value);\n        }, {} as ObjectLiteral|undefined);\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n\n    build() {\n        const namingStrategy = this.connection.namingStrategy;\n        const entityPrefix = this.connection.options.entityPrefix;\n        this.engine = this.tableMetadataArgs.engine;\n        this.database = this.tableMetadataArgs.type === \"entity-child\" && this.parentEntityMetadata ? this.parentEntityMetadata.database : this.tableMetadataArgs.database;\n        if (this.tableMetadataArgs.schema) {\n            this.schema = this.tableMetadataArgs.schema;\n        }\n        else if ((this.tableMetadataArgs.type === \"entity-child\") && this.parentEntityMetadata) {\n            this.schema = this.parentEntityMetadata.schema;\n        }\n        else {\n            this.schema = (this.connection.options as PostgresConnectionOptions|SqlServerConnectionOptions).schema;\n        }\n        this.givenTableName = this.tableMetadataArgs.type === \"entity-child\" && this.parentEntityMetadata ? this.parentEntityMetadata.givenTableName : this.tableMetadataArgs.name;\n        this.synchronize = this.tableMetadataArgs.synchronize === false ? false : true;\n        this.targetName = this.tableMetadataArgs.target instanceof Function ? (this.tableMetadataArgs.target as any).name : this.tableMetadataArgs.target;\n        if (this.tableMetadataArgs.type === \"closure-junction\") {\n            this.tableNameWithoutPrefix = namingStrategy.closureJunctionTableName(this.givenTableName!);\n        } else if (this.tableMetadataArgs.type === \"entity-child\" && this.parentEntityMetadata) {\n            this.tableNameWithoutPrefix = namingStrategy.tableName(this.parentEntityMetadata.targetName, this.parentEntityMetadata.givenTableName);\n        } else {\n            this.tableNameWithoutPrefix = namingStrategy.tableName(this.targetName, this.givenTableName);\n\n            if (this.connection.driver.maxAliasLength && this.connection.driver.maxAliasLength > 0 && this.tableNameWithoutPrefix.length > this.connection.driver.maxAliasLength) {\n                this.tableNameWithoutPrefix = shorten(this.tableNameWithoutPrefix, { separator: \"_\", segmentLength: 3 });\n            }\n        }\n        this.tableName = entityPrefix ? namingStrategy.prefixTableName(entityPrefix, this.tableNameWithoutPrefix) : this.tableNameWithoutPrefix;\n        this.target = this.target ? this.target : this.tableName;\n        this.name = this.targetName ? this.targetName : this.tableName;\n        this.expression = this.tableMetadataArgs.expression;\n        this.withoutRowid = this.tableMetadataArgs.withoutRowid === true ? true : false;\n        this.tablePath = this.buildTablePath();\n        this.schemaPath = this.buildSchemaPath();\n        this.orderBy = (this.tableMetadataArgs.orderBy instanceof Function) ? this.tableMetadataArgs.orderBy(this.propertiesMap) : this.tableMetadataArgs.orderBy; // todo: is propertiesMap available here? Looks like its not\n\n        this.isJunction = this.tableMetadataArgs.type === \"closure-junction\" || this.tableMetadataArgs.type === \"junction\";\n        this.isClosureJunction = this.tableMetadataArgs.type === \"closure-junction\";\n    }\n\n    /**\n     * Registers a new column in the entity and recomputes all depend properties.\n     */\n    registerColumn(column: ColumnMetadata) {\n        if (this.ownColumns.indexOf(column) !== -1)\n            return;\n\n        this.ownColumns.push(column);\n        this.columns = this.embeddeds.reduce((columns, embedded) => columns.concat(embedded.columnsFromTree), this.ownColumns);\n        this.primaryColumns = this.columns.filter(column => column.isPrimary);\n        this.hasMultiplePrimaryKeys = this.primaryColumns.length > 1;\n        this.hasUUIDGeneratedColumns = this.columns.filter(column => column.isGenerated || column.generationStrategy === \"uuid\").length > 0;\n        this.propertiesMap = this.createPropertiesMap();\n        if (this.childEntityMetadatas)\n            this.childEntityMetadatas.forEach(entityMetadata => entityMetadata.registerColumn(column));\n    }\n\n    /**\n     * Creates a special object - all columns and relations of the object (plus columns and relations from embeds)\n     * in a special format - { propertyName: propertyName }.\n     *\n     * example: Post{ id: number, name: string, counterEmbed: { count: number }, category: Category }.\n     * This method will create following object:\n     * { id: \"id\", counterEmbed: { count: \"counterEmbed.count\" }, category: \"category\" }\n     */\n    createPropertiesMap(): { [name: string]: string|any } {\n        const map: { [name: string]: string|any } = {};\n        this.columns.forEach(column => OrmUtils.mergeDeep(map, column.createValueMap(column.propertyPath)));\n        this.relations.forEach(relation => OrmUtils.mergeDeep(map, relation.createValueMap(relation.propertyPath)));\n        return map;\n    }\n\n    /**\n     * Builds table path using database name, schema name and table name.\n     */\n    protected buildTablePath(): string {\n        let tablePath = this.tableName;\n        if (this.schema && ((this.connection.driver instanceof OracleDriver) || (this.connection.driver instanceof PostgresDriver) || (this.connection.driver instanceof SqlServerDriver) || (this.connection.driver instanceof SapDriver))) {\n            tablePath = this.schema + \".\" + tablePath;\n        }\n\n        if (this.database && !(this.connection.driver instanceof PostgresDriver)) {\n            if (!this.schema && this.connection.driver instanceof SqlServerDriver) {\n                tablePath = this.database + \"..\" + tablePath;\n            } else {\n                tablePath = this.database + \".\" + tablePath;\n            }\n        }\n\n        return tablePath;\n    }\n\n    /**\n     * Builds table path using schema name and database name.\n     */\n    protected buildSchemaPath(): string|undefined {\n        if (!this.schema)\n            return undefined;\n\n        return this.database && !(this.connection.driver instanceof PostgresDriver) ? this.database + \".\" + this.schema : this.schema;\n    }\n\n}\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","/**\n * Thrown when required driver's package is not installed.\n */\nexport class DriverPackageNotInstalledError extends Error {\n    name = \"DriverPackageNotInstalledError\";\n\n    constructor(driverName: string, packageName: string) {\n        super();\n        Object.setPrototypeOf(this, DriverPackageNotInstalledError.prototype);\n        this.message = `${driverName} package has not been found installed. Try to install it: npm install ${packageName} --save`;\n    }\n\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ObjectUtils} from \"../util/ObjectUtils\";\n\n/**\n */\nexport class Alias {\n\n    type: \"from\"|\"select\"|\"join\"|\"other\"; // todo: make something with \"other\"\n\n    name: string;\n\n    /**\n     * Table on which this alias is applied.\n     * Used only for aliases which select custom tables.\n     */\n    tablePath?: string;\n\n    /**\n     * If this alias is for sub query.\n     */\n    subQuery?: string;\n\n    constructor(alias?: Alias) {\n        ObjectUtils.assign(this, alias || {});\n    }\n\n    private _metadata?: EntityMetadata;\n\n    get target(): Function|string {\n        return this.metadata.target;\n    }\n\n    get hasMetadata(): boolean {\n        return !!this._metadata;\n    }\n\n    set metadata(metadata: EntityMetadata) {\n        this._metadata = metadata;\n    }\n\n    get metadata(): EntityMetadata {\n        if (!this._metadata)\n            throw new Error(`Cannot get entity metadata for the given alias \"${this.name}\"`);\n\n        return this._metadata;\n    }\n\n}\n","import {Alias} from \"./Alias\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\nimport {JoinAttribute} from \"./JoinAttribute\";\nimport {RelationIdAttribute} from \"./relation-id/RelationIdAttribute\";\nimport {RelationCountAttribute} from \"./relation-count/RelationCountAttribute\";\nimport {Connection} from \"../connection/Connection\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {SelectQuery} from \"./SelectQuery\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {QueryBuilder} from \"./QueryBuilder\";\nimport {SelectQueryBuilderOption} from \"./SelectQueryBuilderOption\";\n\n/**\n * Contains all properties of the QueryBuilder that needs to be build a final query.\n */\nexport class QueryExpressionMap {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if QueryBuilder used to select entities and not a raw results.\n     */\n    queryEntity: boolean = false;\n\n    /**\n     * Main alias is a main selection object selected by QueryBuilder.\n     */\n    mainAlias?: Alias;\n\n    /**\n     * All aliases (including main alias) used in the query.\n     */\n    aliases: Alias[] = [];\n\n    /**\n     * Represents query type. QueryBuilder is able to build SELECT, UPDATE and DELETE queries.\n     */\n    queryType: \"select\"|\"update\"|\"delete\"|\"insert\"|\"relation\"|\"soft-delete\"|\"restore\" = \"select\";\n\n    /**\n     * Data needs to be SELECT-ed.\n     */\n    selects: SelectQuery[] = [];\n\n    /**\n     * Whether SELECT is DISTINCT.\n     */\n    selectDistinct: boolean = false;\n\n    /**\n     * SELECT DISTINCT ON query (postgres).\n     */\n    selectDistinctOn: string[] = [];\n\n    /**\n     * FROM-s to be selected.\n     */\n    // froms: { target: string, alias: string }[] = [];\n\n    /**\n     * If update query was used, it needs \"update set\" - properties which will be updated by this query.\n     * If insert query was used, it needs \"insert set\" - values that needs to be inserted.\n     */\n    valuesSet?: ObjectLiteral|ObjectLiteral[];\n\n    /**\n     * Optional returning (or output) clause for insert, update or delete queries.\n     */\n    returning: string|string[];\n\n    /**\n     * Extra returning columns to be added to the returning statement if driver supports it.\n     */\n    extraReturningColumns: ColumnMetadata[] = [];\n\n    /**\n     * Optional on conflict statement used in insertion query in postgres.\n     */\n    onConflict: string = \"\";\n\n    /**\n     * Optional on ignore statement used in insertion query in databases.\n     */\n    onIgnore: string|boolean = false;\n\n    /**\n     * Optional on update statement used in insertion query in databases.\n     */\n    onUpdate: { columns?: string, conflict?: string, overwrite?: string };\n\n    /**\n     * JOIN queries.\n     */\n    joinAttributes: JoinAttribute[] = [];\n\n    /**\n     * RelationId queries.\n     */\n    relationIdAttributes: RelationIdAttribute[] = [];\n\n    /**\n     * Relation count queries.\n     */\n    relationCountAttributes: RelationCountAttribute[] = [];\n\n    /**\n     * WHERE queries.\n     */\n    wheres: { type: \"simple\"|\"and\"|\"or\", condition: string }[] = [];\n\n    /**\n     * HAVING queries.\n     */\n    havings: { type: \"simple\"|\"and\"|\"or\", condition: string }[] = [];\n\n    /**\n     * ORDER BY queries.\n     */\n    orderBys: OrderByCondition = {};\n\n    /**\n     * GROUP BY queries.\n     */\n    groupBys: string[] = [];\n\n    /**\n     * LIMIT query.\n     */\n    limit?: number;\n\n    /**\n     * OFFSET query.\n     */\n    offset?: number;\n\n    /**\n     * Number of rows to skip of result using pagination.\n     */\n    skip?: number;\n\n    /**\n     * Number of rows to take using pagination.\n     */\n    take?: number;\n\n    /**\n     * Locking mode.\n     */\n    lockMode?: \"optimistic\"|\"pessimistic_read\"|\"pessimistic_write\"|\"dirty_read\"|\"pessimistic_partial_write\"|\"pessimistic_write_or_fail\"|\"for_no_key_update\";\n\n    /**\n     * Current version of the entity, used for locking.\n     */\n    lockVersion?: number|Date;\n\n    /**\n     * Indicates if soft-deleted rows should be included in entity result.\n     * By default the soft-deleted rows are not included.\n     */\n    withDeleted: boolean = false;\n\n    /**\n     * Parameters used to be escaped in final query.\n     */\n    parameters: ObjectLiteral = {};\n\n    /**\n     * Indicates if alias, table names and column names will be ecaped by driver, or not.\n     *\n     * todo: rename to isQuotingDisabled, also think if it should be named \"escaping\"\n     */\n    disableEscaping: boolean = true;\n\n    /**\n     * Indicates if virtual columns should be included in entity result.\n     *\n     * todo: what to do with it? is it properly used? what about persistence?\n     */\n    enableRelationIdValues: boolean = false;\n\n    /**\n     * Extra where condition appended to the end of original where conditions with AND keyword.\n     * Original condition will be wrapped into brackets.\n     */\n    extraAppendedAndWhereCondition: string = \"\";\n\n    /**\n     * Indicates if query builder creates a subquery.\n     */\n    subQuery: boolean = false;\n\n    /**\n     * If QueryBuilder was created in a subquery mode then its parent QueryBuilder (who created subquery) will be stored here.\n     */\n    parentQueryBuilder: QueryBuilder<any>;\n\n    /**\n     * Indicates if property names are prefixed with alias names during property replacement.\n     * By default this is enabled, however we need this because aliases are not supported in UPDATE and DELETE queries,\n     * but user can use them in WHERE expressions.\n     */\n    aliasNamePrefixingEnabled: boolean = true;\n\n    /**\n     * Indicates if query result cache is enabled or not.\n     */\n    cache: boolean = false;\n\n    /**\n     * Time in milliseconds in which cache will expire.\n     * If not set then global caching time will be used.\n     */\n    cacheDuration: number;\n\n    /**\n     * Cache id.\n     * Used to identifier your cache queries.\n     */\n    cacheId: string;\n\n    /**\n     * Options that define QueryBuilder behaviour.\n     */\n    options: SelectQueryBuilderOption[] = [];\n\n    /**\n     * Property path of relation to work with.\n     * Used in relational query builder.\n     */\n    relationPropertyPath: string;\n\n    /**\n     * Entity (target) which relations will be updated.\n     */\n    of: any|any[];\n\n    /**\n     * List of columns where data should be inserted.\n     * Used in INSERT query.\n     */\n    insertColumns: string[] = [];\n\n    /**\n     * Used if user wants to update or delete a specific entities.\n     */\n    whereEntities: ObjectLiteral[] = [];\n\n    /**\n     * Indicates if entity must be updated after insertion / updation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     */\n    updateEntity: boolean = true;\n\n    /**\n     * Indicates if listeners and subscribers must be called before and after query execution.\n     */\n    callListeners: boolean = true;\n\n    /**\n     * Indicates if query must be wrapped into transaction.\n     */\n    useTransaction: boolean = false;\n\n    /**\n     * Extra parameters.\n     * Used in InsertQueryBuilder to avoid default parameters mechanizm and execute high performance insertions.\n     */\n    nativeParameters: ObjectLiteral = {};\n\n    /**\n     * Query Comment to include extra information for debugging or other purposes.\n     */\n    comment?: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Get all ORDER BY queries - if order by is specified by user then it uses them,\n     * otherwise it uses default entity order by if it was set.\n     */\n    get allOrderBys() {\n        if (!Object.keys(this.orderBys).length && this.mainAlias!.hasMetadata && this.options.indexOf(\"disable-global-order\") === -1) {\n            const entityOrderBy = this.mainAlias!.metadata.orderBy || {};\n            return Object.keys(entityOrderBy).reduce((orderBy, key) => {\n                orderBy[this.mainAlias!.name + \".\" + key] = entityOrderBy[key];\n                return orderBy;\n            }, {} as OrderByCondition);\n        }\n\n        return this.orderBys;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a main alias and adds it to the current expression map.\n     */\n    setMainAlias(alias: Alias): Alias {\n\n        // if main alias is already set then remove it from the array\n        // if (this.mainAlias)\n        //     this.aliases.splice(this.aliases.indexOf(this.mainAlias));\n\n        // set new main alias\n        this.mainAlias = alias;\n\n        return alias;\n    }\n\n    /**\n     * Creates a new alias and adds it to the current expression map.\n     */\n    createAlias(options: { type: \"from\"|\"select\"|\"join\"|\"other\", name?: string, target?: Function|string, tablePath?: string, subQuery?: string, metadata?: EntityMetadata }): Alias {\n\n        let aliasName = options.name;\n        if (!aliasName && options.tablePath)\n            aliasName = options.tablePath;\n        if (!aliasName && options.target instanceof Function)\n            aliasName = options.target.name;\n        if (!aliasName && typeof options.target === \"string\")\n            aliasName = options.target;\n\n        const alias = new Alias();\n        alias.type = options.type;\n        if (aliasName)\n            alias.name = aliasName;\n        if (options.metadata)\n            alias.metadata = options.metadata;\n        if (options.target && !alias.hasMetadata)\n            alias.metadata = this.connection.getMetadata(options.target);\n        if (options.tablePath)\n            alias.tablePath = options.tablePath;\n        if (options.subQuery)\n            alias.subQuery = options.subQuery;\n\n        this.aliases.push(alias);\n        return alias;\n    }\n\n    /**\n     * Finds alias with the given name.\n     * If alias was not found it throw an exception.\n     */\n    findAliasByName(aliasName: string): Alias {\n        const alias = this.aliases.find(alias => alias.name === aliasName);\n        if (!alias)\n            throw new Error(`\"${aliasName}\" alias was not found. Maybe you forgot to join it?`);\n\n        return alias;\n    }\n\n    findColumnByAliasExpression(aliasExpression: string): ColumnMetadata|undefined {\n        const [aliasName, propertyPath] = aliasExpression.split(\".\");\n        const alias = this.findAliasByName(aliasName);\n        return alias.metadata.findColumnWithPropertyName(propertyPath);\n    }\n\n    /**\n     * Gets relation metadata of the relation this query builder works with.\n     *\n     * todo: add proper exceptions\n     */\n    get relationMetadata(): RelationMetadata {\n        if (!this.mainAlias)\n            throw new Error(`Entity to work with is not specified!`); // todo: better message\n\n        const relationMetadata = this.mainAlias.metadata.findRelationWithPropertyPath(this.relationPropertyPath);\n        if (!relationMetadata)\n            throw new Error(`Relation ${this.relationPropertyPath} was not found in entity ${this.mainAlias.name}`); // todo: better message\n\n        return relationMetadata;\n    }\n\n    /**\n     * Copies all properties of the current QueryExpressionMap into a new one.\n     * Useful when QueryBuilder needs to create a copy of itself.\n     */\n    clone(): QueryExpressionMap {\n        const map = new QueryExpressionMap(this.connection);\n        map.queryType = this.queryType;\n        map.selects = this.selects.map(select => select);\n        map.selectDistinct = this.selectDistinct;\n        map.selectDistinctOn = this.selectDistinctOn;\n        this.aliases.forEach(alias => map.aliases.push(new Alias(alias)));\n        map.mainAlias = this.mainAlias;\n        map.valuesSet = this.valuesSet;\n        map.returning = this.returning;\n        map.onConflict = this.onConflict;\n        map.onIgnore = this.onIgnore;\n        map.onUpdate = this.onUpdate;\n        map.joinAttributes = this.joinAttributes.map(join => new JoinAttribute(this.connection, this, join));\n        map.relationIdAttributes = this.relationIdAttributes.map(relationId => new RelationIdAttribute(this, relationId));\n        map.relationCountAttributes = this.relationCountAttributes.map(relationCount => new RelationCountAttribute(this, relationCount));\n        map.wheres = this.wheres.map(where => ({ ...where }));\n        map.havings = this.havings.map(having => ({ ...having }));\n        map.orderBys = Object.assign({}, this.orderBys);\n        map.groupBys = this.groupBys.map(groupBy => groupBy);\n        map.limit = this.limit;\n        map.offset = this.offset;\n        map.skip = this.skip;\n        map.take = this.take;\n        map.lockMode = this.lockMode;\n        map.lockVersion = this.lockVersion;\n        map.withDeleted = this.withDeleted;\n        map.parameters = Object.assign({}, this.parameters);\n        map.disableEscaping = this.disableEscaping;\n        map.enableRelationIdValues = this.enableRelationIdValues;\n        map.extraAppendedAndWhereCondition = this.extraAppendedAndWhereCondition;\n        map.subQuery = this.subQuery;\n        map.aliasNamePrefixingEnabled = this.aliasNamePrefixingEnabled;\n        map.cache = this.cache;\n        map.cacheId = this.cacheId;\n        map.cacheDuration = this.cacheDuration;\n        map.relationPropertyPath = this.relationPropertyPath;\n        map.of = this.of;\n        map.insertColumns = this.insertColumns;\n        map.whereEntities = this.whereEntities;\n        map.updateEntity = this.updateEntity;\n        map.callListeners = this.callListeners;\n        map.useTransaction = this.useTransaction;\n        map.nativeParameters = Object.assign({}, this.nativeParameters);\n        map.comment = this.comment;\n        return map;\n    }\n\n}\n","import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {Connection} from \"../connection/Connection\";\nimport {QueryExpressionMap} from \"./QueryExpressionMap\";\nimport {SelectQueryBuilder} from \"./SelectQueryBuilder\";\nimport {UpdateQueryBuilder} from \"./UpdateQueryBuilder\";\nimport {DeleteQueryBuilder} from \"./DeleteQueryBuilder\";\nimport {SoftDeleteQueryBuilder} from \"./SoftDeleteQueryBuilder\";\nimport {InsertQueryBuilder} from \"./InsertQueryBuilder\";\nimport {RelationQueryBuilder} from \"./RelationQueryBuilder\";\nimport {EntityTarget} from \"../common/EntityTarget\";\nimport {Alias} from \"./Alias\";\nimport {Brackets} from \"./Brackets\";\nimport {QueryDeepPartialEntity} from \"./QueryPartialEntity\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {SqljsDriver} from \"../driver/sqljs/SqljsDriver\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {CockroachDriver} from \"../driver/cockroachdb/CockroachDriver\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {EntitySchema} from \"../\";\nimport {FindOperator} from \"../find-options/FindOperator\";\nimport {In} from \"../find-options/operator/In\";\nimport {EntityColumnNotFound} from \"../error/EntityColumnNotFound\";\n\n// todo: completely cover query builder with tests\n// todo: entityOrProperty can be target name. implement proper behaviour if it is.\n// todo: check in persistment if id exist on object and throw exception (can be in partial selection?)\n// todo: fix problem with long aliases eg getMaxIdentifierLength\n// todo: fix replacing in .select(\"COUNT(post.id) AS cnt\") statement\n// todo: implement joinAlways in relations and relationId\n// todo: finish partial selection\n// todo: sugar methods like: .addCount and .selectCount, selectCountAndMap, selectSum, selectSumAndMap, ...\n// todo: implement @Select decorator\n// todo: add select and map functions\n\n// todo: implement relation/entity loading and setting them into properties within a separate query\n// .loadAndMap(\"post.categories\", \"post.categories\", qb => ...)\n// .loadAndMap(\"post.categories\", Category, qb => ...)\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport abstract class QueryBuilder<Entity> {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection on which QueryBuilder was created.\n     */\n    readonly connection: Connection;\n\n    /**\n     * Contains all properties of the QueryBuilder that needs to be build a final query.\n     */\n    readonly expressionMap: QueryExpressionMap;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Query runner used to execute query builder query.\n     */\n    protected queryRunner?: QueryRunner;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    constructor(queryBuilder: QueryBuilder<any>);\n\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    constructor(connection: Connection, queryRunner?: QueryRunner);\n\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    constructor(connectionOrQueryBuilder: Connection|QueryBuilder<any>, queryRunner?: QueryRunner) {\n        if (connectionOrQueryBuilder instanceof QueryBuilder) {\n            this.connection = connectionOrQueryBuilder.connection;\n            this.queryRunner = connectionOrQueryBuilder.queryRunner;\n            this.expressionMap = connectionOrQueryBuilder.expressionMap.clone();\n\n        } else {\n            this.connection = connectionOrQueryBuilder;\n            this.queryRunner = queryRunner;\n            this.expressionMap = new QueryExpressionMap(this.connection);\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Abstract Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    abstract getQuery(): string;\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets the main alias string used in this query builder.\n     */\n    get alias(): string {\n        if (!this.expressionMap.mainAlias)\n            throw new Error(`Main alias is not set`); // todo: better exception\n\n        return this.expressionMap.mainAlias.name;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates SELECT query.\n     * Replaces all previous selections if they exist.\n     */\n    select(): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection: string, selectionAliasName?: string): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection: string[]): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection?: string|string[], selectionAliasName?: string): SelectQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"select\";\n        if (Array.isArray(selection)) {\n            this.expressionMap.selects = selection.map(selection => ({ selection: selection }));\n        } else if (selection) {\n            this.expressionMap.selects = [{ selection: selection, aliasName: selectionAliasName }];\n        }\n\n        // loading it dynamically because of circular issue\n        const SelectQueryBuilderCls = require(\"./SelectQueryBuilder\").SelectQueryBuilder;\n        if (this instanceof SelectQueryBuilderCls)\n            return this as any;\n\n        return new SelectQueryBuilderCls(this);\n    }\n\n    /**\n     * Creates INSERT query.\n     */\n    insert(): InsertQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"insert\";\n\n        // loading it dynamically because of circular issue\n        const InsertQueryBuilderCls = require(\"./InsertQueryBuilder\").InsertQueryBuilder;\n        if (this instanceof InsertQueryBuilderCls)\n            return this as any;\n\n        return new InsertQueryBuilderCls(this);\n    }\n\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(): UpdateQueryBuilder<Entity>;\n\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(updateSet: QueryDeepPartialEntity<Entity>): UpdateQueryBuilder<Entity>;\n\n    /**\n     * Creates UPDATE query for the given entity and applies given update values.\n     */\n    update<Entity>(entity: EntityTarget<Entity>, updateSet?: QueryDeepPartialEntity<Entity>): UpdateQueryBuilder<Entity>;\n\n    /**\n     * Creates UPDATE query for the given table name and applies given update values.\n     */\n    update(tableName: string, updateSet?: QueryDeepPartialEntity<Entity>): UpdateQueryBuilder<Entity>;\n\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(entityOrTableNameUpdateSet?: EntityTarget<any>|ObjectLiteral, maybeUpdateSet?: ObjectLiteral): UpdateQueryBuilder<any> {\n        const updateSet = maybeUpdateSet ? maybeUpdateSet : entityOrTableNameUpdateSet as ObjectLiteral|undefined;\n        entityOrTableNameUpdateSet = entityOrTableNameUpdateSet instanceof EntitySchema ? entityOrTableNameUpdateSet.options.name : entityOrTableNameUpdateSet;\n\n        if (entityOrTableNameUpdateSet instanceof Function || typeof entityOrTableNameUpdateSet === \"string\") {\n            const mainAlias = this.createFromAlias(entityOrTableNameUpdateSet);\n            this.expressionMap.setMainAlias(mainAlias);\n        }\n\n        this.expressionMap.queryType = \"update\";\n        this.expressionMap.valuesSet = updateSet;\n\n        // loading it dynamically because of circular issue\n        const UpdateQueryBuilderCls = require(\"./UpdateQueryBuilder\").UpdateQueryBuilder;\n        if (this instanceof UpdateQueryBuilderCls)\n            return this as any;\n\n        return new UpdateQueryBuilderCls(this);\n    }\n\n    /**\n     * Creates DELETE query.\n     */\n    delete(): DeleteQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"delete\";\n\n        // loading it dynamically because of circular issue\n        const DeleteQueryBuilderCls = require(\"./DeleteQueryBuilder\").DeleteQueryBuilder;\n        if (this instanceof DeleteQueryBuilderCls)\n            return this as any;\n\n        return new DeleteQueryBuilderCls(this);\n    }\n\n    softDelete(): SoftDeleteQueryBuilder<any> {\n        this.expressionMap.queryType = \"soft-delete\";\n\n        // loading it dynamically because of circular issue\n        const SoftDeleteQueryBuilderCls = require(\"./SoftDeleteQueryBuilder\").SoftDeleteQueryBuilder;\n        if (this instanceof SoftDeleteQueryBuilderCls)\n            return this as any;\n\n        return new SoftDeleteQueryBuilderCls(this);\n    }\n\n    restore(): SoftDeleteQueryBuilder<any> {\n        this.expressionMap.queryType = \"restore\";\n\n        // loading it dynamically because of circular issue\n        const SoftDeleteQueryBuilderCls = require(\"./SoftDeleteQueryBuilder\").SoftDeleteQueryBuilder;\n        if (this instanceof SoftDeleteQueryBuilderCls)\n            return this as any;\n\n        return new SoftDeleteQueryBuilderCls(this);\n    }\n\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    relation(propertyPath: string): RelationQueryBuilder<Entity>;\n\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    relation<T>(entityTarget: EntityTarget<T>, propertyPath: string): RelationQueryBuilder<T>;\n\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    relation(entityTargetOrPropertyPath: Function|string, maybePropertyPath?: string): RelationQueryBuilder<Entity> {\n        const entityTarget = arguments.length === 2 ? entityTargetOrPropertyPath : undefined;\n        const propertyPath = arguments.length === 2 ? maybePropertyPath as string : entityTargetOrPropertyPath as string;\n\n        this.expressionMap.queryType = \"relation\";\n        this.expressionMap.relationPropertyPath = propertyPath;\n\n        if (entityTarget) {\n            const mainAlias = this.createFromAlias(entityTarget);\n            this.expressionMap.setMainAlias(mainAlias);\n        }\n\n        // loading it dynamically because of circular issue\n        const RelationQueryBuilderCls = require(\"./RelationQueryBuilder\").RelationQueryBuilder;\n        if (this instanceof RelationQueryBuilderCls)\n            return this as any;\n\n        return new RelationQueryBuilderCls(this);\n    }\n\n\n    /**\n     * Checks if given relation exists in the entity.\n     * Returns true if relation exists, false otherwise.\n     *\n     * todo: move this method to manager? or create a shortcut?\n     */\n    hasRelation<T>(target: EntityTarget<T>, relation: string): boolean;\n\n    /**\n     * Checks if given relations exist in the entity.\n     * Returns true if relation exists, false otherwise.\n     *\n     * todo: move this method to manager? or create a shortcut?\n     */\n    hasRelation<T>(target: EntityTarget<T>, relation: string[]): boolean;\n\n    /**\n     * Checks if given relation or relations exist in the entity.\n     * Returns true if relation exists, false otherwise.\n     *\n     * todo: move this method to manager? or create a shortcut?\n     */\n    hasRelation<T>(target: EntityTarget<T>, relation: string|string[]): boolean {\n        const entityMetadata = this.connection.getMetadata(target);\n        const relations = Array.isArray(relation) ? relation : [relation];\n        return relations.every(relation => {\n            return !!entityMetadata.findRelationWithPropertyPath(relation);\n        });\n    }\n\n    /**\n     * Sets parameter name and its value.\n     */\n    setParameter(key: string, value: any): this {\n        this.expressionMap.parameters[key] = value;\n        return this;\n    }\n\n    /**\n     * Adds all parameters from the given object.\n     */\n    setParameters(parameters: ObjectLiteral): this {\n\n        // remove function parameters\n        Object.keys(parameters).forEach(key => {\n            if (parameters[key] instanceof Function) {\n                throw new Error(`Function parameter isn't supported in the parameters. Please check \"${key}\" parameter.`);\n            }\n        });\n\n        // set parent query builder parameters as well in sub-query mode\n        if (this.expressionMap.parentQueryBuilder)\n            this.expressionMap.parentQueryBuilder.setParameters(parameters);\n\n        Object.keys(parameters).forEach(key => this.setParameter(key, parameters[key]));\n        return this;\n    }\n\n    /**\n     * Adds native parameters from the given object.\n     */\n    setNativeParameters(parameters: ObjectLiteral): this {\n\n        // set parent query builder parameters as well in sub-query mode\n        if (this.expressionMap.parentQueryBuilder)\n            this.expressionMap.parentQueryBuilder.setNativeParameters(parameters);\n\n        Object.keys(parameters).forEach(key => {\n            this.expressionMap.nativeParameters[key] = parameters[key];\n        });\n        return this;\n    }\n\n    /**\n     * Gets all parameters.\n     */\n    getParameters(): ObjectLiteral {\n        const parameters: ObjectLiteral = Object.assign({}, this.expressionMap.parameters);\n\n        // add discriminator column parameter if it exist\n        if (this.expressionMap.mainAlias && this.expressionMap.mainAlias.hasMetadata) {\n            const metadata = this.expressionMap.mainAlias!.metadata;\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\n                const values = metadata.childEntityMetadatas\n                    .filter(childMetadata => childMetadata.discriminatorColumn)\n                    .map(childMetadata => childMetadata.discriminatorValue);\n                values.push(metadata.discriminatorValue);\n                parameters[\"discriminatorColumnValues\"] = values;\n            }\n        }\n\n        return parameters;\n    }\n\n    /**\n     * Prints sql to stdout using console.log.\n     */\n    printSql(): this { // TODO rename to logSql()\n        const [query, parameters] = this.getQueryAndParameters();\n        this.connection.logger.logQuery(query, parameters);\n        return this;\n    }\n\n    /**\n     * Gets generated sql that will be executed.\n     * Parameters in the query are escaped for the currently used driver.\n     */\n    getSql(): string {\n        return this.getQueryAndParameters()[0];\n    }\n\n    /**\n     * Gets query to be executed with all parameters used in it.\n     */\n    getQueryAndParameters(): [string, any[]] {\n        // this execution order is important because getQuery method generates this.expressionMap.nativeParameters values\n        const query = this.getQuery();\n        const parameters = this.getParameters();\n        return this.connection.driver.escapeQueryWithParameters(query, parameters, this.expressionMap.nativeParameters);\n    }\n\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute(): Promise<any> {\n        const [sql, parameters] = this.getQueryAndParameters();\n        const queryRunner = this.obtainQueryRunner();\n        try {\n            return await queryRunner.query(sql, parameters);  // await is needed here because we are using finally\n\n        } finally {\n            if (queryRunner !== this.queryRunner) { // means we created our own query runner\n                await queryRunner.release();\n            }\n            if (this.connection.driver instanceof SqljsDriver) {\n                await this.connection.driver.autoSave();\n            }\n        }\n    }\n\n    /**\n     * Creates a completely new query builder.\n     * Uses same query runner as current QueryBuilder.\n     */\n    createQueryBuilder(): this {\n        return new (this.constructor as any)(this.connection, this.queryRunner);\n    }\n\n    /**\n     * Clones query builder as it is.\n     * Note: it uses new query runner, if you want query builder that uses exactly same query runner,\n     * you can create query builder using its constructor, for example new SelectQueryBuilder(queryBuilder)\n     * where queryBuilder is cloned QueryBuilder.\n     */\n    clone(): this {\n        return new (this.constructor as any)(this);\n    }\n\n    /**\n     * Includes a Query comment in the query builder.  This is helpful for debugging purposes,\n     * such as finding a specific query in the database server's logs, or for categorization using\n     * an APM product.\n     */\n    comment(comment: string): this {\n        this.expressionMap.comment = comment;\n        return this;\n    }\n\n    /**\n     * Disables escaping.\n     */\n    disableEscaping(): this {\n        this.expressionMap.disableEscaping = false;\n        return this;\n    }\n\n    /**\n     * Escapes table name, column name or alias name using current database's escaping character.\n     */\n    escape(name: string): string {\n        if (!this.expressionMap.disableEscaping)\n            return name;\n        return this.connection.driver.escape(name);\n    }\n\n    /**\n     * Sets or overrides query builder's QueryRunner.\n     */\n    setQueryRunner(queryRunner: QueryRunner): this {\n        this.queryRunner = queryRunner;\n        return this;\n    }\n\n    /**\n     * Indicates if listeners and subscribers must be called before and after query execution.\n     * Enabled by default.\n     */\n    callListeners(enabled: boolean): this {\n        this.expressionMap.callListeners = enabled;\n        return this;\n    }\n\n    /**\n     * If set to true the query will be wrapped into a transaction.\n     */\n    useTransaction(enabled: boolean): this {\n        this.expressionMap.useTransaction = enabled;\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets escaped table name with schema name if SqlServer driver used with custom\n     * schema name, otherwise returns escaped table name.\n     */\n    protected getTableName(tablePath: string): string {\n        return tablePath.split(\".\")\n            .map(i => {\n                // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n                if (i === \"\")\n                    return i;\n                return this.escape(i);\n            }).join(\".\");\n    }\n\n    /**\n     * Gets name of the table where insert should be performed.\n     */\n    protected getMainTableName(): string {\n        if (!this.expressionMap.mainAlias)\n            throw new Error(`Entity where values should be inserted is not specified. Call \"qb.into(entity)\" method to specify it.`);\n\n        if (this.expressionMap.mainAlias.hasMetadata)\n            return this.expressionMap.mainAlias.metadata.tablePath;\n\n        return this.expressionMap.mainAlias.tablePath!;\n    }\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    protected createFromAlias(entityTarget: EntityTarget<any>|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), aliasName?: string): Alias {\n\n        // if table has a metadata then find it to properly escape its properties\n        // const metadata = this.connection.entityMetadatas.find(metadata => metadata.tableName === tableName);\n        if (this.connection.hasMetadata(entityTarget)) {\n            const metadata = this.connection.getMetadata(entityTarget);\n\n            return this.expressionMap.createAlias({\n                type: \"from\",\n                name: aliasName,\n                metadata: this.connection.getMetadata(entityTarget),\n                tablePath: metadata.tablePath\n            });\n\n        } else {\n            if (typeof entityTarget === \"string\") {\n                const isSubquery = entityTarget.substr(0, 1) === \"(\" && entityTarget.substr(-1) === \")\";\n\n                return this.expressionMap.createAlias({\n                    type: \"from\",\n                    name: aliasName,\n                    tablePath: !isSubquery ? entityTarget as string : undefined,\n                    subQuery: isSubquery ? entityTarget : undefined,\n                });\n            }\n\n            const subQueryBuilder: SelectQueryBuilder<any> = (entityTarget as any)(((this as any) as SelectQueryBuilder<any>).subQuery());\n            this.setParameters(subQueryBuilder.getParameters());\n            const subquery = subQueryBuilder.getQuery();\n\n            return this.expressionMap.createAlias({\n                type: \"from\",\n                name: aliasName,\n                subQuery: subquery\n            });\n        }\n    }\n\n    /**\n     * Replaces all entity's propertyName to name in the given statement.\n     */\n    protected replacePropertyNames(statement: string) {\n        // Escape special characters in regular expressions\n        // Per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping\n        const escapeRegExp = (s: String) => s.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n\n        for (const alias of this.expressionMap.aliases) {\n            if (!alias.hasMetadata) continue;\n            const replaceAliasNamePrefix = this.expressionMap.aliasNamePrefixingEnabled ? `${alias.name}.` : \"\";\n            const replacementAliasNamePrefix = this.expressionMap.aliasNamePrefixingEnabled ? `${this.escape(alias.name)}.` : \"\";\n\n            const replacements: { [key: string]: string } = {};\n\n            // Insert & overwrite the replacements from least to most relevant in our replacements object.\n            // To do this we iterate and overwrite in the order of relevance.\n            // Least to Most Relevant:\n            // * Relation Property Path to first join column key\n            // * Relation Property Path + Column Path\n            // * Column Database Name\n            // * Column Propety Name\n            // * Column Property Path\n\n            for (const relation of alias.metadata.relations) {\n                if (relation.joinColumns.length > 0)\n                    replacements[relation.propertyPath] = relation.joinColumns[0].databaseName;\n            }\n\n            for (const relation of alias.metadata.relations) {\n                for (const joinColumn of [...relation.joinColumns, ...relation.inverseJoinColumns]) {\n                    const propertyKey = `${relation.propertyPath}.${joinColumn.referencedColumn!.propertyPath}`;\n                    replacements[propertyKey] = joinColumn.databaseName;\n                }\n            }\n\n            for (const column of alias.metadata.columns) {\n                replacements[column.databaseName] = column.databaseName;\n            }\n\n            for (const column of alias.metadata.columns) {\n                replacements[column.propertyName] = column.databaseName;\n            }\n\n            for (const column of alias.metadata.columns) {\n                replacements[column.propertyPath] = column.databaseName;\n            }\n\n            const replacementKeys = Object.keys(replacements);\n\n            if (replacementKeys.length) {\n                statement = statement.replace(new RegExp(\n                    `(?<=[ =\\(]|^.{0})` +\n                    `${escapeRegExp(replaceAliasNamePrefix)}(${replacementKeys.map(escapeRegExp).join(\"|\")})` +\n                    `(?=[ =\\)\\,]|.{0}$)`,\n                    \"gm\"\n                ), (_, p) =>\n                    `${replacementAliasNamePrefix}${this.escape(replacements[p])}`\n                );\n            }\n        }\n\n        return statement;\n    }\n\n    protected createComment(): string {\n        if (!this.expressionMap.comment) {\n            return \"\";\n        }\n\n        // ANSI SQL 2003 support C style comments - comments that start with `/*` and end with `*/`\n        // In some dialects query nesting is available - but not all.  Because of this, we'll need\n        // to scrub \"ending\" characters from the SQL but otherwise we can leave everything else\n        // as-is and it should be valid.\n\n        return `/* ${this.expressionMap.comment.replace(\"*/\", \"\")} */ `;\n    }\n\n    /**\n     * Creates \"WHERE\" expression.\n     */\n    protected createWhereExpression() {\n        const conditionsArray = [];\n\n        const whereExpression = this.createWhereExpressionString();\n        whereExpression.trim() && conditionsArray.push(this.createWhereExpressionString());\n\n        if (this.expressionMap.mainAlias!.hasMetadata) {\n            const metadata = this.expressionMap.mainAlias!.metadata;\n            // Adds the global condition of \"non-deleted\" for the entity with delete date columns in select query.\n            if (this.expressionMap.queryType === \"select\" && !this.expressionMap.withDeleted && metadata.deleteDateColumn) {\n                const column = this.expressionMap.aliasNamePrefixingEnabled\n                    ? this.expressionMap.mainAlias!.name + \".\" + metadata.deleteDateColumn.propertyName\n                    : metadata.deleteDateColumn.propertyName;\n\n                const condition = `${this.replacePropertyNames(column)} IS NULL`;\n                conditionsArray.push(condition);\n            }\n\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\n                const column = this.expressionMap.aliasNamePrefixingEnabled\n                    ? this.expressionMap.mainAlias!.name + \".\" + metadata.discriminatorColumn.databaseName\n                    : metadata.discriminatorColumn.databaseName;\n\n                const condition = `${this.replacePropertyNames(column)} IN (:...discriminatorColumnValues)`;\n                conditionsArray.push(condition);\n            }\n        }\n\n        if (this.expressionMap.extraAppendedAndWhereCondition) {\n            const condition = this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition);\n            conditionsArray.push(condition);\n        }\n\n        if (!conditionsArray.length) {\n            return \" \";\n        } else if (conditionsArray.length === 1) {\n            return ` WHERE ${conditionsArray[0]}`;\n        } else {\n            return ` WHERE ( ${conditionsArray.join(\" ) AND ( \")} )`;\n        }\n    }\n\n    /**\n     * Creates \"RETURNING\" / \"OUTPUT\" expression.\n     */\n    protected createReturningExpression(): string {\n        const columns = this.getReturningColumns();\n        const driver = this.connection.driver;\n\n        // also add columns we must auto-return to perform entity updation\n        // if user gave his own returning\n        if (typeof this.expressionMap.returning !== \"string\" &&\n            this.expressionMap.extraReturningColumns.length > 0 &&\n            driver.isReturningSqlSupported()) {\n            columns.push(...this.expressionMap.extraReturningColumns.filter(column => {\n                return columns.indexOf(column) === -1;\n            }));\n        }\n\n        if (columns.length) {\n            let columnsExpression = columns.map(column => {\n                const name = this.escape(column.databaseName);\n                if (driver instanceof SqlServerDriver) {\n                    if (this.expressionMap.queryType === \"insert\" || this.expressionMap.queryType === \"update\" || this.expressionMap.queryType === \"soft-delete\" || this.expressionMap.queryType === \"restore\") {\n                        return \"INSERTED.\" + name;\n                    } else {\n                        return this.escape(this.getMainTableName()) + \".\" + name;\n                    }\n                } else {\n                    return name;\n                }\n            }).join(\", \");\n\n            if (driver instanceof OracleDriver) {\n                columnsExpression += \" INTO \" + columns.map(column => {\n                    const parameterName = \"output_\" + column.databaseName;\n                    this.expressionMap.nativeParameters[parameterName] = { type: driver.columnTypeToNativeParameter(column.type), dir: driver.oracle.BIND_OUT };\n                    return this.connection.driver.createParameter(parameterName, Object.keys(this.expressionMap.nativeParameters).length);\n                }).join(\", \");\n            }\n\n            if (driver instanceof SqlServerDriver) {\n                if (this.expressionMap.queryType === \"insert\" || this.expressionMap.queryType === \"update\") {\n                    columnsExpression += \" INTO @OutputTable\";\n                }\n            }\n\n            return columnsExpression;\n\n        } else if (typeof this.expressionMap.returning === \"string\") {\n            return this.expressionMap.returning;\n        }\n\n        return \"\";\n    }\n\n    /**\n     * If returning / output cause is set to array of column names,\n     * then this method will return all column metadatas of those column names.\n     */\n    protected getReturningColumns(): ColumnMetadata[] {\n        const columns: ColumnMetadata[] = [];\n        if (Array.isArray(this.expressionMap.returning)) {\n            (this.expressionMap.returning as string[]).forEach(columnName => {\n                if (this.expressionMap.mainAlias!.hasMetadata) {\n                    columns.push(...this.expressionMap.mainAlias!.metadata.findColumnsWithPropertyPath(columnName));\n                }\n            });\n        }\n        return columns;\n    }\n\n    /**\n     * Concatenates all added where expressions into one string.\n     */\n    protected createWhereExpressionString(): string {\n        return this.expressionMap.wheres.map((where, index) => {\n            switch (where.type) {\n                case \"and\":\n                    return (index > 0 ? \"AND \" : \"\") + this.replacePropertyNames(where.condition);\n                case \"or\":\n                    return (index > 0 ? \"OR \" : \"\") + this.replacePropertyNames(where.condition);\n                default:\n                    return this.replacePropertyNames(where.condition);\n            }\n        }).join(\" \");\n    }\n\n    /**\n     * Creates \"WHERE\" expression and variables for the given \"ids\".\n     */\n    protected createWhereIdsExpression(ids: any|any[]): string {\n        const metadata = this.expressionMap.mainAlias!.metadata;\n        const normalized = (Array.isArray(ids) ? ids : [ids]).map(id => metadata.ensureEntityIdMap(id));\n\n        // using in(...ids) for single primary key entities\n        if (!metadata.hasMultiplePrimaryKeys\n            && metadata.embeddeds.length === 0\n        ) {\n            const primaryColumn = metadata.primaryColumns[0];\n\n            // getEntityValue will try to transform `In`, it is a bug\n            // todo: remove this transformer check after #2390 is fixed\n            if (!primaryColumn.transformer) {\n                return this.computeWhereParameter({\n                    [primaryColumn.propertyName]: In(\n                        normalized.map(id => primaryColumn.getEntityValue(id, false))\n                    )\n                });\n            }\n        }\n\n        // create shortcuts for better readability\n        const alias = this.expressionMap.aliasNamePrefixingEnabled ? this.escape(this.expressionMap.mainAlias!.name) + \".\" : \"\";\n        let parameterIndex = Object.keys(this.expressionMap.nativeParameters).length;\n        const whereStrings = normalized.map((id, index) => {\n            const whereSubStrings: string[] = [];\n            metadata.primaryColumns.forEach((primaryColumn, secondIndex) => {\n                const parameterName = \"id_\" + index + \"_\" + secondIndex;\n                // whereSubStrings.push(alias + this.escape(primaryColumn.databaseName) + \"=:id_\" + index + \"_\" + secondIndex);\n                whereSubStrings.push(alias + this.escape(primaryColumn.databaseName) + \" = \" + this.connection.driver.createParameter(parameterName, parameterIndex));\n                this.expressionMap.nativeParameters[parameterName] = primaryColumn.getEntityValue(id, true);\n                parameterIndex++;\n            });\n            return whereSubStrings.join(\" AND \");\n        });\n\n        return whereStrings.length > 1\n            ? \"(\" + whereStrings.map(whereString => \"(\" + whereString + \")\").join(\" OR \") + \")\"\n            : whereStrings[0];\n    }\n\n    /**\n     * Computes given where argument - transforms to a where string all forms it can take.\n     */\n    protected computeWhereParameter(where: string|((qb: this) => string)|Brackets|ObjectLiteral|ObjectLiteral[]) {\n        if (typeof where === \"string\")\n            return where;\n\n        if (where instanceof Brackets) {\n            const whereQueryBuilder = this.createQueryBuilder();\n            whereQueryBuilder.expressionMap.mainAlias = this.expressionMap.mainAlias;\n            whereQueryBuilder.expressionMap.aliasNamePrefixingEnabled = this.expressionMap.aliasNamePrefixingEnabled;\n            whereQueryBuilder.expressionMap.nativeParameters = this.expressionMap.nativeParameters;\n            where.whereFactory(whereQueryBuilder as any);\n            const whereString = whereQueryBuilder.createWhereExpressionString();\n            this.setParameters(whereQueryBuilder.getParameters());\n            return whereString ? \"(\" + whereString + \")\" : \"\";\n\n        } else if (where instanceof Function) {\n            return where(this);\n\n        } else if (where instanceof Object) {\n            const wheres: ObjectLiteral[] = Array.isArray(where) ? where : [where];\n            let andConditions: string[];\n            let parameterIndex = Object.keys(this.expressionMap.nativeParameters).length;\n\n            if (this.expressionMap.mainAlias!.hasMetadata) {\n                andConditions = wheres.map((where, whereIndex) => {\n                    const propertyPaths = EntityMetadata.createPropertyPath(this.expressionMap.mainAlias!.metadata, where);\n\n                    return propertyPaths.map((propertyPath, propertyIndex) => {\n                        const columns = this.expressionMap.mainAlias!.metadata.findColumnsWithPropertyPath(propertyPath);\n\n                        if (!columns.length) {\n                            throw new EntityColumnNotFound(propertyPath);\n                        }\n\n                        return columns.map((column, columnIndex) => {\n\n                            const aliasPath = this.expressionMap.aliasNamePrefixingEnabled ? `${this.alias}.${propertyPath}` : column.propertyPath;\n                            let parameterValue = column.getEntityValue(where, true);\n                            const parameterName = \"where_\" + whereIndex + \"_\" + propertyIndex + \"_\" + columnIndex;\n                            const parameterBaseCount = Object.keys(this.expressionMap.nativeParameters).filter(x => x.startsWith(parameterName)).length;\n\n                            if (parameterValue === null) {\n                                return `${aliasPath} IS NULL`;\n\n                            } else if (parameterValue instanceof FindOperator) {\n                                let parameters: any[] = [];\n                                if (parameterValue.useParameter) {\n                                    if (parameterValue.objectLiteralParameters) {\n                                        this.setParameters(parameterValue.objectLiteralParameters);\n                                    } else {\n                                        const realParameterValues: any[] = parameterValue.multipleParameters ? parameterValue.value : [parameterValue.value];\n                                        realParameterValues.forEach((realParameterValue, realParameterValueIndex) => {\n                                            this.expressionMap.nativeParameters[parameterName + (parameterBaseCount + realParameterValueIndex)] = realParameterValue;\n                                            parameterIndex++;\n                                            parameters.push(this.connection.driver.createParameter(parameterName + (parameterBaseCount + realParameterValueIndex), parameterIndex - 1));\n                                        });\n                                    }\n                                }\n\n                                return this.computeFindOperatorExpression(parameterValue, aliasPath, parameters);\n                            } else {\n                                this.expressionMap.nativeParameters[parameterName] = parameterValue;\n                                parameterIndex++;\n                                const parameter = this.connection.driver.createParameter(parameterName, parameterIndex - 1);\n                                return `${aliasPath} = ${parameter}`;\n                            }\n\n                        }).filter(expression => !!expression).join(\" AND \");\n                    }).filter(expression => !!expression).join(\" AND \");\n                });\n\n            } else {\n                andConditions = wheres.map((where, whereIndex) => {\n                    return Object.keys(where).map((key, parameterIndex) => {\n                        const parameterValue = where[key];\n                        const aliasPath = this.expressionMap.aliasNamePrefixingEnabled ? `${this.alias}.${key}` : key;\n                        if (parameterValue === null) {\n                            return `${aliasPath} IS NULL`;\n\n                        } else {\n                            const parameterName = \"where_\" + whereIndex + \"_\" + parameterIndex;\n                            this.expressionMap.nativeParameters[parameterName] = parameterValue;\n                            parameterIndex++;\n                            return `${aliasPath} = ${this.connection.driver.createParameter(parameterName, parameterIndex - 1)}`;\n                        }\n                    }).join(\" AND \");\n                });\n            }\n\n            if (andConditions.length > 1)\n                return andConditions.map(where => \"(\" + where + \")\").join(\" OR \");\n\n            return andConditions.join(\"\");\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Gets SQL needs to be inserted into final query.\n     */\n    protected computeFindOperatorExpression(operator: FindOperator<any>, aliasPath: string, parameters: any[]): string {\n        const { driver } = this.connection;\n\n        switch (operator.type) {\n            case \"not\":\n                if (operator.child) {\n                    return `NOT(${this.computeFindOperatorExpression(operator.child, aliasPath, parameters)})`;\n                } else {\n                    return `${aliasPath} != ${parameters[0]}`;\n                }\n            case \"lessThan\":\n                return `${aliasPath} < ${parameters[0]}`;\n            case \"lessThanOrEqual\":\n                return `${aliasPath} <= ${parameters[0]}`;\n            case \"moreThan\":\n                return `${aliasPath} > ${parameters[0]}`;\n            case \"moreThanOrEqual\":\n                return `${aliasPath} >= ${parameters[0]}`;\n            case \"equal\":\n                return `${aliasPath} = ${parameters[0]}`;\n            case \"ilike\":\n                if (driver instanceof PostgresDriver || driver instanceof CockroachDriver) {\n                    return `${aliasPath} ILIKE ${parameters[0]}`;\n                }\n\n                return `UPPER(${aliasPath}) LIKE UPPER(${parameters[0]})`;\n            case \"like\":\n                return `${aliasPath} LIKE ${parameters[0]}`;\n            case \"between\":\n                return `${aliasPath} BETWEEN ${parameters[0]} AND ${parameters[1]}`;\n            case \"in\":\n                if (parameters.length === 0) {\n                    return \"0=1\";\n                }\n                return `${aliasPath} IN (${parameters.join(\", \")})`;\n            case \"any\":\n                return `${aliasPath} = ANY(${parameters[0]})`;\n            case \"isNull\":\n                return `${aliasPath} IS NULL`;\n            case \"raw\":\n                if (operator.getSql) {\n                    return operator.getSql(aliasPath);\n                } else {\n                    return `${aliasPath} = ${operator.value}`;\n                }\n        }\n\n        throw new TypeError(`Unsupported FindOperator ${FindOperator.constructor.name}`);\n    }\n\n    /**\n     * Creates a query builder used to execute sql queries inside this query builder.\n     */\n    protected obtainQueryRunner() {\n        return this.queryRunner || this.connection.createQueryRunner();\n    }\n\n}\n","/**\n * Thrown when transaction is already started and user tries to run it again.\n */\nexport class TransactionAlreadyStartedError extends Error {\n    name = \"TransactionAlreadyStartedError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, TransactionAlreadyStartedError.prototype);\n        this.message = `Transaction already started for the given connection, commit current transaction before starting a new one.`;\n    }\n\n}","import {AbstractSqliteDriver} from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport {SqljsConnectionOptions} from \"./SqljsConnectionOptions\";\nimport {SqljsQueryRunner} from \"./SqljsQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {Connection} from \"../../connection/Connection\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\n\n// This is needed to satisfy the typescript compiler.\ninterface Window {\n    SQL: any;\n    localforage: any;\n}\ndeclare var window: Window;\n\nexport class SqljsDriver extends AbstractSqliteDriver {\n    // The driver specific options.\n    options: SqljsConnectionOptions;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n\n        // If autoSave is enabled by user, location or autoSaveCallback have to be set\n        // because either autoSave saves to location or calls autoSaveCallback.\n        if (this.options.autoSave && !this.options.location && !this.options.autoSaveCallback) {\n            throw new DriverOptionNotSetError(`location or autoSaveCallback`);\n        }\n\n        // load sql.js package\n        this.loadDependencies();\n    }\n\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n        this.databaseConnection = await this.createDatabaseConnection();\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            try {\n                this.queryRunner = undefined;\n                this.databaseConnection.close();\n                ok();\n            }\n            catch (e)  {\n                fail(e);\n            }\n        });\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner)\n            this.queryRunner = new SqljsQueryRunner(this);\n\n        return this.queryRunner;\n    }\n\n    /**\n     * Loads a database from a given file (Node.js), local storage key (browser) or array.\n     * This will delete the current database!\n     */\n    async load(fileNameOrLocalStorageOrData: string | Uint8Array, checkIfFileOrLocalStorageExists: boolean = true): Promise<any> {\n        if (typeof fileNameOrLocalStorageOrData === \"string\") {\n            // content has to be loaded\n            if (PlatformTools.type === \"node\") {\n                // Node.js\n                // fileNameOrLocalStorageOrData should be a path to the file\n                if (PlatformTools.fileExist(fileNameOrLocalStorageOrData)) {\n                    const database = PlatformTools.readFileSync(fileNameOrLocalStorageOrData);\n                    return this.createDatabaseConnectionWithImport(database);\n                }\n                else if (checkIfFileOrLocalStorageExists) {\n                    throw new Error(`File ${fileNameOrLocalStorageOrData} does not exist`);\n                }\n                else {\n                    // File doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n                    // Therefore open a database without importing an existing file.\n                    // File will be written on first write operation.\n                    return this.createDatabaseConnectionWithImport();\n                }\n            }\n            else {\n                // browser\n                // fileNameOrLocalStorageOrData should be a local storage / indexedDB key\n                let localStorageContent = null;\n                if (this.options.useLocalForage) {\n                    if (window.localforage) {\n                        localStorageContent = await window.localforage.getItem(fileNameOrLocalStorageOrData);\n                    } else {\n                        throw new Error(`localforage is not defined - please import localforage.js into your site`);\n                    }\n                } else {\n                    localStorageContent = PlatformTools.getGlobalVariable().localStorage.getItem(fileNameOrLocalStorageOrData);\n                }\n\n                if (localStorageContent != null) {\n                    // localStorage value exists.\n                    return this.createDatabaseConnectionWithImport(JSON.parse(localStorageContent));\n                }\n                else if (checkIfFileOrLocalStorageExists) {\n                    throw new Error(`File ${fileNameOrLocalStorageOrData} does not exist`);\n                }\n                else {\n                    // localStorage value doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n                    // Therefore open a database without importing anything.\n                    // localStorage value will be written on first write operation.\n                    return this.createDatabaseConnectionWithImport();\n                }\n            }\n        }\n        else {\n            return this.createDatabaseConnectionWithImport(fileNameOrLocalStorageOrData);\n        }\n    }\n\n    /**\n     * Saved the current database to the given file (Node.js), local storage key (browser) or\n     * indexedDB key (browser with enabled useLocalForage option).\n     * If no location path is given, the location path in the options (if specified) will be used.\n     */\n    async save(location?: string) {\n        if (!location && !this.options.location) {\n            throw new Error(`No location is set, specify a location parameter or add the location option to your configuration`);\n        }\n\n        let path = \"\";\n        if (location) {\n            path = location;\n        }\n        else if (this.options.location) {\n            path = this.options.location;\n        }\n\n        if (PlatformTools.type === \"node\") {\n            try {\n                const content = Buffer.from(this.databaseConnection.export());\n                await PlatformTools.writeFile(path, content);\n            }\n            catch (e) {\n                throw new Error(`Could not save database, error: ${e}`);\n            }\n        }\n        else {\n            const database: Uint8Array = this.databaseConnection.export();\n            // convert Uint8Array to number array to improve local-storage storage\n            const databaseArray = [].slice.call(database);\n            if (this.options.useLocalForage) {\n                if (window.localforage) {\n                    await window.localforage.setItem(path, JSON.stringify(databaseArray));\n                } else {\n                    throw new Error(`localforage is not defined - please import localforage.js into your site`);\n                }\n            } else {\n                PlatformTools.getGlobalVariable().localStorage.setItem(path, JSON.stringify(databaseArray));\n            }\n        }\n    }\n\n    /**\n     * This gets called by the QueryRunner when a change to the database is made.\n     * If a custom autoSaveCallback is specified, it get's called with the database as Uint8Array,\n     * otherwise the save method is called which saves it to file (Node.js), local storage (browser)\n     * or indexedDB (browser with enabled useLocalForage option).\n     */\n    async autoSave() {\n        if (this.options.autoSave) {\n            if (this.options.autoSaveCallback) {\n                await this.options.autoSaveCallback(this.export());\n            }\n            else {\n                await this.save();\n            }\n        }\n    }\n\n    /**\n     * Returns the current database as Uint8Array.\n     */\n    export(): Uint8Array {\n        return this.databaseConnection.export();\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: any) {\n        const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\n            // seems to be the only way to get the inserted id, see https://github.com/kripken/sql.js/issues/77\n            if (generatedColumn.isPrimary && generatedColumn.generationStrategy === \"increment\") {\n                const query = \"SELECT last_insert_rowid()\";\n                try {\n                    let result = this.databaseConnection.exec(query);\n                    this.connection.logger.logQuery(query);\n                    return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(result[0].values[0][0]));\n                }\n                catch (e) {\n                    this.connection.logger.logQueryError(e, query, []);\n                }\n            }\n\n            return map;\n        }, {} as ObjectLiteral);\n\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     * If the location option is set, the database is loaded first.\n     */\n    protected createDatabaseConnection(): Promise<any> {\n        if (this.options.location) {\n            return this.load(this.options.location, false);\n        }\n\n        return this.createDatabaseConnectionWithImport(this.options.database);\n    }\n\n    /**\n     * Creates connection with an optional database.\n     * If database is specified it is loaded, otherwise a new empty database is created.\n     */\n    protected async createDatabaseConnectionWithImport(database?: Uint8Array): Promise<any> {\n        // sql.js < 1.0 exposes an object with a `Database` method.\n        const isLegacyVersion = typeof this.sqlite.Database === \"function\";\n        const sqlite = isLegacyVersion ? this.sqlite : await this.sqlite(this.options.sqlJsConfig);\n        if (database && database.length > 0) {\n            this.databaseConnection = new sqlite.Database(database);\n        }\n        else {\n            this.databaseConnection = new sqlite.Database();\n        }\n\n        // Enable foreign keys for database\n        return new Promise<any>((ok, fail) => {\n            try {\n                this.databaseConnection.exec(`PRAGMA foreign_keys = ON;`);\n                ok(this.databaseConnection);\n            }\n            catch (e) {\n                fail(e);\n            }\n        });\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        if (PlatformTools.type === \"browser\") {\n            this.sqlite = window.SQL;\n        }\n        else {\n            try {\n                this.sqlite = PlatformTools.load(\"sql.js\");\n\n            } catch (e) {\n                throw new DriverPackageNotInstalledError(\"sql.js\", \"sql.js\");\n            }\n        }\n    }\n}\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","// @flow\n\ndeclare var SC_DISABLE_SPEEDY: ?boolean;\ndeclare var __VERSION__: string;\n\nexport const SC_ATTR: string =\n  (typeof process !== 'undefined' && (process.env.REACT_APP_SC_ATTR || process.env.SC_ATTR)) ||\n  'data-styled';\n\nexport const SC_ATTR_ACTIVE = 'active';\nexport const SC_ATTR_VERSION = 'data-styled-version';\nexport const SC_VERSION = __VERSION__;\nexport const SPLITTER = '/*!sc*/\\n';\n\nexport const IS_BROWSER = typeof window !== 'undefined' && 'HTMLElement' in window;\n\nexport const DISABLE_SPEEDY =\n  Boolean(typeof SC_DISABLE_SPEEDY === 'boolean'\n    ? SC_DISABLE_SPEEDY\n    : (typeof process !== 'undefined' && typeof process.env.REACT_APP_SC_DISABLE_SPEEDY !== 'undefined' && process.env.REACT_APP_SC_DISABLE_SPEEDY !== ''\n      ? process.env.REACT_APP_SC_DISABLE_SPEEDY === 'false' ? false : process.env.REACT_APP_SC_DISABLE_SPEEDY\n      : (typeof process !== 'undefined' && typeof process.env.SC_DISABLE_SPEEDY !== 'undefined' && process.env.SC_DISABLE_SPEEDY !== ''\n        ? process.env.SC_DISABLE_SPEEDY === 'false' ? false : process.env.SC_DISABLE_SPEEDY\n        : process.env.NODE_ENV !== 'production'\n      )\n    ));\n\n// Shared empty execution context when generating static styles\nexport const STATIC_EXECUTION_CONTEXT = {};\n","// @flow\n/* eslint-disable no-use-before-define */\n\nimport { makeStyleTag, getSheet } from './dom';\nimport type { SheetOptions, Tag } from './types';\n\n/** Create a CSSStyleSheet-like tag depending on the environment */\nexport const makeTag = ({ isServer, useCSSOMInjection, target }: SheetOptions): Tag => {\n  if (isServer) {\n    return new VirtualTag(target);\n  } else if (useCSSOMInjection) {\n    return new CSSOMTag(target);\n  } else {\n    return new TextTag(target);\n  }\n};\n\nexport class CSSOMTag implements Tag {\n  element: HTMLStyleElement;\n\n  sheet: CSSStyleSheet;\n\n  length: number;\n\n  constructor(target?: HTMLElement) {\n    const element = (this.element = makeStyleTag(target));\n\n    // Avoid Edge bug where empty style elements don't create sheets\n    element.appendChild(document.createTextNode(''));\n\n    this.sheet = getSheet(element);\n    this.length = 0;\n  }\n\n  insertRule(index: number, rule: string): boolean {\n    try {\n      this.sheet.insertRule(rule, index);\n      this.length++;\n      return true;\n    } catch (_error) {\n      return false;\n    }\n  }\n\n  deleteRule(index: number): void {\n    this.sheet.deleteRule(index);\n    this.length--;\n  }\n\n  getRule(index: number): string {\n    const rule = this.sheet.cssRules[index];\n    // Avoid IE11 quirk where cssText is inaccessible on some invalid rules\n    if (rule !== undefined && typeof rule.cssText === 'string') {\n      return rule.cssText;\n    } else {\n      return '';\n    }\n  }\n}\n\n/** A Tag that emulates the CSSStyleSheet API but uses text nodes */\nexport class TextTag implements Tag {\n  element: HTMLStyleElement;\n\n  nodes: NodeList<Node>;\n\n  length: number;\n\n  constructor(target?: HTMLElement) {\n    const element = (this.element = makeStyleTag(target));\n    this.nodes = element.childNodes;\n    this.length = 0;\n  }\n\n  insertRule(index: number, rule: string): boolean {\n    if (index <= this.length && index >= 0) {\n      const node = document.createTextNode(rule);\n      const refNode = this.nodes[index];\n      this.element.insertBefore(node, refNode || null);\n      this.length++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  deleteRule(index: number): void {\n    this.element.removeChild(this.nodes[index]);\n    this.length--;\n  }\n\n  getRule(index: number): string {\n    if (index < this.length) {\n      return this.nodes[index].textContent;\n    } else {\n      return '';\n    }\n  }\n}\n\n/** A completely virtual (server-side) Tag that doesn't manipulate the DOM */\nexport class VirtualTag implements Tag {\n  rules: string[];\n\n  length: number;\n\n  constructor(_target?: HTMLElement) {\n    this.rules = [];\n    this.length = 0;\n  }\n\n  insertRule(index: number, rule: string): boolean {\n    if (index <= this.length) {\n      this.rules.splice(index, 0, rule);\n      this.length++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  deleteRule(index: number): void {\n    this.rules.splice(index, 1);\n    this.length--;\n  }\n\n  getRule(index: number): string {\n    if (index < this.length) {\n      return this.rules[index];\n    } else {\n      return '';\n    }\n  }\n}\n","// @flow\nimport { DISABLE_SPEEDY, IS_BROWSER } from '../constants';\nimport { EMPTY_OBJECT } from '../utils/empties';\nimport { makeGroupedTag } from './GroupedTag';\nimport { getGroupForId } from './GroupIDAllocator';\nimport { outputSheet, rehydrateSheet } from './Rehydration';\nimport { makeTag } from './Tag';\nimport type { GroupedTag, Sheet, SheetOptions } from './types';\n\nlet SHOULD_REHYDRATE = IS_BROWSER;\n\ntype SheetConstructorArgs = {\n  isServer?: boolean,\n  useCSSOMInjection?: boolean,\n  target?: HTMLElement,\n};\n\ntype GlobalStylesAllocationMap = { [key: string]: number };\ntype NamesAllocationMap = Map<string, Set<string>>;\n\nconst defaultOptions: SheetOptions = {\n  isServer: !IS_BROWSER,\n  useCSSOMInjection: !DISABLE_SPEEDY,\n};\n\n/** Contains the main stylesheet logic for stringification and caching */\nexport default class StyleSheet implements Sheet {\n  gs: GlobalStylesAllocationMap;\n\n  names: NamesAllocationMap;\n\n  options: SheetOptions;\n\n  tag: void | GroupedTag;\n\n  /** Register a group ID to give it an index */\n  static registerId(id: string): number {\n    return getGroupForId(id);\n  }\n\n  constructor(\n    options: SheetConstructorArgs = EMPTY_OBJECT,\n    globalStyles?: GlobalStylesAllocationMap = {},\n    names?: NamesAllocationMap\n  ) {\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    };\n\n    this.gs = globalStyles;\n    this.names = new Map(names);\n\n    // We rehydrate only once and use the sheet that is created first\n    if (!this.options.isServer && IS_BROWSER && SHOULD_REHYDRATE) {\n      SHOULD_REHYDRATE = false;\n      rehydrateSheet(this);\n    }\n  }\n\n  reconstructWithOptions(options: SheetConstructorArgs, withNames?: boolean = true) {\n    return new StyleSheet(\n      { ...this.options, ...options },\n      this.gs,\n      (withNames && this.names) || undefined\n    );\n  }\n\n  allocateGSInstance(id: string) {\n    return (this.gs[id] = (this.gs[id] || 0) + 1);\n  }\n\n  /** Lazily initialises a GroupedTag for when it's actually needed */\n  getTag(): GroupedTag {\n    return this.tag || (this.tag = makeGroupedTag(makeTag(this.options)));\n  }\n\n  /** Check whether a name is known for caching */\n  hasNameForId(id: string, name: string): boolean {\n    return this.names.has(id) && (this.names.get(id): any).has(name);\n  }\n\n  /** Mark a group's name as known for caching */\n  registerName(id: string, name: string) {\n    getGroupForId(id);\n\n    if (!this.names.has(id)) {\n      const groupNames = new Set();\n      groupNames.add(name);\n      this.names.set(id, groupNames);\n    } else {\n      (this.names.get(id): any).add(name);\n    }\n  }\n\n  /** Insert new rules which also marks the name as known */\n  insertRules(id: string, name: string, rules: string[]) {\n    this.registerName(id, name);\n    this.getTag().insertRules(getGroupForId(id), rules);\n  }\n\n  /** Clears all cached names for a given group ID */\n  clearNames(id: string) {\n    if (this.names.has(id)) {\n      (this.names.get(id): any).clear();\n    }\n  }\n\n  /** Clears all rules for a given group ID */\n  clearRules(id: string) {\n    this.getTag().clearGroup(getGroupForId(id));\n    this.clearNames(id);\n  }\n\n  /** Clears the entire tag which deletes all rules but not its names */\n  clearTag() {\n    // NOTE: This does not clear the names, since it's only used during SSR\n    // so that we can continuously output only new rules\n    this.tag = undefined;\n  }\n\n  /** Outputs the current sheet as a CSS string with markers for SSR */\n  toString(): string {\n    return outputSheet(this);\n  }\n}\n","// @flow\nimport isFunction from './isFunction';\nimport isStyledComponent from './isStyledComponent';\nimport type { RuleSet } from '../types';\n\nexport default function isStaticRules(rules: RuleSet): boolean {\n  for (let i = 0; i < rules.length; i += 1) {\n    const rule = rules[i];\n\n    if (isFunction(rule) && !isStyledComponent(rule)) {\n      // functions are allowed to be static if they're just being\n      // used to get the classname of a nested styled component\n      return false;\n    }\n  }\n\n  return true;\n}\n","// @flow\nimport StyleSheet from '../sheet';\nimport { type Stringifier } from '../types';\nimport throwStyledError from '../utils/error';\nimport { masterStylis } from './StyleSheetManager';\n\nexport default class Keyframes {\n  id: string;\n\n  name: string;\n\n  rules: string;\n\n  constructor(name: string, rules: string) {\n    this.name = name;\n    this.id = `sc-keyframes-${name}`;\n    this.rules = rules;\n  }\n\n  inject = (styleSheet: StyleSheet, stylisInstance: Stringifier = masterStylis) => {\n    const resolvedName = this.name + stylisInstance.hash;\n\n    if (!styleSheet.hasNameForId(this.id, resolvedName)) {\n      styleSheet.insertRules(\n        this.id,\n        resolvedName,\n        stylisInstance(this.rules, resolvedName, '@keyframes')\n      );\n    }\n  };\n\n  toString = () => {\n    return throwStyledError(12, String(this.name));\n  };\n\n  getName(stylisInstance: Stringifier = masterStylis) {\n    return this.name + stylisInstance.hash;\n  }\n}\n","// @flow\nimport validAttr from '@emotion/is-prop-valid';\nimport hoist from 'hoist-non-react-statics';\nimport React, { createElement, type Ref, useContext, useDebugValue } from 'react';\nimport { SC_VERSION } from '../constants';\nimport type {\n  Attrs,\n  IStyledComponent,\n  IStyledStatics,\n  RuleSet,\n  ShouldForwardProp,\n  Target,\n} from '../types';\nimport { checkDynamicCreation } from '../utils/checkDynamicCreation';\nimport createWarnTooManyClasses from '../utils/createWarnTooManyClasses';\nimport determineTheme from '../utils/determineTheme';\nimport { EMPTY_ARRAY, EMPTY_OBJECT } from '../utils/empties';\nimport escape from '../utils/escape';\nimport generateComponentId from '../utils/generateComponentId';\nimport generateDisplayName from '../utils/generateDisplayName';\nimport getComponentName from '../utils/getComponentName';\nimport isFunction from '../utils/isFunction';\nimport isStyledComponent from '../utils/isStyledComponent';\nimport isTag from '../utils/isTag';\nimport joinStrings from '../utils/joinStrings';\nimport merge from '../utils/mixinDeep';\nimport ComponentStyle from './ComponentStyle';\nimport { useStyleSheet, useStylis } from './StyleSheetManager';\nimport { ThemeContext } from './ThemeProvider';\n\nconst identifiers = {};\n\n/* We depend on components having unique IDs */\nfunction generateId(displayName?: string, parentComponentId?: string) {\n  const name = typeof displayName !== 'string' ? 'sc' : escape(displayName);\n  // Ensure that no displayName can lead to duplicate componentIds\n  identifiers[name] = (identifiers[name] || 0) + 1;\n\n  const componentId = `${name}-${generateComponentId(\n    // SC_VERSION gives us isolation between multiple runtimes on the page at once\n    // this is improved further with use of the babel plugin \"namespace\" feature\n    SC_VERSION + name + identifiers[name]\n  )}`;\n\n  return parentComponentId ? `${parentComponentId}-${componentId}` : componentId;\n}\n\nfunction useResolvedAttrs<Config>(theme: any = EMPTY_OBJECT, props: Config, attrs: Attrs) {\n  // NOTE: can't memoize this\n  // returns [context, resolvedAttrs]\n  // where resolvedAttrs is only the things injected by the attrs themselves\n  const context = { ...props, theme };\n  const resolvedAttrs = {};\n\n  attrs.forEach(attrDef => {\n    let resolvedAttrDef = attrDef;\n    let key;\n\n    if (isFunction(resolvedAttrDef)) {\n      resolvedAttrDef = resolvedAttrDef(context);\n    }\n\n    /* eslint-disable guard-for-in */\n    for (key in resolvedAttrDef) {\n      context[key] = resolvedAttrs[key] =\n        key === 'className'\n          ? joinStrings(resolvedAttrs[key], resolvedAttrDef[key])\n          : resolvedAttrDef[key];\n    }\n    /* eslint-enable guard-for-in */\n  });\n\n  return [context, resolvedAttrs];\n}\n\nfunction useInjectedStyle<T>(\n  componentStyle: ComponentStyle,\n  isStatic: boolean,\n  resolvedAttrs: T,\n  warnTooManyClasses?: $Call<typeof createWarnTooManyClasses, string, string>\n) {\n  const styleSheet = useStyleSheet();\n  const stylis = useStylis();\n\n  const className = isStatic\n    ? componentStyle.generateAndInjectStyles(EMPTY_OBJECT, styleSheet, stylis)\n    : componentStyle.generateAndInjectStyles(resolvedAttrs, styleSheet, stylis);\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  if (process.env.NODE_ENV !== 'production') useDebugValue(className);\n\n  if (process.env.NODE_ENV !== 'production' && !isStatic && warnTooManyClasses) {\n    warnTooManyClasses(className);\n  }\n\n  return className;\n}\n\nfunction useStyledComponentImpl(\n  forwardedComponent: IStyledComponent,\n  props: Object,\n  forwardedRef: Ref<any>,\n  isStatic: boolean\n) {\n  const {\n    attrs: componentAttrs,\n    componentStyle,\n    defaultProps,\n    foldedComponentIds,\n    shouldForwardProp,\n    styledComponentId,\n    target,\n  } = forwardedComponent;\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  if (process.env.NODE_ENV !== 'production') useDebugValue(styledComponentId);\n\n  // NOTE: the non-hooks version only subscribes to this when !componentStyle.isStatic,\n  // but that'd be against the rules-of-hooks. We could be naughty and do it anyway as it\n  // should be an immutable value, but behave for now.\n  const theme = determineTheme(props, useContext(ThemeContext), defaultProps);\n\n  const [context, attrs] = useResolvedAttrs(theme || EMPTY_OBJECT, props, componentAttrs);\n\n  const generatedClassName = useInjectedStyle(\n    componentStyle,\n    isStatic,\n    context,\n    process.env.NODE_ENV !== 'production' ? forwardedComponent.warnTooManyClasses : undefined\n  );\n\n  const refToForward = forwardedRef;\n\n  const elementToBeCreated: Target = attrs.$as || props.$as || attrs.as || props.as || target;\n\n  const isTargetTag = isTag(elementToBeCreated);\n  const computedProps = attrs !== props ? { ...props, ...attrs } : props;\n  const propsForElement = {};\n\n  // eslint-disable-next-line guard-for-in\n  for (const key in computedProps) {\n    if (key[0] === '$' || key === 'as') continue;\n    else if (key === 'forwardedAs') {\n      propsForElement.as = computedProps[key];\n    } else if (\n      shouldForwardProp ? shouldForwardProp(key, validAttr) : isTargetTag ? validAttr(key) : true\n    ) {\n      // Don't pass through non HTML tags through to HTML elements\n      propsForElement[key] = computedProps[key];\n    }\n  }\n\n  if (props.style && attrs.style !== props.style) {\n    propsForElement.style = { ...props.style, ...attrs.style };\n  }\n\n  propsForElement.className = Array.prototype\n    .concat(\n      foldedComponentIds,\n      styledComponentId,\n      generatedClassName !== styledComponentId ? generatedClassName : null,\n      props.className,\n      attrs.className\n    )\n    .filter(Boolean)\n    .join(' ');\n\n  propsForElement.ref = refToForward;\n\n  return createElement(elementToBeCreated, propsForElement);\n}\n\nexport default function createStyledComponent(\n  target: $PropertyType<IStyledComponent, 'target'>,\n  options: {\n    attrs?: Attrs,\n    componentId: string,\n    displayName?: string,\n    parentComponentId?: string,\n    shouldForwardProp?: ShouldForwardProp,\n  },\n  rules: RuleSet\n) {\n  const isTargetStyledComp = isStyledComponent(target);\n  const isCompositeComponent = !isTag(target);\n\n  const {\n    attrs = EMPTY_ARRAY,\n    componentId = generateId(options.displayName, options.parentComponentId),\n    displayName = generateDisplayName(target),\n  } = options;\n\n  const styledComponentId =\n    options.displayName && options.componentId\n      ? `${escape(options.displayName)}-${options.componentId}`\n      : options.componentId || componentId;\n\n  // fold the underlying StyledComponent attrs up (implicit extend)\n  const finalAttrs =\n    isTargetStyledComp && ((target: any): IStyledComponent).attrs\n      ? Array.prototype.concat(((target: any): IStyledComponent).attrs, attrs).filter(Boolean)\n      : attrs;\n\n  // eslint-disable-next-line prefer-destructuring\n  let shouldForwardProp = options.shouldForwardProp;\n\n  if (isTargetStyledComp && target.shouldForwardProp) {\n    if (options.shouldForwardProp) {\n      // compose nested shouldForwardProp calls\n      shouldForwardProp = (prop, filterFn) =>\n        ((((target: any): IStyledComponent).shouldForwardProp: any): ShouldForwardProp)(\n          prop,\n          filterFn\n        ) && ((options.shouldForwardProp: any): ShouldForwardProp)(prop, filterFn);\n    } else {\n      // eslint-disable-next-line prefer-destructuring\n      shouldForwardProp = ((target: any): IStyledComponent).shouldForwardProp;\n    }\n  }\n\n  const componentStyle = new ComponentStyle(\n    rules,\n    styledComponentId,\n    isTargetStyledComp ? ((target: Object).componentStyle: ComponentStyle) : undefined\n  );\n\n  // statically styled-components don't need to build an execution context object,\n  // and shouldn't be increasing the number of class names\n  const isStatic = componentStyle.isStatic && attrs.length === 0;\n\n  /**\n   * forwardRef creates a new interim component, which we'll take advantage of\n   * instead of extending ParentComponent to create _another_ interim class\n   */\n  let WrappedStyledComponent: IStyledComponent;\n\n  const forwardRef = (props, ref) =>\n    // eslint-disable-next-line\n    useStyledComponentImpl(WrappedStyledComponent, props, ref, isStatic);\n\n  forwardRef.displayName = displayName;\n\n  WrappedStyledComponent = ((React.forwardRef(forwardRef): any): IStyledComponent);\n  WrappedStyledComponent.attrs = finalAttrs;\n  WrappedStyledComponent.componentStyle = componentStyle;\n  WrappedStyledComponent.displayName = displayName;\n  WrappedStyledComponent.shouldForwardProp = shouldForwardProp;\n\n  // this static is used to preserve the cascade of static classes for component selector\n  // purposes; this is especially important with usage of the css prop\n  WrappedStyledComponent.foldedComponentIds = isTargetStyledComp\n    ? Array.prototype.concat(\n        ((target: any): IStyledComponent).foldedComponentIds,\n        ((target: any): IStyledComponent).styledComponentId\n      )\n    : EMPTY_ARRAY;\n\n  WrappedStyledComponent.styledComponentId = styledComponentId;\n\n  // fold the underlying StyledComponent target up since we folded the styles\n  WrappedStyledComponent.target = isTargetStyledComp\n    ? ((target: any): IStyledComponent).target\n    : target;\n\n  WrappedStyledComponent.withComponent = function withComponent(tag: Target) {\n    const { componentId: previousComponentId, ...optionsToCopy } = options;\n\n    const newComponentId =\n      previousComponentId &&\n      `${previousComponentId}-${isTag(tag) ? tag : escape(getComponentName(tag))}`;\n\n    const newOptions = {\n      ...optionsToCopy,\n      attrs: finalAttrs,\n      componentId: newComponentId,\n    };\n\n    return createStyledComponent(tag, newOptions, rules);\n  };\n\n  Object.defineProperty(WrappedStyledComponent, 'defaultProps', {\n    get() {\n      return this._foldedDefaultProps;\n    },\n\n    set(obj) {\n      this._foldedDefaultProps = isTargetStyledComp\n        ? merge({}, ((target: any): IStyledComponent).defaultProps, obj)\n        : obj;\n    },\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    checkDynamicCreation(displayName, styledComponentId);\n\n    WrappedStyledComponent.warnTooManyClasses = createWarnTooManyClasses(\n      displayName,\n      styledComponentId\n    );\n  }\n\n  WrappedStyledComponent.toString = () => `.${WrappedStyledComponent.styledComponentId}`;\n\n  if (isCompositeComponent) {\n    hoist<\n      IStyledStatics,\n      $PropertyType<IStyledComponent, 'target'>,\n      { [key: $Keys<IStyledStatics>]: true }\n    >(WrappedStyledComponent, ((target: any): $PropertyType<IStyledComponent, 'target'>), {\n      // all SC-specific things should not be hoisted\n      attrs: true,\n      componentStyle: true,\n      displayName: true,\n      foldedComponentIds: true,\n      shouldForwardProp: true,\n      styledComponentId: true,\n      target: true,\n      withComponent: true,\n    });\n  }\n\n  return WrappedStyledComponent;\n}\n","// @flow\nimport StyleSheet from '../sheet';\nimport type { RuleSet, Stringifier } from '../types';\nimport flatten from '../utils/flatten';\nimport isStaticRules from '../utils/isStaticRules';\n\nexport default class GlobalStyle {\n  componentId: string;\n\n  isStatic: boolean;\n\n  rules: RuleSet;\n\n  constructor(rules: RuleSet, componentId: string) {\n    this.rules = rules;\n    this.componentId = componentId;\n    this.isStatic = isStaticRules(rules);\n\n    // pre-register the first instance to ensure global styles\n    // load before component ones\n    StyleSheet.registerId(this.componentId + 1);\n  }\n\n  createStyles(\n    instance: number,\n    executionContext: Object,\n    styleSheet: StyleSheet,\n    stylis: Stringifier\n  ) {\n    const flatCSS = flatten(this.rules, executionContext, styleSheet, stylis);\n    const css = stylis(flatCSS.join(''), '');\n    const id = this.componentId + instance;\n\n    // NOTE: We use the id as a name as well, since these rules never change\n    styleSheet.insertRules(id, id, css);\n  }\n\n  removeStyles(instance: number, styleSheet: StyleSheet) {\n    styleSheet.clearRules(this.componentId + instance);\n  }\n\n  renderStyles(\n    instance: number,\n    executionContext: Object,\n    styleSheet: StyleSheet,\n    stylis: Stringifier\n  ) {\n    if (instance > 2) StyleSheet.registerId(this.componentId + instance);\n\n    // NOTE: Remove old styles, then inject the new ones\n    this.removeStyles(instance, styleSheet);\n    this.createStyles(instance, executionContext, styleSheet, stylis);\n  }\n}\n","// @flow\n/* eslint-disable no-underscore-dangle */\nimport React from 'react';\nimport { IS_BROWSER, SC_ATTR, SC_ATTR_VERSION, SC_VERSION } from '../constants';\nimport throwStyledError from '../utils/error';\nimport getNonce from '../utils/nonce';\nimport StyleSheet from '../sheet';\nimport StyleSheetManager from './StyleSheetManager';\n\ndeclare var __SERVER__: boolean;\n\nconst CLOSING_TAG_R = /^\\s*<\\/[a-z]/i;\n\nexport default class ServerStyleSheet {\n  isStreaming: boolean;\n\n  instance: StyleSheet;\n\n  sealed: boolean;\n\n  constructor() {\n    this.instance = new StyleSheet({ isServer: true });\n    this.sealed = false;\n  }\n\n  _emitSheetCSS = (): string => {\n    const css = this.instance.toString();\n    const nonce = getNonce();\n    const attrs = [nonce && `nonce=\"${nonce}\"`, `${SC_ATTR}=\"true\"`, `${SC_ATTR_VERSION}=\"${SC_VERSION}\"`];\n    const htmlAttr = attrs.filter(Boolean).join(' ');\n\n    return `<style ${htmlAttr}>${css}</style>`;\n  };\n\n  collectStyles(children: any) {\n    if (this.sealed) {\n      return throwStyledError(2);\n    }\n\n    return <StyleSheetManager sheet={this.instance}>{children}</StyleSheetManager>;\n  }\n\n  getStyleTags = (): string => {\n    if (this.sealed) {\n      return throwStyledError(2);\n    }\n\n    return this._emitSheetCSS();\n  };\n\n  getStyleElement = () => {\n    if (this.sealed) {\n      return throwStyledError(2);\n    }\n\n    const props = {\n      [SC_ATTR]: '',\n      [SC_ATTR_VERSION]: SC_VERSION,\n      dangerouslySetInnerHTML: {\n        __html: this.instance.toString(),\n      },\n    };\n\n    const nonce = getNonce();\n    if (nonce) {\n      (props: any).nonce = nonce;\n    }\n\n    // v4 returned an array for this fn, so we'll do the same for v5 for backward compat\n    return [<style {...props} key=\"sc-0-0\" />];\n  };\n\n  // eslint-disable-next-line consistent-return\n  interleaveWithNodeStream(input: any) {\n    if (!__SERVER__ || IS_BROWSER) {\n      return throwStyledError(3);\n    } else if (this.sealed) {\n      return throwStyledError(2);\n    }\n\n    if (__SERVER__) {\n      this.seal();\n\n      // eslint-disable-next-line global-require\n      const { Readable, Transform } = require('stream');\n\n      const readableStream: Readable = input;\n      const { instance: sheet, _emitSheetCSS } = this;\n\n      const transformer = new Transform({\n        transform: function appendStyleChunks(chunk, /* encoding */ _, callback) {\n          // Get the chunk and retrieve the sheet's CSS as an HTML chunk,\n          // then reset its rules so we get only new ones for the next chunk\n          const renderedHtml = chunk.toString();\n          const html = _emitSheetCSS();\n\n          sheet.clearTag();\n\n          // prepend style html to chunk, unless the start of the chunk is a\n          // closing tag in which case append right after that\n          if (CLOSING_TAG_R.test(renderedHtml)) {\n            const endOfClosingTag = renderedHtml.indexOf('>') + 1;\n            const before = renderedHtml.slice(0, endOfClosingTag);\n            const after = renderedHtml.slice(endOfClosingTag);\n\n            this.push(before + html + after);\n          } else {\n            this.push(html + renderedHtml);\n          }\n\n          callback();\n        },\n      });\n\n      readableStream.on('error', err => {\n        // forward the error to the transform stream\n        transformer.emit('error', err);\n      });\n\n      return readableStream.pipe(transformer);\n    }\n  }\n\n  seal = () => {\n    this.sealed = true;\n  };\n}\n","function isAbsolute(pathname) {\n  return pathname.charAt(0) === '/';\n}\n\n// About 1.5x faster than the two-arg version of Array#splice()\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {\n    list[i] = list[k];\n  }\n\n  list.pop();\n}\n\n// This implementation is based heavily on node's url.parse\nfunction resolvePathname(to, from) {\n  if (from === undefined) from = '';\n\n  var toParts = (to && to.split('/')) || [];\n  var fromParts = (from && from.split('/')) || [];\n\n  var isToAbs = to && isAbsolute(to);\n  var isFromAbs = from && isAbsolute(from);\n  var mustEndAbs = isToAbs || isFromAbs;\n\n  if (to && isAbsolute(to)) {\n    // to is absolute\n    fromParts = toParts;\n  } else if (toParts.length) {\n    // to is relative, drop the filename\n    fromParts.pop();\n    fromParts = fromParts.concat(toParts);\n  }\n\n  if (!fromParts.length) return '/';\n\n  var hasTrailingSlash;\n  if (fromParts.length) {\n    var last = fromParts[fromParts.length - 1];\n    hasTrailingSlash = last === '.' || last === '..' || last === '';\n  } else {\n    hasTrailingSlash = false;\n  }\n\n  var up = 0;\n  for (var i = fromParts.length; i >= 0; i--) {\n    var part = fromParts[i];\n\n    if (part === '.') {\n      spliceOne(fromParts, i);\n    } else if (part === '..') {\n      spliceOne(fromParts, i);\n      up++;\n    } else if (up) {\n      spliceOne(fromParts, i);\n      up--;\n    }\n  }\n\n  if (!mustEndAbs) for (; up--; up) fromParts.unshift('..');\n\n  if (\n    mustEndAbs &&\n    fromParts[0] !== '' &&\n    (!fromParts[0] || !isAbsolute(fromParts[0]))\n  )\n    fromParts.unshift('');\n\n  var result = fromParts.join('/');\n\n  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';\n\n  return result;\n}\n\nexport default resolvePathname;\n","function valueOf(obj) {\n  return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);\n}\n\nfunction valueEqual(a, b) {\n  // Test for strict equality first.\n  if (a === b) return true;\n\n  // Otherwise, if either of them == null they are not equal.\n  if (a == null || b == null) return false;\n\n  if (Array.isArray(a)) {\n    return (\n      Array.isArray(b) &&\n      a.length === b.length &&\n      a.every(function(item, index) {\n        return valueEqual(item, b[index]);\n      })\n    );\n  }\n\n  if (typeof a === 'object' || typeof b === 'object') {\n    var aValue = valueOf(a);\n    var bValue = valueOf(b);\n\n    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);\n\n    return Object.keys(Object.assign({}, a, b)).every(function(key) {\n      return valueEqual(a[key], b[key]);\n    });\n  }\n\n  return false;\n}\n\nexport default valueEqual;\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport resolvePathname from 'resolve-pathname';\nimport valueEqual from 'value-equal';\nimport warning from 'tiny-warning';\nimport invariant from 'tiny-invariant';\n\nfunction addLeadingSlash(path) {\n  return path.charAt(0) === '/' ? path : '/' + path;\n}\nfunction stripLeadingSlash(path) {\n  return path.charAt(0) === '/' ? path.substr(1) : path;\n}\nfunction hasBasename(path, prefix) {\n  return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && '/?#'.indexOf(path.charAt(prefix.length)) !== -1;\n}\nfunction stripBasename(path, prefix) {\n  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;\n}\nfunction stripTrailingSlash(path) {\n  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;\n}\nfunction parsePath(path) {\n  var pathname = path || '/';\n  var search = '';\n  var hash = '';\n  var hashIndex = pathname.indexOf('#');\n\n  if (hashIndex !== -1) {\n    hash = pathname.substr(hashIndex);\n    pathname = pathname.substr(0, hashIndex);\n  }\n\n  var searchIndex = pathname.indexOf('?');\n\n  if (searchIndex !== -1) {\n    search = pathname.substr(searchIndex);\n    pathname = pathname.substr(0, searchIndex);\n  }\n\n  return {\n    pathname: pathname,\n    search: search === '?' ? '' : search,\n    hash: hash === '#' ? '' : hash\n  };\n}\nfunction createPath(location) {\n  var pathname = location.pathname,\n      search = location.search,\n      hash = location.hash;\n  var path = pathname || '/';\n  if (search && search !== '?') path += search.charAt(0) === '?' ? search : \"?\" + search;\n  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : \"#\" + hash;\n  return path;\n}\n\nfunction createLocation(path, state, key, currentLocation) {\n  var location;\n\n  if (typeof path === 'string') {\n    // Two-arg form: push(path, state)\n    location = parsePath(path);\n    location.state = state;\n  } else {\n    // One-arg form: push(location)\n    location = _extends({}, path);\n    if (location.pathname === undefined) location.pathname = '';\n\n    if (location.search) {\n      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;\n    } else {\n      location.search = '';\n    }\n\n    if (location.hash) {\n      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;\n    } else {\n      location.hash = '';\n    }\n\n    if (state !== undefined && location.state === undefined) location.state = state;\n  }\n\n  try {\n    location.pathname = decodeURI(location.pathname);\n  } catch (e) {\n    if (e instanceof URIError) {\n      throw new URIError('Pathname \"' + location.pathname + '\" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');\n    } else {\n      throw e;\n    }\n  }\n\n  if (key) location.key = key;\n\n  if (currentLocation) {\n    // Resolve incomplete/relative pathname relative to current location.\n    if (!location.pathname) {\n      location.pathname = currentLocation.pathname;\n    } else if (location.pathname.charAt(0) !== '/') {\n      location.pathname = resolvePathname(location.pathname, currentLocation.pathname);\n    }\n  } else {\n    // When there is no prior location and pathname is empty, set it to /\n    if (!location.pathname) {\n      location.pathname = '/';\n    }\n  }\n\n  return location;\n}\nfunction locationsAreEqual(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && valueEqual(a.state, b.state);\n}\n\nfunction createTransitionManager() {\n  var prompt = null;\n\n  function setPrompt(nextPrompt) {\n    process.env.NODE_ENV !== \"production\" ? warning(prompt == null, 'A history supports only one prompt at a time') : void 0;\n    prompt = nextPrompt;\n    return function () {\n      if (prompt === nextPrompt) prompt = null;\n    };\n  }\n\n  function confirmTransitionTo(location, action, getUserConfirmation, callback) {\n    // TODO: If another transition starts while we're still confirming\n    // the previous one, we may end up in a weird state. Figure out the\n    // best way to handle this.\n    if (prompt != null) {\n      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;\n\n      if (typeof result === 'string') {\n        if (typeof getUserConfirmation === 'function') {\n          getUserConfirmation(result, callback);\n        } else {\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'A history needs a getUserConfirmation function in order to use a prompt message') : void 0;\n          callback(true);\n        }\n      } else {\n        // Return false from a transition hook to cancel the transition.\n        callback(result !== false);\n      }\n    } else {\n      callback(true);\n    }\n  }\n\n  var listeners = [];\n\n  function appendListener(fn) {\n    var isActive = true;\n\n    function listener() {\n      if (isActive) fn.apply(void 0, arguments);\n    }\n\n    listeners.push(listener);\n    return function () {\n      isActive = false;\n      listeners = listeners.filter(function (item) {\n        return item !== listener;\n      });\n    };\n  }\n\n  function notifyListeners() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    listeners.forEach(function (listener) {\n      return listener.apply(void 0, args);\n    });\n  }\n\n  return {\n    setPrompt: setPrompt,\n    confirmTransitionTo: confirmTransitionTo,\n    appendListener: appendListener,\n    notifyListeners: notifyListeners\n  };\n}\n\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\nfunction getConfirmation(message, callback) {\n  callback(window.confirm(message)); // eslint-disable-line no-alert\n}\n/**\n * Returns true if the HTML5 history API is supported. Taken from Modernizr.\n *\n * https://github.com/Modernizr/Modernizr/blob/master/LICENSE\n * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js\n * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586\n */\n\nfunction supportsHistory() {\n  var ua = window.navigator.userAgent;\n  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;\n  return window.history && 'pushState' in window.history;\n}\n/**\n * Returns true if browser fires popstate on hash change.\n * IE10 and IE11 do not.\n */\n\nfunction supportsPopStateOnHashChange() {\n  return window.navigator.userAgent.indexOf('Trident') === -1;\n}\n/**\n * Returns false if using go(n) with hash history causes a full page reload.\n */\n\nfunction supportsGoWithoutReloadUsingHash() {\n  return window.navigator.userAgent.indexOf('Firefox') === -1;\n}\n/**\n * Returns true if a given popstate event is an extraneous WebKit event.\n * Accounts for the fact that Chrome on iOS fires real popstate events\n * containing undefined state when pressing the back button.\n */\n\nfunction isExtraneousPopstateEvent(event) {\n  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;\n}\n\nvar PopStateEvent = 'popstate';\nvar HashChangeEvent = 'hashchange';\n\nfunction getHistoryState() {\n  try {\n    return window.history.state || {};\n  } catch (e) {\n    // IE 11 sometimes throws when accessing window.history.state\n    // See https://github.com/ReactTraining/history/pull/289\n    return {};\n  }\n}\n/**\n * Creates a history object that uses the HTML5 history API including\n * pushState, replaceState, and the popstate event.\n */\n\n\nfunction createBrowserHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  !canUseDOM ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Browser history needs a DOM') : invariant(false) : void 0;\n  var globalHistory = window.history;\n  var canUseHistory = supportsHistory();\n  var needsHashChangeListener = !supportsPopStateOnHashChange();\n  var _props = props,\n      _props$forceRefresh = _props.forceRefresh,\n      forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh,\n      _props$getUserConfirm = _props.getUserConfirmation,\n      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,\n      _props$keyLength = _props.keyLength,\n      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;\n  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';\n\n  function getDOMLocation(historyState) {\n    var _ref = historyState || {},\n        key = _ref.key,\n        state = _ref.state;\n\n    var _window$location = window.location,\n        pathname = _window$location.pathname,\n        search = _window$location.search,\n        hash = _window$location.hash;\n    var path = pathname + search + hash;\n    process.env.NODE_ENV !== \"production\" ? warning(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path \"' + path + '\" to begin with \"' + basename + '\".') : void 0;\n    if (basename) path = stripBasename(path, basename);\n    return createLocation(path, state, key);\n  }\n\n  function createKey() {\n    return Math.random().toString(36).substr(2, keyLength);\n  }\n\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    _extends(history, nextState);\n\n    history.length = globalHistory.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  function handlePopState(event) {\n    // Ignore extraneous popstate events in WebKit.\n    if (isExtraneousPopstateEvent(event)) return;\n    handlePop(getDOMLocation(event.state));\n  }\n\n  function handleHashChange() {\n    handlePop(getDOMLocation(getHistoryState()));\n  }\n\n  var forceNextPop = false;\n\n  function handlePop(location) {\n    if (forceNextPop) {\n      forceNextPop = false;\n      setState();\n    } else {\n      var action = 'POP';\n      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n        if (ok) {\n          setState({\n            action: action,\n            location: location\n          });\n        } else {\n          revertPop(location);\n        }\n      });\n    }\n  }\n\n  function revertPop(fromLocation) {\n    var toLocation = history.location; // TODO: We could probably make this more reliable by\n    // keeping a list of keys we've seen in sessionStorage.\n    // Instead, we just default to 0 for keys we don't know.\n\n    var toIndex = allKeys.indexOf(toLocation.key);\n    if (toIndex === -1) toIndex = 0;\n    var fromIndex = allKeys.indexOf(fromLocation.key);\n    if (fromIndex === -1) fromIndex = 0;\n    var delta = toIndex - fromIndex;\n\n    if (delta) {\n      forceNextPop = true;\n      go(delta);\n    }\n  }\n\n  var initialLocation = getDOMLocation(getHistoryState());\n  var allKeys = [initialLocation.key]; // Public interface\n\n  function createHref(location) {\n    return basename + createPath(location);\n  }\n\n  function push(path, state) {\n    process.env.NODE_ENV !== \"production\" ? warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;\n    var action = 'PUSH';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var href = createHref(location);\n      var key = location.key,\n          state = location.state;\n\n      if (canUseHistory) {\n        globalHistory.pushState({\n          key: key,\n          state: state\n        }, null, href);\n\n        if (forceRefresh) {\n          window.location.href = href;\n        } else {\n          var prevIndex = allKeys.indexOf(history.location.key);\n          var nextKeys = allKeys.slice(0, prevIndex + 1);\n          nextKeys.push(location.key);\n          allKeys = nextKeys;\n          setState({\n            action: action,\n            location: location\n          });\n        }\n      } else {\n        process.env.NODE_ENV !== \"production\" ? warning(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history') : void 0;\n        window.location.href = href;\n      }\n    });\n  }\n\n  function replace(path, state) {\n    process.env.NODE_ENV !== \"production\" ? warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;\n    var action = 'REPLACE';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var href = createHref(location);\n      var key = location.key,\n          state = location.state;\n\n      if (canUseHistory) {\n        globalHistory.replaceState({\n          key: key,\n          state: state\n        }, null, href);\n\n        if (forceRefresh) {\n          window.location.replace(href);\n        } else {\n          var prevIndex = allKeys.indexOf(history.location.key);\n          if (prevIndex !== -1) allKeys[prevIndex] = location.key;\n          setState({\n            action: action,\n            location: location\n          });\n        }\n      } else {\n        process.env.NODE_ENV !== \"production\" ? warning(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history') : void 0;\n        window.location.replace(href);\n      }\n    });\n  }\n\n  function go(n) {\n    globalHistory.go(n);\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  var listenerCount = 0;\n\n  function checkDOMListeners(delta) {\n    listenerCount += delta;\n\n    if (listenerCount === 1 && delta === 1) {\n      window.addEventListener(PopStateEvent, handlePopState);\n      if (needsHashChangeListener) window.addEventListener(HashChangeEvent, handleHashChange);\n    } else if (listenerCount === 0) {\n      window.removeEventListener(PopStateEvent, handlePopState);\n      if (needsHashChangeListener) window.removeEventListener(HashChangeEvent, handleHashChange);\n    }\n  }\n\n  var isBlocked = false;\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    var unblock = transitionManager.setPrompt(prompt);\n\n    if (!isBlocked) {\n      checkDOMListeners(1);\n      isBlocked = true;\n    }\n\n    return function () {\n      if (isBlocked) {\n        isBlocked = false;\n        checkDOMListeners(-1);\n      }\n\n      return unblock();\n    };\n  }\n\n  function listen(listener) {\n    var unlisten = transitionManager.appendListener(listener);\n    checkDOMListeners(1);\n    return function () {\n      checkDOMListeners(-1);\n      unlisten();\n    };\n  }\n\n  var history = {\n    length: globalHistory.length,\n    action: 'POP',\n    location: initialLocation,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\nvar HashChangeEvent$1 = 'hashchange';\nvar HashPathCoders = {\n  hashbang: {\n    encodePath: function encodePath(path) {\n      return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);\n    },\n    decodePath: function decodePath(path) {\n      return path.charAt(0) === '!' ? path.substr(1) : path;\n    }\n  },\n  noslash: {\n    encodePath: stripLeadingSlash,\n    decodePath: addLeadingSlash\n  },\n  slash: {\n    encodePath: addLeadingSlash,\n    decodePath: addLeadingSlash\n  }\n};\n\nfunction stripHash(url) {\n  var hashIndex = url.indexOf('#');\n  return hashIndex === -1 ? url : url.slice(0, hashIndex);\n}\n\nfunction getHashPath() {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var hashIndex = href.indexOf('#');\n  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);\n}\n\nfunction pushHashPath(path) {\n  window.location.hash = path;\n}\n\nfunction replaceHashPath(path) {\n  window.location.replace(stripHash(window.location.href) + '#' + path);\n}\n\nfunction createHashHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  !canUseDOM ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Hash history needs a DOM') : invariant(false) : void 0;\n  var globalHistory = window.history;\n  var canGoWithoutReload = supportsGoWithoutReloadUsingHash();\n  var _props = props,\n      _props$getUserConfirm = _props.getUserConfirmation,\n      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,\n      _props$hashType = _props.hashType,\n      hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;\n  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';\n  var _HashPathCoders$hashT = HashPathCoders[hashType],\n      encodePath = _HashPathCoders$hashT.encodePath,\n      decodePath = _HashPathCoders$hashT.decodePath;\n\n  function getDOMLocation() {\n    var path = decodePath(getHashPath());\n    process.env.NODE_ENV !== \"production\" ? warning(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path \"' + path + '\" to begin with \"' + basename + '\".') : void 0;\n    if (basename) path = stripBasename(path, basename);\n    return createLocation(path);\n  }\n\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    _extends(history, nextState);\n\n    history.length = globalHistory.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  var forceNextPop = false;\n  var ignorePath = null;\n\n  function locationsAreEqual$$1(a, b) {\n    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;\n  }\n\n  function handleHashChange() {\n    var path = getHashPath();\n    var encodedPath = encodePath(path);\n\n    if (path !== encodedPath) {\n      // Ensure we always have a properly-encoded hash.\n      replaceHashPath(encodedPath);\n    } else {\n      var location = getDOMLocation();\n      var prevLocation = history.location;\n      if (!forceNextPop && locationsAreEqual$$1(prevLocation, location)) return; // A hashchange doesn't always == location change.\n\n      if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.\n\n      ignorePath = null;\n      handlePop(location);\n    }\n  }\n\n  function handlePop(location) {\n    if (forceNextPop) {\n      forceNextPop = false;\n      setState();\n    } else {\n      var action = 'POP';\n      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n        if (ok) {\n          setState({\n            action: action,\n            location: location\n          });\n        } else {\n          revertPop(location);\n        }\n      });\n    }\n  }\n\n  function revertPop(fromLocation) {\n    var toLocation = history.location; // TODO: We could probably make this more reliable by\n    // keeping a list of paths we've seen in sessionStorage.\n    // Instead, we just default to 0 for paths we don't know.\n\n    var toIndex = allPaths.lastIndexOf(createPath(toLocation));\n    if (toIndex === -1) toIndex = 0;\n    var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));\n    if (fromIndex === -1) fromIndex = 0;\n    var delta = toIndex - fromIndex;\n\n    if (delta) {\n      forceNextPop = true;\n      go(delta);\n    }\n  } // Ensure the hash is encoded properly before doing anything else.\n\n\n  var path = getHashPath();\n  var encodedPath = encodePath(path);\n  if (path !== encodedPath) replaceHashPath(encodedPath);\n  var initialLocation = getDOMLocation();\n  var allPaths = [createPath(initialLocation)]; // Public interface\n\n  function createHref(location) {\n    var baseTag = document.querySelector('base');\n    var href = '';\n\n    if (baseTag && baseTag.getAttribute('href')) {\n      href = stripHash(window.location.href);\n    }\n\n    return href + '#' + encodePath(basename + createPath(location));\n  }\n\n  function push(path, state) {\n    process.env.NODE_ENV !== \"production\" ? warning(state === undefined, 'Hash history cannot push state; it is ignored') : void 0;\n    var action = 'PUSH';\n    var location = createLocation(path, undefined, undefined, history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var path = createPath(location);\n      var encodedPath = encodePath(basename + path);\n      var hashChanged = getHashPath() !== encodedPath;\n\n      if (hashChanged) {\n        // We cannot tell if a hashchange was caused by a PUSH, so we'd\n        // rather setState here and ignore the hashchange. The caveat here\n        // is that other hash histories in the page will consider it a POP.\n        ignorePath = path;\n        pushHashPath(encodedPath);\n        var prevIndex = allPaths.lastIndexOf(createPath(history.location));\n        var nextPaths = allPaths.slice(0, prevIndex + 1);\n        nextPaths.push(path);\n        allPaths = nextPaths;\n        setState({\n          action: action,\n          location: location\n        });\n      } else {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack') : void 0;\n        setState();\n      }\n    });\n  }\n\n  function replace(path, state) {\n    process.env.NODE_ENV !== \"production\" ? warning(state === undefined, 'Hash history cannot replace state; it is ignored') : void 0;\n    var action = 'REPLACE';\n    var location = createLocation(path, undefined, undefined, history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var path = createPath(location);\n      var encodedPath = encodePath(basename + path);\n      var hashChanged = getHashPath() !== encodedPath;\n\n      if (hashChanged) {\n        // We cannot tell if a hashchange was caused by a REPLACE, so we'd\n        // rather setState here and ignore the hashchange. The caveat here\n        // is that other hash histories in the page will consider it a POP.\n        ignorePath = path;\n        replaceHashPath(encodedPath);\n      }\n\n      var prevIndex = allPaths.indexOf(createPath(history.location));\n      if (prevIndex !== -1) allPaths[prevIndex] = path;\n      setState({\n        action: action,\n        location: location\n      });\n    });\n  }\n\n  function go(n) {\n    process.env.NODE_ENV !== \"production\" ? warning(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : void 0;\n    globalHistory.go(n);\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  var listenerCount = 0;\n\n  function checkDOMListeners(delta) {\n    listenerCount += delta;\n\n    if (listenerCount === 1 && delta === 1) {\n      window.addEventListener(HashChangeEvent$1, handleHashChange);\n    } else if (listenerCount === 0) {\n      window.removeEventListener(HashChangeEvent$1, handleHashChange);\n    }\n  }\n\n  var isBlocked = false;\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    var unblock = transitionManager.setPrompt(prompt);\n\n    if (!isBlocked) {\n      checkDOMListeners(1);\n      isBlocked = true;\n    }\n\n    return function () {\n      if (isBlocked) {\n        isBlocked = false;\n        checkDOMListeners(-1);\n      }\n\n      return unblock();\n    };\n  }\n\n  function listen(listener) {\n    var unlisten = transitionManager.appendListener(listener);\n    checkDOMListeners(1);\n    return function () {\n      checkDOMListeners(-1);\n      unlisten();\n    };\n  }\n\n  var history = {\n    length: globalHistory.length,\n    action: 'POP',\n    location: initialLocation,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\nfunction clamp(n, lowerBound, upperBound) {\n  return Math.min(Math.max(n, lowerBound), upperBound);\n}\n/**\n * Creates a history object that stores locations in memory.\n */\n\n\nfunction createMemoryHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      getUserConfirmation = _props.getUserConfirmation,\n      _props$initialEntries = _props.initialEntries,\n      initialEntries = _props$initialEntries === void 0 ? ['/'] : _props$initialEntries,\n      _props$initialIndex = _props.initialIndex,\n      initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,\n      _props$keyLength = _props.keyLength,\n      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    _extends(history, nextState);\n\n    history.length = history.entries.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  function createKey() {\n    return Math.random().toString(36).substr(2, keyLength);\n  }\n\n  var index = clamp(initialIndex, 0, initialEntries.length - 1);\n  var entries = initialEntries.map(function (entry) {\n    return typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());\n  }); // Public interface\n\n  var createHref = createPath;\n\n  function push(path, state) {\n    process.env.NODE_ENV !== \"production\" ? warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;\n    var action = 'PUSH';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var prevIndex = history.index;\n      var nextIndex = prevIndex + 1;\n      var nextEntries = history.entries.slice(0);\n\n      if (nextEntries.length > nextIndex) {\n        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);\n      } else {\n        nextEntries.push(location);\n      }\n\n      setState({\n        action: action,\n        location: location,\n        index: nextIndex,\n        entries: nextEntries\n      });\n    });\n  }\n\n  function replace(path, state) {\n    process.env.NODE_ENV !== \"production\" ? warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;\n    var action = 'REPLACE';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      history.entries[history.index] = location;\n      setState({\n        action: action,\n        location: location\n      });\n    });\n  }\n\n  function go(n) {\n    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);\n    var action = 'POP';\n    var location = history.entries[nextIndex];\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (ok) {\n        setState({\n          action: action,\n          location: location,\n          index: nextIndex\n        });\n      } else {\n        // Mimic the behavior of DOM histories by\n        // causing a render after a cancelled POP.\n        setState();\n      }\n    });\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  function canGo(n) {\n    var nextIndex = history.index + n;\n    return nextIndex >= 0 && nextIndex < history.entries.length;\n  }\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    return transitionManager.setPrompt(prompt);\n  }\n\n  function listen(listener) {\n    return transitionManager.appendListener(listener);\n  }\n\n  var history = {\n    length: entries.length,\n    action: 'POP',\n    location: entries[index],\n    index: index,\n    entries: entries,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    canGo: canGo,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\nexport { createBrowserHistory, createHashHistory, createMemoryHistory, createLocation, locationsAreEqual, parsePath, createPath };\n","/**\n * Thrown if some required driver's option is not set.\n */\nexport class DriverOptionNotSetError extends Error {\n    name = \"DriverOptionNotSetError\";\n\n    constructor(optionName: string) {\n        super();\n        Object.setPrototypeOf(this, DriverOptionNotSetError.prototype);\n        this.message = `Driver option (${optionName}) is not set. Please set it to perform connection to the database.`;\n    }\n\n}","import shajs from \"sha.js\";\n\n/**\n * Converts string into camelCase.\n *\n * @see http://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case\n */\nexport function camelCase(str: string, firstCapital: boolean = false): string {\n    return str.replace(/^([A-Z])|[\\s-_](\\w)/g, function(match, p1, p2, offset) {\n        if (firstCapital === true && offset === 0) return p1;\n        if (p2) return p2.toUpperCase();\n        return p1.toLowerCase();\n    });\n}\n\n/**\n * Converts string into snake_case.\n *\n * @see https://regex101.com/r/QeSm2I/1\n */\nexport function snakeCase(str: string) {\n    return str.replace(/(?:([a-z])([A-Z]))|(?:((?!^)[A-Z])([a-z]))/g, \"$1_$3$2$4\").toLowerCase();\n}\n\n/**\n * Converts string into Title Case.\n *\n * @see http://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript\n */\nexport function titleCase(str: string): string {\n    return str.replace(/\\w\\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n}\n\n/**\n * Builds abbreviated string from given string;\n */\nexport function abbreviate(str: string, abbrLettersCount: number = 1): string {\n    const words = str.replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0\\xDF])/g, \"$1 $2\").split(\" \");\n    return words.reduce((res, word) => {\n        res += word.substr(0, abbrLettersCount);\n        return res;\n    }, \"\");\n}\n\nexport interface IShortenOptions {\n    /** String used to split \"segments\" of the alias/column name */\n    separator?: string;\n    /** Maximum length of any \"segment\" */\n    segmentLength?: number;\n    /** Length of any \"term\" in a \"segment\"; \"OrderItem\" is a segment, \"Order\" and \"Items\" are terms */\n    termLength?: number;\n  }\n\n  /**\n   * Shorten a given `input`. Useful for RDBMS imposing a limit on the\n   * maximum length of aliases and column names in SQL queries.\n   *\n   * @param input String to be shortened.\n   * @param options Default to `4` for segments length, `2` for terms length, `'__'` as a separator.\n   *\n   * @return Shortened `input`.\n   *\n   * @example\n   * // returns: \"UsShCa__orde__mark__dire\"\n   * shorten('UserShoppingCart__order__market__director')\n   *\n   * // returns: \"cat_wit_ver_lon_nam_pos_wit_ver_lon_nam_pos_wit_ver_lon_nam\"\n   * shorten(\n   *   'category_with_very_long_name_posts_with_very_long_name_post_with_very_long_name',\n   *   { separator: '_', segmentLength: 3 }\n   * )\n   *\n   * // equals: UsShCa__orde__mark_market_id\n   * `${shorten('UserShoppingCart__order__market')}_market_id`\n   */\n  export function shorten(input: string, options: IShortenOptions = {}): string {\n    const { segmentLength = 4, separator = \"__\", termLength = 2 } = options;\n\n    const segments = input.split(separator);\n    const shortSegments = segments.reduce((acc: string[], val: string) => {\n        // split the given segment into many terms based on an eventual camel cased name\n        const segmentTerms = val.replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0-\\xDF])/g, \"$1 $2\").split(\" \");\n        // \"OrderItemList\" becomes \"OrItLi\", while \"company\" becomes \"comp\"\n        const length = segmentTerms.length > 1 ? termLength : segmentLength;\n        const shortSegment = segmentTerms.map(term => term.substr(0, length)).join(\"\");\n\n        acc.push(shortSegment);\n        return acc;\n    }, []);\n\n    return shortSegments.join(separator);\n  }\n\ninterface IHashOptions {\n    length?: number;\n}\n\n/**\n * Returns a hashed input.\n *\n * @param input String to be hashed.\n * @param options.length Optionally, shorten the output to desired length.\n */\nexport function hash(input: string, options: IHashOptions = {}): string {\n    const hashFunction = shajs(\"sha256\");\n\n    hashFunction.update(input, \"utf8\");\n\n    const hashedInput = hashFunction.digest(\"hex\");\n\n    if (options.length) {\n        return hashedInput.slice(0, options.length);\n    }\n\n    return hashedInput;\n  }\n","/**\n * Helper utility functions for QueryBuilder.\n */\nexport class QueryBuilderUtils {\n\n    /**\n     * Checks if given value is a string representation of alias property,\n     * e.g. \"post.category\" or \"post.id\".\n     */\n    static isAliasProperty(str: any): str is string {\n\n        // alias property must be a string and must have a dot separator\n        if (typeof str !== \"string\" || str.indexOf(\".\") === -1)\n            return false;\n\n        // extra alias and its property relation\n        const [aliasName, propertyName] = str.split(\".\"); // todo: what about relations in embedded?\n        if (!aliasName || !propertyName)\n            return false;\n\n        // alias and property must be represented in a special format\n        // const aliasNameRegexp = /^[a-zA-Z0-9_-]+$/;\n        // if (!aliasNameRegexp.test(aliasName) || !aliasNameRegexp.test(propertyName))\n        //     return false;\n        // make sure string is not a subquery\n        if (str.indexOf(\"(\") !== -1 || str.indexOf(\")\") !== -1)\n            return false;\n\n        return true;\n    }\n\n}\n","var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    throw new Error(prefix + \": \" + (message || ''));\n}\n\nexport default invariant;\n","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import {TableExclusionOptions} from \"../options/TableExclusionOptions\";\nimport {ExclusionMetadata} from \"../../metadata/ExclusionMetadata\";\n\n/**\n * Database's table exclusion constraint stored in this class.\n */\nexport class TableExclusion {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Constraint name.\n     */\n    name?: string;\n\n    /**\n     * Exclusion expression.\n     */\n    expression?: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: TableExclusionOptions) {\n        this.name = options.name;\n        this.expression = options.expression;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this constraint with exactly same properties.\n     */\n    clone(): TableExclusion {\n        return new TableExclusion(<TableExclusionOptions>{\n            name: this.name,\n            expression: this.expression,\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates exclusions from the exclusion metadata object.\n     */\n    static create(exclusionMetadata: ExclusionMetadata): TableExclusion {\n        return new TableExclusion(<TableExclusionOptions>{\n            name: exclusionMetadata.name,\n            expression: exclusionMetadata.expression\n        });\n    }\n\n}\n","export class RandomGenerator {\n\n    /**\n     *  discuss at: http://locutus.io/php/sha1/\n     * original by: Webtoolkit.info (http://www.webtoolkit.info/)\n     * improved by: Michael White (http://getsprink.com)\n     * improved by: Kevin van Zonneveld (http://kvz.io)\n     *    input by: Brett Zamir (http://brett-zamir.me)\n     *      note 1: Keep in mind that in accordance with PHP, the whole string is buffered and then\n     *      note 1: hashed. If available, we'd recommend using Node's native crypto modules directly\n     *      note 1: in a steaming fashion for faster and more efficient hashing\n     *   example 1: sha1('Kevin van Zonneveld')\n     *   returns 1: '54916d2e62f65b3afa6e192e6a601cdbe5cb5897'\n     */\n    static sha1(str: string) {\n\n        let _rotLeft = function(n: any, s: any) {\n            let t4 = (n << s) | (n >>> (32 - s));\n            return t4;\n        };\n\n        let _cvtHex = function(val: any) {\n            let str = \"\";\n            let i;\n            let v;\n\n            for (i = 7; i >= 0; i--) {\n                v = (val >>> (i * 4)) & 0x0f;\n                str += v.toString(16);\n            }\n            return str;\n        };\n\n        let blockstart;\n        let i, j;\n        let W = new Array(80);\n        let H0 = 0x67452301;\n        let H1 = 0xEFCDAB89;\n        let H2 = 0x98BADCFE;\n        let H3 = 0x10325476;\n        let H4 = 0xC3D2E1F0;\n        let A, B, C, D, E;\n        let temp;\n\n        // utf8_encode\n        str = /*unescape*/(encodeURIComponent(str));\n        let strLen = str.length;\n\n        let wordArray = [];\n        for (i = 0; i < strLen - 3; i += 4) {\n            j = str.charCodeAt(i) << 24 |\n                str.charCodeAt(i + 1) << 16 |\n                str.charCodeAt(i + 2) << 8 |\n                str.charCodeAt(i + 3);\n            wordArray.push(j);\n        }\n\n        switch (strLen % 4) {\n            case 0:\n                i = 0x080000000;\n                break;\n            case 1:\n                i = str.charCodeAt(strLen - 1) << 24 | 0x0800000;\n                break;\n            case 2:\n                i = str.charCodeAt(strLen - 2) << 24 | str.charCodeAt(strLen - 1) << 16 | 0x08000;\n                break;\n            case 3:\n                i = str.charCodeAt(strLen - 3) << 24 |\n                    str.charCodeAt(strLen - 2) << 16 |\n                    str.charCodeAt(strLen - 1) <<\n                    8 | 0x80;\n                break;\n        }\n\n        wordArray.push(i);\n\n        while ((wordArray.length % 16) !== 14) {\n            wordArray.push(0);\n        }\n\n        wordArray.push(strLen >>> 29);\n        wordArray.push((strLen << 3) & 0x0ffffffff);\n\n        for (blockstart = 0; blockstart < wordArray.length; blockstart += 16) {\n            for (i = 0; i < 16; i++) {\n                W[i] = wordArray[blockstart + i];\n            }\n            for (i = 16; i <= 79; i++) {\n                W[i] = _rotLeft(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n            }\n\n            A = H0;\n            B = H1;\n            C = H2;\n            D = H3;\n            E = H4;\n\n            for (i = 0; i <= 19; i++) {\n                temp = (_rotLeft(A, 5) + ((B & C) | (~B & D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n\n            for (i = 20; i <= 39; i++) {\n                temp = (_rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n\n            for (i = 40; i <= 59; i++) {\n                temp = (_rotLeft(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n\n            for (i = 60; i <= 79; i++) {\n                temp = (_rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n\n            H0 = (H0 + A) & 0x0ffffffff;\n            H1 = (H1 + B) & 0x0ffffffff;\n            H2 = (H2 + C) & 0x0ffffffff;\n            H3 = (H3 + D) & 0x0ffffffff;\n            H4 = (H4 + E) & 0x0ffffffff;\n        }\n\n        temp = _cvtHex(H0) + _cvtHex(H1) + _cvtHex(H2) + _cvtHex(H3) + _cvtHex(H4);\n        return temp.toLowerCase();\n    }\n\n    /**\n     * RFC4122 compliant UUID v4 generator.\n     */\n    static uuid4(): string {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) =>  {\n            const r = Math.random() * 16 | 0, v = c === \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n\n}","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {Table} from \"../../schema-builder/table/Table\";\nimport {TableIndex} from \"../../schema-builder/table/TableIndex\";\nimport {TableForeignKey} from \"../../schema-builder/table/TableForeignKey\";\nimport {View} from \"../../schema-builder/view/View\";\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\";\nimport {Query} from \"../Query\";\nimport {AbstractSqliteDriver} from \"./AbstractSqliteDriver\";\nimport {ReadStream} from \"../../platform/PlatformTools\";\nimport {TableIndexOptions} from \"../../schema-builder/options/TableIndexOptions\";\nimport {TableUnique} from \"../../schema-builder/table/TableUnique\";\nimport {BaseQueryRunner} from \"../../query-runner/BaseQueryRunner\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {TableCheck} from \"../../schema-builder/table/TableCheck\";\nimport {IsolationLevel} from \"../types/IsolationLevel\";\nimport {TableExclusion} from \"../../schema-builder/table/TableExclusion\";\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport abstract class AbstractSqliteQueryRunner extends BaseQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: AbstractSqliteDriver;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor() {\n        super();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        return Promise.resolve(this.driver.databaseConnection);\n    }\n\n    /**\n     * Releases used database connection.\n     * We just clear loaded tables and sql in memory, because sqlite do not support multiple connections thus query runners.\n     */\n    release(): Promise<void> {\n        this.loadedTables = [];\n        this.clearSqlMemory();\n        return Promise.resolve();\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        if (isolationLevel) {\n            if (isolationLevel !== \"READ UNCOMMITTED\" && isolationLevel !== \"SERIALIZABLE\") {\n                throw new Error(`SQLite only supports SERIALIZABLE and READ UNCOMMITTED isolation`);\n            }\n\n            if (isolationLevel === \"READ UNCOMMITTED\") {\n                await this.query(\"PRAGMA read_uncommitted = true\");\n            } else {\n                await this.query(\"PRAGMA read_uncommitted = false\");\n            }\n        }\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        this.isTransactionActive = true;\n\n        await this.query(\"BEGIN TRANSACTION\");\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        await this.query(\"COMMIT\");\n        this.isTransactionActive = false;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        await this.query(\"ROLLBACK\");\n\n        this.isTransactionActive = false;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        throw new Error(`Stream is not supported by sqlite driver.`);\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        return Promise.resolve([]);\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        return Promise.resolve([]);\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        return Promise.resolve(false);\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        throw new Error(`This driver does not support table schemas`);\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table|string): Promise<boolean> {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const sql = `SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableOrName: Table|string, columnName: string): Promise<boolean> {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const sql = `PRAGMA table_info(\"${tableName}\")`;\n        const columns: ObjectLiteral[] = await this.query(sql);\n        return !!columns.find(column => column[\"name\"] === columnName);\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(database: string, ifNotExist?: boolean): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(schema: string, ifNotExist?: boolean): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Drops table schema.\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(table: Table, ifNotExist: boolean = false, createForeignKeys: boolean = true, createIndices: boolean = true): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table);\n            if (isTableExist) return Promise.resolve();\n        }\n\n        upQueries.push(this.createTableSql(table, createForeignKeys));\n        downQueries.push(this.dropTableSql(table));\n\n        if (createIndices) {\n            table.indices.forEach(index => {\n\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                upQueries.push(this.createIndexSql(table, index));\n                downQueries.push(this.dropIndexSql(index));\n            });\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableOrName: Table|string, ifExist?: boolean, dropForeignKeys: boolean = true, dropIndices: boolean = true): Promise<void> {\n        if (ifExist) {\n            const isTableExist = await this.hasTable(tableOrName);\n            if (!isTableExist) return Promise.resolve();\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys;\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        if (dropIndices) {\n            table.indices.forEach(index => {\n                upQueries.push(this.dropIndexSql(index));\n                downQueries.push(this.createIndexSql(table, index));\n            });\n        }\n\n        upQueries.push(this.dropTableSql(table, ifExist));\n        downQueries.push(this.createTableSql(table, createForeignKeys));\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(view: View): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.createViewSql(view));\n        upQueries.push(this.insertViewDefinitionSql(view));\n        downQueries.push(this.dropViewSql(view));\n        downQueries.push(this.deleteViewDefinitionSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View|string): Promise<void> {\n        const viewName = target instanceof View ? target.name : target;\n        const view = await this.getCachedView(viewName);\n\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.deleteViewDefinitionSql(view));\n        upQueries.push(this.dropViewSql(view));\n        downQueries.push(this.insertViewDefinitionSql(view));\n        downQueries.push(this.createViewSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Renames the given table.\n     */\n    async renameTable(oldTableOrName: Table|string, newTableName: string): Promise<void> {\n        const oldTable = oldTableOrName instanceof Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);\n        const newTable = oldTable.clone();\n        newTable.name = newTableName;\n\n        // rename table\n        const up = new Query(`ALTER TABLE \"${oldTable.name}\" RENAME TO \"${newTableName}\"`);\n        const down = new Query(`ALTER TABLE \"${newTableName}\" RENAME TO \"${oldTable.name}\"`);\n        await this.executeQueries(up, down);\n\n        // rename old table;\n        oldTable.name = newTable.name;\n\n        // rename unique constraints\n        newTable.uniques.forEach(unique => {\n            unique.name = this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);\n        });\n\n        // rename foreign key constraints\n        newTable.foreignKeys.forEach(foreignKey => {\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n        });\n\n        // rename indices\n        newTable.indices.forEach(index => {\n            index.name = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n        });\n\n        // recreate table with new constraint names\n        await this.recreateTable(newTable, oldTable);\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(tableOrName: Table|string, column: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        return this.addColumns(table!, [column]);\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const changedTable = table.clone();\n        columns.forEach(column => changedTable.addColumn(column));\n        await this.recreateTable(changedTable, table);\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newTableColumnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        let newColumn: TableColumn|undefined = undefined;\n        if (newTableColumnOrName instanceof TableColumn) {\n            newColumn = newTableColumnOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newTableColumnOrName;\n        }\n\n        return this.changeColumn(table, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newColumn: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        await this.changeColumns(table, [{oldColumn, newColumn}]);\n    }\n\n    /**\n     * Changes a column in the table.\n     * Changed column looses all its keys in the db.\n     */\n    async changeColumns(tableOrName: Table|string, changedColumns: { oldColumn: TableColumn, newColumn: TableColumn }[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const changedTable = table.clone();\n        changedColumns.forEach(changedColumnSet => {\n            if (changedColumnSet.newColumn.name !== changedColumnSet.oldColumn.name) {\n                changedTable.findColumnUniques(changedColumnSet.oldColumn).forEach(unique => {\n                    unique.columnNames.splice(unique.columnNames.indexOf(changedColumnSet.oldColumn.name), 1);\n                    unique.columnNames.push(changedColumnSet.newColumn.name);\n                    unique.name = this.connection.namingStrategy.uniqueConstraintName(changedTable, unique.columnNames);\n                });\n\n                changedTable.findColumnForeignKeys(changedColumnSet.oldColumn).forEach(fk => {\n                    fk.columnNames.splice(fk.columnNames.indexOf(changedColumnSet.oldColumn.name), 1);\n                    fk.columnNames.push(changedColumnSet.newColumn.name);\n                    fk.name = this.connection.namingStrategy.foreignKeyName(changedTable, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);\n                });\n\n                changedTable.findColumnIndices(changedColumnSet.oldColumn).forEach(index => {\n                    index.columnNames.splice(index.columnNames.indexOf(changedColumnSet.oldColumn.name), 1);\n                    index.columnNames.push(changedColumnSet.newColumn.name);\n                    index.name = this.connection.namingStrategy.indexName(changedTable, index.columnNames, index.where);\n                });\n            }\n            const originalColumn = changedTable.columns.find(column => column.name === changedColumnSet.oldColumn.name);\n            if (originalColumn)\n                changedTable.columns[changedTable.columns.indexOf(originalColumn)] = changedColumnSet.newColumn;\n        });\n\n        await this.recreateTable(changedTable, table);\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableOrName: Table|string, columnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n        if (!column)\n            throw new Error(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\n\n        await this.dropColumns(table, [column]);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // clone original table and remove column and its constraints from cloned table\n        const changedTable = table.clone();\n        columns.forEach(column => {\n            changedTable.removeColumn(column);\n            changedTable.findColumnUniques(column).forEach(unique => changedTable.removeUniqueConstraint(unique));\n            changedTable.findColumnIndices(column).forEach(index => changedTable.removeIndex(index));\n            changedTable.findColumnForeignKeys(column).forEach(fk => changedTable.removeForeignKey(fk));\n        });\n\n        await this.recreateTable(changedTable, table);\n\n        // remove column and its constraints from original table.\n        columns.forEach(column => {\n            table.removeColumn(column);\n            table.findColumnUniques(column).forEach(unique => table.removeUniqueConstraint(unique));\n            table.findColumnIndices(column).forEach(index => table.removeIndex(index));\n            table.findColumnForeignKeys(column).forEach(fk => table.removeForeignKey(fk));\n        });\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(tableOrName: Table|string, columnNames: string[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        // clone original table and mark columns as primary\n        const changedTable = table.clone();\n        changedTable.columns.forEach(column => {\n            if (columnNames.find(columnName => columnName === column.name))\n                column.isPrimary = true;\n        });\n\n        await this.recreateTable(changedTable, table);\n        // mark columns as primary in original table\n        table.columns.forEach(column => {\n            if (columnNames.find(columnName => columnName === column.name))\n                column.isPrimary = true;\n        });\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        await Promise.resolve();\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName: Table|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        // clone original table and mark primary columns as non-primary\n        const changedTable = table.clone();\n        changedTable.primaryColumns.forEach(column => {\n            column.isPrimary = false;\n        });\n\n        await this.recreateTable(changedTable, table);\n        // mark primary columns as non-primary in original table\n        table.primaryColumns.forEach(column => {\n            column.isPrimary = false;\n        });\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(tableOrName: Table|string, uniqueConstraint: TableUnique): Promise<void> {\n        await this.createUniqueConstraints(tableOrName, [uniqueConstraint]);\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // clone original table and add unique constraints in to cloned table\n        const changedTable = table.clone();\n        uniqueConstraints.forEach(uniqueConstraint => changedTable.addUniqueConstraint(uniqueConstraint));\n        await this.recreateTable(changedTable, table);\n    }\n\n    /**\n     * Drops an unique constraint.\n     */\n    async dropUniqueConstraint(tableOrName: Table|string, uniqueOrName: TableUnique|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const uniqueConstraint = uniqueOrName instanceof TableUnique ? uniqueOrName : table.uniques.find(u => u.name === uniqueOrName);\n        if (!uniqueConstraint)\n            throw new Error(`Supplied unique constraint was not found in table ${table.name}`);\n\n        await this.dropUniqueConstraints(table, [uniqueConstraint]);\n    }\n\n    /**\n     * Creates an unique constraints.\n     */\n    async dropUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // clone original table and remove unique constraints from cloned table\n        const changedTable = table.clone();\n        uniqueConstraints.forEach(uniqueConstraint => changedTable.removeUniqueConstraint(uniqueConstraint));\n\n        await this.recreateTable(changedTable, table);\n    }\n\n    /**\n     * Creates new check constraint.\n     */\n    async createCheckConstraint(tableOrName: Table|string, checkConstraint: TableCheck): Promise<void> {\n        await this.createCheckConstraints(tableOrName, [checkConstraint]);\n    }\n\n    /**\n     * Creates new check constraints.\n     */\n    async createCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // clone original table and add check constraints in to cloned table\n        const changedTable = table.clone();\n        checkConstraints.forEach(checkConstraint => changedTable.addCheckConstraint(checkConstraint));\n        await this.recreateTable(changedTable, table);\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(tableOrName: Table|string, checkOrName: TableCheck|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);\n        if (!checkConstraint)\n            throw new Error(`Supplied check constraint was not found in table ${table.name}`);\n\n        await this.dropCheckConstraints(table, [checkConstraint]);\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // clone original table and remove check constraints from cloned table\n        const changedTable = table.clone();\n        checkConstraints.forEach(checkConstraint => changedTable.removeCheckConstraint(checkConstraint));\n\n        await this.recreateTable(changedTable, table);\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(tableOrName: Table|string, exclusionConstraint: TableExclusion): Promise<void> {\n        throw new Error(`Sqlite does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`Sqlite does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(tableOrName: Table|string, exclusionOrName: TableExclusion|string): Promise<void> {\n        throw new Error(`Sqlite does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`Sqlite does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableOrName: Table|string, foreignKey: TableForeignKey): Promise<void> {\n        await this.createForeignKeys(tableOrName, [foreignKey]);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        // clone original table and add foreign keys in to cloned table\n        const changedTable = table.clone();\n        foreignKeys.forEach(foreignKey => changedTable.addForeignKey(foreignKey));\n\n        await this.recreateTable(changedTable, table);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);\n        if (!foreignKey)\n            throw new Error(`Supplied foreign key was not found in table ${table.name}`);\n\n        await this.dropForeignKeys(tableOrName, [foreignKey]);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // clone original table and remove foreign keys from cloned table\n        const changedTable = table.clone();\n        foreignKeys.forEach(foreignKey => changedTable.removeForeignKey(foreignKey));\n\n        await this.recreateTable(changedTable, table);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableOrName: Table|string, index: TableIndex): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n\n        const up = this.createIndexSql(table, index);\n        const down = this.dropIndexSql(index);\n        await this.executeQueries(up, down);\n        table.addIndex(index);\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.createIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableOrName: Table|string, indexOrName: TableIndex|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);\n        if (!index)\n            throw new Error(`Supplied index was not found in table ${table.name}`);\n\n        const up = this.dropIndexSql(index);\n        const down = this.createIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.removeIndex(index);\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.dropIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tableName: string): Promise<void> {\n        await this.query(`DELETE FROM \"${tableName}\"`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = OFF;`);\n        await this.startTransaction();\n        try {\n            const selectViewDropsQuery = `SELECT 'DROP VIEW \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'view'`;\n            const dropViewQueries: ObjectLiteral[] = await this.query(selectViewDropsQuery);\n            await Promise.all(dropViewQueries.map(q => this.query(q[\"query\"])));\n\n            const selectTableDropsQuery = `SELECT 'DROP TABLE \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" != 'sqlite_sequence'`;\n            const dropTableQueries: ObjectLiteral[] = await this.query(selectTableDropsQuery);\n            await Promise.all(dropTableQueries.map(q => this.query(q[\"query\"])));\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n\n        } finally {\n            await this.query(`PRAGMA foreign_keys = ON;`);\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected async loadViews(viewNames: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName());\n        if (!hasTable)\n            return Promise.resolve([]);\n\n        const viewNamesString = viewNames.map(name => \"'\" + name + \"'\").join(\", \");\n        let query = `SELECT \"t\".* FROM \"${this.getTypeormMetadataTableName()}\" \"t\" INNER JOIN \"sqlite_master\" s ON \"s\".\"name\" = \"t\".\"name\" AND \"s\".\"type\" = 'view' WHERE \"t\".\"type\" = 'VIEW'`;\n        if (viewNamesString.length > 0)\n            query += ` AND \"t\".\"name\" IN (${viewNamesString})`;\n        const dbViews = await this.query(query);\n        return dbViews.map((dbView: any) => {\n            const view = new View();\n            view.name = dbView[\"name\"];\n            view.expression = dbView[\"value\"];\n            return view;\n        });\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames: string[]): Promise<Table[]> {\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\n\n        // load tables\n        const dbTables: ObjectLiteral[] = await this.query(`SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" IN (${tableNamesString})`);\n\n        // load indices\n        const dbIndicesDef: ObjectLiteral[] = await this.query(`SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'index' AND \"tbl_name\" IN (${tableNamesString})`);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables || !dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return Promise.all(dbTables.map(async dbTable => {\n            const table = new Table({name: dbTable[\"name\"]});\n            const sql = dbTable[\"sql\"];\n\n            // load columns and indices\n            const [dbColumns, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\n                this.query(`PRAGMA table_info(\"${dbTable[\"name\"]}\")`),\n                this.query(`PRAGMA index_list(\"${dbTable[\"name\"]}\")`),\n                this.query(`PRAGMA foreign_key_list(\"${dbTable[\"name\"]}\")`),\n            ]);\n\n            // find column name with auto increment\n            let autoIncrementColumnName: string|undefined = undefined;\n            const tableSql: string = dbTable[\"sql\"];\n            let autoIncrementIndex = tableSql.toUpperCase().indexOf(\"AUTOINCREMENT\");\n            if (autoIncrementIndex !== -1) {\n                autoIncrementColumnName = tableSql.substr(0, autoIncrementIndex);\n                const comma = autoIncrementColumnName.lastIndexOf(\",\");\n                const bracket = autoIncrementColumnName.lastIndexOf(\"(\");\n                if (comma !== -1) {\n                    autoIncrementColumnName = autoIncrementColumnName.substr(comma);\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\n\n                } else if (bracket !== -1) {\n                    autoIncrementColumnName = autoIncrementColumnName.substr(bracket);\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\n                }\n            }\n\n            // create columns from the loaded columns\n            table.columns = dbColumns.map(dbColumn => {\n                const tableColumn = new TableColumn();\n                tableColumn.name = dbColumn[\"name\"];\n                tableColumn.type = dbColumn[\"type\"].toLowerCase();\n                tableColumn.default = dbColumn[\"dflt_value\"] !== null && dbColumn[\"dflt_value\"] !== undefined ? dbColumn[\"dflt_value\"] : undefined;\n                tableColumn.isNullable = dbColumn[\"notnull\"] === 0;\n                // primary keys are numbered starting with 1, columns that aren't primary keys are marked with 0\n                tableColumn.isPrimary = dbColumn[\"pk\"] > 0;\n                tableColumn.comment = \"\"; // SQLite does not support column comments\n                tableColumn.isGenerated = autoIncrementColumnName === dbColumn[\"name\"];\n                if (tableColumn.isGenerated) {\n                    tableColumn.generationStrategy = \"increment\";\n                }\n\n                if (tableColumn.type === \"varchar\") {\n                    // Check if this is an enum\n                    const enumMatch = sql.match(new RegExp(\"\\\"(\" + tableColumn.name + \")\\\" varchar CHECK\\\\s*\\\\(\\\\s*\\\\1\\\\s+IN\\\\s*\\\\(('[^']+'(?:\\\\s*,\\\\s*'[^']+')+)\\\\s*\\\\)\\\\s*\\\\)\"));\n                    if (enumMatch) {\n                        // This is an enum\n                        tableColumn.type = \"simple-enum\";\n                        tableColumn.enum = enumMatch[2].substr(1, enumMatch[2].length - 2).split(\"','\");\n                    }\n                }\n\n                // parse datatype and attempt to retrieve length, precision and scale\n                let pos = tableColumn.type.indexOf(\"(\");\n                if (pos !== -1) {\n                    const fullType = tableColumn.type;\n                    let dataType = fullType.substr(0, pos);\n                    if (!!this.driver.withLengthColumnTypes.find(col => col === dataType)) {\n                        let len = parseInt(fullType.substring(pos + 1, fullType.length - 1));\n                        if (len) {\n                            tableColumn.length = len.toString();\n                            tableColumn.type = dataType; // remove the length part from the datatype\n                        }\n                    }\n                    if (!!this.driver.withPrecisionColumnTypes.find(col => col === dataType)) {\n                        const re = new RegExp(`^${dataType}\\\\((\\\\d+),?\\\\s?(\\\\d+)?\\\\)`);\n                        const matches = fullType.match(re);\n                        if (matches && matches[1]) {\n                            tableColumn.precision = +matches[1];\n                        }\n                        if (!!this.driver.withScaleColumnTypes.find(col => col === dataType)) {\n                            if (matches && matches[2]) {\n                                tableColumn.scale = +matches[2];\n                            }\n                        }\n                        tableColumn.type = dataType; // remove the precision/scale part from the datatype\n                    }\n                }\n\n                return tableColumn;\n            });\n\n            // build foreign keys\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys, dbForeignKey => dbForeignKey[\"id\"]);\n            table.foreignKeys = tableForeignKeyConstraints.map(foreignKey => {\n                const ownForeignKeys = dbForeignKeys.filter(dbForeignKey => dbForeignKey[\"id\"] === foreignKey[\"id\"] && dbForeignKey[\"table\"] === foreignKey[\"table\"]);\n                const columnNames = ownForeignKeys.map(dbForeignKey => dbForeignKey[\"from\"]);\n                const referencedColumnNames = ownForeignKeys.map(dbForeignKey => dbForeignKey[\"to\"]);\n                // build foreign key name, because we can not get it directly.\n                const fkName = this.connection.namingStrategy.foreignKeyName(table, columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n                return new TableForeignKey({\n                    name: fkName,\n                    columnNames: columnNames,\n                    referencedTableName: foreignKey[\"table\"],\n                    referencedColumnNames: referencedColumnNames,\n                    onDelete: foreignKey[\"on_delete\"],\n                    onUpdate: foreignKey[\"on_update\"]\n                });\n            });\n\n            // build unique constraints\n            const tableUniquePromises = dbIndices\n                .filter(dbIndex => dbIndex[\"origin\"] === \"u\")\n                .map(dbIndex => dbIndex[\"name\"])\n                .filter((value, index, self) => self.indexOf(value) === index)\n                .map(async dbIndexName => {\n                    const dbIndex = dbIndices.find(dbIndex => dbIndex[\"name\"] === dbIndexName);\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${dbIndex![\"name\"]}\")`);\n                    const indexColumns = indexInfos\n                        .sort((indexInfo1, indexInfo2) => parseInt(indexInfo1[\"seqno\"]) - parseInt(indexInfo2[\"seqno\"]))\n                        .map(indexInfo => indexInfo[\"name\"]);\n\n                    if (indexColumns.length === 1) {\n                        const column = table.columns.find(column => {\n                            return !!indexColumns.find(indexColumn => indexColumn === column.name);\n                        });\n                        if (column)\n                            column.isUnique = true;\n                    }\n\n                    // Sqlite does not store unique constraint name, so we generate its name manually.\n                    return new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table, indexColumns),\n                        columnNames: indexColumns\n                    });\n                });\n            table.uniques = (await Promise.all(tableUniquePromises)) as TableUnique[];\n\n            // build checks\n            let result;\n            const regexp = /CONSTRAINT \"([^\"]*)\" CHECK (\\(.*?\\))([,]|[)]$)/g;\n            while (((result = regexp.exec(sql)) !== null)) {\n                table.checks.push(new TableCheck({ name: result[1], expression: result[2] }));\n            }\n\n            // build indices\n            const indicesPromises = dbIndices\n                .filter(dbIndex => dbIndex[\"origin\"] === \"c\")\n                .map(dbIndex => dbIndex[\"name\"])\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\n                .map(async dbIndexName => {\n\n                    const indexDef = dbIndicesDef.find(dbIndexDef => dbIndexDef[\"name\"] === dbIndexName);\n                    const condition = /WHERE (.*)/.exec(indexDef![\"sql\"]);\n                    const dbIndex = dbIndices.find(dbIndex => dbIndex[\"name\"] === dbIndexName);\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${dbIndex![\"name\"]}\")`);\n                    const indexColumns = indexInfos\n                        .sort((indexInfo1, indexInfo2) => parseInt(indexInfo1[\"seqno\"]) - parseInt(indexInfo2[\"seqno\"]))\n                        .map(indexInfo => indexInfo[\"name\"]);\n\n                    const isUnique = dbIndex![\"unique\"] === \"1\" || dbIndex![\"unique\"] === 1;\n                    return new TableIndex(<TableIndexOptions>{\n                        table: table,\n                        name: dbIndex![\"name\"],\n                        columnNames: indexColumns,\n                        isUnique: isUnique,\n                        where: condition ? condition[1] : undefined\n                    });\n                });\n            const indices = await Promise.all(indicesPromises);\n            table.indices = indices.filter(index => !!index) as TableIndex[];\n\n            return table;\n        }));\n    }\n\n    /**\n     * Builds create table sql.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n\n        const primaryColumns = table.columns.filter(column => column.isPrimary);\n        const hasAutoIncrement = primaryColumns.find(column => column.isGenerated && column.generationStrategy === \"increment\");\n        const skipPrimary = primaryColumns.length > 1;\n        if (skipPrimary && hasAutoIncrement)\n            throw new Error(`Sqlite does not support AUTOINCREMENT on composite primary key`);\n\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, skipPrimary)).join(\", \");\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\n\n        // need for `addColumn()` method, because it recreates table.\n        table.columns\n            .filter(column => column.isUnique)\n            .forEach(column => {\n                const isUniqueExist = table.uniques.some(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\n                if (!isUniqueExist)\n                    table.uniques.push(new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                        columnNames: [column.name]\n                    }));\n            });\n\n        if (table.uniques.length > 0) {\n            const uniquesSql = table.uniques.map(unique => {\n                const uniqueName = unique.name ? unique.name : this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);\n                const columnNames = unique.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`;\n            }).join(\", \");\n\n            sql += `, ${uniquesSql}`;\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks.map(check => {\n                const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression!);\n                return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`;\n            }).join(\", \");\n\n            sql += `, ${checksSql}`;\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys.map(fk => {\n                const columnNames = fk.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                if (!fk.name)\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);\n                const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n\n                let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES \"${fk.referencedTableName}\" (${referencedColumnNames})`;\n                if (fk.onDelete)\n                    constraint += ` ON DELETE ${fk.onDelete}`;\n                if (fk.onUpdate)\n                    constraint += ` ON UPDATE ${fk.onUpdate}`;\n\n                return constraint;\n            }).join(\", \");\n\n            sql += `, ${foreignKeysSql}`;\n        }\n\n        if (primaryColumns.length > 1) {\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            sql += `, PRIMARY KEY (${columnNames})`;\n        }\n\n        sql += `)`;\n\n        const tableMetadata = this.connection.entityMetadatas.find(metadata => metadata.tableName === table.name);\n        if (tableMetadata && tableMetadata.withoutRowid) {\n            sql += \" WITHOUT ROWID\";\n        }\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(tableOrName: Table|string, ifExist?: boolean): Query {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const query = ifExist ? `DROP TABLE IF EXISTS \"${tableName}\"` : `DROP TABLE \"${tableName}\"`;\n        return new Query(query);\n    }\n\n    protected createViewSql(view: View): Query {\n        if (typeof view.expression === \"string\") {\n            return new Query(`CREATE VIEW \"${view.name}\" AS ${view.expression}`);\n        } else {\n            return new Query(`CREATE VIEW \"${view.name}\" AS ${view.expression(this.connection).getQuery()}`);\n        }\n    }\n\n    protected insertViewDefinitionSql(view: View): Query {\n        const expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n        const [query, parameters] = this.connection.createQueryBuilder()\n            .insert()\n            .into(this.getTypeormMetadataTableName())\n            .values({ type: \"VIEW\", name: view.name, value: expression })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(viewOrPath: View|string): Query {\n        const viewName = viewOrPath instanceof View ? viewOrPath.name : viewOrPath;\n        return new Query(`DROP VIEW \"${viewName}\"`);\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected deleteViewDefinitionSql(viewOrPath: View|string): Query {\n        const viewName = viewOrPath instanceof View ? viewOrPath.name : viewOrPath;\n        const qb = this.connection.createQueryBuilder();\n        const [query, parameters] = qb.delete()\n            .from(this.getTypeormMetadataTableName())\n            .where(`${qb.escape(\"type\")} = 'VIEW'`)\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name: viewName })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${table.name}\" (${columns}) ${index.where ? \"WHERE \" + index.where : \"\"}`);\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(indexOrName: TableIndex|string): Query {\n        let indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n        return new Query(`DROP INDEX \"${indexName}\"`);\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: TableColumn, skipPrimary?: boolean): string {\n        let c = \"\\\"\" + column.name + \"\\\"\";\n        if (column instanceof ColumnMetadata) {\n            c += \" \" + this.driver.normalizeType(column);\n        } else {\n            c += \" \" + this.connection.driver.createFullType(column);\n        }\n\n        if (column.enum)\n            c += \" CHECK( \" + column.name + \" IN (\" + column.enum.map(val => \"'\" + val + \"'\").join(\",\") + \") )\";\n        if (column.isPrimary && !skipPrimary)\n            c += \" PRIMARY KEY\";\n        if (column.isGenerated === true && column.generationStrategy === \"increment\") // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" AUTOINCREMENT\";\n        if (column.collation)\n            c += \" COLLATE \" + column.collation;\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.default !== undefined && column.default !== null)\n            c += \" DEFAULT (\" + column.default + \")\";\n\n        return c;\n    }\n\n    protected async recreateTable(newTable: Table, oldTable: Table, migrateData = true): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // drop old table indices\n        oldTable.indices.forEach(index => {\n            upQueries.push(this.dropIndexSql(index));\n            downQueries.push(this.createIndexSql(oldTable, index));\n        });\n\n        // change table name into 'temporary_table'\n        newTable.name = \"temporary_\" + newTable.name;\n\n        // create new table\n        upQueries.push(this.createTableSql(newTable, true));\n        downQueries.push(this.dropTableSql(newTable));\n\n        // migrate all data from the old table into new table\n        if (migrateData) {\n            let newColumnNames = newTable.columns.map(column => `\"${column.name}\"`).join(\", \");\n            let oldColumnNames = oldTable.columns.map(column => `\"${column.name}\"`).join(\", \");\n            if (oldTable.columns.length < newTable.columns.length) {\n                newColumnNames = newTable.columns.filter(column => {\n                    return oldTable.columns.find(c => c.name === column.name);\n                }).map(column => `\"${column.name}\"`).join(\", \");\n\n            } else if (oldTable.columns.length > newTable.columns.length) {\n                oldColumnNames = oldTable.columns.filter(column => {\n                    return newTable.columns.find(c => c.name === column.name);\n                }).map(column => `\"${column.name}\"`).join(\", \");\n            }\n\n            upQueries.push(new Query(`INSERT INTO \"${newTable.name}\"(${newColumnNames}) SELECT ${oldColumnNames} FROM \"${oldTable.name}\"`));\n            downQueries.push(new Query(`INSERT INTO \"${oldTable.name}\"(${oldColumnNames}) SELECT ${newColumnNames} FROM \"${newTable.name}\"`));\n        }\n\n        // drop old table\n        upQueries.push(this.dropTableSql(oldTable));\n        downQueries.push(this.createTableSql(oldTable, true));\n\n        // rename old table\n        upQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME TO \"${oldTable.name}\"`));\n        downQueries.push(new Query(`ALTER TABLE \"${oldTable.name}\" RENAME TO \"${newTable.name}\"`));\n        newTable.name = oldTable.name;\n\n        // recreate table indices\n        newTable.indices.forEach(index => {\n            // new index may be passed without name. In this case we generate index name manually.\n            if (!index.name)\n                index.name = this.connection.namingStrategy.indexName(newTable.name, index.columnNames, index.where);\n            upQueries.push(this.createIndexSql(newTable, index));\n            downQueries.push(this.dropIndexSql(index));\n        });\n\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(oldTable, newTable);\n    }\n\n}\n","import {EntitySchemaOptions} from \"./EntitySchemaOptions\";\n\n/**\n * Interface for entity metadata mappings stored inside \"schemas\" instead of models decorated by decorators.\n */\nexport class EntitySchema<T = any> {\n\n    constructor(public options: EntitySchemaOptions<T>) {\n    }\n\n}","import {Query} from \"./Query\";\n\n/**\n * This class stores up and down queries needed for migrations functionality.\n */\nexport class SqlInMemory {\n    upQueries: Query[] = [];\n    downQueries: Query[] = [];\n}\n","import {PostgresConnectionOptions} from \"../driver/postgres/PostgresConnectionOptions\";\nimport {Query} from \"../driver/Query\";\nimport {SqlInMemory} from \"../driver/SqlInMemory\";\nimport {SqlServerConnectionOptions} from \"../driver/sqlserver/SqlServerConnectionOptions\";\nimport {View} from \"../schema-builder/view/View\";\nimport {Connection} from \"../connection/Connection\";\nimport {Table} from \"../schema-builder/table/Table\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {TableColumn} from \"../schema-builder/table/TableColumn\";\nimport {Broadcaster} from \"../subscriber/Broadcaster\";\nimport {ReplicationMode} from \"../driver/types/ReplicationMode\";\n\nexport abstract class BaseQueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this query runner.\n     */\n    connection: Connection;\n\n    /**\n     * Entity manager working only with current query runner.\n     */\n    manager: EntityManager;\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    isReleased = false;\n\n    /**\n     * Indicates if transaction is in progress.\n     */\n    isTransactionActive = false;\n\n    /**\n     * Stores temporarily user data.\n     * Useful for sharing data with subscribers.\n     */\n    data = {};\n\n    /**\n     * All synchronized tables in the database.\n     */\n    loadedTables: Table[] = [];\n\n    /**\n     * All synchronized views in the database.\n     */\n    loadedViews: View[] = [];\n\n    /**\n     * Broadcaster used on this query runner to broadcast entity events.\n     */\n    broadcaster: Broadcaster;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Real database connection from a connection pool used to perform queries.\n     */\n    protected databaseConnection: any;\n\n    /**\n     * Indicates if special query runner mode in which sql queries won't be executed is enabled.\n     */\n    protected sqlMemoryMode: boolean = false;\n\n    /**\n     * Sql-s stored if \"sql in memory\" mode is enabled.\n     */\n    protected sqlInMemory: SqlInMemory = new SqlInMemory();\n\n    /**\n     * Mode in which query runner executes.\n     * Used for replication.\n     * If replication is not setup its value is ignored.\n     */\n    protected mode: ReplicationMode;\n\n    // -------------------------------------------------------------------------\n    // Public Abstract Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes a given SQL query.\n     */\n    abstract query(query: string, parameters?: any[]): Promise<any>;\n\n    // -------------------------------------------------------------------------\n    // Protected Abstract Methods\n    // -------------------------------------------------------------------------\n\n    protected abstract async loadTables(tablePaths: string[]): Promise<Table[]>;\n\n    protected abstract async loadViews(tablePaths: string[]): Promise<View[]>;\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async getTable(tablePath: string): Promise<Table|undefined> {\n        this.loadedTables = await this.loadTables([tablePath]);\n        return this.loadedTables.length > 0 ? this.loadedTables[0] : undefined;\n    }\n\n    /**\n     * Loads all tables (with given names) from the database.\n     */\n    async getTables(tableNames: string[]): Promise<Table[]> {\n        this.loadedTables = await this.loadTables(tableNames);\n        return this.loadedTables;\n    }\n\n    /**\n     * Loads given view's data from the database.\n     */\n    async getView(viewPath: string): Promise<View|undefined> {\n        this.loadedViews = await this.loadViews([viewPath]);\n        return this.loadedViews.length > 0 ? this.loadedViews[0] : undefined;\n    }\n\n    /**\n     * Loads given view's data from the database.\n     */\n    async getViews(viewPaths: string[]): Promise<View[]> {\n        this.loadedViews = await this.loadViews(viewPaths);\n        return this.loadedViews;\n    }\n\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    enableSqlMemory(): void {\n        this.sqlInMemory = new SqlInMemory();\n        this.sqlMemoryMode = true;\n    }\n\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    disableSqlMemory(): void {\n        this.sqlInMemory = new SqlInMemory();\n        this.sqlMemoryMode = false;\n    }\n\n    /**\n     * Flushes all memorized sqls.\n     */\n    clearSqlMemory(): void {\n        this.sqlInMemory = new SqlInMemory();\n    }\n\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    getMemorySql(): SqlInMemory {\n        return this.sqlInMemory;\n    }\n\n    /**\n     * Executes up sql queries.\n     */\n    async executeMemoryUpSql(): Promise<void> {\n        for (const {query, parameters} of this.sqlInMemory.upQueries) {\n            await this.query(query, parameters);\n        }\n    }\n\n    /**\n     * Executes down sql queries.\n     */\n    async executeMemoryDownSql(): Promise<void> {\n        for (const {query, parameters} of this.sqlInMemory.downQueries.reverse()) {\n            await this.query(query, parameters);\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets view from previously loaded views, otherwise loads it from database.\n     */\n    protected async getCachedView(viewName: string): Promise<View> {\n        const view = this.loadedViews.find(view => view.name === viewName);\n        if (view) return view;\n\n        const foundViews = await this.loadViews([viewName]);\n        if (foundViews.length > 0) {\n            this.loadedViews.push(foundViews[0]);\n            return foundViews[0];\n        } else {\n            throw new Error(`View \"${viewName}\" does not exist.`);\n        }\n    }\n\n    /**\n     * Gets table from previously loaded tables, otherwise loads it from database.\n     */\n    protected async getCachedTable(tableName: string): Promise<Table> {\n        const table = this.loadedTables.find(table => table.name === tableName);\n        if (table) return table;\n\n        const foundTables = await this.loadTables([tableName]);\n        if (foundTables.length > 0) {\n            this.loadedTables.push(foundTables[0]);\n            return foundTables[0];\n        } else {\n            throw new Error(`Table \"${tableName}\" does not exist.`);\n        }\n    }\n\n    /**\n     * Replaces loaded table with given changed table.\n     */\n    protected replaceCachedTable(table: Table, changedTable: Table): void {\n        const foundTable = this.loadedTables.find(loadedTable => loadedTable.name === table.name);\n        if (foundTable) {\n            foundTable.name = changedTable.name;\n            foundTable.columns = changedTable.columns;\n            foundTable.indices = changedTable.indices;\n            foundTable.foreignKeys = changedTable.foreignKeys;\n            foundTable.uniques = changedTable.uniques;\n            foundTable.checks = changedTable.checks;\n            foundTable.justCreated = changedTable.justCreated;\n            foundTable.engine = changedTable.engine;\n        }\n    }\n\n    protected getTypeormMetadataTableName(): string {\n        const options = <SqlServerConnectionOptions|PostgresConnectionOptions>this.connection.driver.options;\n        return this.connection.driver.buildTableName(\"typeorm_metadata\", options.schema, options.database);\n    }\n\n    /**\n     * Checks if at least one of column properties was changed.\n     * Does not checks column type, length and autoincrement, because these properties changes separately.\n     */\n    protected isColumnChanged(oldColumn: TableColumn, newColumn: TableColumn, checkDefault?: boolean, checkComment?: boolean): boolean {\n        // this logs need to debug issues in column change detection. Do not delete it!\n\n        // console.log(\"charset ---------------\");\n        // console.log(oldColumn.charset !== newColumn.charset);\n        // console.log(oldColumn.charset, newColumn.charset);\n        // console.log(\"collation ---------------\");\n        // console.log(oldColumn.collation !== newColumn.collation);\n        // console.log(oldColumn.collation, newColumn.collation);\n        // console.log(\"precision ---------------\");\n        // console.log(oldColumn.precision !== newColumn.precision);\n        // console.log(oldColumn.precision, newColumn.precision);\n        // console.log(\"scale ---------------\");\n        // console.log(oldColumn.scale !== newColumn.scale);\n        // console.log(oldColumn.scale, newColumn.scale);\n        // console.log(\"default ---------------\");\n        // console.log((checkDefault && oldColumn.default !== newColumn.default));\n        // console.log(oldColumn.default, newColumn.default);\n        // console.log(\"isNullable ---------------\");\n        // console.log(oldColumn.isNullable !== newColumn.isNullable);\n        // console.log(oldColumn.isNullable, newColumn.isNullable);\n        // console.log(\"comment ---------------\");\n        // console.log((checkComment && oldColumn.comment !== newColumn.comment));\n        // console.log(oldColumn.comment, newColumn.comment);\n        // console.log(\"enum ---------------\");\n        // console.log(oldColumn.enum !== newColumn.enum);\n        // console.log(oldColumn.enum, newColumn.enum);\n\n        return oldColumn.charset !== newColumn.charset\n            || oldColumn.collation !== newColumn.collation\n            || oldColumn.precision !== newColumn.precision\n            || oldColumn.scale !== newColumn.scale\n            || oldColumn.width !== newColumn.width // MySQL only\n            || oldColumn.zerofill !== newColumn.zerofill // MySQL only\n            || oldColumn.unsigned !== newColumn.unsigned // MySQL only\n            || oldColumn.asExpression !== newColumn.asExpression // MySQL only\n            || (checkDefault && oldColumn.default !== newColumn.default)\n            || oldColumn.onUpdate !== newColumn.onUpdate // MySQL only\n            || oldColumn.isNullable !== newColumn.isNullable\n            || (checkComment && oldColumn.comment !== newColumn.comment)\n            || oldColumn.enum !== newColumn.enum;\n    }\n\n    /**\n     * Checks if column length is by default.\n     */\n    protected isDefaultColumnLength(table: Table, column: TableColumn, length: string): boolean {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name);\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata && columnMetadata.length)\n                return false;\n        }\n\n        if (this.connection.driver.dataTypeDefaults\n            && this.connection.driver.dataTypeDefaults[column.type]\n            && this.connection.driver.dataTypeDefaults[column.type].length) {\n            return this.connection.driver.dataTypeDefaults[column.type].length!.toString() === length.toString();\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks if column precision is by default.\n     */\n    protected isDefaultColumnPrecision(table: Table, column: TableColumn, precision: number): boolean {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name);\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata && columnMetadata.precision !== null && columnMetadata.precision !== undefined)\n                return false;\n        }\n\n        if (this.connection.driver.dataTypeDefaults\n            && this.connection.driver.dataTypeDefaults[column.type]\n            && this.connection.driver.dataTypeDefaults[column.type].precision !== null\n            && this.connection.driver.dataTypeDefaults[column.type].precision !== undefined)\n            return this.connection.driver.dataTypeDefaults[column.type].precision === precision;\n\n        return false;\n    }\n\n    /**\n     * Checks if column scale is by default.\n     */\n    protected isDefaultColumnScale(table: Table, column: TableColumn, scale: number): boolean {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name);\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata && columnMetadata.scale !== null && columnMetadata.scale !== undefined)\n                return false;\n        }\n\n        if (this.connection.driver.dataTypeDefaults\n            && this.connection.driver.dataTypeDefaults[column.type]\n            && this.connection.driver.dataTypeDefaults[column.type].scale !== null\n            && this.connection.driver.dataTypeDefaults[column.type].scale !== undefined)\n            return this.connection.driver.dataTypeDefaults[column.type].scale === scale;\n\n        return false;\n    }\n\n    /**\n     * Executes sql used special for schema build.\n     */\n    protected async executeQueries(upQueries: Query|Query[], downQueries: Query|Query[]): Promise<void> {\n        if (upQueries instanceof Query)\n            upQueries = [upQueries];\n        if (downQueries instanceof Query)\n            downQueries = [downQueries];\n\n        this.sqlInMemory.upQueries.push(...upQueries);\n        this.sqlInMemory.downQueries.push(...downQueries);\n\n        // if sql-in-memory mode is enabled then simply store sql in memory and return\n        if (this.sqlMemoryMode === true)\n            return Promise.resolve() as Promise<any>;\n\n        for (const {query, parameters} of upQueries) {\n            await this.query(query, parameters);\n        }\n    }\n\n}\n","/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n","import {CockroachDriver} from \"../driver/cockroachdb/CockroachDriver\";\nimport {PostgresConnectionOptions} from \"../driver/postgres/PostgresConnectionOptions\";\nimport {SapDriver} from \"../driver/sap/SapDriver\";\nimport {SqlServerConnectionOptions} from \"../driver/sqlserver/SqlServerConnectionOptions\";\nimport {Table} from \"./table/Table\";\nimport {TableColumn} from \"./table/TableColumn\";\nimport {TableForeignKey} from \"./table/TableForeignKey\";\nimport {TableIndex} from \"./table/TableIndex\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {SchemaBuilder} from \"./SchemaBuilder\";\nimport {SqlInMemory} from \"../driver/SqlInMemory\";\nimport {TableUtils} from \"./util/TableUtils\";\nimport {TableColumnOptions} from \"./options/TableColumnOptions\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {TableUnique} from \"./table/TableUnique\";\nimport {TableCheck} from \"./table/TableCheck\";\nimport {TableExclusion} from \"./table/TableExclusion\";\nimport {View} from \"./view/View\";\nimport {AuroraDataApiDriver} from \"../driver/aurora-data-api/AuroraDataApiDriver\";\nimport { ForeignKeyMetadata } from \"../metadata/ForeignKeyMetadata\";\n\n/**\n * Creates complete tables schemas in the database based on the entity metadatas.\n *\n * Steps how schema is being built:\n * 1. load list of all tables with complete column and keys information from the db\n * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata\n * 3. create new tables that does not exist in the db, but exist in the metadata\n * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata\n * 5. add columns from metadata which does not exist in the table\n * 6. update all exist columns which metadata has changed\n * 7. update primary keys - update old and create new primary key from changed columns\n * 8. create foreign keys which does not exist in the table yet\n * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore\n */\nexport class RdbmsSchemaBuilder implements SchemaBuilder {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Used to execute schema creation queries in a single connection.\n     */\n    protected queryRunner: QueryRunner;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates complete schemas for the given entity metadatas.\n     */\n    async build(): Promise<void> {\n        this.queryRunner = this.connection.createQueryRunner();\n        // CockroachDB implements asynchronous schema sync operations which can not been executed in transaction.\n        // E.g. if you try to DROP column and ADD it again in the same transaction, crdb throws error.\n        if (!(this.connection.driver instanceof CockroachDriver))\n            await this.queryRunner.startTransaction();\n        try {\n            const tablePaths = this.entityToSyncMetadatas.map(metadata => metadata.tablePath);\n            // TODO: typeorm_metadata table needs only for Views for now.\n            //  Remove condition or add new conditions if necessary (for CHECK constraints for example).\n            if (this.viewEntityToSyncMetadatas.length > 0)\n                await this.createTypeormMetadataTable();\n            await this.queryRunner.getTables(tablePaths);\n            await this.queryRunner.getViews([]);\n            await this.executeSchemaSyncOperationsInProperOrder();\n\n            // if cache is enabled then perform cache-synchronization as well\n            if (this.connection.queryResultCache)\n                await this.connection.queryResultCache.synchronize(this.queryRunner);\n\n            if (!(this.connection.driver instanceof CockroachDriver))\n                await this.queryRunner.commitTransaction();\n\n        } catch (error) {\n\n            try { // we throw original error even if rollback thrown an error\n                if (!(this.connection.driver instanceof CockroachDriver))\n                    await this.queryRunner.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n\n        } finally {\n            await this.queryRunner.release();\n        }\n    }\n\n    /**\n     * Returns sql queries to be executed by schema builder.\n     */\n    async log(): Promise<SqlInMemory> {\n        this.queryRunner = this.connection.createQueryRunner();\n        try {\n            const tablePaths = this.entityToSyncMetadatas.map(metadata => metadata.tablePath);\n            // TODO: typeorm_metadata table needs only for Views for now.\n            //  Remove condition or add new conditions if necessary (for CHECK constraints for example).\n            if (this.viewEntityToSyncMetadatas.length > 0)\n                await this.createTypeormMetadataTable();\n            await this.queryRunner.getTables(tablePaths);\n            await this.queryRunner.getViews([]);\n            this.queryRunner.enableSqlMemory();\n            await this.executeSchemaSyncOperationsInProperOrder();\n\n            // if cache is enabled then perform cache-synchronization as well\n            if (this.connection.queryResultCache) // todo: check this functionality\n                await this.connection.queryResultCache.synchronize(this.queryRunner);\n\n            return this.queryRunner.getMemorySql();\n\n        } finally {\n            // its important to disable this mode despite the fact we are release query builder\n            // because there exist drivers which reuse same query runner. Also its important to disable\n            // sql memory after call of getMemorySql() method because last one flushes sql memory.\n            this.queryRunner.disableSqlMemory();\n            await this.queryRunner.release();\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Returns only entities that should be synced in the database.\n     */\n    protected get entityToSyncMetadatas(): EntityMetadata[] {\n        return this.connection.entityMetadatas.filter(metadata => metadata.synchronize && metadata.tableType !== \"entity-child\" && metadata.tableType !== \"view\");\n    }\n\n    /**\n     * Returns only entities that should be synced in the database.\n     */\n    protected get viewEntityToSyncMetadatas(): EntityMetadata[] {\n        return this.connection.entityMetadatas.filter(metadata => metadata.tableType === \"view\" && metadata.synchronize);\n    }\n\n    /**\n     * Executes schema sync operations in a proper order.\n     * Order of operations matter here.\n     */\n    protected async executeSchemaSyncOperationsInProperOrder(): Promise<void> {\n        await this.dropOldViews();\n        await this.dropOldForeignKeys();\n        await this.dropOldIndices();\n        await this.dropOldChecks();\n        await this.dropOldExclusions();\n        await this.dropCompositeUniqueConstraints();\n        // await this.renameTables();\n        await this.renameColumns();\n        await this.createNewTables();\n        await this.dropRemovedColumns();\n        await this.addNewColumns();\n        await this.updatePrimaryKeys();\n        await this.updateExistColumns();\n        await this.createNewIndices();\n        await this.createNewChecks();\n        await this.createNewExclusions();\n        await this.createCompositeUniqueConstraints();\n        await this.createForeignKeys();\n        await this.createViews();\n    }\n\n    /**\n     * Drops all (old) foreign keys that exist in the tables, but do not exist in the entity metadata.\n     */\n    protected async dropOldForeignKeys(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            // find foreign keys that exist in the schemas but does not exist in the entity metadata\n            const tableForeignKeysToDrop = table.foreignKeys.filter(tableForeignKey => {\n                const metadataFK = metadata.foreignKeys.find(metadataForeignKey => foreignKeysMatch(tableForeignKey, metadataForeignKey));\n                return !metadataFK\n                    || (metadataFK.onDelete && metadataFK.onDelete !== tableForeignKey.onDelete)\n                    || (metadataFK.onUpdate && metadataFK.onUpdate !== tableForeignKey.onUpdate);\n            });\n            if (tableForeignKeysToDrop.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`dropping old foreign keys of ${table.name}: ${tableForeignKeysToDrop.map(dbForeignKey => dbForeignKey.name).join(\", \")}`);\n\n            // drop foreign keys from the database\n            await this.queryRunner.dropForeignKeys(table, tableForeignKeysToDrop);\n        }\n    }\n\n    /**\n     * Rename tables\n     */\n    protected async renameTables(): Promise<void> {\n        // for (const metadata of this.entityToSyncMetadatas) {\n        //     const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n        // }\n    }\n\n    /**\n     * Renames columns.\n     * Works if only one column per table was changed.\n     * Changes only column name. If something besides name was changed, these changes will be ignored.\n     */\n    protected async renameColumns(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            if (metadata.columns.length !== table.columns.length)\n                continue;\n\n            const renamedMetadataColumns = metadata.columns.filter(column => {\n                return !table.columns.find(tableColumn => {\n                    return tableColumn.name === column.databaseName\n                        && tableColumn.type === this.connection.driver.normalizeType(column)\n                        && tableColumn.isNullable === column.isNullable\n                        && tableColumn.isUnique === this.connection.driver.normalizeIsUnique(column);\n                });\n            });\n\n            if (renamedMetadataColumns.length === 0 || renamedMetadataColumns.length > 1)\n                continue;\n\n            const renamedTableColumns = table.columns.filter(tableColumn => {\n                return !metadata.columns.find(column => {\n                    return column.databaseName === tableColumn.name\n                        && this.connection.driver.normalizeType(column) === tableColumn.type\n                        && column.isNullable === tableColumn.isNullable\n                        && this.connection.driver.normalizeIsUnique(column) === tableColumn.isUnique;\n                });\n            });\n\n            if (renamedTableColumns.length === 0 || renamedTableColumns.length > 1)\n                continue;\n\n            const renamedColumn = renamedTableColumns[0].clone();\n            renamedColumn.name = renamedMetadataColumns[0].databaseName;\n\n            this.connection.logger.logSchemaBuild(`renaming column \"${renamedTableColumns[0].name}\" in to \"${renamedColumn.name}\"`);\n            await this.queryRunner.renameColumn(table, renamedTableColumns[0], renamedColumn);\n        }\n    }\n\n    protected async dropOldIndices(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const dropQueries = table.indices\n                .filter(tableIndex => {\n                    const indexMetadata = metadata.indices.find(index => index.name === tableIndex.name);\n                    if (indexMetadata) {\n                        if (indexMetadata.synchronize === false)\n                            return false;\n\n                        if (indexMetadata.isUnique !== tableIndex.isUnique)\n                            return true;\n\n                        if (indexMetadata.isSpatial !== tableIndex.isSpatial)\n                            return true;\n\n                        if (this.connection.driver.isFullTextColumnTypeSupported() && indexMetadata.isFulltext !== tableIndex.isFulltext)\n                            return true;\n\n                        if (indexMetadata.columns.length !== tableIndex.columnNames.length)\n                            return true;\n\n                        return !indexMetadata.columns.every(column => tableIndex.columnNames.indexOf(column.databaseName) !== -1);\n                    }\n\n                    return true;\n                })\n                .map(async tableIndex => {\n                    this.connection.logger.logSchemaBuild(`dropping an index: \"${tableIndex.name}\" from table ${table.name}`);\n                    await this.queryRunner.dropIndex(table, tableIndex);\n                });\n\n            await Promise.all(dropQueries);\n        }\n    }\n\n    protected async dropOldChecks(): Promise<void> {\n        // Mysql does not support check constraints\n        if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver)\n            return;\n\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const oldChecks = table.checks.filter(tableCheck => {\n                return !metadata.checks.find(checkMetadata => checkMetadata.name === tableCheck.name);\n            });\n\n            if (oldChecks.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`dropping old check constraint: ${oldChecks.map(check => `\"${check.name}\"`).join(\", \")} from table \"${table.name}\"`);\n            await this.queryRunner.dropCheckConstraints(table, oldChecks);\n        }\n    }\n\n    protected async dropCompositeUniqueConstraints(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const compositeUniques = table.uniques.filter(tableUnique => {\n                return tableUnique.columnNames.length > 1 && !metadata.uniques.find(uniqueMetadata => uniqueMetadata.name === tableUnique.name);\n            });\n\n            if (compositeUniques.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`dropping old unique constraint: ${compositeUniques.map(unique => `\"${unique.name}\"`).join(\", \")} from table \"${table.name}\"`);\n            await this.queryRunner.dropUniqueConstraints(table, compositeUniques);\n        }\n    }\n\n    protected async dropOldExclusions(): Promise<void> {\n        // Only PostgreSQL supports exclusion constraints\n        if (!(this.connection.driver instanceof PostgresDriver))\n            return;\n\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const oldExclusions = table.exclusions.filter(tableExclusion => {\n                return !metadata.exclusions.find(exclusionMetadata => exclusionMetadata.name === tableExclusion.name);\n            });\n\n            if (oldExclusions.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`dropping old exclusion constraint: ${oldExclusions.map(exclusion => `\"${exclusion.name}\"`).join(\", \")} from table \"${table.name}\"`);\n            await this.queryRunner.dropExclusionConstraints(table, oldExclusions);\n        }\n    }\n\n    /**\n     * Creates tables that do not exist in the database yet.\n     * New tables are created without foreign and primary keys.\n     * Primary key only can be created in conclusion with auto generated column.\n     */\n    protected async createNewTables(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            // check if table does not exist yet\n            const existTable = this.queryRunner.loadedTables.find(table => {\n                const database = metadata.database && metadata.database !== this.connection.driver.database ? metadata.database : undefined;\n                const schema = metadata.schema || (<SqlServerDriver|PostgresDriver|SapDriver>this.connection.driver).options.schema;\n                const fullTableName = this.connection.driver.buildTableName(metadata.tableName, schema, database);\n\n                return table.name === fullTableName;\n            });\n            if (existTable)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`creating a new table: ${metadata.tablePath}`);\n\n            // create a new table and sync it in the database\n            const table = Table.create(metadata, this.connection.driver);\n            await this.queryRunner.createTable(table, false, false);\n            this.queryRunner.loadedTables.push(table);\n        }\n    }\n\n    protected async createViews(): Promise<void> {\n        for (const metadata of this.viewEntityToSyncMetadatas) {\n            // check if view does not exist yet\n            const existView = this.queryRunner.loadedViews.find(view => {\n                const database = metadata.database && metadata.database !== this.connection.driver.database ? metadata.database : undefined;\n                const schema = metadata.schema || (<SqlServerDriver|PostgresDriver>this.connection.driver).options.schema;\n                const fullViewName = this.connection.driver.buildTableName(metadata.tableName, schema, database);\n                const viewExpression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n                const metadataExpression = typeof metadata.expression === \"string\" ? metadata.expression.trim() : metadata.expression!(this.connection).getQuery();\n                return view.name === fullViewName && viewExpression === metadataExpression;\n            });\n            if (existView)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`creating a new view: ${metadata.tablePath}`);\n\n            // create a new view and sync it in the database\n            const view = View.create(metadata, this.connection.driver);\n            await this.queryRunner.createView(view);\n            this.queryRunner.loadedViews.push(view);\n        }\n    }\n\n    protected async dropOldViews(): Promise<void> {\n        for (const view of this.queryRunner.loadedViews) {\n            const existViewMetadata = this.viewEntityToSyncMetadatas.find(metadata => {\n                const database = metadata.database && metadata.database !== this.connection.driver.database ? metadata.database : undefined;\n                const schema = metadata.schema || (<SqlServerDriver|PostgresDriver>this.connection.driver).options.schema;\n                const fullViewName = this.connection.driver.buildTableName(metadata.tableName, schema, database);\n                const viewExpression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n                const metadataExpression = typeof metadata.expression === \"string\" ? metadata.expression.trim() : metadata.expression!(this.connection).getQuery();\n                return view.name === fullViewName && viewExpression === metadataExpression;\n            });\n\n            if (existViewMetadata)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`dropping an old view: ${view.name}`);\n\n            // drop an old view\n            await this.queryRunner.dropView(view);\n            this.queryRunner.loadedViews.splice(this.queryRunner.loadedViews.indexOf(view), 1);\n        }\n    }\n\n    /**\n     * Drops all columns that exist in the table, but does not exist in the metadata (left old).\n     * We drop their keys too, since it should be safe.\n     */\n    protected async dropRemovedColumns(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            // find columns that exist in the database but does not exist in the metadata\n            const droppedTableColumns = table.columns.filter(tableColumn => {\n                return !metadata.columns.find(columnMetadata => columnMetadata.databaseName === tableColumn.name);\n            });\n            if (droppedTableColumns.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`columns dropped in ${table.name}: ` + droppedTableColumns.map(column => column.name).join(\", \"));\n\n            // drop columns from the database\n            await this.queryRunner.dropColumns(table, droppedTableColumns);\n        }\n    }\n\n    /**\n     * Adds columns from metadata which does not exist in the table.\n     * Columns are created without keys.\n     */\n    protected async addNewColumns(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            // find which columns are new\n            const newColumnMetadatas = metadata.columns.filter(columnMetadata => {\n                return !table.columns.find(tableColumn => tableColumn.name === columnMetadata.databaseName);\n            });\n            if (newColumnMetadatas.length === 0)\n                continue;\n\n            // create columns in the database\n            const newTableColumnOptions = this.metadataColumnsToTableColumnOptions(newColumnMetadatas);\n            const newTableColumns = newTableColumnOptions.map(option => new TableColumn(option));\n\n            if (newTableColumns.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`new columns added: ` + newColumnMetadatas.map(column => column.databaseName).join(\", \"));\n            await this.queryRunner.addColumns(table, newTableColumns);\n        }\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    protected async updatePrimaryKeys(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const primaryMetadataColumns = metadata.columns.filter(column => column.isPrimary);\n            const primaryTableColumns = table.columns.filter(column => column.isPrimary);\n            if (primaryTableColumns.length !== primaryMetadataColumns.length && primaryMetadataColumns.length > 1) {\n                const changedPrimaryColumns = primaryMetadataColumns.map(primaryMetadataColumn => {\n                    return new TableColumn(TableUtils.createTableColumnOptions(primaryMetadataColumn, this.connection.driver));\n                });\n                await this.queryRunner.updatePrimaryKeys(table, changedPrimaryColumns);\n            }\n        }\n    }\n\n    /**\n     * Update all exist columns which metadata has changed.\n     * Still don't create keys. Also we don't touch foreign keys of the changed columns.\n     */\n    protected async updateExistColumns(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const changedColumns = this.connection.driver.findChangedColumns(table.columns, metadata.columns);\n            if (changedColumns.length === 0)\n                continue;\n\n            // drop all foreign keys that point to this column\n            for (const changedColumn of changedColumns) {\n                await this.dropColumnReferencedForeignKeys(metadata.tablePath, changedColumn.databaseName);\n            }\n\n            // drop all composite indices related to this column\n            for (const changedColumn of changedColumns) {\n                await this.dropColumnCompositeIndices(metadata.tablePath, changedColumn.databaseName);\n            }\n\n            // drop all composite uniques related to this column\n            // Mysql does not support unique constraints.\n            if (!(this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver)) {\n                for (const changedColumn of changedColumns) {\n                    await this.dropColumnCompositeUniques(metadata.tablePath, changedColumn.databaseName);\n                }\n            }\n\n            // generate a map of new/old columns\n            const newAndOldTableColumns = changedColumns.map(changedColumn => {\n                const oldTableColumn = table.columns.find(column => column.name === changedColumn.databaseName)!;\n                const newTableColumnOptions = TableUtils.createTableColumnOptions(changedColumn, this.connection.driver);\n                const newTableColumn = new TableColumn(newTableColumnOptions);\n\n                return {\n                    oldColumn: oldTableColumn,\n                    newColumn: newTableColumn\n                };\n            });\n\n            if (newAndOldTableColumns.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`columns changed in \"${table.name}\". updating: ` + changedColumns.map(column => column.databaseName).join(\", \"));\n            await this.queryRunner.changeColumns(table, newAndOldTableColumns);\n        }\n    }\n\n    /**\n     * Creates composite indices which are missing in db yet.\n     */\n    protected async createNewIndices(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const newIndices = metadata.indices\n                .filter(indexMetadata => !table.indices.find(tableIndex => tableIndex.name === indexMetadata.name) && indexMetadata.synchronize === true)\n                .map(indexMetadata => TableIndex.create(indexMetadata));\n\n            if (newIndices.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`adding new indices ${newIndices.map(index => `\"${index.name}\"`).join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createIndices(table, newIndices);\n        }\n    }\n\n    protected async createNewChecks(): Promise<void> {\n        // Mysql does not support check constraints\n        if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver)\n            return;\n\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const newChecks = metadata.checks\n                .filter(checkMetadata => !table.checks.find(tableCheck => tableCheck.name === checkMetadata.name))\n                .map(checkMetadata => TableCheck.create(checkMetadata));\n\n            if (newChecks.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`adding new check constraints: ${newChecks.map(index => `\"${index.name}\"`).join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createCheckConstraints(table, newChecks);\n        }\n    }\n\n    /**\n     * Creates composite uniques which are missing in db yet.\n     */\n    protected async createCompositeUniqueConstraints(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const compositeUniques = metadata.uniques\n                .filter(uniqueMetadata => uniqueMetadata.columns.length > 1 && !table.uniques.find(tableUnique => tableUnique.name === uniqueMetadata.name))\n                .map(uniqueMetadata => TableUnique.create(uniqueMetadata));\n\n            if (compositeUniques.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`adding new unique constraints: ${compositeUniques.map(unique => `\"${unique.name}\"`).join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createUniqueConstraints(table, compositeUniques);\n        }\n    }\n\n    /**\n     * Creates exclusions which are missing in db yet.\n     */\n    protected async createNewExclusions(): Promise<void> {\n        // Only PostgreSQL supports exclusion constraints\n        if (!(this.connection.driver instanceof PostgresDriver))\n            return;\n\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const newExclusions = metadata.exclusions\n            .filter(exclusionMetadata => !table.exclusions.find(tableExclusion => tableExclusion.name === exclusionMetadata.name))\n            .map(exclusionMetadata => TableExclusion.create(exclusionMetadata));\n\n            if (newExclusions.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`adding new exclusion constraints: ${newExclusions.map(exclusion => `\"${exclusion.name}\"`).join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createExclusionConstraints(table, newExclusions);\n        }\n    }\n\n    /**\n     * Creates foreign keys which does not exist in the table yet.\n     */\n    protected async createForeignKeys(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const newKeys = metadata.foreignKeys.filter(foreignKey => {\n                return !table.foreignKeys.find(dbForeignKey => foreignKeysMatch(dbForeignKey, foreignKey));\n            });\n            if (newKeys.length === 0)\n                continue;\n\n            const dbForeignKeys = newKeys.map(foreignKeyMetadata => TableForeignKey.create(foreignKeyMetadata));\n            this.connection.logger.logSchemaBuild(`creating a foreign keys: ${newKeys.map(key => key.name).join(\", \")} on table \"${table.name}\"`);\n            await this.queryRunner.createForeignKeys(table, dbForeignKeys);\n        }\n    }\n\n    /**\n     * Drops all foreign keys where given column of the given table is being used.\n     */\n    protected async dropColumnReferencedForeignKeys(tablePath: string, columnName: string): Promise<void> {\n        const table = this.queryRunner.loadedTables.find(table => table.name === tablePath);\n        if (!table)\n            return;\n\n        const tablesWithFK: Table[] = [];\n        const columnForeignKey = table.foreignKeys.find(foreignKey => foreignKey.columnNames.indexOf(columnName) !== -1);\n        if (columnForeignKey) {\n            const clonedTable = table.clone();\n            clonedTable.foreignKeys = [columnForeignKey];\n            tablesWithFK.push(clonedTable);\n            table.removeForeignKey(columnForeignKey);\n        }\n\n        this.queryRunner.loadedTables.forEach(loadedTable => {\n            const dependForeignKeys = loadedTable.foreignKeys.filter(foreignKey => {\n                return foreignKey.referencedTableName === tablePath && foreignKey.referencedColumnNames.indexOf(columnName) !== -1;\n            });\n\n            if (dependForeignKeys.length > 0) {\n                const clonedTable = loadedTable.clone();\n                clonedTable.foreignKeys = dependForeignKeys;\n                tablesWithFK.push(clonedTable);\n                dependForeignKeys.forEach(dependForeignKey => loadedTable.removeForeignKey(dependForeignKey));\n            }\n        });\n\n        if (tablesWithFK.length > 0) {\n            for (const tableWithFK of tablesWithFK) {\n                this.connection.logger.logSchemaBuild(`dropping related foreign keys of ${tableWithFK.name}: ${tableWithFK.foreignKeys.map(foreignKey => foreignKey.name).join(\", \")}`);\n                await this.queryRunner.dropForeignKeys(tableWithFK, tableWithFK.foreignKeys);\n            }\n        }\n    }\n\n    /**\n     * Drops all composite indices, related to given column.\n     */\n    protected async dropColumnCompositeIndices(tablePath: string, columnName: string): Promise<void> {\n        const table = this.queryRunner.loadedTables.find(table => table.name === tablePath);\n        if (!table)\n            return;\n\n        const relatedIndices = table.indices.filter(index => index.columnNames.length > 1 && index.columnNames.indexOf(columnName) !== -1);\n        if (relatedIndices.length === 0)\n            return;\n\n        this.connection.logger.logSchemaBuild(`dropping related indices of \"${tablePath}\".\"${columnName}\": ${relatedIndices.map(index => index.name).join(\", \")}`);\n        await this.queryRunner.dropIndices(table, relatedIndices);\n    }\n\n    /**\n     * Drops all composite uniques, related to given column.\n     */\n    protected async dropColumnCompositeUniques(tablePath: string, columnName: string): Promise<void> {\n        const table = this.queryRunner.loadedTables.find(table => table.name === tablePath);\n        if (!table)\n            return;\n\n        const relatedUniques = table.uniques.filter(unique => unique.columnNames.length > 1 && unique.columnNames.indexOf(columnName) !== -1);\n        if (relatedUniques.length === 0)\n            return;\n\n        this.connection.logger.logSchemaBuild(`dropping related unique constraints of \"${tablePath}\".\"${columnName}\": ${relatedUniques.map(unique => unique.name).join(\", \")}`);\n        await this.queryRunner.dropUniqueConstraints(table, relatedUniques);\n    }\n\n    /**\n     * Creates new columns from the given column metadatas.\n     */\n    protected metadataColumnsToTableColumnOptions(columns: ColumnMetadata[]): TableColumnOptions[] {\n        return columns.map(columnMetadata => TableUtils.createTableColumnOptions(columnMetadata, this.connection.driver));\n    }\n\n    /**\n     * Creates typeorm service table for storing user defined Views.\n     */\n    protected async createTypeormMetadataTable() {\n        const options = <SqlServerConnectionOptions|PostgresConnectionOptions>this.connection.driver.options;\n        const typeormMetadataTable = this.connection.driver.buildTableName(\"typeorm_metadata\", options.schema, options.database);\n\n        await this.queryRunner.createTable(new Table(\n            {\n                name: typeormMetadataTable,\n                columns: [\n                    {\n                        name: \"type\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataType}),\n                        isNullable: false\n                    },\n                    {\n                        name: \"database\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataDatabase}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"schema\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataSchema}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"table\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataTable}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"name\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataName}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"value\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataValue}),\n                        isNullable: true\n                    },\n                ]\n            },\n        ), true);\n    }\n\n}\n\nfunction foreignKeysMatch(\n    tableForeignKey: TableForeignKey, metadataForeignKey: ForeignKeyMetadata\n): boolean {\n    return (tableForeignKey.name === metadataForeignKey.name)\n        && (tableForeignKey.referencedTableName === metadataForeignKey.referencedTablePath);\n}\n","/**\n * Thrown when user tries to build a query with RETURNING / OUTPUT statement,\n * but used database does not support it.\n */\nexport class ReturningStatementNotSupportedError extends Error {\n    name = \"ReturningStatementNotSupportedError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, ReturningStatementNotSupportedError.prototype);\n        this.message = `OUTPUT or RETURNING clause only supported by Microsoft SQL Server or PostgreSQL databases.`;\n    }\n\n}","//! moment.js\n//! version : 2.29.1\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n\n;(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    global.moment = factory()\n}(this, (function () { 'use strict';\n\n    var hookCallback;\n\n    function hooks() {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback(callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return (\n            input instanceof Array ||\n            Object.prototype.toString.call(input) === '[object Array]'\n        );\n    }\n\n    function isObject(input) {\n        // IE8 will treat undefined and null as object if it wasn't for\n        // input != null\n        return (\n            input != null &&\n            Object.prototype.toString.call(input) === '[object Object]'\n        );\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function isObjectEmpty(obj) {\n        if (Object.getOwnPropertyNames) {\n            return Object.getOwnPropertyNames(obj).length === 0;\n        } else {\n            var k;\n            for (k in obj) {\n                if (hasOwnProp(obj, k)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    function isUndefined(input) {\n        return input === void 0;\n    }\n\n    function isNumber(input) {\n        return (\n            typeof input === 'number' ||\n            Object.prototype.toString.call(input) === '[object Number]'\n        );\n    }\n\n    function isDate(input) {\n        return (\n            input instanceof Date ||\n            Object.prototype.toString.call(input) === '[object Date]'\n        );\n    }\n\n    function map(arr, fn) {\n        var res = [],\n            i;\n        for (i = 0; i < arr.length; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, 'toString')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, 'valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function createUTC(input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty: false,\n            unusedTokens: [],\n            unusedInput: [],\n            overflow: -2,\n            charsLeftOver: 0,\n            nullInput: false,\n            invalidEra: null,\n            invalidMonth: null,\n            invalidFormat: false,\n            userInvalidated: false,\n            iso: false,\n            parsedDateParts: [],\n            era: null,\n            meridiem: null,\n            rfc2822: false,\n            weekdayMismatch: false,\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function (fun) {\n            var t = Object(this),\n                len = t.length >>> 0,\n                i;\n\n            for (i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    function isValid(m) {\n        if (m._isValid == null) {\n            var flags = getParsingFlags(m),\n                parsedParts = some.call(flags.parsedDateParts, function (i) {\n                    return i != null;\n                }),\n                isNowValid =\n                    !isNaN(m._d.getTime()) &&\n                    flags.overflow < 0 &&\n                    !flags.empty &&\n                    !flags.invalidEra &&\n                    !flags.invalidMonth &&\n                    !flags.invalidWeekday &&\n                    !flags.weekdayMismatch &&\n                    !flags.nullInput &&\n                    !flags.invalidFormat &&\n                    !flags.userInvalidated &&\n                    (!flags.meridiem || (flags.meridiem && parsedParts));\n\n            if (m._strict) {\n                isNowValid =\n                    isNowValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n\n            if (Object.isFrozen == null || !Object.isFrozen(m)) {\n                m._isValid = isNowValid;\n            } else {\n                return isNowValid;\n            }\n        }\n        return m._isValid;\n    }\n\n    function createInvalid(flags) {\n        var m = createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        } else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = (hooks.momentProperties = []),\n        updateInProgress = false;\n\n    function copyConfig(to, from) {\n        var i, prop, val;\n\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n\n        if (momentProperties.length > 0) {\n            for (i = 0; i < momentProperties.length; i++) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        if (!this.isValid()) {\n            this._d = new Date(NaN);\n        }\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment(obj) {\n        return (\n            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)\n        );\n    }\n\n    function warn(msg) {\n        if (\n            hooks.suppressDeprecationWarnings === false &&\n            typeof console !== 'undefined' &&\n            console.warn\n        ) {\n            console.warn('Deprecation warning: ' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n\n        return extend(function () {\n            if (hooks.deprecationHandler != null) {\n                hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                var args = [],\n                    arg,\n                    i,\n                    key;\n                for (i = 0; i < arguments.length; i++) {\n                    arg = '';\n                    if (typeof arguments[i] === 'object') {\n                        arg += '\\n[' + i + '] ';\n                        for (key in arguments[0]) {\n                            if (hasOwnProp(arguments[0], key)) {\n                                arg += key + ': ' + arguments[0][key] + ', ';\n                            }\n                        }\n                        arg = arg.slice(0, -2); // Remove trailing comma and space\n                    } else {\n                        arg = arguments[i];\n                    }\n                    args.push(arg);\n                }\n                warn(\n                    msg +\n                        '\\nArguments: ' +\n                        Array.prototype.slice.call(args).join('') +\n                        '\\n' +\n                        new Error().stack\n                );\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (hooks.deprecationHandler != null) {\n            hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    hooks.suppressDeprecationWarnings = false;\n    hooks.deprecationHandler = null;\n\n    function isFunction(input) {\n        return (\n            (typeof Function !== 'undefined' && input instanceof Function) ||\n            Object.prototype.toString.call(input) === '[object Function]'\n        );\n    }\n\n    function set(config) {\n        var prop, i;\n        for (i in config) {\n            if (hasOwnProp(config, i)) {\n                prop = config[i];\n                if (isFunction(prop)) {\n                    this[i] = prop;\n                } else {\n                    this['_' + i] = prop;\n                }\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        this._dayOfMonthOrdinalParseLenient = new RegExp(\n            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +\n                '|' +\n                /\\d{1,2}/.source\n        );\n    }\n\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig),\n            prop;\n        for (prop in childConfig) {\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for (prop in parentConfig) {\n            if (\n                hasOwnProp(parentConfig, prop) &&\n                !hasOwnProp(childConfig, prop) &&\n                isObject(parentConfig[prop])\n            ) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n\n    var keys;\n\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function (obj) {\n            var i,\n                res = [];\n            for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n\n    var defaultCalendar = {\n        sameDay: '[Today at] LT',\n        nextDay: '[Tomorrow at] LT',\n        nextWeek: 'dddd [at] LT',\n        lastDay: '[Yesterday at] LT',\n        lastWeek: '[Last] dddd [at] LT',\n        sameElse: 'L',\n    };\n\n    function calendar(key, mom, now) {\n        var output = this._calendar[key] || this._calendar['sameElse'];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = '' + Math.abs(number),\n            zerosToFill = targetLength - absNumber.length,\n            sign = number >= 0;\n        return (\n            (sign ? (forceSign ? '+' : '') : '-') +\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +\n            absNumber\n        );\n    }\n\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,\n        localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g,\n        formatFunctions = {},\n        formatTokenFunctions = {};\n\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken(token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === 'string') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(\n                    func.apply(this, arguments),\n                    token\n                );\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens),\n            i,\n            length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '',\n                i;\n            for (i = 0; i < length; i++) {\n                output += isFunction(array[i])\n                    ? array[i].call(mom, format)\n                    : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] =\n            formatFunctions[format] || makeFormatFunction(format);\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(\n                localFormattingTokens,\n                replaceLongDateFormatTokens\n            );\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var defaultLongDateFormat = {\n        LTS: 'h:mm:ss A',\n        LT: 'h:mm A',\n        L: 'MM/DD/YYYY',\n        LL: 'MMMM D, YYYY',\n        LLL: 'MMMM D, YYYY h:mm A',\n        LLLL: 'dddd, MMMM D, YYYY h:mm A',\n    };\n\n    function longDateFormat(key) {\n        var format = this._longDateFormat[key],\n            formatUpper = this._longDateFormat[key.toUpperCase()];\n\n        if (format || !formatUpper) {\n            return format;\n        }\n\n        this._longDateFormat[key] = formatUpper\n            .match(formattingTokens)\n            .map(function (tok) {\n                if (\n                    tok === 'MMMM' ||\n                    tok === 'MM' ||\n                    tok === 'DD' ||\n                    tok === 'dddd'\n                ) {\n                    return tok.slice(1);\n                }\n                return tok;\n            })\n            .join('');\n\n        return this._longDateFormat[key];\n    }\n\n    var defaultInvalidDate = 'Invalid date';\n\n    function invalidDate() {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = '%d',\n        defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\n\n    function ordinal(number) {\n        return this._ordinal.replace('%d', number);\n    }\n\n    var defaultRelativeTime = {\n        future: 'in %s',\n        past: '%s ago',\n        s: 'a few seconds',\n        ss: '%d seconds',\n        m: 'a minute',\n        mm: '%d minutes',\n        h: 'an hour',\n        hh: '%d hours',\n        d: 'a day',\n        dd: '%d days',\n        w: 'a week',\n        ww: '%d weeks',\n        M: 'a month',\n        MM: '%d months',\n        y: 'a year',\n        yy: '%d years',\n    };\n\n    function relativeTime(number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return isFunction(output)\n            ? output(number, withoutSuffix, string, isFuture)\n            : output.replace(/%d/i, number);\n    }\n\n    function pastFuture(diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n\n    var aliases = {};\n\n    function addUnitAlias(unit, shorthand) {\n        var lowerCase = unit.toLowerCase();\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n    }\n\n    function normalizeUnits(units) {\n        return typeof units === 'string'\n            ? aliases[units] || aliases[units.toLowerCase()]\n            : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    var priorities = {};\n\n    function addUnitPriority(unit, priority) {\n        priorities[unit] = priority;\n    }\n\n    function getPrioritizedUnits(unitsObj) {\n        var units = [],\n            u;\n        for (u in unitsObj) {\n            if (hasOwnProp(unitsObj, u)) {\n                units.push({ unit: u, priority: priorities[u] });\n            }\n        }\n        units.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    function absFloor(number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    function makeGetSet(unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                set$1(this, unit, value);\n                hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get(this, unit);\n            }\n        };\n    }\n\n    function get(mom, unit) {\n        return mom.isValid()\n            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()\n            : NaN;\n    }\n\n    function set$1(mom, unit, value) {\n        if (mom.isValid() && !isNaN(value)) {\n            if (\n                unit === 'FullYear' &&\n                isLeapYear(mom.year()) &&\n                mom.month() === 1 &&\n                mom.date() === 29\n            ) {\n                value = toInt(value);\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](\n                    value,\n                    mom.month(),\n                    daysInMonth(value, mom.month())\n                );\n            } else {\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function stringGet(units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n\n    function stringSet(units, value) {\n        if (typeof units === 'object') {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units),\n                i;\n            for (i = 0; i < prioritized.length; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    var match1 = /\\d/, //       0 - 9\n        match2 = /\\d\\d/, //      00 - 99\n        match3 = /\\d{3}/, //     000 - 999\n        match4 = /\\d{4}/, //    0000 - 9999\n        match6 = /[+-]?\\d{6}/, // -999999 - 999999\n        match1to2 = /\\d\\d?/, //       0 - 99\n        match3to4 = /\\d\\d\\d\\d?/, //     999 - 9999\n        match5to6 = /\\d\\d\\d\\d\\d\\d?/, //   99999 - 999999\n        match1to3 = /\\d{1,3}/, //       0 - 999\n        match1to4 = /\\d{1,4}/, //       0 - 9999\n        match1to6 = /[+-]?\\d{1,6}/, // -999999 - 999999\n        matchUnsigned = /\\d+/, //       0 - inf\n        matchSigned = /[+-]?\\d+/, //    -inf - inf\n        matchOffset = /Z|[+-]\\d\\d:?\\d\\d/gi, // +00:00 -00:00 +0000 -0000 or Z\n        matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n        matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/, // 123456789 123456789.123\n        // any word (or two) characters or numbers including two/three word month in arabic.\n        // includes scottish gaelic two word and hyphenated months\n        matchWord = /[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFF07\\uFF10-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i,\n        regexes;\n\n    regexes = {};\n\n    function addRegexToken(token, regex, strictRegex) {\n        regexes[token] = isFunction(regex)\n            ? regex\n            : function (isStrict, localeData) {\n                  return isStrict && strictRegex ? strictRegex : regex;\n              };\n    }\n\n    function getParseRegexForToken(token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(\n            s\n                .replace('\\\\', '')\n                .replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (\n                    matched,\n                    p1,\n                    p2,\n                    p3,\n                    p4\n                ) {\n                    return p1 || p2 || p3 || p4;\n                })\n        );\n    }\n\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    var tokens = {};\n\n    function addParseToken(token, callback) {\n        var i,\n            func = callback;\n        if (typeof token === 'string') {\n            token = [token];\n        }\n        if (isNumber(callback)) {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        for (i = 0; i < token.length; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken(token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    var YEAR = 0,\n        MONTH = 1,\n        DATE = 2,\n        HOUR = 3,\n        MINUTE = 4,\n        SECOND = 5,\n        MILLISECOND = 6,\n        WEEK = 7,\n        WEEKDAY = 8;\n\n    function mod(n, x) {\n        return ((n % x) + x) % x;\n    }\n\n    var indexOf;\n\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function (o) {\n            // I know\n            var i;\n            for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    function daysInMonth(year, month) {\n        if (isNaN(year) || isNaN(month)) {\n            return NaN;\n        }\n        var modMonth = mod(month, 12);\n        year += (month - modMonth) / 12;\n        return modMonth === 1\n            ? isLeapYear(year)\n                ? 29\n                : 28\n            : 31 - ((modMonth % 7) % 2);\n    }\n\n    // FORMATTING\n\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken('MMM', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken('MMMM', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // ALIASES\n\n    addUnitAlias('month', 'M');\n\n    // PRIORITY\n\n    addUnitPriority('month', 8);\n\n    // PARSING\n\n    addRegexToken('M', match1to2);\n    addRegexToken('MM', match1to2, match2);\n    addRegexToken('MMM', function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken('MMMM', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n\n    addParseToken(['M', 'MM'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split(\n            '_'\n        ),\n        defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(\n            '_'\n        ),\n        MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/,\n        defaultMonthsShortRegex = matchWord,\n        defaultMonthsRegex = matchWord;\n\n    function localeMonths(m, format) {\n        if (!m) {\n            return isArray(this._months)\n                ? this._months\n                : this._months['standalone'];\n        }\n        return isArray(this._months)\n            ? this._months[m.month()]\n            : this._months[\n                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)\n                      ? 'format'\n                      : 'standalone'\n              ][m.month()];\n    }\n\n    function localeMonthsShort(m, format) {\n        if (!m) {\n            return isArray(this._monthsShort)\n                ? this._monthsShort\n                : this._monthsShort['standalone'];\n        }\n        return isArray(this._monthsShort)\n            ? this._monthsShort[m.month()]\n            : this._monthsShort[\n                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'\n              ][m.month()];\n    }\n\n    function handleStrictParse(monthName, format, strict) {\n        var i,\n            ii,\n            mom,\n            llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(\n                    mom,\n                    ''\n                ).toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeMonthsParse(monthName, format, strict) {\n        var i, mom, regex;\n\n        if (this._monthsParseExact) {\n            return handleStrictParse.call(this, monthName, format, strict);\n        }\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp(\n                    '^' + this.months(mom, '').replace('.', '') + '$',\n                    'i'\n                );\n                this._shortMonthsParse[i] = new RegExp(\n                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',\n                    'i'\n                );\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex =\n                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (\n                strict &&\n                format === 'MMMM' &&\n                this._longMonthsParse[i].test(monthName)\n            ) {\n                return i;\n            } else if (\n                strict &&\n                format === 'MMM' &&\n                this._shortMonthsParse[i].test(monthName)\n            ) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth(mom, value) {\n        var dayOfMonth;\n\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n\n        if (typeof value === 'string') {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (!isNumber(value)) {\n                    return mom;\n                }\n            }\n        }\n\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n        return mom;\n    }\n\n    function getSetMonth(value) {\n        if (value != null) {\n            setMonth(this, value);\n            hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get(this, 'Month');\n        }\n    }\n\n    function getDaysInMonth() {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    function monthsShortRegex(isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsShortRegex')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict\n                ? this._monthsShortStrictRegex\n                : this._monthsShortRegex;\n        }\n    }\n\n    function monthsRegex(isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict\n                ? this._monthsStrictRegex\n                : this._monthsRegex;\n        }\n    }\n\n    function computeMonthsParse() {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var shortPieces = [],\n            longPieces = [],\n            mixedPieces = [],\n            i,\n            mom;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            shortPieces.push(this.monthsShort(mom, ''));\n            longPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.monthsShort(mom, ''));\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 12; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n        }\n        for (i = 0; i < 24; i++) {\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp(\n            '^(' + longPieces.join('|') + ')',\n            'i'\n        );\n        this._monthsShortStrictRegex = new RegExp(\n            '^(' + shortPieces.join('|') + ')',\n            'i'\n        );\n    }\n\n    // FORMATTING\n\n    addFormatToken('Y', 0, 0, function () {\n        var y = this.year();\n        return y <= 9999 ? zeroFill(y, 4) : '+' + y;\n    });\n\n    addFormatToken(0, ['YY', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, ['YYYY', 4], 0, 'year');\n    addFormatToken(0, ['YYYYY', 5], 0, 'year');\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n    // ALIASES\n\n    addUnitAlias('year', 'y');\n\n    // PRIORITIES\n\n    addUnitPriority('year', 1);\n\n    // PARSING\n\n    addRegexToken('Y', matchSigned);\n    addRegexToken('YY', match1to2, match2);\n    addRegexToken('YYYY', match1to4, match4);\n    addRegexToken('YYYYY', match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YYYY', function (input, array) {\n        array[YEAR] =\n            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken('YY', function (input, array) {\n        array[YEAR] = hooks.parseTwoDigitYear(input);\n    });\n    addParseToken('Y', function (input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    // HOOKS\n\n    hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet('FullYear', true);\n\n    function getIsLeapYear() {\n        return isLeapYear(this.year());\n    }\n\n    function createDate(y, m, d, h, M, s, ms) {\n        // can't just apply() to create a date:\n        // https://stackoverflow.com/q/181348\n        var date;\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            date = new Date(y + 400, m, d, h, M, s, ms);\n            if (isFinite(date.getFullYear())) {\n                date.setFullYear(y);\n            }\n        } else {\n            date = new Date(y, m, d, h, M, s, ms);\n        }\n\n        return date;\n    }\n\n    function createUTCDate(y) {\n        var date, args;\n        // the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            args = Array.prototype.slice.call(arguments);\n            // preserve leap years using a full 400 year cycle, then reset\n            args[0] = y + 400;\n            date = new Date(Date.UTC.apply(null, args));\n            if (isFinite(date.getUTCFullYear())) {\n                date.setUTCFullYear(y);\n            }\n        } else {\n            date = new Date(Date.UTC.apply(null, arguments));\n        }\n\n        return date;\n    }\n\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n            // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n        return -fwdlw + fwd - 1;\n    }\n\n    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7,\n            weekOffset = firstWeekOffset(year, dow, doy),\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n            resYear,\n            resDayOfYear;\n\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear,\n        };\n    }\n\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n            resWeek,\n            resYear;\n\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n\n        return {\n            week: resWeek,\n            year: resYear,\n        };\n    }\n\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy),\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n\n    // FORMATTING\n\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n    // ALIASES\n\n    addUnitAlias('week', 'w');\n    addUnitAlias('isoWeek', 'W');\n\n    // PRIORITIES\n\n    addUnitPriority('week', 5);\n    addUnitPriority('isoWeek', 5);\n\n    // PARSING\n\n    addRegexToken('w', match1to2);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W', match1to2);\n    addRegexToken('WW', match1to2, match2);\n\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (\n        input,\n        week,\n        config,\n        token\n    ) {\n        week[token.substr(0, 1)] = toInt(input);\n    });\n\n    // HELPERS\n\n    // LOCALES\n\n    function localeWeek(mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow: 0, // Sunday is the first day of the week.\n        doy: 6, // The week that contains Jan 6th is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek() {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear() {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek(input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    function getSetISOWeek(input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('d', 0, 'do', 'day');\n\n    addFormatToken('dd', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken('ddd', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken('dddd', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken('e', 0, 0, 'weekday');\n    addFormatToken('E', 0, 0, 'isoWeekday');\n\n    // ALIASES\n\n    addUnitAlias('day', 'd');\n    addUnitAlias('weekday', 'e');\n    addUnitAlias('isoWeekday', 'E');\n\n    // PRIORITY\n    addUnitPriority('day', 11);\n    addUnitPriority('weekday', 11);\n    addUnitPriority('isoWeekday', 11);\n\n    // PARSING\n\n    addRegexToken('d', match1to2);\n    addRegexToken('e', match1to2);\n    addRegexToken('E', match1to2);\n    addRegexToken('dd', function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken('ddd', function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken('dddd', function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input !== 'string') {\n            return input;\n        }\n\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n\n        input = locale.weekdaysParse(input);\n        if (typeof input === 'number') {\n            return input;\n        }\n\n        return null;\n    }\n\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === 'string') {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n\n    // LOCALES\n    function shiftWeekdays(ws, n) {\n        return ws.slice(n, 7).concat(ws.slice(0, n));\n    }\n\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(\n            '_'\n        ),\n        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),\n        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),\n        defaultWeekdaysRegex = matchWord,\n        defaultWeekdaysShortRegex = matchWord,\n        defaultWeekdaysMinRegex = matchWord;\n\n    function localeWeekdays(m, format) {\n        var weekdays = isArray(this._weekdays)\n            ? this._weekdays\n            : this._weekdays[\n                  m && m !== true && this._weekdays.isFormat.test(format)\n                      ? 'format'\n                      : 'standalone'\n              ];\n        return m === true\n            ? shiftWeekdays(weekdays, this._week.dow)\n            : m\n            ? weekdays[m.day()]\n            : weekdays;\n    }\n\n    function localeWeekdaysShort(m) {\n        return m === true\n            ? shiftWeekdays(this._weekdaysShort, this._week.dow)\n            : m\n            ? this._weekdaysShort[m.day()]\n            : this._weekdaysShort;\n    }\n\n    function localeWeekdaysMin(m) {\n        return m === true\n            ? shiftWeekdays(this._weekdaysMin, this._week.dow)\n            : m\n            ? this._weekdaysMin[m.day()]\n            : this._weekdaysMin;\n    }\n\n    function handleStrictParse$1(weekdayName, format, strict) {\n        var i,\n            ii,\n            mom,\n            llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n\n            for (i = 0; i < 7; ++i) {\n                mom = createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(\n                    mom,\n                    ''\n                ).toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(\n                    mom,\n                    ''\n                ).toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeWeekdaysParse(weekdayName, format, strict) {\n        var i, mom, regex;\n\n        if (this._weekdaysParseExact) {\n            return handleStrictParse$1.call(this, weekdayName, format, strict);\n        }\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n\n            mom = createUTC([2000, 1]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp(\n                    '^' + this.weekdays(mom, '').replace('.', '\\\\.?') + '$',\n                    'i'\n                );\n                this._shortWeekdaysParse[i] = new RegExp(\n                    '^' + this.weekdaysShort(mom, '').replace('.', '\\\\.?') + '$',\n                    'i'\n                );\n                this._minWeekdaysParse[i] = new RegExp(\n                    '^' + this.weekdaysMin(mom, '').replace('.', '\\\\.?') + '$',\n                    'i'\n                );\n            }\n            if (!this._weekdaysParse[i]) {\n                regex =\n                    '^' +\n                    this.weekdays(mom, '') +\n                    '|^' +\n                    this.weekdaysShort(mom, '') +\n                    '|^' +\n                    this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (\n                strict &&\n                format === 'dddd' &&\n                this._fullWeekdaysParse[i].test(weekdayName)\n            ) {\n                return i;\n            } else if (\n                strict &&\n                format === 'ddd' &&\n                this._shortWeekdaysParse[i].test(weekdayName)\n            ) {\n                return i;\n            } else if (\n                strict &&\n                format === 'dd' &&\n                this._minWeekdaysParse[i].test(weekdayName)\n            ) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, 'd');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, 'd');\n    }\n\n    function getSetISODayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n\n    function weekdaysRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict\n                ? this._weekdaysStrictRegex\n                : this._weekdaysRegex;\n        }\n    }\n\n    function weekdaysShortRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict\n                ? this._weekdaysShortStrictRegex\n                : this._weekdaysShortRegex;\n        }\n    }\n\n    function weekdaysMinRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict\n                ? this._weekdaysMinStrictRegex\n                : this._weekdaysMinRegex;\n        }\n    }\n\n    function computeWeekdaysParse() {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var minPieces = [],\n            shortPieces = [],\n            longPieces = [],\n            mixedPieces = [],\n            i,\n            mom,\n            minp,\n            shortp,\n            longp;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, 1]).day(i);\n            minp = regexEscape(this.weekdaysMin(mom, ''));\n            shortp = regexEscape(this.weekdaysShort(mom, ''));\n            longp = regexEscape(this.weekdays(mom, ''));\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n\n        this._weekdaysStrictRegex = new RegExp(\n            '^(' + longPieces.join('|') + ')',\n            'i'\n        );\n        this._weekdaysShortStrictRegex = new RegExp(\n            '^(' + shortPieces.join('|') + ')',\n            'i'\n        );\n        this._weekdaysMinStrictRegex = new RegExp(\n            '^(' + minPieces.join('|') + ')',\n            'i'\n        );\n    }\n\n    // FORMATTING\n\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n\n    function kFormat() {\n        return this.hours() || 24;\n    }\n\n    addFormatToken('H', ['HH', 2], 0, 'hour');\n    addFormatToken('h', ['hh', 2], 0, hFormat);\n    addFormatToken('k', ['kk', 2], 0, kFormat);\n\n    addFormatToken('hmm', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('hmmss', 0, 0, function () {\n        return (\n            '' +\n            hFormat.apply(this) +\n            zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2)\n        );\n    });\n\n    addFormatToken('Hmm', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('Hmmss', 0, 0, function () {\n        return (\n            '' +\n            this.hours() +\n            zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2)\n        );\n    });\n\n    function meridiem(token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(\n                this.hours(),\n                this.minutes(),\n                lowercase\n            );\n        });\n    }\n\n    meridiem('a', true);\n    meridiem('A', false);\n\n    // ALIASES\n\n    addUnitAlias('hour', 'h');\n\n    // PRIORITY\n    addUnitPriority('hour', 13);\n\n    // PARSING\n\n    function matchMeridiem(isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken('a', matchMeridiem);\n    addRegexToken('A', matchMeridiem);\n    addRegexToken('H', match1to2);\n    addRegexToken('h', match1to2);\n    addRegexToken('k', match1to2);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n    addRegexToken('kk', match1to2, match2);\n\n    addRegexToken('hmm', match3to4);\n    addRegexToken('hmmss', match5to6);\n    addRegexToken('Hmm', match3to4);\n    addRegexToken('Hmmss', match5to6);\n\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['k', 'kk'], function (input, array, config) {\n        var kInput = toInt(input);\n        array[HOUR] = kInput === 24 ? 0 : kInput;\n    });\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmmss', function (input, array, config) {\n        var pos1 = input.length - 4,\n            pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('Hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken('Hmmss', function (input, array, config) {\n        var pos1 = input.length - 4,\n            pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n\n    // LOCALES\n\n    function localeIsPM(input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return (input + '').toLowerCase().charAt(0) === 'p';\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i,\n        // Setting the hour should keep the time, because the user explicitly\n        // specified which hour they want. So trying to maintain the same hour (in\n        // a new timezone) makes sense. Adding/subtracting hours does not follow\n        // this rule.\n        getSetHour = makeGetSet('Hours', true);\n\n    function localeMeridiem(hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        } else {\n            return isLower ? 'am' : 'AM';\n        }\n    }\n\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\n        relativeTime: defaultRelativeTime,\n\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n\n        week: defaultLocaleWeek,\n\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n\n        meridiemParse: defaultLocaleMeridiemParse,\n    };\n\n    // internal storage for locale config files\n    var locales = {},\n        localeFamilies = {},\n        globalLocale;\n\n    function commonPrefix(arr1, arr2) {\n        var i,\n            minl = Math.min(arr1.length, arr2.length);\n        for (i = 0; i < minl; i += 1) {\n            if (arr1[i] !== arr2[i]) {\n                return i;\n            }\n        }\n        return minl;\n    }\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0,\n            j,\n            next,\n            locale,\n            split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (\n                    next &&\n                    next.length >= j &&\n                    commonPrefix(split, next) >= j - 1\n                ) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return globalLocale;\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null,\n            aliasedRequire;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (\n            locales[name] === undefined &&\n            typeof module !== 'undefined' &&\n            module &&\n            module.exports\n        ) {\n            try {\n                oldLocale = globalLocale._abbr;\n                aliasedRequire = require;\n                aliasedRequire('./locale/' + name);\n                getSetGlobalLocale(oldLocale);\n            } catch (e) {\n                // mark as not found to avoid repeating expensive file require call causing high CPU\n                // when trying to find en-US, en_US, en-us for every format call\n                locales[name] = null; // null means not found\n            }\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function getSetGlobalLocale(key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = getLocale(key);\n            } else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            } else {\n                if (typeof console !== 'undefined' && console.warn) {\n                    //warn user if arguments are passed but the locale could not be set\n                    console.warn(\n                        'Locale ' + key + ' not found. Did you forget to load it?'\n                    );\n                }\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale(name, config) {\n        if (config !== null) {\n            var locale,\n                parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple(\n                    'defineLocaleOverride',\n                    'use moment.updateLocale(localeName, config) to change ' +\n                        'an existing locale. moment.defineLocale(localeName, ' +\n                        'config) should only be used for creating a new locale ' +\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'\n                );\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    locale = loadLocale(config.parentLocale);\n                    if (locale != null) {\n                        parentConfig = locale._config;\n                    } else {\n                        if (!localeFamilies[config.parentLocale]) {\n                            localeFamilies[config.parentLocale] = [];\n                        }\n                        localeFamilies[config.parentLocale].push({\n                            name: name,\n                            config: config,\n                        });\n                        return null;\n                    }\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n            if (localeFamilies[name]) {\n                localeFamilies[name].forEach(function (x) {\n                    defineLocale(x.name, x.config);\n                });\n            }\n\n            // backwards compat for now: also set the locale\n            // make sure we set the locale AFTER all child locales have been\n            // created, so we won't end up with the child locale set.\n            getSetGlobalLocale(name);\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale,\n                tmpLocale,\n                parentConfig = baseConfig;\n\n            if (locales[name] != null && locales[name].parentLocale != null) {\n                // Update existing child locale in-place to avoid memory-leaks\n                locales[name].set(mergeConfigs(locales[name]._config, config));\n            } else {\n                // MERGE\n                tmpLocale = loadLocale(name);\n                if (tmpLocale != null) {\n                    parentConfig = tmpLocale._config;\n                }\n                config = mergeConfigs(parentConfig, config);\n                if (tmpLocale == null) {\n                    // updateLocale is called for creating a new locale\n                    // Set abbr so it will have a name (getters return\n                    // undefined otherwise).\n                    config.abbr = name;\n                }\n                locale = new Locale(config);\n                locale.parentLocale = locales[name];\n                locales[name] = locale;\n            }\n\n            // backwards compat for now: also set the locale\n            getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                    if (name === getSetGlobalLocale()) {\n                        getSetGlobalLocale(name);\n                    }\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n\n    // returns locale data\n    function getLocale(key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    function listLocales() {\n        return keys(locales);\n    }\n\n    function checkOverflow(m) {\n        var overflow,\n            a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH] < 0 || a[MONTH] > 11\n                    ? MONTH\n                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])\n                    ? DATE\n                    : a[HOUR] < 0 ||\n                      a[HOUR] > 24 ||\n                      (a[HOUR] === 24 &&\n                          (a[MINUTE] !== 0 ||\n                              a[SECOND] !== 0 ||\n                              a[MILLISECOND] !== 0))\n                    ? HOUR\n                    : a[MINUTE] < 0 || a[MINUTE] > 59\n                    ? MINUTE\n                    : a[SECOND] < 0 || a[SECOND] > 59\n                    ? SECOND\n                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999\n                    ? MILLISECOND\n                    : -1;\n\n            if (\n                getParsingFlags(m)._overflowDayOfYear &&\n                (overflow < YEAR || overflow > DATE)\n            ) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n        basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d|))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n        tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/,\n        isoDates = [\n            ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n            ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n            ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n            ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n            ['YYYY-DDD', /\\d{4}-\\d{3}/],\n            ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n            ['YYYYYYMMDD', /[+-]\\d{10}/],\n            ['YYYYMMDD', /\\d{8}/],\n            ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n            ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n            ['YYYYDDD', /\\d{7}/],\n            ['YYYYMM', /\\d{6}/, false],\n            ['YYYY', /\\d{4}/, false],\n        ],\n        // iso time formats and regexes\n        isoTimes = [\n            ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n            ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n            ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n            ['HH:mm', /\\d\\d:\\d\\d/],\n            ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n            ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n            ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n            ['HHmm', /\\d\\d\\d\\d/],\n            ['HH', /\\d\\d/],\n        ],\n        aspNetJsonRegex = /^\\/?Date\\((-?\\d+)/i,\n        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n        rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/,\n        obsOffsets = {\n            UT: 0,\n            GMT: 0,\n            EDT: -4 * 60,\n            EST: -5 * 60,\n            CDT: -5 * 60,\n            CST: -6 * 60,\n            MDT: -6 * 60,\n            MST: -7 * 60,\n            PDT: -7 * 60,\n            PST: -8 * 60,\n        };\n\n    // date from iso format\n    function configFromISO(config) {\n        var i,\n            l,\n            string = config._i,\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n            allowTime,\n            dateFormat,\n            timeFormat,\n            tzFormat;\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n\n            for (i = 0, l = isoDates.length; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for (i = 0, l = isoTimes.length; i < l; i++) {\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be 'T' or space\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = 'Z';\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    function extractFromRFC2822Strings(\n        yearStr,\n        monthStr,\n        dayStr,\n        hourStr,\n        minuteStr,\n        secondStr\n    ) {\n        var result = [\n            untruncateYear(yearStr),\n            defaultLocaleMonthsShort.indexOf(monthStr),\n            parseInt(dayStr, 10),\n            parseInt(hourStr, 10),\n            parseInt(minuteStr, 10),\n        ];\n\n        if (secondStr) {\n            result.push(parseInt(secondStr, 10));\n        }\n\n        return result;\n    }\n\n    function untruncateYear(yearStr) {\n        var year = parseInt(yearStr, 10);\n        if (year <= 49) {\n            return 2000 + year;\n        } else if (year <= 999) {\n            return 1900 + year;\n        }\n        return year;\n    }\n\n    function preprocessRFC2822(s) {\n        // Remove comments and folding whitespace and replace multiple-spaces with a single space\n        return s\n            .replace(/\\([^)]*\\)|[\\n\\t]/g, ' ')\n            .replace(/(\\s\\s+)/g, ' ')\n            .replace(/^\\s\\s*/, '')\n            .replace(/\\s\\s*$/, '');\n    }\n\n    function checkWeekday(weekdayStr, parsedInput, config) {\n        if (weekdayStr) {\n            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.\n            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),\n                weekdayActual = new Date(\n                    parsedInput[0],\n                    parsedInput[1],\n                    parsedInput[2]\n                ).getDay();\n            if (weekdayProvided !== weekdayActual) {\n                getParsingFlags(config).weekdayMismatch = true;\n                config._isValid = false;\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function calculateOffset(obsOffset, militaryOffset, numOffset) {\n        if (obsOffset) {\n            return obsOffsets[obsOffset];\n        } else if (militaryOffset) {\n            // the only allowed military tz is Z\n            return 0;\n        } else {\n            var hm = parseInt(numOffset, 10),\n                m = hm % 100,\n                h = (hm - m) / 100;\n            return h * 60 + m;\n        }\n    }\n\n    // date and time from ref 2822 format\n    function configFromRFC2822(config) {\n        var match = rfc2822.exec(preprocessRFC2822(config._i)),\n            parsedArray;\n        if (match) {\n            parsedArray = extractFromRFC2822Strings(\n                match[4],\n                match[3],\n                match[2],\n                match[5],\n                match[6],\n                match[7]\n            );\n            if (!checkWeekday(match[1], parsedArray, config)) {\n                return;\n            }\n\n            config._a = parsedArray;\n            config._tzm = calculateOffset(match[8], match[9], match[10]);\n\n            config._d = createUTCDate.apply(null, config._a);\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n\n            getParsingFlags(config).rfc2822 = true;\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        configFromRFC2822(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        if (config._strict) {\n            config._isValid = false;\n        } else {\n            // Final attempt, use Input Fallback\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    hooks.createFromInputFallback = deprecate(\n        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +\n            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +\n            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n        }\n    );\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(hooks.now());\n        if (config._useUTC) {\n            return [\n                nowValue.getUTCFullYear(),\n                nowValue.getUTCMonth(),\n                nowValue.getUTCDate(),\n            ];\n        }\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray(config) {\n        var i,\n            date,\n            input = [],\n            currentDate,\n            expectedWeekday,\n            yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear != null) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (\n                config._dayOfYear > daysInYear(yearToUse) ||\n                config._dayOfYear === 0\n            ) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] =\n                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (\n            config._a[HOUR] === 24 &&\n            config._a[MINUTE] === 0 &&\n            config._a[SECOND] === 0 &&\n            config._a[MILLISECOND] === 0\n        ) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(\n            null,\n            input\n        );\n        expectedWeekday = config._useUTC\n            ? config._d.getUTCDay()\n            : config._d.getDay();\n\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n\n        // check for mismatching day of week\n        if (\n            config._w &&\n            typeof config._w.d !== 'undefined' &&\n            config._w.d !== expectedWeekday\n        ) {\n            getParsingFlags(config).weekdayMismatch = true;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(\n                w.GG,\n                config._a[YEAR],\n                weekOfYear(createLocal(), 1, 4).year\n            );\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            curWeek = weekOfYear(createLocal(), dow, doy);\n\n            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n\n            // Default to current week.\n            week = defaults(w.w, curWeek.week);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from beginning of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to beginning of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n\n    // constant that refers to the ISO standard\n    hooks.ISO_8601 = function () {};\n\n    // constant that refers to the RFC 2822 form\n    hooks.RFC_2822 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n        if (config._f === hooks.RFC_2822) {\n            configFromRFC2822(config);\n            return;\n        }\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i,\n            parsedInput,\n            tokens,\n            token,\n            skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0,\n            era;\n\n        tokens =\n            expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) ||\n                [])[0];\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(\n                    string.indexOf(parsedInput) + parsedInput.length\n                );\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                } else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            } else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver =\n            stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (\n            config._a[HOUR] <= 12 &&\n            getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] > 0\n        ) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(\n            config._locale,\n            config._a[HOUR],\n            config._meridiem\n        );\n\n        // handle era\n        era = getParsingFlags(config).era;\n        if (era !== null) {\n            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);\n        }\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n    function meridiemFixWrap(locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n            scoreToBeat,\n            i,\n            currentScore,\n            validFormatFound,\n            bestFormatIsValid = false;\n\n        if (config._f.length === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            validFormatFound = false;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (isValid(tempConfig)) {\n                validFormatFound = true;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (!bestFormatIsValid) {\n                if (\n                    scoreToBeat == null ||\n                    currentScore < scoreToBeat ||\n                    validFormatFound\n                ) {\n                    scoreToBeat = currentScore;\n                    bestMoment = tempConfig;\n                    if (validFormatFound) {\n                        bestFormatIsValid = true;\n                    }\n                }\n            } else {\n                if (currentScore < scoreToBeat) {\n                    scoreToBeat = currentScore;\n                    bestMoment = tempConfig;\n                }\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i),\n            dayOrDate = i.day === undefined ? i.date : i.day;\n        config._a = map(\n            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],\n            function (obj) {\n                return obj && parseInt(obj, 10);\n            }\n        );\n\n        configFromArray(config);\n    }\n\n    function createFromConfig(config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, 'd');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function prepareConfig(config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || getLocale(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return createInvalid({ nullInput: true });\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (format) {\n            configFromStringAndFormat(config);\n        } else {\n            configFromInput(config);\n        }\n\n        if (!isValid(config)) {\n            config._d = null;\n        }\n\n        return config;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (isUndefined(input)) {\n            config._d = new Date(hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === 'string') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (isObject(input)) {\n            configFromObject(config);\n        } else if (isNumber(input)) {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC(input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (format === true || format === false) {\n            strict = format;\n            format = undefined;\n        }\n\n        if (locale === true || locale === false) {\n            strict = locale;\n            locale = undefined;\n        }\n\n        if (\n            (isObject(input) && isObjectEmpty(input)) ||\n            (isArray(input) && input.length === 0)\n        ) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function createLocal(input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\n            function () {\n                var other = createLocal.apply(null, arguments);\n                if (this.isValid() && other.isValid()) {\n                    return other < this ? this : other;\n                } else {\n                    return createInvalid();\n                }\n            }\n        ),\n        prototypeMax = deprecate(\n            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\n            function () {\n                var other = createLocal.apply(null, arguments);\n                if (this.isValid() && other.isValid()) {\n                    return other > this ? this : other;\n                } else {\n                    return createInvalid();\n                }\n            }\n        );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min() {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    }\n\n    function max() {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    }\n\n    var now = function () {\n        return Date.now ? Date.now() : +new Date();\n    };\n\n    var ordering = [\n        'year',\n        'quarter',\n        'month',\n        'week',\n        'day',\n        'hour',\n        'minute',\n        'second',\n        'millisecond',\n    ];\n\n    function isDurationValid(m) {\n        var key,\n            unitHasDecimal = false,\n            i;\n        for (key in m) {\n            if (\n                hasOwnProp(m, key) &&\n                !(\n                    indexOf.call(ordering, key) !== -1 &&\n                    (m[key] == null || !isNaN(m[key]))\n                )\n            ) {\n                return false;\n            }\n        }\n\n        for (i = 0; i < ordering.length; ++i) {\n            if (m[ordering[i]]) {\n                if (unitHasDecimal) {\n                    return false; // only allow non-integers for smallest unit\n                }\n                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {\n                    unitHasDecimal = true;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function isValid$1() {\n        return this._isValid;\n    }\n\n    function createInvalid$1() {\n        return createDuration(NaN);\n    }\n\n    function Duration(duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        this._isValid = isDurationValid(normalizedInput);\n\n        // representation for dateAddRemove\n        this._milliseconds =\n            +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days + weeks * 7;\n        // It is impossible to translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months + quarters * 3 + years * 12;\n\n        this._data = {};\n\n        this._locale = getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration(obj) {\n        return obj instanceof Duration;\n    }\n\n    function absRound(number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if (\n                (dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))\n            ) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    // FORMATTING\n\n    function offset(token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset(),\n                sign = '+';\n            if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n            }\n            return (\n                sign +\n                zeroFill(~~(offset / 60), 2) +\n                separator +\n                zeroFill(~~offset % 60, 2)\n            );\n        });\n    }\n\n    offset('Z', ':');\n    offset('ZZ', '');\n\n    // PARSING\n\n    addRegexToken('Z', matchShortOffset);\n    addRegexToken('ZZ', matchShortOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(matcher, string) {\n        var matches = (string || '').match(matcher),\n            chunk,\n            parts,\n            minutes;\n\n        if (matches === null) {\n            return null;\n        }\n\n        chunk = matches[matches.length - 1] || [];\n        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n        minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff =\n                (isMoment(input) || isDate(input)\n                    ? input.valueOf()\n                    : createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return createLocal(input).local();\n        }\n    }\n\n    function getDateOffset(m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset());\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset(input, keepLocalTime, keepMinutes) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = offsetFromString(matchShortOffset, input);\n                if (input === null) {\n                    return this;\n                }\n            } else if (Math.abs(input) < 16 && !keepMinutes) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    addSubtract(\n                        this,\n                        createDuration(input - offset, 'm'),\n                        1,\n                        false\n                    );\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone(input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== 'string') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC(keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal(keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset() {\n        if (this._tzm != null) {\n            this.utcOffset(this._tzm, false, true);\n        } else if (typeof this._i === 'string') {\n            var tZone = offsetFromString(matchOffset, this._i);\n            if (tZone != null) {\n                this.utcOffset(tZone);\n            } else {\n                this.utcOffset(0, true);\n            }\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset(input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? createLocal(input).utcOffset() : 0;\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime() {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted() {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n\n        var c = {},\n            other;\n\n        copyConfig(c, this);\n        c = prepareConfig(c);\n\n        if (c._a) {\n            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n            this._isDSTShifted =\n                this.isValid() && compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n\n        return this._isDSTShifted;\n    }\n\n    function isLocal() {\n        return this.isValid() ? !this._isUTC : false;\n    }\n\n    function isUtcOffset() {\n        return this.isValid() ? this._isUTC : false;\n    }\n\n    function isUtc() {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(-|\\+)?(?:(\\d*)[. ])?(\\d+):(\\d+)(?::(\\d+)(\\.\\d*)?)?$/,\n        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n        // and further modified to allow for strings containing both week and day\n        isoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n    function createDuration(input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms: input._milliseconds,\n                d: input._days,\n                M: input._months,\n            };\n        } else if (isNumber(input) || !isNaN(+input)) {\n            duration = {};\n            if (key) {\n                duration[key] = +input;\n            } else {\n                duration.milliseconds = +input;\n            }\n        } else if ((match = aspNetRegex.exec(input))) {\n            sign = match[1] === '-' ? -1 : 1;\n            duration = {\n                y: 0,\n                d: toInt(match[DATE]) * sign,\n                h: toInt(match[HOUR]) * sign,\n                m: toInt(match[MINUTE]) * sign,\n                s: toInt(match[SECOND]) * sign,\n                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match\n            };\n        } else if ((match = isoRegex.exec(input))) {\n            sign = match[1] === '-' ? -1 : 1;\n            duration = {\n                y: parseIso(match[2], sign),\n                M: parseIso(match[3], sign),\n                w: parseIso(match[4], sign),\n                d: parseIso(match[5], sign),\n                h: parseIso(match[6], sign),\n                m: parseIso(match[7], sign),\n                s: parseIso(match[8], sign),\n            };\n        } else if (duration == null) {\n            // checks for null or undefined\n            duration = {};\n        } else if (\n            typeof duration === 'object' &&\n            ('from' in duration || 'to' in duration)\n        ) {\n            diffRes = momentsDifference(\n                createLocal(duration.from),\n                createLocal(duration.to)\n            );\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\n            ret._locale = input._locale;\n        }\n\n        if (isDuration(input) && hasOwnProp(input, '_isValid')) {\n            ret._isValid = input._isValid;\n        }\n\n        return ret;\n    }\n\n    createDuration.fn = Duration.prototype;\n    createDuration.invalid = createInvalid$1;\n\n    function parseIso(inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(',', '.'));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {};\n\n        res.months =\n            other.month() - base.month() + (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +base.clone().add(res.months, 'M');\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return { milliseconds: 0, months: 0 };\n        }\n\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(\n                    name,\n                    'moment().' +\n                        name +\n                        '(period, number) is deprecated. Please use moment().' +\n                        name +\n                        '(number, period). ' +\n                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'\n                );\n                tmp = val;\n                val = period;\n                period = tmp;\n            }\n\n            dur = createDuration(val, period);\n            addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function addSubtract(mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = absRound(duration._days),\n            months = absRound(duration._months);\n\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (months) {\n            setMonth(mom, get(mom, 'Month') + months * isAdding);\n        }\n        if (days) {\n            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);\n        }\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (updateOffset) {\n            hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add = createAdder(1, 'add'),\n        subtract = createAdder(-1, 'subtract');\n\n    function isString(input) {\n        return typeof input === 'string' || input instanceof String;\n    }\n\n    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined\n    function isMomentInput(input) {\n        return (\n            isMoment(input) ||\n            isDate(input) ||\n            isString(input) ||\n            isNumber(input) ||\n            isNumberOrStringArray(input) ||\n            isMomentInputObject(input) ||\n            input === null ||\n            input === undefined\n        );\n    }\n\n    function isMomentInputObject(input) {\n        var objectTest = isObject(input) && !isObjectEmpty(input),\n            propertyTest = false,\n            properties = [\n                'years',\n                'year',\n                'y',\n                'months',\n                'month',\n                'M',\n                'days',\n                'day',\n                'd',\n                'dates',\n                'date',\n                'D',\n                'hours',\n                'hour',\n                'h',\n                'minutes',\n                'minute',\n                'm',\n                'seconds',\n                'second',\n                's',\n                'milliseconds',\n                'millisecond',\n                'ms',\n            ],\n            i,\n            property;\n\n        for (i = 0; i < properties.length; i += 1) {\n            property = properties[i];\n            propertyTest = propertyTest || hasOwnProp(input, property);\n        }\n\n        return objectTest && propertyTest;\n    }\n\n    function isNumberOrStringArray(input) {\n        var arrayTest = isArray(input),\n            dataTypeTest = false;\n        if (arrayTest) {\n            dataTypeTest =\n                input.filter(function (item) {\n                    return !isNumber(item) && isString(input);\n                }).length === 0;\n        }\n        return arrayTest && dataTypeTest;\n    }\n\n    function isCalendarSpec(input) {\n        var objectTest = isObject(input) && !isObjectEmpty(input),\n            propertyTest = false,\n            properties = [\n                'sameDay',\n                'nextDay',\n                'lastDay',\n                'nextWeek',\n                'lastWeek',\n                'sameElse',\n            ],\n            i,\n            property;\n\n        for (i = 0; i < properties.length; i += 1) {\n            property = properties[i];\n            propertyTest = propertyTest || hasOwnProp(input, property);\n        }\n\n        return objectTest && propertyTest;\n    }\n\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, 'days', true);\n        return diff < -6\n            ? 'sameElse'\n            : diff < -1\n            ? 'lastWeek'\n            : diff < 0\n            ? 'lastDay'\n            : diff < 1\n            ? 'sameDay'\n            : diff < 2\n            ? 'nextDay'\n            : diff < 7\n            ? 'nextWeek'\n            : 'sameElse';\n    }\n\n    function calendar$1(time, formats) {\n        // Support for single parameter, formats only overload to the calendar function\n        if (arguments.length === 1) {\n            if (!arguments[0]) {\n                time = undefined;\n                formats = undefined;\n            } else if (isMomentInput(arguments[0])) {\n                time = arguments[0];\n                formats = undefined;\n            } else if (isCalendarSpec(arguments[0])) {\n                formats = arguments[0];\n                time = undefined;\n            }\n        }\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || createLocal(),\n            sod = cloneWithOffset(now, this).startOf('day'),\n            format = hooks.calendarFormat(this, sod) || 'sameElse',\n            output =\n                formats &&\n                (isFunction(formats[format])\n                    ? formats[format].call(this, now)\n                    : formats[format]);\n\n        return this.format(\n            output || this.localeData().calendar(format, this, createLocal(now))\n        );\n    }\n\n    function clone() {\n        return new Moment(this);\n    }\n\n    function isAfter(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n\n    function isBefore(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n\n    function isBetween(from, to, units, inclusivity) {\n        var localFrom = isMoment(from) ? from : createLocal(from),\n            localTo = isMoment(to) ? to : createLocal(to);\n        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {\n            return false;\n        }\n        inclusivity = inclusivity || '()';\n        return (\n            (inclusivity[0] === '('\n                ? this.isAfter(localFrom, units)\n                : !this.isBefore(localFrom, units)) &&\n            (inclusivity[1] === ')'\n                ? this.isBefore(localTo, units)\n                : !this.isAfter(localTo, units))\n        );\n    }\n\n    function isSame(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input),\n            inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return (\n                this.clone().startOf(units).valueOf() <= inputMs &&\n                inputMs <= this.clone().endOf(units).valueOf()\n            );\n        }\n    }\n\n    function isSameOrAfter(input, units) {\n        return this.isSame(input, units) || this.isAfter(input, units);\n    }\n\n    function isSameOrBefore(input, units) {\n        return this.isSame(input, units) || this.isBefore(input, units);\n    }\n\n    function diff(input, units, asFloat) {\n        var that, zoneDelta, output;\n\n        if (!this.isValid()) {\n            return NaN;\n        }\n\n        that = cloneWithOffset(input, this);\n\n        if (!that.isValid()) {\n            return NaN;\n        }\n\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n        units = normalizeUnits(units);\n\n        switch (units) {\n            case 'year':\n                output = monthDiff(this, that) / 12;\n                break;\n            case 'month':\n                output = monthDiff(this, that);\n                break;\n            case 'quarter':\n                output = monthDiff(this, that) / 3;\n                break;\n            case 'second':\n                output = (this - that) / 1e3;\n                break; // 1000\n            case 'minute':\n                output = (this - that) / 6e4;\n                break; // 1000 * 60\n            case 'hour':\n                output = (this - that) / 36e5;\n                break; // 1000 * 60 * 60\n            case 'day':\n                output = (this - that - zoneDelta) / 864e5;\n                break; // 1000 * 60 * 60 * 24, negate dst\n            case 'week':\n                output = (this - that - zoneDelta) / 6048e5;\n                break; // 1000 * 60 * 60 * 24 * 7, negate dst\n            default:\n                output = this - that;\n        }\n\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff(a, b) {\n        if (a.date() < b.date()) {\n            // end-of-month calculations work correct when the start month has more\n            // days than the end month.\n            return -monthDiff(b, a);\n        }\n        // difference in months\n        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n            anchor2,\n            adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n\n    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n    function toString() {\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n    }\n\n    function toISOString(keepOffset) {\n        if (!this.isValid()) {\n            return null;\n        }\n        var utc = keepOffset !== true,\n            m = utc ? this.clone().utc() : this;\n        if (m.year() < 0 || m.year() > 9999) {\n            return formatMoment(\n                m,\n                utc\n                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'\n                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'\n            );\n        }\n        if (isFunction(Date.prototype.toISOString)) {\n            // native implementation is ~50x faster, use it when we can\n            if (utc) {\n                return this.toDate().toISOString();\n            } else {\n                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)\n                    .toISOString()\n                    .replace('Z', formatMoment(m, 'Z'));\n            }\n        }\n        return formatMoment(\n            m,\n            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'\n        );\n    }\n\n    /**\n     * Return a human readable representation of a moment that can\n     * also be evaluated to get a new moment which is the same\n     *\n     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n     */\n    function inspect() {\n        if (!this.isValid()) {\n            return 'moment.invalid(/* ' + this._i + ' */)';\n        }\n        var func = 'moment',\n            zone = '',\n            prefix,\n            year,\n            datetime,\n            suffix;\n        if (!this.isLocal()) {\n            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\n            zone = 'Z';\n        }\n        prefix = '[' + func + '(\"]';\n        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';\n        datetime = '-MM-DD[T]HH:mm:ss.SSS';\n        suffix = zone + '[\")]';\n\n        return this.format(prefix + year + datetime + suffix);\n    }\n\n    function format(inputString) {\n        if (!inputString) {\n            inputString = this.isUtc()\n                ? hooks.defaultFormatUtc\n                : hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n\n    function from(time, withoutSuffix) {\n        if (\n            this.isValid() &&\n            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())\n        ) {\n            return createDuration({ to: this, from: time })\n                .locale(this.locale())\n                .humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function fromNow(withoutSuffix) {\n        return this.from(createLocal(), withoutSuffix);\n    }\n\n    function to(time, withoutSuffix) {\n        if (\n            this.isValid() &&\n            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())\n        ) {\n            return createDuration({ from: this, to: time })\n                .locale(this.locale())\n                .humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function toNow(withoutSuffix) {\n        return this.to(createLocal(), withoutSuffix);\n    }\n\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale(key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData() {\n        return this._locale;\n    }\n\n    var MS_PER_SECOND = 1000,\n        MS_PER_MINUTE = 60 * MS_PER_SECOND,\n        MS_PER_HOUR = 60 * MS_PER_MINUTE,\n        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;\n\n    // actual modulo - handles negative numbers (for dates before 1970):\n    function mod$1(dividend, divisor) {\n        return ((dividend % divisor) + divisor) % divisor;\n    }\n\n    function localStartOfDate(y, m, d) {\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            return new Date(y + 400, m, d) - MS_PER_400_YEARS;\n        } else {\n            return new Date(y, m, d).valueOf();\n        }\n    }\n\n    function utcStartOfDate(y, m, d) {\n        // Date.UTC remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;\n        } else {\n            return Date.UTC(y, m, d);\n        }\n    }\n\n    function startOf(units) {\n        var time, startOfDate;\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond' || !this.isValid()) {\n            return this;\n        }\n\n        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n        switch (units) {\n            case 'year':\n                time = startOfDate(this.year(), 0, 1);\n                break;\n            case 'quarter':\n                time = startOfDate(\n                    this.year(),\n                    this.month() - (this.month() % 3),\n                    1\n                );\n                break;\n            case 'month':\n                time = startOfDate(this.year(), this.month(), 1);\n                break;\n            case 'week':\n                time = startOfDate(\n                    this.year(),\n                    this.month(),\n                    this.date() - this.weekday()\n                );\n                break;\n            case 'isoWeek':\n                time = startOfDate(\n                    this.year(),\n                    this.month(),\n                    this.date() - (this.isoWeekday() - 1)\n                );\n                break;\n            case 'day':\n            case 'date':\n                time = startOfDate(this.year(), this.month(), this.date());\n                break;\n            case 'hour':\n                time = this._d.valueOf();\n                time -= mod$1(\n                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),\n                    MS_PER_HOUR\n                );\n                break;\n            case 'minute':\n                time = this._d.valueOf();\n                time -= mod$1(time, MS_PER_MINUTE);\n                break;\n            case 'second':\n                time = this._d.valueOf();\n                time -= mod$1(time, MS_PER_SECOND);\n                break;\n        }\n\n        this._d.setTime(time);\n        hooks.updateOffset(this, true);\n        return this;\n    }\n\n    function endOf(units) {\n        var time, startOfDate;\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond' || !this.isValid()) {\n            return this;\n        }\n\n        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n        switch (units) {\n            case 'year':\n                time = startOfDate(this.year() + 1, 0, 1) - 1;\n                break;\n            case 'quarter':\n                time =\n                    startOfDate(\n                        this.year(),\n                        this.month() - (this.month() % 3) + 3,\n                        1\n                    ) - 1;\n                break;\n            case 'month':\n                time = startOfDate(this.year(), this.month() + 1, 1) - 1;\n                break;\n            case 'week':\n                time =\n                    startOfDate(\n                        this.year(),\n                        this.month(),\n                        this.date() - this.weekday() + 7\n                    ) - 1;\n                break;\n            case 'isoWeek':\n                time =\n                    startOfDate(\n                        this.year(),\n                        this.month(),\n                        this.date() - (this.isoWeekday() - 1) + 7\n                    ) - 1;\n                break;\n            case 'day':\n            case 'date':\n                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;\n                break;\n            case 'hour':\n                time = this._d.valueOf();\n                time +=\n                    MS_PER_HOUR -\n                    mod$1(\n                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),\n                        MS_PER_HOUR\n                    ) -\n                    1;\n                break;\n            case 'minute':\n                time = this._d.valueOf();\n                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;\n                break;\n            case 'second':\n                time = this._d.valueOf();\n                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;\n                break;\n        }\n\n        this._d.setTime(time);\n        hooks.updateOffset(this, true);\n        return this;\n    }\n\n    function valueOf() {\n        return this._d.valueOf() - (this._offset || 0) * 60000;\n    }\n\n    function unix() {\n        return Math.floor(this.valueOf() / 1000);\n    }\n\n    function toDate() {\n        return new Date(this.valueOf());\n    }\n\n    function toArray() {\n        var m = this;\n        return [\n            m.year(),\n            m.month(),\n            m.date(),\n            m.hour(),\n            m.minute(),\n            m.second(),\n            m.millisecond(),\n        ];\n    }\n\n    function toObject() {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds(),\n        };\n    }\n\n    function toJSON() {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n\n    function isValid$2() {\n        return isValid(this);\n    }\n\n    function parsingFlags() {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt() {\n        return getParsingFlags(this).overflow;\n    }\n\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict,\n        };\n    }\n\n    addFormatToken('N', 0, 0, 'eraAbbr');\n    addFormatToken('NN', 0, 0, 'eraAbbr');\n    addFormatToken('NNN', 0, 0, 'eraAbbr');\n    addFormatToken('NNNN', 0, 0, 'eraName');\n    addFormatToken('NNNNN', 0, 0, 'eraNarrow');\n\n    addFormatToken('y', ['y', 1], 'yo', 'eraYear');\n    addFormatToken('y', ['yy', 2], 0, 'eraYear');\n    addFormatToken('y', ['yyy', 3], 0, 'eraYear');\n    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');\n\n    addRegexToken('N', matchEraAbbr);\n    addRegexToken('NN', matchEraAbbr);\n    addRegexToken('NNN', matchEraAbbr);\n    addRegexToken('NNNN', matchEraName);\n    addRegexToken('NNNNN', matchEraNarrow);\n\n    addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (\n        input,\n        array,\n        config,\n        token\n    ) {\n        var era = config._locale.erasParse(input, token, config._strict);\n        if (era) {\n            getParsingFlags(config).era = era;\n        } else {\n            getParsingFlags(config).invalidEra = input;\n        }\n    });\n\n    addRegexToken('y', matchUnsigned);\n    addRegexToken('yy', matchUnsigned);\n    addRegexToken('yyy', matchUnsigned);\n    addRegexToken('yyyy', matchUnsigned);\n    addRegexToken('yo', matchEraYearOrdinal);\n\n    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);\n    addParseToken(['yo'], function (input, array, config, token) {\n        var match;\n        if (config._locale._eraYearOrdinalRegex) {\n            match = input.match(config._locale._eraYearOrdinalRegex);\n        }\n\n        if (config._locale.eraYearOrdinalParse) {\n            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);\n        } else {\n            array[YEAR] = parseInt(input, 10);\n        }\n    });\n\n    function localeEras(m, format) {\n        var i,\n            l,\n            date,\n            eras = this._eras || getLocale('en')._eras;\n        for (i = 0, l = eras.length; i < l; ++i) {\n            switch (typeof eras[i].since) {\n                case 'string':\n                    // truncate time\n                    date = hooks(eras[i].since).startOf('day');\n                    eras[i].since = date.valueOf();\n                    break;\n            }\n\n            switch (typeof eras[i].until) {\n                case 'undefined':\n                    eras[i].until = +Infinity;\n                    break;\n                case 'string':\n                    // truncate time\n                    date = hooks(eras[i].until).startOf('day').valueOf();\n                    eras[i].until = date.valueOf();\n                    break;\n            }\n        }\n        return eras;\n    }\n\n    function localeErasParse(eraName, format, strict) {\n        var i,\n            l,\n            eras = this.eras(),\n            name,\n            abbr,\n            narrow;\n        eraName = eraName.toUpperCase();\n\n        for (i = 0, l = eras.length; i < l; ++i) {\n            name = eras[i].name.toUpperCase();\n            abbr = eras[i].abbr.toUpperCase();\n            narrow = eras[i].narrow.toUpperCase();\n\n            if (strict) {\n                switch (format) {\n                    case 'N':\n                    case 'NN':\n                    case 'NNN':\n                        if (abbr === eraName) {\n                            return eras[i];\n                        }\n                        break;\n\n                    case 'NNNN':\n                        if (name === eraName) {\n                            return eras[i];\n                        }\n                        break;\n\n                    case 'NNNNN':\n                        if (narrow === eraName) {\n                            return eras[i];\n                        }\n                        break;\n                }\n            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {\n                return eras[i];\n            }\n        }\n    }\n\n    function localeErasConvertYear(era, year) {\n        var dir = era.since <= era.until ? +1 : -1;\n        if (year === undefined) {\n            return hooks(era.since).year();\n        } else {\n            return hooks(era.since).year() + (year - era.offset) * dir;\n        }\n    }\n\n    function getEraName() {\n        var i,\n            l,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            // truncate time\n            val = this.clone().startOf('day').valueOf();\n\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].name;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].name;\n            }\n        }\n\n        return '';\n    }\n\n    function getEraNarrow() {\n        var i,\n            l,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            // truncate time\n            val = this.clone().startOf('day').valueOf();\n\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].narrow;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].narrow;\n            }\n        }\n\n        return '';\n    }\n\n    function getEraAbbr() {\n        var i,\n            l,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            // truncate time\n            val = this.clone().startOf('day').valueOf();\n\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].abbr;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].abbr;\n            }\n        }\n\n        return '';\n    }\n\n    function getEraYear() {\n        var i,\n            l,\n            dir,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            dir = eras[i].since <= eras[i].until ? +1 : -1;\n\n            // truncate time\n            val = this.clone().startOf('day').valueOf();\n\n            if (\n                (eras[i].since <= val && val <= eras[i].until) ||\n                (eras[i].until <= val && val <= eras[i].since)\n            ) {\n                return (\n                    (this.year() - hooks(eras[i].since).year()) * dir +\n                    eras[i].offset\n                );\n            }\n        }\n\n        return this.year();\n    }\n\n    function erasNameRegex(isStrict) {\n        if (!hasOwnProp(this, '_erasNameRegex')) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasNameRegex : this._erasRegex;\n    }\n\n    function erasAbbrRegex(isStrict) {\n        if (!hasOwnProp(this, '_erasAbbrRegex')) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasAbbrRegex : this._erasRegex;\n    }\n\n    function erasNarrowRegex(isStrict) {\n        if (!hasOwnProp(this, '_erasNarrowRegex')) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasNarrowRegex : this._erasRegex;\n    }\n\n    function matchEraAbbr(isStrict, locale) {\n        return locale.erasAbbrRegex(isStrict);\n    }\n\n    function matchEraName(isStrict, locale) {\n        return locale.erasNameRegex(isStrict);\n    }\n\n    function matchEraNarrow(isStrict, locale) {\n        return locale.erasNarrowRegex(isStrict);\n    }\n\n    function matchEraYearOrdinal(isStrict, locale) {\n        return locale._eraYearOrdinalRegex || matchUnsigned;\n    }\n\n    function computeErasParse() {\n        var abbrPieces = [],\n            namePieces = [],\n            narrowPieces = [],\n            mixedPieces = [],\n            i,\n            l,\n            eras = this.eras();\n\n        for (i = 0, l = eras.length; i < l; ++i) {\n            namePieces.push(regexEscape(eras[i].name));\n            abbrPieces.push(regexEscape(eras[i].abbr));\n            narrowPieces.push(regexEscape(eras[i].narrow));\n\n            mixedPieces.push(regexEscape(eras[i].name));\n            mixedPieces.push(regexEscape(eras[i].abbr));\n            mixedPieces.push(regexEscape(eras[i].narrow));\n        }\n\n        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');\n        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');\n        this._erasNarrowRegex = new RegExp(\n            '^(' + narrowPieces.join('|') + ')',\n            'i'\n        );\n    }\n\n    // FORMATTING\n\n    addFormatToken(0, ['gg', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, ['GG', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken(token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken('gggg', 'weekYear');\n    addWeekYearFormatToken('ggggg', 'weekYear');\n    addWeekYearFormatToken('GGGG', 'isoWeekYear');\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n    // ALIASES\n\n    addUnitAlias('weekYear', 'gg');\n    addUnitAlias('isoWeekYear', 'GG');\n\n    // PRIORITY\n\n    addUnitPriority('weekYear', 1);\n    addUnitPriority('isoWeekYear', 1);\n\n    // PARSING\n\n    addRegexToken('G', matchSigned);\n    addRegexToken('g', matchSigned);\n    addRegexToken('GG', match1to2, match2);\n    addRegexToken('gg', match1to2, match2);\n    addRegexToken('GGGG', match1to4, match4);\n    addRegexToken('gggg', match1to4, match4);\n    addRegexToken('GGGGG', match1to6, match6);\n    addRegexToken('ggggg', match1to6, match6);\n\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (\n        input,\n        week,\n        config,\n        token\n    ) {\n        week[token.substr(0, 2)] = toInt(input);\n    });\n\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = hooks.parseTwoDigitYear(input);\n    });\n\n    // MOMENTS\n\n    function getSetWeekYear(input) {\n        return getSetWeekYearHelper.call(\n            this,\n            input,\n            this.week(),\n            this.weekday(),\n            this.localeData()._week.dow,\n            this.localeData()._week.doy\n        );\n    }\n\n    function getSetISOWeekYear(input) {\n        return getSetWeekYearHelper.call(\n            this,\n            input,\n            this.isoWeek(),\n            this.isoWeekday(),\n            1,\n            4\n        );\n    }\n\n    function getISOWeeksInYear() {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getISOWeeksInISOWeekYear() {\n        return weeksInYear(this.isoWeekYear(), 1, 4);\n    }\n\n    function getWeeksInYear() {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getWeeksInWeekYear() {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n\n    // FORMATTING\n\n    addFormatToken('Q', 0, 'Qo', 'quarter');\n\n    // ALIASES\n\n    addUnitAlias('quarter', 'Q');\n\n    // PRIORITY\n\n    addUnitPriority('quarter', 7);\n\n    // PARSING\n\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter(input) {\n        return input == null\n            ? Math.ceil((this.month() + 1) / 3)\n            : this.month((input - 1) * 3 + (this.month() % 3));\n    }\n\n    // FORMATTING\n\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n    // ALIASES\n\n    addUnitAlias('date', 'D');\n\n    // PRIORITY\n    addUnitPriority('date', 9);\n\n    // PARSING\n\n    addRegexToken('D', match1to2);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        return isStrict\n            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse\n            : locale._dayOfMonthOrdinalParseLenient;\n    });\n\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0]);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet('Date', true);\n\n    // FORMATTING\n\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n    // ALIASES\n\n    addUnitAlias('dayOfYear', 'DDD');\n\n    // PRIORITY\n    addUnitPriority('dayOfYear', 4);\n\n    // PARSING\n\n    addRegexToken('DDD', match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    // MOMENTS\n\n    function getSetDayOfYear(input) {\n        var dayOfYear =\n            Math.round(\n                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5\n            ) + 1;\n        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('m', ['mm', 2], 0, 'minute');\n\n    // ALIASES\n\n    addUnitAlias('minute', 'm');\n\n    // PRIORITY\n\n    addUnitPriority('minute', 14);\n\n    // PARSING\n\n    addRegexToken('m', match1to2);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet('Minutes', false);\n\n    // FORMATTING\n\n    addFormatToken('s', ['ss', 2], 0, 'second');\n\n    // ALIASES\n\n    addUnitAlias('second', 's');\n\n    // PRIORITY\n\n    addUnitPriority('second', 15);\n\n    // PARSING\n\n    addRegexToken('s', match1to2);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet('Seconds', false);\n\n    // FORMATTING\n\n    addFormatToken('S', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, ['SS', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n    addFormatToken(0, ['SSSS', 4], 0, function () {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, ['SSSSS', 5], 0, function () {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n        return this.millisecond() * 1000000;\n    });\n\n    // ALIASES\n\n    addUnitAlias('millisecond', 'ms');\n\n    // PRIORITY\n\n    addUnitPriority('millisecond', 16);\n\n    // PARSING\n\n    addRegexToken('S', match1to3, match1);\n    addRegexToken('SS', match1to3, match2);\n    addRegexToken('SSS', match1to3, match3);\n\n    var token, getSetMillisecond;\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\n        addRegexToken(token, matchUnsigned);\n    }\n\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\n    }\n\n    for (token = 'S'; token.length <= 9; token += 'S') {\n        addParseToken(token, parseMs);\n    }\n\n    getSetMillisecond = makeGetSet('Milliseconds', false);\n\n    // FORMATTING\n\n    addFormatToken('z', 0, 0, 'zoneAbbr');\n    addFormatToken('zz', 0, 0, 'zoneName');\n\n    // MOMENTS\n\n    function getZoneAbbr() {\n        return this._isUTC ? 'UTC' : '';\n    }\n\n    function getZoneName() {\n        return this._isUTC ? 'Coordinated Universal Time' : '';\n    }\n\n    var proto = Moment.prototype;\n\n    proto.add = add;\n    proto.calendar = calendar$1;\n    proto.clone = clone;\n    proto.diff = diff;\n    proto.endOf = endOf;\n    proto.format = format;\n    proto.from = from;\n    proto.fromNow = fromNow;\n    proto.to = to;\n    proto.toNow = toNow;\n    proto.get = stringGet;\n    proto.invalidAt = invalidAt;\n    proto.isAfter = isAfter;\n    proto.isBefore = isBefore;\n    proto.isBetween = isBetween;\n    proto.isSame = isSame;\n    proto.isSameOrAfter = isSameOrAfter;\n    proto.isSameOrBefore = isSameOrBefore;\n    proto.isValid = isValid$2;\n    proto.lang = lang;\n    proto.locale = locale;\n    proto.localeData = localeData;\n    proto.max = prototypeMax;\n    proto.min = prototypeMin;\n    proto.parsingFlags = parsingFlags;\n    proto.set = stringSet;\n    proto.startOf = startOf;\n    proto.subtract = subtract;\n    proto.toArray = toArray;\n    proto.toObject = toObject;\n    proto.toDate = toDate;\n    proto.toISOString = toISOString;\n    proto.inspect = inspect;\n    if (typeof Symbol !== 'undefined' && Symbol.for != null) {\n        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {\n            return 'Moment<' + this.format() + '>';\n        };\n    }\n    proto.toJSON = toJSON;\n    proto.toString = toString;\n    proto.unix = unix;\n    proto.valueOf = valueOf;\n    proto.creationData = creationData;\n    proto.eraName = getEraName;\n    proto.eraNarrow = getEraNarrow;\n    proto.eraAbbr = getEraAbbr;\n    proto.eraYear = getEraYear;\n    proto.year = getSetYear;\n    proto.isLeapYear = getIsLeapYear;\n    proto.weekYear = getSetWeekYear;\n    proto.isoWeekYear = getSetISOWeekYear;\n    proto.quarter = proto.quarters = getSetQuarter;\n    proto.month = getSetMonth;\n    proto.daysInMonth = getDaysInMonth;\n    proto.week = proto.weeks = getSetWeek;\n    proto.isoWeek = proto.isoWeeks = getSetISOWeek;\n    proto.weeksInYear = getWeeksInYear;\n    proto.weeksInWeekYear = getWeeksInWeekYear;\n    proto.isoWeeksInYear = getISOWeeksInYear;\n    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;\n    proto.date = getSetDayOfMonth;\n    proto.day = proto.days = getSetDayOfWeek;\n    proto.weekday = getSetLocaleDayOfWeek;\n    proto.isoWeekday = getSetISODayOfWeek;\n    proto.dayOfYear = getSetDayOfYear;\n    proto.hour = proto.hours = getSetHour;\n    proto.minute = proto.minutes = getSetMinute;\n    proto.second = proto.seconds = getSetSecond;\n    proto.millisecond = proto.milliseconds = getSetMillisecond;\n    proto.utcOffset = getSetOffset;\n    proto.utc = setOffsetToUTC;\n    proto.local = setOffsetToLocal;\n    proto.parseZone = setOffsetToParsedOffset;\n    proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    proto.isDST = isDaylightSavingTime;\n    proto.isLocal = isLocal;\n    proto.isUtcOffset = isUtcOffset;\n    proto.isUtc = isUtc;\n    proto.isUTC = isUtc;\n    proto.zoneAbbr = getZoneAbbr;\n    proto.zoneName = getZoneName;\n    proto.dates = deprecate(\n        'dates accessor is deprecated. Use date instead.',\n        getSetDayOfMonth\n    );\n    proto.months = deprecate(\n        'months accessor is deprecated. Use month instead',\n        getSetMonth\n    );\n    proto.years = deprecate(\n        'years accessor is deprecated. Use year instead',\n        getSetYear\n    );\n    proto.zone = deprecate(\n        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',\n        getSetZone\n    );\n    proto.isDSTShifted = deprecate(\n        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',\n        isDaylightSavingTimeShifted\n    );\n\n    function createUnix(input) {\n        return createLocal(input * 1000);\n    }\n\n    function createInZone() {\n        return createLocal.apply(null, arguments).parseZone();\n    }\n\n    function preParsePostFormat(string) {\n        return string;\n    }\n\n    var proto$1 = Locale.prototype;\n\n    proto$1.calendar = calendar;\n    proto$1.longDateFormat = longDateFormat;\n    proto$1.invalidDate = invalidDate;\n    proto$1.ordinal = ordinal;\n    proto$1.preparse = preParsePostFormat;\n    proto$1.postformat = preParsePostFormat;\n    proto$1.relativeTime = relativeTime;\n    proto$1.pastFuture = pastFuture;\n    proto$1.set = set;\n    proto$1.eras = localeEras;\n    proto$1.erasParse = localeErasParse;\n    proto$1.erasConvertYear = localeErasConvertYear;\n    proto$1.erasAbbrRegex = erasAbbrRegex;\n    proto$1.erasNameRegex = erasNameRegex;\n    proto$1.erasNarrowRegex = erasNarrowRegex;\n\n    proto$1.months = localeMonths;\n    proto$1.monthsShort = localeMonthsShort;\n    proto$1.monthsParse = localeMonthsParse;\n    proto$1.monthsRegex = monthsRegex;\n    proto$1.monthsShortRegex = monthsShortRegex;\n    proto$1.week = localeWeek;\n    proto$1.firstDayOfYear = localeFirstDayOfYear;\n    proto$1.firstDayOfWeek = localeFirstDayOfWeek;\n\n    proto$1.weekdays = localeWeekdays;\n    proto$1.weekdaysMin = localeWeekdaysMin;\n    proto$1.weekdaysShort = localeWeekdaysShort;\n    proto$1.weekdaysParse = localeWeekdaysParse;\n\n    proto$1.weekdaysRegex = weekdaysRegex;\n    proto$1.weekdaysShortRegex = weekdaysShortRegex;\n    proto$1.weekdaysMinRegex = weekdaysMinRegex;\n\n    proto$1.isPM = localeIsPM;\n    proto$1.meridiem = localeMeridiem;\n\n    function get$1(format, index, field, setter) {\n        var locale = getLocale(),\n            utc = createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function listMonthsImpl(format, index, field) {\n        if (isNumber(format)) {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n\n        if (index != null) {\n            return get$1(format, index, field, 'month');\n        }\n\n        var i,\n            out = [];\n        for (i = 0; i < 12; i++) {\n            out[i] = get$1(format, i, field, 'month');\n        }\n        return out;\n    }\n\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl(localeSorted, format, index, field) {\n        if (typeof localeSorted === 'boolean') {\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        }\n\n        var locale = getLocale(),\n            shift = localeSorted ? locale._week.dow : 0,\n            i,\n            out = [];\n\n        if (index != null) {\n            return get$1(format, (index + shift) % 7, field, 'day');\n        }\n\n        for (i = 0; i < 7; i++) {\n            out[i] = get$1(format, (i + shift) % 7, field, 'day');\n        }\n        return out;\n    }\n\n    function listMonths(format, index) {\n        return listMonthsImpl(format, index, 'months');\n    }\n\n    function listMonthsShort(format, index) {\n        return listMonthsImpl(format, index, 'monthsShort');\n    }\n\n    function listWeekdays(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n    }\n\n    function listWeekdaysShort(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n    }\n\n    function listWeekdaysMin(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n    }\n\n    getSetGlobalLocale('en', {\n        eras: [\n            {\n                since: '0001-01-01',\n                until: +Infinity,\n                offset: 1,\n                name: 'Anno Domini',\n                narrow: 'AD',\n                abbr: 'AD',\n            },\n            {\n                since: '0000-12-31',\n                until: -Infinity,\n                offset: 1,\n                name: 'Before Christ',\n                narrow: 'BC',\n                abbr: 'BC',\n            },\n        ],\n        dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal: function (number) {\n            var b = number % 10,\n                output =\n                    toInt((number % 100) / 10) === 1\n                        ? 'th'\n                        : b === 1\n                        ? 'st'\n                        : b === 2\n                        ? 'nd'\n                        : b === 3\n                        ? 'rd'\n                        : 'th';\n            return number + output;\n        },\n    });\n\n    // Side effect imports\n\n    hooks.lang = deprecate(\n        'moment.lang is deprecated. Use moment.locale instead.',\n        getSetGlobalLocale\n    );\n    hooks.langData = deprecate(\n        'moment.langData is deprecated. Use moment.localeData instead.',\n        getLocale\n    );\n\n    var mathAbs = Math.abs;\n\n    function abs() {\n        var data = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days = mathAbs(this._days);\n        this._months = mathAbs(this._months);\n\n        data.milliseconds = mathAbs(data.milliseconds);\n        data.seconds = mathAbs(data.seconds);\n        data.minutes = mathAbs(data.minutes);\n        data.hours = mathAbs(data.hours);\n        data.months = mathAbs(data.months);\n        data.years = mathAbs(data.years);\n\n        return this;\n    }\n\n    function addSubtract$1(duration, input, value, direction) {\n        var other = createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days += direction * other._days;\n        duration._months += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function add$1(input, value) {\n        return addSubtract$1(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function subtract$1(input, value) {\n        return addSubtract$1(this, input, value, -1);\n    }\n\n    function absCeil(number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n\n    function bubble() {\n        var milliseconds = this._milliseconds,\n            days = this._days,\n            months = this._months,\n            data = this._data,\n            seconds,\n            minutes,\n            hours,\n            years,\n            monthsFromDays;\n\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (\n            !(\n                (milliseconds >= 0 && days >= 0 && months >= 0) ||\n                (milliseconds <= 0 && days <= 0 && months <= 0)\n            )\n        ) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds = absFloor(milliseconds / 1000);\n        data.seconds = seconds % 60;\n\n        minutes = absFloor(seconds / 60);\n        data.minutes = minutes % 60;\n\n        hours = absFloor(minutes / 60);\n        data.hours = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        data.days = days;\n        data.months = months;\n        data.years = years;\n\n        return this;\n    }\n\n    function daysToMonths(days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return (days * 4800) / 146097;\n    }\n\n    function monthsToDays(months) {\n        // the reverse of daysToMonths\n        return (months * 146097) / 4800;\n    }\n\n    function as(units) {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        var days,\n            months,\n            milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === 'month' || units === 'quarter' || units === 'year') {\n            days = this._days + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            switch (units) {\n                case 'month':\n                    return months;\n                case 'quarter':\n                    return months / 3;\n                case 'year':\n                    return months / 12;\n            }\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch (units) {\n                case 'week':\n                    return days / 7 + milliseconds / 6048e5;\n                case 'day':\n                    return days + milliseconds / 864e5;\n                case 'hour':\n                    return days * 24 + milliseconds / 36e5;\n                case 'minute':\n                    return days * 1440 + milliseconds / 6e4;\n                case 'second':\n                    return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case 'millisecond':\n                    return Math.floor(days * 864e5) + milliseconds;\n                default:\n                    throw new Error('Unknown unit ' + units);\n            }\n        }\n    }\n\n    // TODO: Use this.as('ms')?\n    function valueOf$1() {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        return (\n            this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6\n        );\n    }\n\n    function makeAs(alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs('ms'),\n        asSeconds = makeAs('s'),\n        asMinutes = makeAs('m'),\n        asHours = makeAs('h'),\n        asDays = makeAs('d'),\n        asWeeks = makeAs('w'),\n        asMonths = makeAs('M'),\n        asQuarters = makeAs('Q'),\n        asYears = makeAs('y');\n\n    function clone$1() {\n        return createDuration(this);\n    }\n\n    function get$2(units) {\n        units = normalizeUnits(units);\n        return this.isValid() ? this[units + 's']() : NaN;\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this.isValid() ? this._data[name] : NaN;\n        };\n    }\n\n    var milliseconds = makeGetter('milliseconds'),\n        seconds = makeGetter('seconds'),\n        minutes = makeGetter('minutes'),\n        hours = makeGetter('hours'),\n        days = makeGetter('days'),\n        months = makeGetter('months'),\n        years = makeGetter('years');\n\n    function weeks() {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round,\n        thresholds = {\n            ss: 44, // a few seconds to seconds\n            s: 45, // seconds to minute\n            m: 45, // minutes to hour\n            h: 22, // hours to day\n            d: 26, // days to month/week\n            w: null, // weeks to month\n            M: 11, // months to year\n        };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {\n        var duration = createDuration(posNegDuration).abs(),\n            seconds = round(duration.as('s')),\n            minutes = round(duration.as('m')),\n            hours = round(duration.as('h')),\n            days = round(duration.as('d')),\n            months = round(duration.as('M')),\n            weeks = round(duration.as('w')),\n            years = round(duration.as('y')),\n            a =\n                (seconds <= thresholds.ss && ['s', seconds]) ||\n                (seconds < thresholds.s && ['ss', seconds]) ||\n                (minutes <= 1 && ['m']) ||\n                (minutes < thresholds.m && ['mm', minutes]) ||\n                (hours <= 1 && ['h']) ||\n                (hours < thresholds.h && ['hh', hours]) ||\n                (days <= 1 && ['d']) ||\n                (days < thresholds.d && ['dd', days]);\n\n        if (thresholds.w != null) {\n            a =\n                a ||\n                (weeks <= 1 && ['w']) ||\n                (weeks < thresholds.w && ['ww', weeks]);\n        }\n        a = a ||\n            (months <= 1 && ['M']) ||\n            (months < thresholds.M && ['MM', months]) ||\n            (years <= 1 && ['y']) || ['yy', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set the rounding function for relative time strings\n    function getSetRelativeTimeRounding(roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof roundingFunction === 'function') {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function getSetRelativeTimeThreshold(threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        if (threshold === 's') {\n            thresholds.ss = limit - 1;\n        }\n        return true;\n    }\n\n    function humanize(argWithSuffix, argThresholds) {\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var withSuffix = false,\n            th = thresholds,\n            locale,\n            output;\n\n        if (typeof argWithSuffix === 'object') {\n            argThresholds = argWithSuffix;\n            argWithSuffix = false;\n        }\n        if (typeof argWithSuffix === 'boolean') {\n            withSuffix = argWithSuffix;\n        }\n        if (typeof argThresholds === 'object') {\n            th = Object.assign({}, thresholds, argThresholds);\n            if (argThresholds.s != null && argThresholds.ss == null) {\n                th.ss = argThresholds.s - 1;\n            }\n        }\n\n        locale = this.localeData();\n        output = relativeTime$1(this, !withSuffix, th, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var abs$1 = Math.abs;\n\n    function sign(x) {\n        return (x > 0) - (x < 0) || +x;\n    }\n\n    function toISOString$1() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var seconds = abs$1(this._milliseconds) / 1000,\n            days = abs$1(this._days),\n            months = abs$1(this._months),\n            minutes,\n            hours,\n            years,\n            s,\n            total = this.asSeconds(),\n            totalSign,\n            ymSign,\n            daysSign,\n            hmsSign;\n\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return 'P0D';\n        }\n\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes = absFloor(seconds / 60);\n        hours = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        s = seconds ? seconds.toFixed(3).replace(/\\.?0+$/, '') : '';\n\n        totalSign = total < 0 ? '-' : '';\n        ymSign = sign(this._months) !== sign(total) ? '-' : '';\n        daysSign = sign(this._days) !== sign(total) ? '-' : '';\n        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';\n\n        return (\n            totalSign +\n            'P' +\n            (years ? ymSign + years + 'Y' : '') +\n            (months ? ymSign + months + 'M' : '') +\n            (days ? daysSign + days + 'D' : '') +\n            (hours || minutes || seconds ? 'T' : '') +\n            (hours ? hmsSign + hours + 'H' : '') +\n            (minutes ? hmsSign + minutes + 'M' : '') +\n            (seconds ? hmsSign + s + 'S' : '')\n        );\n    }\n\n    var proto$2 = Duration.prototype;\n\n    proto$2.isValid = isValid$1;\n    proto$2.abs = abs;\n    proto$2.add = add$1;\n    proto$2.subtract = subtract$1;\n    proto$2.as = as;\n    proto$2.asMilliseconds = asMilliseconds;\n    proto$2.asSeconds = asSeconds;\n    proto$2.asMinutes = asMinutes;\n    proto$2.asHours = asHours;\n    proto$2.asDays = asDays;\n    proto$2.asWeeks = asWeeks;\n    proto$2.asMonths = asMonths;\n    proto$2.asQuarters = asQuarters;\n    proto$2.asYears = asYears;\n    proto$2.valueOf = valueOf$1;\n    proto$2._bubble = bubble;\n    proto$2.clone = clone$1;\n    proto$2.get = get$2;\n    proto$2.milliseconds = milliseconds;\n    proto$2.seconds = seconds;\n    proto$2.minutes = minutes;\n    proto$2.hours = hours;\n    proto$2.days = days;\n    proto$2.weeks = weeks;\n    proto$2.months = months;\n    proto$2.years = years;\n    proto$2.humanize = humanize;\n    proto$2.toISOString = toISOString$1;\n    proto$2.toString = toISOString$1;\n    proto$2.toJSON = toISOString$1;\n    proto$2.locale = locale;\n    proto$2.localeData = localeData;\n\n    proto$2.toIsoString = deprecate(\n        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',\n        toISOString$1\n    );\n    proto$2.lang = lang;\n\n    // FORMATTING\n\n    addFormatToken('X', 0, 0, 'unix');\n    addFormatToken('x', 0, 0, 'valueOf');\n\n    // PARSING\n\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input) * 1000);\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    //! moment.js\n\n    hooks.version = '2.29.1';\n\n    setHookCallback(createLocal);\n\n    hooks.fn = proto;\n    hooks.min = min;\n    hooks.max = max;\n    hooks.now = now;\n    hooks.utc = createUTC;\n    hooks.unix = createUnix;\n    hooks.months = listMonths;\n    hooks.isDate = isDate;\n    hooks.locale = getSetGlobalLocale;\n    hooks.invalid = createInvalid;\n    hooks.duration = createDuration;\n    hooks.isMoment = isMoment;\n    hooks.weekdays = listWeekdays;\n    hooks.parseZone = createInZone;\n    hooks.localeData = getLocale;\n    hooks.isDuration = isDuration;\n    hooks.monthsShort = listMonthsShort;\n    hooks.weekdaysMin = listWeekdaysMin;\n    hooks.defineLocale = defineLocale;\n    hooks.updateLocale = updateLocale;\n    hooks.locales = listLocales;\n    hooks.weekdaysShort = listWeekdaysShort;\n    hooks.normalizeUnits = normalizeUnits;\n    hooks.relativeTimeRounding = getSetRelativeTimeRounding;\n    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;\n    hooks.calendarFormat = getCalendarFormat;\n    hooks.prototype = proto;\n\n    // currently HTML5 input type only supports 24-hour formats\n    hooks.HTML5_FMT = {\n        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type=\"datetime-local\" />\n        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type=\"datetime-local\" step=\"1\" />\n        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type=\"datetime-local\" step=\"0.001\" />\n        DATE: 'YYYY-MM-DD', // <input type=\"date\" />\n        TIME: 'HH:mm', // <input type=\"time\" />\n        TIME_SECONDS: 'HH:mm:ss', // <input type=\"time\" step=\"1\" />\n        TIME_MS: 'HH:mm:ss.SSS', // <input type=\"time\" step=\"0.001\" />\n        WEEK: 'GGGG-[W]WW', // <input type=\"week\" />\n        MONTH: 'YYYY-MM', // <input type=\"month\" />\n    };\n\n    return hooks;\n\n})));\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","var Buffer = require('safe-buffer').Buffer\n\n// prototype class for hash functions\nfunction Hash (blockSize, finalSize) {\n  this._block = Buffer.alloc(blockSize)\n  this._finalSize = finalSize\n  this._blockSize = blockSize\n  this._len = 0\n}\n\nHash.prototype.update = function (data, enc) {\n  if (typeof data === 'string') {\n    enc = enc || 'utf8'\n    data = Buffer.from(data, enc)\n  }\n\n  var block = this._block\n  var blockSize = this._blockSize\n  var length = data.length\n  var accum = this._len\n\n  for (var offset = 0; offset < length;) {\n    var assigned = accum % blockSize\n    var remainder = Math.min(length - offset, blockSize - assigned)\n\n    for (var i = 0; i < remainder; i++) {\n      block[assigned + i] = data[offset + i]\n    }\n\n    accum += remainder\n    offset += remainder\n\n    if ((accum % blockSize) === 0) {\n      this._update(block)\n    }\n  }\n\n  this._len += length\n  return this\n}\n\nHash.prototype.digest = function (enc) {\n  var rem = this._len % this._blockSize\n\n  this._block[rem] = 0x80\n\n  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest\n  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\n  this._block.fill(0, rem + 1)\n\n  if (rem >= this._finalSize) {\n    this._update(this._block)\n    this._block.fill(0)\n  }\n\n  var bits = this._len * 8\n\n  // uint32\n  if (bits <= 0xffffffff) {\n    this._block.writeUInt32BE(bits, this._blockSize - 4)\n\n  // uint64\n  } else {\n    var lowBits = (bits & 0xffffffff) >>> 0\n    var highBits = (bits - lowBits) / 0x100000000\n\n    this._block.writeUInt32BE(highBits, this._blockSize - 8)\n    this._block.writeUInt32BE(lowBits, this._blockSize - 4)\n  }\n\n  this._update(this._block)\n  var hash = this._hash()\n\n  return enc ? hash.toString(enc) : hash\n}\n\nHash.prototype._update = function () {\n  throw new Error('_update must be implemented by subclass')\n}\n\nmodule.exports = Hash\n","import {ObjectLiteral} from \"../../common/ObjectLiteral\";\n\n/**\n * Result object returned by UpdateQueryBuilder execution.\n */\nexport class UpdateResult {\n\n    /**\n     * Raw SQL result returned by executed query.\n     */\n    raw: any;\n\n    /**\n     * Number of affected rows/documents\n     * Not all drivers support this\n     */\n    affected?: number;\n\n    /**\n     * Contains inserted entity id.\n     * Has entity-like structure (not just column database name and values).\n     */\n    // identifier: ObjectLiteral[] = [];\n\n    /**\n     * Generated values returned by a database.\n     * Has entity-like structure (not just column database name and values).\n     */\n    generatedMaps: ObjectLiteral[] = [];\n\n}\n","/**\n * Thrown when a transaction is required for the current operation, but there is none open.\n */\nexport class PessimisticLockTransactionRequiredError extends Error {\n    name = \"PessimisticLockTransactionRequiredError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, PessimisticLockTransactionRequiredError.prototype);\n        this.message = `An open transaction is required for pessimistic lock.`;\n    }\n\n}","/**\n * Thrown when an entity does not have no version and no update date column.\n */\nexport class NoVersionOrUpdateDateColumnError extends Error {\n    name = \"NoVersionOrUpdateDateColumnError\";\n\n    constructor(entity: string) {\n        super();\n        Object.setPrototypeOf(this, NoVersionOrUpdateDateColumnError.prototype);\n        this.message = `Entity ${entity} does not have version or update date columns.`;\n    }\n\n}","/**\n * Thrown when a version check on an object that uses optimistic locking through a version field fails.\n */\nexport class OptimisticLockVersionMismatchError extends Error {\n    name = \"OptimisticLockVersionMismatchError\";\n\n    constructor(entity: string, expectedVersion: number|Date, actualVersion: number|Date) {\n        super();\n        Object.setPrototypeOf(this, OptimisticLockVersionMismatchError.prototype);\n        this.message = `The optimistic lock on entity ${entity} failed, version ${expectedVersion} was expected, but is actually ${actualVersion}.`;\n    }\n\n}\n","/**\n * Thrown when an optimistic lock cannot be used in query builder.\n */\nexport class OptimisticLockCanNotBeUsedError extends Error {\n    name = \"OptimisticLockCanNotBeUsedError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, OptimisticLockCanNotBeUsedError.prototype);\n        this.message = `The optimistic lock can be used only with getOne() method.`;\n    }\n\n}\n","import {RelationIdAttribute} from \"./RelationIdAttribute\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RelationIdLoadResult} from \"./RelationIdLoadResult\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {DriverUtils} from \"../../driver/DriverUtils\";\n\nexport class RelationIdLoader {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection,\n                protected queryRunner: QueryRunner|undefined,\n                protected relationIdAttributes: RelationIdAttribute[]) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    async load(rawEntities: any[]): Promise<RelationIdLoadResult[]> {\n\n        const promises = this.relationIdAttributes.map(async relationIdAttr => {\n\n            if (relationIdAttr.relation.isManyToOne || relationIdAttr.relation.isOneToOneOwner) {\n                // example: Post and Tag\n                // loadRelationIdAndMap(\"post.tagId\", \"post.tag\")\n                // we expect it to load id of tag\n\n                if (relationIdAttr.queryBuilderFactory)\n                    throw new Error(\"Additional condition can not be used with ManyToOne or OneToOne owner relations.\");\n\n                const results = rawEntities.map(rawEntity => {\n                    const result: ObjectLiteral = {};\n                    relationIdAttr.relation.joinColumns.forEach(joinColumn => {\n                        result[joinColumn.databaseName] = this.connection.driver.prepareHydratedValue(rawEntity[DriverUtils.buildColumnAlias(this.connection.driver, relationIdAttr.parentAlias, joinColumn.databaseName)], joinColumn.referencedColumn!);\n                    });\n\n                    relationIdAttr.relation.entityMetadata.primaryColumns.forEach(primaryColumn => {\n                        result[primaryColumn.databaseName] = this.connection.driver.prepareHydratedValue(rawEntity[DriverUtils.buildColumnAlias(this.connection.driver, relationIdAttr.parentAlias, primaryColumn.databaseName)], primaryColumn);\n                    });\n                    return result;\n                });\n\n                return {\n                    relationIdAttribute: relationIdAttr,\n                    results: results\n                };\n\n            } else if (relationIdAttr.relation.isOneToMany || relationIdAttr.relation.isOneToOneNotOwner) {\n                // example: Post and Category\n                // loadRelationIdAndMap(\"post.categoryIds\", \"post.categories\")\n                // we expect it to load array of category ids\n\n                const relation = relationIdAttr.relation; // \"post.categories\"\n                const joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation!.joinColumns;\n                const table = relation.inverseEntityMetadata.target; // category\n                const tableName = relation.inverseEntityMetadata.tableName; // category\n                const tableAlias = relationIdAttr.alias || tableName; // if condition (custom query builder factory) is set then relationIdAttr.alias defined\n\n                const parameters: ObjectLiteral = {};\n                const condition = rawEntities.map((rawEntity, index) => {\n                    return joinColumns.map(joinColumn => {\n                        const parameterName = joinColumn.databaseName + index;\n                        parameters[parameterName] = rawEntity[DriverUtils.buildColumnAlias(this.connection.driver, relationIdAttr.parentAlias, joinColumn.referencedColumn!.databaseName)];\n                        return tableAlias + \".\" + joinColumn.propertyPath + \" = :\" + parameterName;\n                    }).join(\" AND \");\n                }).map(condition => \"(\" + condition + \")\")\n                    .join(\" OR \");\n\n                // ensure we won't perform redundant queries for joined data which was not found in selection\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                if (!condition)\n                    return { relationIdAttribute: relationIdAttr, results: [] };\n\n                // generate query:\n                // SELECT category.id, category.postId FROM category category ON category.postId = :postId\n                const qb = this.connection.createQueryBuilder(this.queryRunner);\n\n                joinColumns.forEach(joinColumn => {\n                    qb.addSelect(tableAlias + \".\" + joinColumn.propertyPath, joinColumn.databaseName);\n                });\n\n                relation.inverseRelation!.entityMetadata.primaryColumns.forEach(primaryColumn => {\n                    qb.addSelect(tableAlias + \".\" + primaryColumn.propertyPath, primaryColumn.databaseName);\n                });\n\n                qb.from(table, tableAlias)\n                    .where(\"(\" + condition + \")\") // need brackets because if we have additional condition and no brackets, it looks like (a = 1) OR (a = 2) AND b = 1, that is incorrect\n                    .setParameters(parameters);\n\n                // apply condition (custom query builder factory)\n                if (relationIdAttr.queryBuilderFactory)\n                    relationIdAttr.queryBuilderFactory(qb);\n\n                const results = await qb.getRawMany();\n                results.forEach(result => {\n                    joinColumns.forEach(column => {\n                        result[column.databaseName] = this.connection.driver.prepareHydratedValue(result[column.databaseName], column.referencedColumn!);\n                    });\n                    relation.inverseRelation!.entityMetadata.primaryColumns.forEach(column => {\n                        result[column.databaseName] = this.connection.driver.prepareHydratedValue(result[column.databaseName], column);\n                    });\n                });\n\n                return {\n                    relationIdAttribute: relationIdAttr,\n                    results\n                };\n\n            } else {\n                // many-to-many\n                // example: Post and Category\n                // owner side: loadRelationIdAndMap(\"post.categoryIds\", \"post.categories\")\n                // inverse side: loadRelationIdAndMap(\"category.postIds\", \"category.posts\")\n                // we expect it to load array of post ids\n\n                const relation = relationIdAttr.relation;\n                const joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation!.inverseJoinColumns;\n                const inverseJoinColumns = relation.isOwning ? relation.inverseJoinColumns : relation.inverseRelation!.joinColumns;\n                const junctionAlias = relationIdAttr.junctionAlias;\n                const inverseSideTableName = relationIdAttr.joinInverseSideMetadata.tableName;\n                const inverseSideTableAlias = relationIdAttr.alias || inverseSideTableName;\n                const junctionTableName = relation.isOwning ? relation.junctionEntityMetadata!.tableName : relation.inverseRelation!.junctionEntityMetadata!.tableName;\n\n\n                const mappedColumns = rawEntities.map(rawEntity => {\n                    return joinColumns.reduce((map, joinColumn) => {\n                        map[joinColumn.propertyPath] = rawEntity[DriverUtils.buildColumnAlias(this.connection.driver, relationIdAttr.parentAlias, joinColumn.referencedColumn!.databaseName)];\n                        return map;\n                    }, {} as ObjectLiteral);\n                });\n\n                // ensure we won't perform redundant queries for joined data which was not found in selection\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                if (mappedColumns.length === 0)\n                    return { relationIdAttribute: relationIdAttr, results: [] };\n\n                const parameters: ObjectLiteral = {};\n                const joinColumnConditions = mappedColumns.map((mappedColumn, index) => {\n                    return Object.keys(mappedColumn).map(key => {\n                        const parameterName = key + index;\n                        parameters[parameterName] = mappedColumn[key];\n                        return junctionAlias + \".\" + key + \" = :\" + parameterName;\n                    }).join(\" AND \");\n                });\n\n                const inverseJoinColumnCondition = inverseJoinColumns.map(joinColumn => {\n                    return junctionAlias + \".\" + joinColumn.propertyPath + \" = \" + inverseSideTableAlias + \".\" + joinColumn.referencedColumn!.propertyPath;\n                }).join(\" AND \");\n\n                const condition = joinColumnConditions.map(condition => {\n                    return \"(\" + condition + \" AND \" + inverseJoinColumnCondition + \")\";\n                }).join(\" OR \");\n\n                const qb = this.connection.createQueryBuilder(this.queryRunner);\n\n                inverseJoinColumns.forEach(joinColumn => {\n                    qb.addSelect(junctionAlias + \".\" + joinColumn.propertyPath, joinColumn.databaseName)\n                    .addOrderBy(junctionAlias + \".\" + joinColumn.propertyPath);\n                });\n\n                joinColumns.forEach(joinColumn => {\n                    qb.addSelect(junctionAlias + \".\" + joinColumn.propertyPath, joinColumn.databaseName)\n                    .addOrderBy(junctionAlias + \".\" + joinColumn.propertyPath);\n                });\n\n                qb.from(inverseSideTableName, inverseSideTableAlias)\n                    .innerJoin(junctionTableName, junctionAlias, condition)\n                    .setParameters(parameters);\n\n                // apply condition (custom query builder factory)\n                if (relationIdAttr.queryBuilderFactory)\n                    relationIdAttr.queryBuilderFactory(qb);\n\n                const results = await qb.getRawMany();\n                results.forEach(result => {\n                    [...joinColumns, ...inverseJoinColumns].forEach(column => {\n                        result[column.databaseName] = this.connection.driver.prepareHydratedValue(result[column.databaseName], column.referencedColumn!);\n                    });\n                });\n\n                return {\n                    relationIdAttribute: relationIdAttr,\n                    results\n                };\n            }\n        });\n\n        return Promise.all(promises);\n    }\n}\n","import {RelationIdAttribute} from \"./RelationIdAttribute\";\nimport {QueryExpressionMap} from \"../QueryExpressionMap\";\nimport {RelationIdMetadata} from \"../../metadata/RelationIdMetadata\";\n\nexport class RelationIdMetadataToAttributeTransformer {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected expressionMap: QueryExpressionMap) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    transform() {\n\n        // by example:\n        // post has relation id:\n        // @RelationId(post => post.categories) categoryIds\n        // category has relation id\n        // @RelationId(category => category.images) imageIds\n        // we load post and join category\n        // we expect post.categoryIds and post.category.imageIds to have relation ids\n\n        // first create relation id attributes for all relation id metadatas of the main selected object (post from example)\n        if (this.expressionMap.mainAlias) {\n            this.expressionMap.mainAlias.metadata.relationIds.forEach(relationId => {\n                const attribute = this.metadataToAttribute(this.expressionMap.mainAlias!.name, relationId);\n                this.expressionMap.relationIdAttributes.push(attribute);\n            });\n        }\n\n        // second create relation id attributes for all relation id metadatas of all joined objects (category from example)\n        this.expressionMap.joinAttributes.forEach(join => {\n\n            // ensure this join has a metadata, because relation id can only work for real orm entities\n            if (!join.metadata || join.metadata.isJunction)\n                return;\n\n            join.metadata.relationIds.forEach(relationId => {\n                const attribute = this.metadataToAttribute(join.alias.name, relationId);\n                this.expressionMap.relationIdAttributes.push(attribute);\n            });\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    private metadataToAttribute(parentAliasName: string, relationId: RelationIdMetadata): RelationIdAttribute {\n        return new RelationIdAttribute(this.expressionMap, {\n            relationName: parentAliasName + \".\" + relationId.relation.propertyName, // category.images\n            mapToProperty: parentAliasName + \".\" + relationId.propertyName, // category.imageIds\n            alias: relationId.alias,\n            queryBuilderFactory: relationId.queryBuilderFactory\n        });\n    }\n\n}","import {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RelationCountAttribute} from \"./RelationCountAttribute\";\nimport {RelationCountLoadResult} from \"./RelationCountLoadResult\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\n\nexport class RelationCountLoader {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection,\n                protected queryRunner: QueryRunner|undefined,\n                protected relationCountAttributes: RelationCountAttribute[]) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    async load(rawEntities: any[]): Promise<RelationCountLoadResult[]> {\n\n        const onlyUnique = (value: any, index: number, self: any) => {\n            return self.indexOf(value) === index;\n        };\n\n        const promises = this.relationCountAttributes.map(async relationCountAttr => {\n\n            if (relationCountAttr.relation.isOneToMany) {\n                // example: Post and Category\n                // loadRelationCountAndMap(\"post.categoryCount\", \"post.categories\")\n                // we expect it to load array of post ids\n\n                // todo(dima): fix issues wit multiple primary keys and remove joinColumns[0]\n                const relation = relationCountAttr.relation; // \"category.posts\"\n                const inverseRelation = relation.inverseRelation!; // \"post.category\"\n                const referenceColumnName = inverseRelation.joinColumns[0].referencedColumn!.propertyName; // post id\n                const inverseSideTable = relation.inverseEntityMetadata.target; // Post\n                const inverseSideTableName = relation.inverseEntityMetadata.tableName; // post\n                const inverseSideTableAlias = relationCountAttr.alias || inverseSideTableName; // if condition (custom query builder factory) is set then relationIdAttr.alias defined\n                const inverseSidePropertyName = inverseRelation.propertyName; // \"category\" from \"post.category\"\n\n                let referenceColumnValues = rawEntities\n                    .map(rawEntity => rawEntity[relationCountAttr.parentAlias + \"_\" + referenceColumnName])\n                    .filter(value => !!value);\n                referenceColumnValues = referenceColumnValues.filter(onlyUnique);\n\n                // ensure we won't perform redundant queries for joined data which was not found in selection\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                if (referenceColumnValues.length === 0)\n                    return { relationCountAttribute: relationCountAttr, results: [] };\n\n                // generate query:\n                // SELECT category.post as parentId, COUNT(*) AS cnt FROM category category WHERE category.post IN (1, 2) GROUP BY category.post\n                const qb = this.connection.createQueryBuilder(this.queryRunner);\n                qb.select(inverseSideTableAlias + \".\" + inverseSidePropertyName, \"parentId\")\n                    .addSelect(\"COUNT(*)\", \"cnt\")\n                    .from(inverseSideTable, inverseSideTableAlias)\n                    .where(inverseSideTableAlias + \".\" + inverseSidePropertyName + \" IN (:...ids)\")\n                    .addGroupBy(inverseSideTableAlias + \".\" + inverseSidePropertyName)\n                    .setParameter(\"ids\", referenceColumnValues);\n\n                // apply condition (custom query builder factory)\n                if (relationCountAttr.queryBuilderFactory)\n                    relationCountAttr.queryBuilderFactory(qb);\n\n                return {\n                    relationCountAttribute: relationCountAttr,\n                    results: await qb.getRawMany()\n                };\n\n            } else {\n                // example: Post and Category\n                // owner side: loadRelationIdAndMap(\"post.categoryIds\", \"post.categories\")\n                // inverse side: loadRelationIdAndMap(\"category.postIds\", \"category.posts\")\n                // we expect it to load array of post ids\n\n                let joinTableColumnName: string;\n                let inverseJoinColumnName: string;\n                let firstJunctionColumn: ColumnMetadata;\n                let secondJunctionColumn: ColumnMetadata;\n\n                if (relationCountAttr.relation.isOwning) { // todo fix joinColumns[0] and inverseJoinColumns[0].\n                    joinTableColumnName = relationCountAttr.relation.joinColumns[0].referencedColumn!.databaseName;\n                    inverseJoinColumnName = relationCountAttr.relation.inverseJoinColumns[0].referencedColumn!.databaseName;\n                    firstJunctionColumn = relationCountAttr.relation.junctionEntityMetadata!.columns[0];\n                    secondJunctionColumn = relationCountAttr.relation.junctionEntityMetadata!.columns[1];\n\n                } else {\n                    joinTableColumnName = relationCountAttr.relation.inverseRelation!.inverseJoinColumns[0].referencedColumn!.databaseName;\n                    inverseJoinColumnName = relationCountAttr.relation.inverseRelation!.joinColumns[0].referencedColumn!.databaseName;\n                    firstJunctionColumn = relationCountAttr.relation.junctionEntityMetadata!.columns[1];\n                    secondJunctionColumn = relationCountAttr.relation.junctionEntityMetadata!.columns[0];\n                }\n\n                let referenceColumnValues = rawEntities\n                    .map(rawEntity => rawEntity[relationCountAttr.parentAlias + \"_\" + joinTableColumnName])\n                    .filter(value => !!value);\n                referenceColumnValues = referenceColumnValues.filter(onlyUnique);\n\n                // ensure we won't perform redundant queries for joined data which was not found in selection\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                if (referenceColumnValues.length === 0)\n                    return { relationCountAttribute: relationCountAttr, results: [] };\n\n                const junctionAlias = relationCountAttr.junctionAlias;\n                const inverseSideTableName = relationCountAttr.joinInverseSideMetadata.tableName;\n                const inverseSideTableAlias = relationCountAttr.alias || inverseSideTableName;\n                const junctionTableName = relationCountAttr.relation.junctionEntityMetadata!.tableName;\n                \n                const condition = junctionAlias + \".\" + firstJunctionColumn.propertyName + \" IN (\" + referenceColumnValues.map(vals => isNaN(vals) ? \"'\" + vals + \"'\" : vals) + \")\" +\n                    \" AND \" + junctionAlias + \".\" + secondJunctionColumn.propertyName + \" = \" + inverseSideTableAlias + \".\" + inverseJoinColumnName;\n\n                const qb = this.connection.createQueryBuilder(this.queryRunner);\n                qb.select(junctionAlias + \".\" + firstJunctionColumn.propertyName, \"parentId\")\n                    .addSelect(\"COUNT(\" + qb.escape(inverseSideTableAlias) + \".\" + qb.escape(inverseJoinColumnName) + \")\", \"cnt\")\n                    .from(inverseSideTableName, inverseSideTableAlias)\n                    .innerJoin(junctionTableName, junctionAlias, condition)\n                    .addGroupBy(junctionAlias + \".\" + firstJunctionColumn.propertyName);\n\n                // apply condition (custom query builder factory)\n                if (relationCountAttr.queryBuilderFactory)\n                    relationCountAttr.queryBuilderFactory(qb);\n\n                return {\n                    relationCountAttribute: relationCountAttr,\n                    results: await qb.getRawMany()\n                };\n            }\n        });\n\n        return Promise.all(promises);\n    }\n\n}\n","import {QueryExpressionMap} from \"../QueryExpressionMap\";\nimport {RelationCountMetadata} from \"../../metadata/RelationCountMetadata\";\nimport {RelationCountAttribute} from \"./RelationCountAttribute\";\n\nexport class RelationCountMetadataToAttributeTransformer {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected expressionMap: QueryExpressionMap) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    transform() {\n\n        // by example:\n        // post has relation count:\n        // @RelationCount(post => post.categories) categoryCount\n        // category has relation count\n        // @RelationCount(category => category.images) imageCount\n        // we load post and join category\n        // we expect post.categoryCount and post.category.imageCount to have relation counts\n\n        // first create relation count attributes for all relation count metadatas of the main selected object (post from example)\n        if (this.expressionMap.mainAlias) {\n            this.expressionMap.mainAlias.metadata.relationCounts.forEach(relationCount => {\n                const attribute = this.metadataToAttribute(this.expressionMap.mainAlias!.name, relationCount);\n                this.expressionMap.relationCountAttributes.push(attribute);\n            });\n        }\n\n        // second create relation count attributes for all relation count metadatas of all joined objects (category from example)\n        this.expressionMap.joinAttributes.forEach(join => {\n\n            // ensure this join has a metadata, because relation count can only work for real orm entities\n            if (!join.metadata || join.metadata.isJunction)\n                return;\n\n            join.metadata.relationCounts.forEach(relationCount => {\n                const attribute = this.metadataToAttribute(join.alias.name, relationCount);\n                this.expressionMap.relationCountAttributes.push(attribute);\n            });\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    private metadataToAttribute(parentAliasName: string, relationCount: RelationCountMetadata): RelationCountAttribute {\n        return new RelationCountAttribute(this.expressionMap, {\n            relationName: parentAliasName + \".\" + relationCount.relation.propertyName, // category.images\n            mapToProperty: parentAliasName + \".\" + relationCount.propertyName, // category.imageIds\n            alias: relationCount.alias,\n            queryBuilderFactory: relationCount.queryBuilderFactory\n        });\n    }\n\n}","/**\n * Thrown when selected sql driver does not supports locking.\n */\nexport class LockNotSupportedOnGivenDriverError extends Error {\n    name = \"LockNotSupportedOnGivenDriverError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, LockNotSupportedOnGivenDriverError.prototype);\n        this.message = `Locking not supported on given driver.`;\n    }\n\n}","/**\n * Thrown when user tries to build SELECT query using OFFSET without LIMIT applied but database does not support it.\n*/\nexport class OffsetWithoutLimitNotSupportedError extends Error {\n    name = \"OffsetWithoutLimitNotSupportedError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, OffsetWithoutLimitNotSupportedError.prototype);\n        this.message = `RDBMS does not support OFFSET without LIMIT in SELECT statements. You must use limit in conjunction with offset function (or take in conjunction with skip function if you are using pagination).`;\n    }\n\n}\n","import {SapDriver} from \"../driver/sap/SapDriver\";\nimport {RawSqlResultsToEntityTransformer} from \"./transformer/RawSqlResultsToEntityTransformer\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {PessimisticLockTransactionRequiredError} from \"../error/PessimisticLockTransactionRequiredError\";\nimport {NoVersionOrUpdateDateColumnError} from \"../error/NoVersionOrUpdateDateColumnError\";\nimport {OptimisticLockVersionMismatchError} from \"../error/OptimisticLockVersionMismatchError\";\nimport {OptimisticLockCanNotBeUsedError} from \"../error/OptimisticLockCanNotBeUsedError\";\nimport {JoinAttribute} from \"./JoinAttribute\";\nimport {RelationIdAttribute} from \"./relation-id/RelationIdAttribute\";\nimport {RelationCountAttribute} from \"./relation-count/RelationCountAttribute\";\nimport {RelationIdLoader} from \"./relation-id/RelationIdLoader\";\nimport {RelationIdMetadataToAttributeTransformer} from \"./relation-id/RelationIdMetadataToAttributeTransformer\";\nimport {RelationCountLoader} from \"./relation-count/RelationCountLoader\";\nimport {RelationCountMetadataToAttributeTransformer} from \"./relation-count/RelationCountMetadataToAttributeTransformer\";\nimport {QueryBuilder} from \"./QueryBuilder\";\nimport {ReadStream} from \"../platform/PlatformTools\";\nimport {LockNotSupportedOnGivenDriverError} from \"../error/LockNotSupportedOnGivenDriverError\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {SelectQuery} from \"./SelectQuery\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\nimport {QueryExpressionMap} from \"./QueryExpressionMap\";\nimport {EntityTarget} from \"../common/EntityTarget\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {WhereExpression} from \"./WhereExpression\";\nimport {Brackets} from \"./Brackets\";\nimport {AbstractSqliteDriver} from \"../driver/sqlite-abstract/AbstractSqliteDriver\";\nimport {QueryResultCacheOptions} from \"../cache/QueryResultCacheOptions\";\nimport {OffsetWithoutLimitNotSupportedError} from \"../error/OffsetWithoutLimitNotSupportedError\";\nimport {BroadcasterResult} from \"../subscriber/BroadcasterResult\";\nimport {SelectQueryBuilderOption} from \"./SelectQueryBuilderOption\";\nimport {ObjectUtils} from \"../util/ObjectUtils\";\nimport {DriverUtils} from \"../driver/DriverUtils\";\nimport {AuroraDataApiDriver} from \"../driver/aurora-data-api/AuroraDataApiDriver\";\nimport {CockroachDriver} from \"../driver/cockroachdb/CockroachDriver\";\nimport {EntityNotFoundError} from \"../error/EntityNotFoundError\";\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class SelectQueryBuilder<Entity> extends QueryBuilder<Entity> implements WhereExpression {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        let sql = this.createComment();\n        sql += this.createSelectExpression();\n        sql += this.createJoinExpression();\n        sql += this.createWhereExpression();\n        sql += this.createGroupByExpression();\n        sql += this.createHavingExpression();\n        sql += this.createOrderByExpression();\n        sql += this.createLimitOffsetExpression();\n        sql += this.createLockExpression();\n        sql = sql.trim();\n        if (this.expressionMap.subQuery)\n            sql = \"(\" + sql + \")\";\n        return sql;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a subquery - query that can be used inside other queries.\n     */\n    subQuery(): SelectQueryBuilder<any> {\n        const qb = this.createQueryBuilder();\n        qb.expressionMap.subQuery = true;\n        qb.expressionMap.parentQueryBuilder = this;\n        return qb;\n    }\n\n    /**\n     * Creates SELECT query.\n     * Replaces all previous selections if they exist.\n     */\n    select(): this;\n\n    /**\n     * Creates SELECT query.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, selectionAliasName?: string): this;\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection: string, selectionAliasName?: string): this;\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection: string[]): this;\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection?: string|string[]|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), selectionAliasName?: string): SelectQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"select\";\n        if (Array.isArray(selection)) {\n            this.expressionMap.selects = selection.map(selection => ({ selection: selection }));\n\n        } else if (selection instanceof Function) {\n            const subQueryBuilder = selection(this.subQuery());\n            this.setParameters(subQueryBuilder.getParameters());\n            this.expressionMap.selects.push({ selection: subQueryBuilder.getQuery(), aliasName: selectionAliasName });\n\n        } else if (selection) {\n            this.expressionMap.selects = [{ selection: selection, aliasName: selectionAliasName }];\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds new selection to the SELECT query.\n     */\n    addSelect(selection: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, selectionAliasName?: string): this;\n\n    /**\n     * Adds new selection to the SELECT query.\n     */\n    addSelect(selection: string, selectionAliasName?: string): this;\n\n    /**\n     * Adds new selection to the SELECT query.\n     */\n    addSelect(selection: string[]): this;\n\n    /**\n     * Adds new selection to the SELECT query.\n     */\n    addSelect(selection: string|string[]|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), selectionAliasName?: string): this {\n        if (!selection)\n            return this;\n\n        if (Array.isArray(selection)) {\n            this.expressionMap.selects = this.expressionMap.selects.concat(selection.map(selection => ({ selection: selection })));\n\n        } else if (selection instanceof Function) {\n            const subQueryBuilder = selection(this.subQuery());\n            this.setParameters(subQueryBuilder.getParameters());\n            this.expressionMap.selects.push({ selection: subQueryBuilder.getQuery(), aliasName: selectionAliasName });\n\n        } else if (selection) {\n            this.expressionMap.selects.push({ selection: selection, aliasName: selectionAliasName });\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets whether the selection is DISTINCT.\n     */\n    distinct(distinct: boolean = true): this {\n        this.expressionMap.selectDistinct = distinct;\n        return this;\n    }\n\n    /**\n     * Sets the distinct on clause for Postgres.\n     */\n    distinctOn(distinctOn: string[]): this {\n        this.expressionMap.selectDistinctOn = distinctOn;\n        return this;\n    }\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     * Removes all previously set from-s.\n     */\n    from<T>(entityTarget: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, aliasName: string): SelectQueryBuilder<T>;\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     * Removes all previously set from-s.\n     */\n    from<T>(entityTarget: EntityTarget<T>, aliasName: string): SelectQueryBuilder<T>;\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     * Removes all previously set from-s.\n     */\n    from<T>(entityTarget: EntityTarget<T>|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), aliasName: string): SelectQueryBuilder<T> {\n        const mainAlias = this.createFromAlias(entityTarget, aliasName);\n        this.expressionMap.setMainAlias(mainAlias);\n        return (this as any) as SelectQueryBuilder<T>;\n    }\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    addFrom<T>(entityTarget: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, aliasName: string): SelectQueryBuilder<T>;\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    addFrom<T>(entityTarget: EntityTarget<T>, aliasName: string): SelectQueryBuilder<T>;\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    addFrom<T>(entityTarget: EntityTarget<T>|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), aliasName: string): SelectQueryBuilder<T> {\n        const alias = this.createFromAlias(entityTarget, aliasName);\n        if (!this.expressionMap.mainAlias)\n            this.expressionMap.setMainAlias(alias);\n\n        return (this as any) as SelectQueryBuilder<T>;\n    }\n\n    /**\n     * INNER JOINs (without selection) given subquery.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoin(subQueryFactory: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs (without selection) entity's property.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoin(property: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs (without selection) given entity's table.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoin(entity: Function|string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs (without selection) given table.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoin(tableName: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs (without selection).\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoin(entityOrProperty: Function|string|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), alias: string, condition: string = \"\", parameters?: ObjectLiteral): this {\n        this.join(\"INNER\", entityOrProperty, alias, condition, parameters);\n        return this;\n    }\n\n    /**\n     * LEFT JOINs (without selection) given subquery.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoin(subQueryFactory: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs (without selection) entity's property.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoin(property: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs (without selection) entity's table.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoin(entity: Function|string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs (without selection) given table.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoin(tableName: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs (without selection).\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoin(entityOrProperty: Function|string|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), alias: string, condition: string = \"\", parameters?: ObjectLiteral): this {\n        this.join(\"LEFT\", entityOrProperty, alias, condition, parameters);\n        return this;\n    }\n\n    /**\n     * INNER JOINs given subquery and adds all selection properties to SELECT..\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndSelect(subQueryFactory: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs entity's property and adds all selection properties to SELECT.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndSelect(property: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs entity and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndSelect(entity: Function|string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs table and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndSelect(tableName: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndSelect(entityOrProperty: Function|string|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), alias: string, condition: string = \"\", parameters?: ObjectLiteral): this {\n        this.addSelect(alias);\n        this.innerJoin(entityOrProperty, alias, condition, parameters);\n        return this;\n    }\n\n    /**\n     * LEFT JOINs given subquery and adds all selection properties to SELECT..\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndSelect(subQueryFactory: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs entity's property and adds all selection properties to SELECT.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndSelect(property: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs entity and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndSelect(entity: Function|string, alias: string, condition: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs table and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndSelect(tableName: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndSelect(entityOrProperty: Function|string|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), alias: string, condition: string = \"\", parameters?: ObjectLiteral): this {\n        this.addSelect(alias);\n        this.leftJoin(entityOrProperty, alias, condition, parameters);\n        return this;\n    }\n\n    /**\n     * INNER JOINs given subquery, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapMany(mapToProperty: string, subQueryFactory: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapMany(mapToProperty: string, property: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapMany(mapToProperty: string, entity: Function|string, alias: string, condition: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapMany(mapToProperty: string, tableName: string, alias: string, condition: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapMany(mapToProperty: string, entityOrProperty: Function|string|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), alias: string, condition: string = \"\", parameters?: ObjectLiteral): this {\n        this.addSelect(alias);\n        this.join(\"INNER\", entityOrProperty, alias, condition, parameters, mapToProperty, true);\n        return this;\n    }\n\n    /**\n     * INNER JOINs given subquery, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapOne(mapToProperty: string, subQueryFactory: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapOne(mapToProperty: string, property: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapOne(mapToProperty: string, entity: Function|string, alias: string, condition: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapOne(mapToProperty: string, tableName: string, alias: string, condition: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapOne(mapToProperty: string, entityOrProperty: Function|string|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), alias: string, condition: string = \"\", parameters?: ObjectLiteral): this {\n        this.addSelect(alias);\n        this.join(\"INNER\", entityOrProperty, alias, condition, parameters, mapToProperty, false);\n        return this;\n    }\n\n    /**\n     * LEFT JOINs given subquery, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapMany(mapToProperty: string, subQueryFactory: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapMany(mapToProperty: string, property: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapMany(mapToProperty: string, entity: Function|string, alias: string, condition: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapMany(mapToProperty: string, tableName: string, alias: string, condition: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapMany(mapToProperty: string, entityOrProperty: Function|string|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), alias: string, condition: string = \"\", parameters?: ObjectLiteral): this {\n        this.addSelect(alias);\n        this.join(\"LEFT\", entityOrProperty, alias, condition, parameters, mapToProperty, true);\n        return this;\n    }\n\n    /**\n     * LEFT JOINs given subquery, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapOne(mapToProperty: string, subQueryFactory: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapOne(mapToProperty: string, property: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapOne(mapToProperty: string, entity: Function|string, alias: string, condition: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapOne(mapToProperty: string, tableName: string, alias: string, condition: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapOne(mapToProperty: string, entityOrProperty: Function|string|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), alias: string, condition: string = \"\", parameters?: ObjectLiteral): this {\n        this.addSelect(alias);\n        this.join(\"LEFT\", entityOrProperty, alias, condition, parameters, mapToProperty, false);\n        return this;\n    }\n\n    /**\n     */\n    // selectAndMap(mapToProperty: string, property: string, aliasName: string, qbFactory: ((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>)): this;\n\n    /**\n     */\n    // selectAndMap(mapToProperty: string, entity: Function|string, aliasName: string, qbFactory: ((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>)): this;\n\n    /**\n     */\n    // selectAndMap(mapToProperty: string, tableName: string, aliasName: string, qbFactory: ((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>)): this;\n\n    /**\n     */\n    // selectAndMap(mapToProperty: string, entityOrProperty: Function|string, aliasName: string, qbFactory: ((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>)): this {\n    //     const select = new SelectAttribute(this.expressionMap);\n    //     select.mapToProperty = mapToProperty;\n    //     select.entityOrProperty = entityOrProperty;\n    //     select.aliasName = aliasName;\n    //     select.qbFactory = qbFactory;\n    //     return this;\n    // }\n\n    /**\n     * LEFT JOINs relation id and maps it into some entity's property.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    loadRelationIdAndMap(mapToProperty: string, relationName: string, options?: { disableMixedMap?: boolean }): this;\n\n    /**\n     * LEFT JOINs relation id and maps it into some entity's property.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    loadRelationIdAndMap(mapToProperty: string, relationName: string, alias: string, queryBuilderFactory: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>): this;\n\n    /**\n     * LEFT JOINs relation id and maps it into some entity's property.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    loadRelationIdAndMap(mapToProperty: string,\n                         relationName: string,\n                         aliasNameOrOptions?: string|{ disableMixedMap?: boolean },\n                         queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>): this {\n\n        const relationIdAttribute = new RelationIdAttribute(this.expressionMap);\n        relationIdAttribute.mapToProperty = mapToProperty;\n        relationIdAttribute.relationName = relationName;\n        if (typeof aliasNameOrOptions === \"string\")\n            relationIdAttribute.alias = aliasNameOrOptions;\n        if (aliasNameOrOptions instanceof Object && (aliasNameOrOptions as any).disableMixedMap)\n            relationIdAttribute.disableMixedMap = true;\n\n        relationIdAttribute.queryBuilderFactory = queryBuilderFactory;\n        this.expressionMap.relationIdAttributes.push(relationIdAttribute);\n\n        if (relationIdAttribute.relation.junctionEntityMetadata) {\n            this.expressionMap.createAlias({\n                type: \"other\",\n                name: relationIdAttribute.junctionAlias,\n                metadata: relationIdAttribute.relation.junctionEntityMetadata\n            });\n        }\n        return this;\n    }\n\n    /**\n     * Counts number of entities of entity's relation and maps the value into some entity's property.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    loadRelationCountAndMap(mapToProperty: string, relationName: string, aliasName?: string, queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>): this {\n        const relationCountAttribute = new RelationCountAttribute(this.expressionMap);\n        relationCountAttribute.mapToProperty = mapToProperty;\n        relationCountAttribute.relationName = relationName;\n        relationCountAttribute.alias = aliasName;\n        relationCountAttribute.queryBuilderFactory = queryBuilderFactory;\n        this.expressionMap.relationCountAttributes.push(relationCountAttribute);\n\n        this.expressionMap.createAlias({\n            type: \"other\",\n            name: relationCountAttribute.junctionAlias\n        });\n        if (relationCountAttribute.relation.junctionEntityMetadata) {\n            this.expressionMap.createAlias({\n                type: \"other\",\n                name: relationCountAttribute.junctionAlias,\n                metadata: relationCountAttribute.relation.junctionEntityMetadata\n            });\n        }\n        return this;\n    }\n\n    /**\n     * Loads all relation ids for all relations of the selected entity.\n     * All relation ids will be mapped to relation property themself.\n     * If array of strings is given then loads only relation ids of the given properties.\n     */\n    loadAllRelationIds(options?: { relations?: string[], disableMixedMap?: boolean }): this { // todo: add skip relations\n        this.expressionMap.mainAlias!.metadata.relations.forEach(relation => {\n            if (options !== undefined && options.relations !== undefined && options.relations.indexOf(relation.propertyPath) === -1)\n                return;\n\n            this.loadRelationIdAndMap(\n                this.expressionMap.mainAlias!.name + \".\" + relation.propertyPath,\n                this.expressionMap.mainAlias!.name + \".\" + relation.propertyPath,\n                options\n            );\n        });\n        return this;\n    }\n\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(where: Brackets|string|((qb: this) => string)|ObjectLiteral|ObjectLiteral[], parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n        const condition = this.computeWhereParameter(where);\n        if (condition)\n            this.expressionMap.wheres = [{ type: \"simple\", condition: condition }];\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(where: string|Brackets|((qb: this) => string), parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"and\", condition: this.computeWhereParameter(where) });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(where: Brackets|string|((qb: this) => string), parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"or\", condition: this.computeWhereParameter(where) });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     *\n     * Ids are mixed.\n     * It means if you have single primary key you can pass a simple id values, for example [1, 2, 3].\n     * If you have multiple primary keys you need to pass object with property names and values specified,\n     * for example [{ firstId: 1, secondId: 2 }, { firstId: 2, secondId: 3 }, ...]\n     */\n    whereInIds(ids: any|any[]): this {\n        return this.where(this.createWhereIdsExpression(ids));\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     *\n     * Ids are mixed.\n     * It means if you have single primary key you can pass a simple id values, for example [1, 2, 3].\n     * If you have multiple primary keys you need to pass object with property names and values specified,\n     * for example [{ firstId: 1, secondId: 2 }, { firstId: 2, secondId: 3 }, ...]\n     */\n    andWhereInIds(ids: any|any[]): this {\n        return this.andWhere(this.createWhereIdsExpression(ids));\n    }\n\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     *\n     * Ids are mixed.\n     * It means if you have single primary key you can pass a simple id values, for example [1, 2, 3].\n     * If you have multiple primary keys you need to pass object with property names and values specified,\n     * for example [{ firstId: 1, secondId: 2 }, { firstId: 2, secondId: 3 }, ...]\n     */\n    orWhereInIds(ids: any|any[]): this {\n        return this.orWhere(this.createWhereIdsExpression(ids));\n    }\n\n    /**\n     * Sets HAVING condition in the query builder.\n     * If you had previously HAVING expression defined,\n     * calling this function will override previously set HAVING conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    having(having: string, parameters?: ObjectLiteral): this {\n        this.expressionMap.havings.push({ type: \"simple\", condition: having });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND HAVING condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andHaving(having: string, parameters?: ObjectLiteral): this {\n        this.expressionMap.havings.push({ type: \"and\", condition: having });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR HAVING condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orHaving(having: string, parameters?: ObjectLiteral): this {\n        this.expressionMap.havings.push({ type: \"or\", condition: having });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Sets GROUP BY condition in the query builder.\n     * If you had previously GROUP BY expression defined,\n     * calling this function will override previously set GROUP BY conditions.\n     */\n    groupBy(): this;\n\n    /**\n     * Sets GROUP BY condition in the query builder.\n     * If you had previously GROUP BY expression defined,\n     * calling this function will override previously set GROUP BY conditions.\n     */\n    groupBy(groupBy: string): this;\n\n    /**\n     * Sets GROUP BY condition in the query builder.\n     * If you had previously GROUP BY expression defined,\n     * calling this function will override previously set GROUP BY conditions.\n     */\n    groupBy(groupBy?: string): this {\n        if (groupBy) {\n            this.expressionMap.groupBys = [groupBy];\n        } else {\n            this.expressionMap.groupBys = [];\n        }\n        return this;\n    }\n\n    /**\n     * Adds GROUP BY condition in the query builder.\n     */\n    addGroupBy(groupBy: string): this {\n        this.expressionMap.groupBys.push(groupBy);\n        return this;\n    }\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     *\n     * Calling order by without order set will remove all previously set order bys.\n     */\n    orderBy(): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(sort: string, order?: \"ASC\"|\"DESC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(order: OrderByCondition): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(sort?: string|OrderByCondition, order: \"ASC\"|\"DESC\" = \"ASC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this {\n        if (order !== undefined && order !== \"ASC\" && order !== \"DESC\")\n            throw new Error(`SelectQueryBuilder.addOrderBy \"order\" can accept only \"ASC\" and \"DESC\" values.`);\n        if (nulls !== undefined && nulls !== \"NULLS FIRST\" && nulls !== \"NULLS LAST\")\n            throw new Error(`SelectQueryBuilder.addOrderBy \"nulls\" can accept only \"NULLS FIRST\" and \"NULLS LAST\" values.`);\n\n        if (sort) {\n            if (sort instanceof Object) {\n                this.expressionMap.orderBys = sort as OrderByCondition;\n            } else {\n                if (nulls) {\n                    this.expressionMap.orderBys = { [sort as string]: { order, nulls } };\n                } else {\n                    this.expressionMap.orderBys = { [sort as string]: order };\n                }\n            }\n        } else {\n            this.expressionMap.orderBys = {};\n        }\n        return this;\n    }\n\n    /**\n     * Adds ORDER BY condition in the query builder.\n     */\n    addOrderBy(sort: string, order: \"ASC\"|\"DESC\" = \"ASC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this {\n        if (order !== undefined && order !== \"ASC\" && order !== \"DESC\")\n            throw new Error(`SelectQueryBuilder.addOrderBy \"order\" can accept only \"ASC\" and \"DESC\" values.`);\n        if (nulls !== undefined && nulls !== \"NULLS FIRST\" && nulls !== \"NULLS LAST\")\n            throw new Error(`SelectQueryBuilder.addOrderBy \"nulls\" can accept only \"NULLS FIRST\" and \"NULLS LAST\" values.`);\n\n        if (nulls) {\n            this.expressionMap.orderBys[sort] = { order, nulls };\n        } else {\n            this.expressionMap.orderBys[sort] = order;\n        }\n        return this;\n    }\n\n    /**\n     * Set's LIMIT - maximum number of rows to be selected.\n     * NOTE that it may not work as you expect if you are using joins.\n     * If you want to implement pagination, and you are having join in your query,\n     * then use instead take method instead.\n     */\n    limit(limit?: number): this {\n        this.expressionMap.limit = this.normalizeNumber(limit);\n        if (this.expressionMap.limit !== undefined && isNaN(this.expressionMap.limit))\n            throw new Error(`Provided \"limit\" value is not a number. Please provide a numeric value.`);\n\n        return this;\n    }\n\n    /**\n     * Set's OFFSET - selection offset.\n     * NOTE that it may not work as you expect if you are using joins.\n     * If you want to implement pagination, and you are having join in your query,\n     * then use instead skip method instead.\n     */\n    offset(offset?: number): this {\n        this.expressionMap.offset = this.normalizeNumber(offset);\n        if (this.expressionMap.offset !== undefined && isNaN(this.expressionMap.offset))\n            throw new Error(`Provided \"offset\" value is not a number. Please provide a numeric value.`);\n\n        return this;\n    }\n\n    /**\n     * Sets maximal number of entities to take.\n     */\n    take(take?: number): this {\n        this.expressionMap.take = this.normalizeNumber(take);\n        if (this.expressionMap.take !== undefined && isNaN(this.expressionMap.take))\n            throw new Error(`Provided \"take\" value is not a number. Please provide a numeric value.`);\n\n        return this;\n    }\n\n    /**\n     * Sets number of entities to skip.\n     */\n    skip(skip?: number): this {\n        this.expressionMap.skip = this.normalizeNumber(skip);\n        if (this.expressionMap.skip !== undefined && isNaN(this.expressionMap.skip))\n            throw new Error(`Provided \"skip\" value is not a number. Please provide a numeric value.`);\n\n        return this;\n    }\n\n    /**\n     * Sets locking mode.\n     */\n    setLock(lockMode: \"optimistic\", lockVersion: number): this;\n\n    /**\n     * Sets locking mode.\n     */\n    setLock(lockMode: \"optimistic\", lockVersion: Date): this;\n\n    /**\n     * Sets locking mode.\n     */\n    setLock(lockMode: \"pessimistic_read\"|\"pessimistic_write\"|\"dirty_read\"|\"pessimistic_partial_write\"|\"pessimistic_write_or_fail\"|\"for_no_key_update\"): this;\n\n    /**\n     * Sets locking mode.\n     */\n    setLock(lockMode: \"optimistic\"|\"pessimistic_read\"|\"pessimistic_write\"|\"dirty_read\"|\"pessimistic_partial_write\"|\"pessimistic_write_or_fail\"|\"for_no_key_update\", lockVersion?: number|Date): this {\n        this.expressionMap.lockMode = lockMode;\n        this.expressionMap.lockVersion = lockVersion;\n        return this;\n\n    }\n\n    /**\n     * Disables the global condition of \"non-deleted\" for the entity with delete date columns.\n     */\n    withDeleted(): this {\n        this.expressionMap.withDeleted = true;\n        return this;\n    }\n\n    /**\n     * Gets first raw result returned by execution of generated query builder sql.\n     */\n    async getRawOne<T = any>(): Promise<T> {\n        return (await this.getRawMany())[0];\n    }\n\n    /**\n     * Gets all raw results returned by execution of generated query builder sql.\n     */\n    async getRawMany<T = any>(): Promise<T[]> {\n        if (this.expressionMap.lockMode === \"optimistic\")\n            throw new OptimisticLockCanNotBeUsedError();\n\n        this.expressionMap.queryEntity = false;\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs: boolean = false;\n        try {\n\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n\n            const results = await this.loadRawResults(queryRunner);\n\n            // close transaction if we started it\n            if (transactionStartedByUs) {\n                await queryRunner.commitTransaction();\n            }\n\n            return results;\n\n        } catch (error) {\n\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n            throw error;\n\n        } finally {\n            if (queryRunner !== this.queryRunner) { // means we created our own query runner\n                await queryRunner.release();\n            }\n        }\n    }\n\n    /**\n     * Executes sql generated by query builder and returns object with raw results and entities created from them.\n     */\n    async getRawAndEntities<T = any>(): Promise<{ entities: Entity[], raw: T[] }> {\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs: boolean = false;\n        try {\n\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n\n            this.expressionMap.queryEntity = true;\n            const results = await this.executeEntitiesAndRawResults(queryRunner);\n\n            // close transaction if we started it\n            if (transactionStartedByUs) {\n                await queryRunner.commitTransaction();\n            }\n\n            return results;\n\n        } catch (error) {\n\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n            throw error;\n\n        } finally {\n            if (queryRunner !== this.queryRunner) // means we created our own query runner\n                await queryRunner.release();\n        }\n    }\n\n    /**\n     * Gets single entity returned by execution of generated query builder sql.\n     */\n    async getOne(): Promise<Entity|undefined> {\n        const results = await this.getRawAndEntities();\n        const result = results.entities[0] as any;\n\n        if (result && this.expressionMap.lockMode === \"optimistic\" && this.expressionMap.lockVersion) {\n            const metadata = this.expressionMap.mainAlias!.metadata;\n\n            if (this.expressionMap.lockVersion instanceof Date) {\n                const actualVersion = metadata.updateDateColumn!.getEntityValue(result); // what if columns arent set?\n                if (actualVersion.getTime() !== this.expressionMap.lockVersion.getTime())\n                    throw new OptimisticLockVersionMismatchError(metadata.name, this.expressionMap.lockVersion, actualVersion);\n\n            } else {\n                const actualVersion = metadata.versionColumn!.getEntityValue(result); // what if columns arent set?\n                if (actualVersion !== this.expressionMap.lockVersion)\n                    throw new OptimisticLockVersionMismatchError(metadata.name, this.expressionMap.lockVersion, actualVersion);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Gets the first entity returned by execution of generated query builder sql or rejects the returned promise on error.\n     */\n    async getOneOrFail(): Promise<Entity> {\n        const entity = await this.getOne();\n\n        if (!entity) {\n            throw new EntityNotFoundError(this.expressionMap.mainAlias!.target, this);\n        }\n\n        return entity;\n    }\n\n    /**\n     * Gets entities returned by execution of generated query builder sql.\n     */\n    async getMany(): Promise<Entity[]> {\n        if (this.expressionMap.lockMode === \"optimistic\")\n            throw new OptimisticLockCanNotBeUsedError();\n\n        const results = await this.getRawAndEntities();\n        return results.entities;\n    }\n\n    /**\n     * Gets count - number of entities selected by sql generated by this query builder.\n     * Count excludes all limitations set by setFirstResult and setMaxResults methods call.\n     */\n    async getCount(): Promise<number> {\n        if (this.expressionMap.lockMode === \"optimistic\")\n            throw new OptimisticLockCanNotBeUsedError();\n\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs: boolean = false;\n        try {\n\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n\n            this.expressionMap.queryEntity = false;\n            const results = await this.executeCountQuery(queryRunner);\n\n            // close transaction if we started it\n            if (transactionStartedByUs) {\n                await queryRunner.commitTransaction();\n            }\n\n            return results;\n\n        } catch (error) {\n\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n            throw error;\n\n        } finally {\n            if (queryRunner !== this.queryRunner) // means we created our own query runner\n                await queryRunner.release();\n        }\n    }\n\n    /**\n     * Executes built SQL query and returns entities and overall entities count (without limitation).\n     * This method is useful to build pagination.\n     */\n    async getManyAndCount(): Promise<[Entity[], number]> {\n        if (this.expressionMap.lockMode === \"optimistic\")\n            throw new OptimisticLockCanNotBeUsedError();\n\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs: boolean = false;\n        try {\n\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n\n            this.expressionMap.queryEntity = true;\n            const entitiesAndRaw = await this.executeEntitiesAndRawResults(queryRunner);\n            this.expressionMap.queryEntity = false;\n            const count = await this.executeCountQuery(queryRunner);\n            const results: [Entity[], number] = [entitiesAndRaw.entities, count];\n\n            // close transaction if we started it\n            if (transactionStartedByUs) {\n                await queryRunner.commitTransaction();\n            }\n\n            return results;\n\n        } catch (error) {\n\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n            throw error;\n\n        } finally {\n            if (queryRunner !== this.queryRunner) // means we created our own query runner\n                await queryRunner.release();\n        }\n    }\n\n    /**\n     * Executes built SQL query and returns raw data stream.\n     */\n    async stream(): Promise<ReadStream> {\n        this.expressionMap.queryEntity = false;\n        const [sql, parameters] = this.getQueryAndParameters();\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs: boolean = false;\n        try {\n\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n\n            const releaseFn = () => {\n                if (queryRunner !== this.queryRunner) // means we created our own query runner\n                    return queryRunner.release();\n                return;\n            };\n            const results = queryRunner.stream(sql, parameters, releaseFn, releaseFn);\n\n            // close transaction if we started it\n            if (transactionStartedByUs) {\n                await queryRunner.commitTransaction();\n            }\n\n            return results;\n\n        } catch (error) {\n\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n            throw error;\n\n        }\n    }\n\n    /**\n     * Enables or disables query result caching.\n     */\n    cache(enabled: boolean): this;\n\n    /**\n     * Enables query result caching and sets in milliseconds in which cache will expire.\n     * If not set then global caching time will be used.\n     */\n    cache(milliseconds: number): this;\n\n    /**\n     * Enables query result caching and sets cache id and milliseconds in which cache will expire.\n     */\n    cache(id: any, milliseconds?: number): this;\n\n    /**\n     * Enables or disables query result caching.\n     */\n    cache(enabledOrMillisecondsOrId: boolean|number|string, maybeMilliseconds?: number): this {\n\n        if (typeof enabledOrMillisecondsOrId === \"boolean\") {\n            this.expressionMap.cache = enabledOrMillisecondsOrId;\n\n        } else if (typeof enabledOrMillisecondsOrId === \"number\") {\n            this.expressionMap.cache = true;\n            this.expressionMap.cacheDuration = enabledOrMillisecondsOrId;\n\n        } else if (typeof enabledOrMillisecondsOrId === \"string\" || typeof enabledOrMillisecondsOrId === \"number\") {\n            this.expressionMap.cache = true;\n            this.expressionMap.cacheId = enabledOrMillisecondsOrId;\n        }\n\n        if (maybeMilliseconds) {\n            this.expressionMap.cacheDuration = maybeMilliseconds;\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets extra options that can be used to configure how query builder works.\n     */\n    setOption(option: SelectQueryBuilderOption): this {\n        this.expressionMap.options.push(option);\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected join(direction: \"INNER\"|\"LEFT\",\n                   entityOrProperty: Function|string|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>),\n                   aliasName: string,\n                   condition?: string,\n                   parameters?: ObjectLiteral,\n                   mapToProperty?: string,\n                   isMappingMany?: boolean): void {\n\n        this.setParameters(parameters || {});\n\n        const joinAttribute = new JoinAttribute(this.connection, this.expressionMap);\n        joinAttribute.direction = direction;\n        joinAttribute.mapToProperty = mapToProperty;\n        joinAttribute.isMappingMany = isMappingMany;\n        joinAttribute.entityOrProperty = entityOrProperty; // relationName\n        joinAttribute.condition = condition; // joinInverseSideCondition\n        // joinAttribute.junctionAlias = joinAttribute.relation.isOwning ? parentAlias + \"_\" + destinationTableAlias : destinationTableAlias + \"_\" + parentAlias;\n        this.expressionMap.joinAttributes.push(joinAttribute);\n\n        if (joinAttribute.metadata) {\n\n            // todo: find and set metadata right there?\n            joinAttribute.alias = this.expressionMap.createAlias({\n                type: \"join\",\n                name: aliasName,\n                metadata: joinAttribute.metadata\n            });\n            if (joinAttribute.relation && joinAttribute.relation.junctionEntityMetadata) {\n                this.expressionMap.createAlias({\n                    type: \"join\",\n                    name: joinAttribute.junctionAlias,\n                    metadata: joinAttribute.relation.junctionEntityMetadata\n                });\n            }\n\n        } else {\n            let subQuery: string = \"\";\n            if (entityOrProperty instanceof Function) {\n                const subQueryBuilder: SelectQueryBuilder<any> = (entityOrProperty as any)(((this as any) as SelectQueryBuilder<any>).subQuery());\n                this.setParameters(subQueryBuilder.getParameters());\n                subQuery = subQueryBuilder.getQuery();\n\n            } else {\n                subQuery = entityOrProperty;\n            }\n            const isSubQuery = entityOrProperty instanceof Function || entityOrProperty.substr(0, 1) === \"(\" && entityOrProperty.substr(-1) === \")\";\n            joinAttribute.alias = this.expressionMap.createAlias({\n                type: \"join\",\n                name: aliasName,\n                tablePath: isSubQuery === false ? entityOrProperty as string : undefined,\n                subQuery: isSubQuery === true ? subQuery : undefined,\n            });\n        }\n    }\n\n    /**\n     * Creates \"SELECT FROM\" part of SQL query.\n     */\n    protected createSelectExpression() {\n\n        if (!this.expressionMap.mainAlias)\n            throw new Error(\"Cannot build query because main alias is not set (call qb#from method)\");\n\n        // todo throw exception if selects or from is missing\n\n        const allSelects: SelectQuery[] = [];\n        const excludedSelects: SelectQuery[] = [];\n\n        if (this.expressionMap.mainAlias.hasMetadata) {\n            const metadata = this.expressionMap.mainAlias.metadata;\n            allSelects.push(...this.buildEscapedEntityColumnSelects(this.expressionMap.mainAlias.name, metadata));\n            excludedSelects.push(...this.findEntityColumnSelects(this.expressionMap.mainAlias.name, metadata));\n        }\n\n        // add selects from joins\n        this.expressionMap.joinAttributes\n            .forEach(join => {\n                if (join.metadata) {\n                    allSelects.push(...this.buildEscapedEntityColumnSelects(join.alias.name!, join.metadata));\n                    excludedSelects.push(...this.findEntityColumnSelects(join.alias.name!, join.metadata));\n                } else {\n                    const hasMainAlias = this.expressionMap.selects.some(select => select.selection === join.alias.name);\n                    if (hasMainAlias) {\n                        allSelects.push({ selection: this.escape(join.alias.name!) + \".*\" });\n                        const excludedSelect = this.expressionMap.selects.find(select => select.selection === join.alias.name);\n                        excludedSelects.push(excludedSelect!);\n                    }\n                }\n            });\n\n        // add all other selects\n        this.expressionMap.selects\n            .filter(select => excludedSelects.indexOf(select) === -1)\n            .forEach(select => allSelects.push({ selection: this.replacePropertyNames(select.selection), aliasName: select.aliasName }));\n\n        // if still selection is empty, then simply set it to all (*)\n        if (allSelects.length === 0)\n            allSelects.push({ selection: \"*\" });\n\n        let lock: string = \"\";\n        if (this.connection.driver instanceof SqlServerDriver) {\n            switch (this.expressionMap.lockMode) {\n                case \"pessimistic_read\":\n                    lock = \" WITH (HOLDLOCK, ROWLOCK)\";\n                    break;\n                case \"pessimistic_write\":\n                    lock = \" WITH (UPDLOCK, ROWLOCK)\";\n                    break;\n                case \"dirty_read\":\n                    lock = \" WITH (NOLOCK)\";\n                    break;\n            }\n        }\n\n        // create a selection query\n        const froms = this.expressionMap.aliases\n            .filter(alias => alias.type === \"from\" && (alias.tablePath || alias.subQuery))\n            .map(alias => {\n                if (alias.subQuery)\n                    return alias.subQuery + \" \" + this.escape(alias.name);\n\n                return this.getTableName(alias.tablePath!) + \" \" + this.escape(alias.name);\n            });\n\n        const select = this.createSelectDistinctExpression();\n        const selection = allSelects.map(select => select.selection + (select.aliasName ? \" AS \" + this.escape(select.aliasName) : \"\")).join(\", \");\n\n        return select + selection + \" FROM \" + froms.join(\", \") + lock;\n    }\n\n    /**\n     * Creates select | select distinct part of SQL query.\n     */\n    protected createSelectDistinctExpression(): string {\n        const {selectDistinct, selectDistinctOn} = this.expressionMap;\n        const {driver} = this.connection;\n\n        let select = \"SELECT \";\n        if (driver instanceof PostgresDriver && selectDistinctOn.length > 0) {\n            const selectDistinctOnMap = selectDistinctOn.map(\n              (on) => this.replacePropertyNames(on)\n            ).join(\", \");\n\n            select = `SELECT DISTINCT ON (${selectDistinctOnMap}) `;\n        } else if (selectDistinct) {\n            select = \"SELECT DISTINCT \";\n        }\n\n        return select;\n    }\n\n    /**\n     * Creates \"JOIN\" part of SQL query.\n     */\n    protected createJoinExpression(): string {\n\n        // examples:\n        // select from owning side\n        // qb.select(\"post\")\n        //     .leftJoinAndSelect(\"post.category\", \"category\");\n        // select from non-owning side\n        // qb.select(\"category\")\n        //     .leftJoinAndSelect(\"category.post\", \"post\");\n\n        const joins = this.expressionMap.joinAttributes.map(joinAttr => {\n\n            const relation = joinAttr.relation;\n            const destinationTableName = joinAttr.tablePath;\n            const destinationTableAlias = joinAttr.alias.name;\n            const appendedCondition = joinAttr.condition ? \" AND (\" + joinAttr.condition + \")\" : \"\";\n            const parentAlias = joinAttr.parentAlias;\n\n            // if join was build without relation (e.g. without \"post.category\") then it means that we have direct\n            // table to join, without junction table involved. This means we simply join direct table.\n            if (!parentAlias || !relation) {\n                const destinationJoin = joinAttr.alias.subQuery ? joinAttr.alias.subQuery : this.getTableName(destinationTableName);\n                return \" \" + joinAttr.direction + \" JOIN \" + destinationJoin + \" \" + this.escape(destinationTableAlias) +\n                    (joinAttr.condition ? \" ON \" + this.replacePropertyNames(joinAttr.condition) : \"\");\n            }\n\n            // if real entity relation is involved\n            if (relation.isManyToOne || relation.isOneToOneOwner) {\n\n                // JOIN `category` `category` ON `category`.`id` = `post`.`categoryId`\n                const condition = relation.joinColumns.map(joinColumn => {\n                    return destinationTableAlias + \".\" + joinColumn.referencedColumn!.propertyPath + \"=\" +\n                        parentAlias + \".\" + relation.propertyPath + \".\" + joinColumn.referencedColumn!.propertyPath;\n                }).join(\" AND \");\n\n                return \" \" + joinAttr.direction + \" JOIN \" + this.getTableName(destinationTableName) + \" \" + this.escape(destinationTableAlias) + \" ON \" + this.replacePropertyNames(condition + appendedCondition);\n\n            } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n\n                // JOIN `post` `post` ON `post`.`categoryId` = `category`.`id`\n                const condition = relation.inverseRelation!.joinColumns.map(joinColumn => {\n                    return destinationTableAlias + \".\" + relation.inverseRelation!.propertyPath + \".\" + joinColumn.referencedColumn!.propertyPath + \"=\" +\n                        parentAlias + \".\" + joinColumn.referencedColumn!.propertyPath;\n                }).join(\" AND \");\n\n                return \" \" + joinAttr.direction + \" JOIN \" + this.getTableName(destinationTableName) + \" \" + this.escape(destinationTableAlias) + \" ON \" + this.replacePropertyNames(condition + appendedCondition);\n\n            } else { // means many-to-many\n                const junctionTableName = relation.junctionEntityMetadata!.tablePath;\n\n                const junctionAlias = joinAttr.junctionAlias;\n                let junctionCondition = \"\", destinationCondition = \"\";\n\n                if (relation.isOwning) {\n\n                    junctionCondition = relation.joinColumns.map(joinColumn => {\n                        // `post_category`.`postId` = `post`.`id`\n                        return junctionAlias + \".\" + joinColumn.propertyPath + \"=\" + parentAlias + \".\" + joinColumn.referencedColumn!.propertyPath;\n                    }).join(\" AND \");\n\n                    destinationCondition = relation.inverseJoinColumns.map(joinColumn => {\n                        // `category`.`id` = `post_category`.`categoryId`\n                        return destinationTableAlias + \".\" + joinColumn.referencedColumn!.propertyPath + \"=\" + junctionAlias + \".\" + joinColumn.propertyPath;\n                    }).join(\" AND \");\n\n                } else {\n                    junctionCondition = relation.inverseRelation!.inverseJoinColumns.map(joinColumn => {\n                        // `post_category`.`categoryId` = `category`.`id`\n                        return junctionAlias + \".\" + joinColumn.propertyPath + \"=\" + parentAlias + \".\" + joinColumn.referencedColumn!.propertyPath;\n                    }).join(\" AND \");\n\n                    destinationCondition = relation.inverseRelation!.joinColumns.map(joinColumn => {\n                        // `post`.`id` = `post_category`.`postId`\n                        return destinationTableAlias + \".\" + joinColumn.referencedColumn!.propertyPath + \"=\" + junctionAlias + \".\" + joinColumn.propertyPath;\n                    }).join(\" AND \");\n                }\n\n                return \" \" + joinAttr.direction + \" JOIN \" + this.getTableName(junctionTableName) + \" \" + this.escape(junctionAlias) + \" ON \" + this.replacePropertyNames(junctionCondition) +\n                    \" \" + joinAttr.direction + \" JOIN \" + this.getTableName(destinationTableName) + \" \" + this.escape(destinationTableAlias) + \" ON \" + this.replacePropertyNames(destinationCondition + appendedCondition);\n\n            }\n        });\n\n        return joins.join(\" \");\n    }\n\n    /**\n     * Creates \"GROUP BY\" part of SQL query.\n     */\n    protected createGroupByExpression() {\n        if (!this.expressionMap.groupBys || !this.expressionMap.groupBys.length) return \"\";\n        return \" GROUP BY \" + this.replacePropertyNames(this.expressionMap.groupBys.join(\", \"));\n    }\n\n    /**\n     * Creates \"ORDER BY\" part of SQL query.\n     */\n    protected createOrderByExpression() {\n        const orderBys = this.expressionMap.allOrderBys;\n        if (Object.keys(orderBys).length > 0)\n            return \" ORDER BY \" + Object.keys(orderBys)\n                    .map(columnName => {\n                        if (typeof orderBys[columnName] === \"string\") {\n                            return this.replacePropertyNames(columnName) + \" \" + orderBys[columnName];\n                        } else {\n                            return this.replacePropertyNames(columnName) + \" \" + (orderBys[columnName] as any).order + \" \" + (orderBys[columnName] as any).nulls;\n                        }\n                    })\n                    .join(\", \");\n\n        return \"\";\n    }\n\n    /**\n     * Creates \"LIMIT\" and \"OFFSET\" parts of SQL query.\n     */\n    protected createLimitOffsetExpression(): string {\n        // in the case if nothing is joined in the query builder we don't need to make two requests to get paginated results\n        // we can use regular limit / offset, that's why we add offset and limit construction here based on skip and take values\n        let offset: number|undefined = this.expressionMap.offset,\n            limit: number|undefined = this.expressionMap.limit;\n        if (!offset && !limit && this.expressionMap.joinAttributes.length === 0) {\n            offset = this.expressionMap.skip;\n            limit = this.expressionMap.take;\n        }\n\n        if (this.connection.driver instanceof SqlServerDriver) {\n            // Due to a limitation in SQL Server's parser implementation it does not support using\n            // OFFSET or FETCH NEXT without an ORDER BY clause being provided. In cases where the\n            // user does not request one we insert a dummy ORDER BY that does nothing and should\n            // have no effect on the query planner or on the order of the results returned.\n            // https://dba.stackexchange.com/a/193799\n            let prefix = \"\";\n            if ((limit || offset) && Object.keys(this.expressionMap.allOrderBys).length <= 0) {\n                prefix = \" ORDER BY (SELECT NULL)\";\n            }\n\n            if (limit && offset)\n                return prefix + \" OFFSET \" + offset + \" ROWS FETCH NEXT \" + limit + \" ROWS ONLY\";\n            if (limit)\n                return prefix + \" OFFSET 0 ROWS FETCH NEXT \" + limit + \" ROWS ONLY\";\n            if (offset)\n                return prefix + \" OFFSET \" + offset + \" ROWS\";\n\n        } else if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver || this.connection.driver instanceof SapDriver) {\n\n            if (limit && offset)\n                return \" LIMIT \" + limit + \" OFFSET \" + offset;\n            if (limit)\n                return \" LIMIT \" + limit;\n            if (offset)\n                throw new OffsetWithoutLimitNotSupportedError();\n\n        } else if (this.connection.driver instanceof AbstractSqliteDriver) {\n\n            if (limit && offset)\n                return \" LIMIT \" + limit + \" OFFSET \" + offset;\n            if (limit)\n                return \" LIMIT \" + limit;\n            if (offset)\n                return \" LIMIT -1 OFFSET \" + offset;\n\n        } else if (this.connection.driver instanceof OracleDriver) {\n\n            if (limit && offset)\n                return \" OFFSET \" + offset + \" ROWS FETCH NEXT \" + limit + \" ROWS ONLY\";\n            if (limit)\n                return \" FETCH NEXT \" + limit + \" ROWS ONLY\";\n            if (offset)\n                return \" OFFSET \" + offset + \" ROWS\";\n\n        } else {\n            if (limit && offset)\n                return \" LIMIT \" + limit + \" OFFSET \" + offset;\n            if (limit)\n                return \" LIMIT \" + limit;\n            if (offset)\n                return \" OFFSET \" + offset;\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Creates \"LOCK\" part of SQL query.\n     */\n    protected createLockExpression(): string {\n        const driver = this.connection.driver;\n        switch (this.expressionMap.lockMode) {\n            case \"pessimistic_read\":\n                if (driver instanceof MysqlDriver || driver instanceof AuroraDataApiDriver) {\n                    return \" LOCK IN SHARE MODE\";\n\n                } else if (driver instanceof PostgresDriver) {\n                    return \" FOR SHARE\";\n\n                } else if (driver instanceof OracleDriver) {\n                    return \" FOR UPDATE\";\n\n                } else if (driver instanceof SqlServerDriver) {\n                    return \"\";\n\n                } else {\n                    throw new LockNotSupportedOnGivenDriverError();\n                }\n            case \"pessimistic_write\":\n                if (driver instanceof MysqlDriver || driver instanceof AuroraDataApiDriver || driver instanceof PostgresDriver || driver instanceof OracleDriver) {\n                    return \" FOR UPDATE\";\n\n                } else if (driver instanceof SqlServerDriver) {\n                    return \"\";\n\n                } else {\n                    throw new LockNotSupportedOnGivenDriverError();\n                }\n            case \"pessimistic_partial_write\":\n                if (driver instanceof PostgresDriver || driver instanceof MysqlDriver) {\n                    return \" FOR UPDATE SKIP LOCKED\";\n\n                } else {\n                    throw new LockNotSupportedOnGivenDriverError();\n                }\n            case \"pessimistic_write_or_fail\":\n                if (driver instanceof PostgresDriver || driver instanceof MysqlDriver) {\n                    return \" FOR UPDATE NOWAIT\";\n                } else {\n                    throw new LockNotSupportedOnGivenDriverError();\n                }\n\n            case \"for_no_key_update\":\n                if (driver instanceof PostgresDriver) {\n                    return \" FOR NO KEY UPDATE\";\n                } else {\n                    throw new LockNotSupportedOnGivenDriverError();\n                }\n            default:\n                return \"\";\n        }\n    }\n\n    /**\n     * Creates \"HAVING\" part of SQL query.\n     */\n    protected createHavingExpression() {\n        if (!this.expressionMap.havings || !this.expressionMap.havings.length) return \"\";\n        const conditions = this.expressionMap.havings.map((having, index) => {\n            switch (having.type) {\n                case \"and\":\n                    return (index > 0 ? \"AND \" : \"\") + this.replacePropertyNames(having.condition);\n                case \"or\":\n                    return (index > 0 ? \"OR \" : \"\") + this.replacePropertyNames(having.condition);\n                default:\n                    return this.replacePropertyNames(having.condition);\n            }\n        }).join(\" \");\n\n        if (!conditions.length) return \"\";\n        return \" HAVING \" + conditions;\n    }\n\n    protected buildEscapedEntityColumnSelects(aliasName: string, metadata: EntityMetadata): SelectQuery[] {\n        const hasMainAlias = this.expressionMap.selects.some(select => select.selection === aliasName);\n\n        const columns: ColumnMetadata[] = [];\n        if (hasMainAlias) {\n            columns.push(...metadata.columns.filter(column => column.isSelect === true));\n        }\n        columns.push(...metadata.columns.filter(column => {\n            return this.expressionMap.selects.some(select => select.selection === aliasName + \".\" + column.propertyPath);\n        }));\n\n        // if user used partial selection and did not select some primary columns which are required to be selected\n        // we select those primary columns and mark them as \"virtual\". Later virtual column values will be removed from final entity\n        // to make entity contain exactly what user selected\n        if (columns.length === 0) // however not in the case when nothing (even partial) was selected from this target (for example joins without selection)\n            return [];\n\n        const nonSelectedPrimaryColumns = this.expressionMap.queryEntity ? metadata.primaryColumns.filter(primaryColumn => columns.indexOf(primaryColumn) === -1) : [];\n        const allColumns = [...columns, ...nonSelectedPrimaryColumns];\n\n        return allColumns.map(column => {\n            const selection = this.expressionMap.selects.find(select => select.selection === aliasName + \".\" + column.propertyPath);\n            let selectionPath = this.escape(aliasName) + \".\" + this.escape(column.databaseName);\n            if (this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver) {\n                    const useLegacy = this.connection.driver.options.legacySpatialSupport;\n                    const asText = useLegacy ? \"AsText\" : \"ST_AsText\";\n                    selectionPath = `${asText}(${selectionPath})`;\n                }\n\n                if (this.connection.driver instanceof PostgresDriver)\n                    // cast to JSON to trigger parsing in the driver\n                    selectionPath = `ST_AsGeoJSON(${selectionPath})::json`;\n\n                if (this.connection.driver instanceof SqlServerDriver)\n                    selectionPath = `${selectionPath}.ToString()`;\n            }\n            return {\n                selection: selectionPath,\n                aliasName: selection && selection.aliasName ? selection.aliasName : DriverUtils.buildColumnAlias(this.connection.driver, aliasName, column.databaseName),\n                // todo: need to keep in mind that custom selection.aliasName breaks hydrator. fix it later!\n                virtual: selection ? selection.virtual === true : (hasMainAlias ? false : true),\n            };\n        });\n    }\n\n    protected findEntityColumnSelects(aliasName: string, metadata: EntityMetadata): SelectQuery[] {\n        const mainSelect = this.expressionMap.selects.find(select => select.selection === aliasName);\n        if (mainSelect)\n            return [mainSelect];\n\n        return this.expressionMap.selects.filter(select => {\n            return metadata.columns.some(column => select.selection === aliasName + \".\" + column.propertyPath);\n        });\n    }\n\n    private computeCountExpression() {\n        const mainAlias = this.expressionMap.mainAlias!.name; // todo: will this work with \"fromTableName\"?\n        const metadata = this.expressionMap.mainAlias!.metadata;\n\n        const primaryColumns = metadata.primaryColumns;\n        const distinctAlias = this.escape(mainAlias);\n\n        // If we aren't doing anything that will create a join, we can use a simpler `COUNT` instead\n        // so we prevent poor query patterns in the most likely cases\n        if (\n            this.expressionMap.joinAttributes.length === 0 &&\n            this.expressionMap.relationIdAttributes.length === 0 &&\n            this.expressionMap.relationCountAttributes.length === 0\n        ) {\n            return \"COUNT(1)\";\n        }\n\n        // For everything else, we'll need to do some hackery to get the correct count values.\n\n        if (this.connection.driver instanceof CockroachDriver || this.connection.driver instanceof PostgresDriver) {\n            // Postgres and CockroachDB can pass multiple parameters to the `DISTINCT` function\n            // https://www.postgresql.org/docs/9.5/sql-select.html#SQL-DISTINCT\n            return \"COUNT(DISTINCT(\" +\n                primaryColumns.map(c => `${distinctAlias}.${this.escape(c.databaseName)}`).join(\", \") +\n                \"))\";\n        }\n\n        if (this.connection.driver instanceof MysqlDriver) {\n            // MySQL & MariaDB can pass multiple parameters to the `DISTINCT` language construct\n            // https://mariadb.com/kb/en/count-distinct/\n            return \"COUNT(DISTINCT \" +\n                primaryColumns.map(c => `${distinctAlias}.${this.escape(c.databaseName)}`).join(\", \") +\n                \")\";\n        }\n\n        if (this.connection.driver instanceof SqlServerDriver) {\n            // SQL Server has gotta be different from everyone else.  They don't support\n            // distinct counting multiple columns & they don't have the same operator\n            // characteristic for concatenating, so we gotta use the `CONCAT` function.\n            // However, If it's exactly 1 column we can omit the `CONCAT` for better performance.\n\n            const columnsExpression = primaryColumns.map(\n                primaryColumn => `${distinctAlias}.${this.escape(primaryColumn.databaseName)}`\n            ).join(\", '|;|', \");\n\n            if (primaryColumns.length === 1) {\n\n                return `COUNT(DISTINCT(${columnsExpression}))`;\n            }\n\n            return `COUNT(DISTINCT(CONCAT(${columnsExpression})))`;\n\n        }\n\n        // If all else fails, fall back to a `COUNT` and `DISTINCT` across all the primary columns concatenated.\n        // Per the SQL spec, this is the canonical string concatenation mechanism which is most\n        // likely to work across servers implementing the SQL standard.\n\n        // Please note, if there is only one primary column that the concatenation does not occur in this\n        // query and the query is a standard `COUNT DISTINCT` in that case.\n\n        return `COUNT(DISTINCT(` +\n            primaryColumns.map(c => `${distinctAlias}.${this.escape(c.databaseName)}`).join(\" || '|;|' || \") +\n            \"))\";\n    }\n\n    protected async executeCountQuery(queryRunner: QueryRunner): Promise<number> {\n        const countSql = this.computeCountExpression();\n\n        const results = await this.clone()\n            .orderBy()\n            .groupBy()\n            .offset(undefined)\n            .limit(undefined)\n            .skip(undefined)\n            .take(undefined)\n            .select(countSql, \"cnt\")\n            .setOption(\"disable-global-order\")\n            .loadRawResults(queryRunner);\n\n        if (!results || !results[0] || !results[0][\"cnt\"])\n            return 0;\n\n        return parseInt(results[0][\"cnt\"]);\n    }\n\n    /**\n     * Executes sql generated by query builder and returns object with raw results and entities created from them.\n     */\n    protected async executeEntitiesAndRawResults(queryRunner: QueryRunner): Promise<{ entities: Entity[], raw: any[] }> {\n\n        if (!this.expressionMap.mainAlias)\n            throw new Error(`Alias is not set. Use \"from\" method to set an alias.`);\n\n        if ((this.expressionMap.lockMode === \"pessimistic_read\" || this.expressionMap.lockMode === \"pessimistic_write\" || this.expressionMap.lockMode === \"pessimistic_partial_write\" || this.expressionMap.lockMode === \"pessimistic_write_or_fail\" || this.expressionMap.lockMode === \"for_no_key_update\") && !queryRunner.isTransactionActive)\n            throw new PessimisticLockTransactionRequiredError();\n\n        if (this.expressionMap.lockMode === \"optimistic\") {\n            const metadata = this.expressionMap.mainAlias.metadata;\n            if (!metadata.versionColumn && !metadata.updateDateColumn)\n                throw new NoVersionOrUpdateDateColumnError(metadata.name);\n        }\n\n        const relationIdLoader = new RelationIdLoader(this.connection, queryRunner, this.expressionMap.relationIdAttributes);\n        const relationCountLoader = new RelationCountLoader(this.connection, queryRunner, this.expressionMap.relationCountAttributes);\n        const relationIdMetadataTransformer = new RelationIdMetadataToAttributeTransformer(this.expressionMap);\n        relationIdMetadataTransformer.transform();\n        const relationCountMetadataTransformer = new RelationCountMetadataToAttributeTransformer(this.expressionMap);\n        relationCountMetadataTransformer.transform();\n\n        let rawResults: any[] = [], entities: any[] = [];\n\n        // for pagination enabled (e.g. skip and take) its much more complicated - its a special process\n        // where we make two queries to find the data we need\n        // first query find ids in skip and take range\n        // and second query loads the actual data in given ids range\n        if ((this.expressionMap.skip || this.expressionMap.take) && this.expressionMap.joinAttributes.length > 0) {\n\n            // we are skipping order by here because its not working in subqueries anyway\n            // to make order by working we need to apply it on a distinct query\n            const [selects, orderBys] = this.createOrderByCombinedWithSelectExpression(\"distinctAlias\");\n            const metadata = this.expressionMap.mainAlias.metadata;\n            const mainAliasName = this.expressionMap.mainAlias.name;\n\n            const querySelects = metadata.primaryColumns.map(primaryColumn => {\n                const distinctAlias = this.escape(\"distinctAlias\");\n                const columnAlias = this.escape(DriverUtils.buildColumnAlias(this.connection.driver, mainAliasName, primaryColumn.databaseName));\n                if (!orderBys[columnAlias]) // make sure we aren't overriding user-defined order in inverse direction\n                    orderBys[columnAlias] = \"ASC\";\n\n                const alias = DriverUtils.buildColumnAlias(\n                    this.connection.driver,\n                    \"ids_\" + mainAliasName,\n                    primaryColumn.databaseName\n                );\n\n                return `${distinctAlias}.${columnAlias} as \"${alias}\"`;\n            });\n\n            rawResults = await new SelectQueryBuilder(this.connection, queryRunner)\n                .select(`DISTINCT ${querySelects.join(\", \")}`)\n                .addSelect(selects)\n                .from(`(${this.clone().orderBy().getQuery()})`, \"distinctAlias\")\n                .offset(this.expressionMap.skip)\n                .limit(this.expressionMap.take)\n                .orderBy(orderBys)\n                .cache(this.expressionMap.cache ? this.expressionMap.cache : this.expressionMap.cacheId, this.expressionMap.cacheDuration)\n                .setParameters(this.getParameters())\n                .setNativeParameters(this.expressionMap.nativeParameters)\n                .getRawMany();\n\n            if (rawResults.length > 0) {\n                let condition = \"\";\n                const parameters: ObjectLiteral = {};\n                if (metadata.hasMultiplePrimaryKeys) {\n                    condition = rawResults.map((result, index) => {\n                        return metadata.primaryColumns.map(primaryColumn => {\n                            const paramKey = `orm_distinct_ids_${index}_${primaryColumn.databaseName}`;\n                            parameters[paramKey] = result[`ids_${mainAliasName}_${primaryColumn.databaseName}`];\n                            return `${mainAliasName}.${primaryColumn.propertyPath}=:${paramKey}`;\n                        }).join(\" AND \");\n                    }).join(\" OR \");\n                } else {\n                    const alias = DriverUtils.buildColumnAlias(\n                        this.connection.driver,\n                        \"ids_\" + mainAliasName,\n                        metadata.primaryColumns[0].databaseName\n                    );\n\n                    const ids = rawResults.map(result => result[alias]);\n                    const areAllNumbers = ids.every((id: any) => typeof id === \"number\");\n                    if (areAllNumbers) {\n                        // fixes #190. if all numbers then its safe to perform query without parameter\n                        condition = `${mainAliasName}.${metadata.primaryColumns[0].propertyPath} IN (${ids.join(\", \")})`;\n                    } else {\n                        parameters[\"orm_distinct_ids\"] = ids;\n                        condition = mainAliasName + \".\" + metadata.primaryColumns[0].propertyPath + \" IN (:...orm_distinct_ids)\";\n                    }\n                }\n                rawResults = await this.clone()\n                    .mergeExpressionMap({ extraAppendedAndWhereCondition: condition })\n                    .setParameters(parameters)\n                    .loadRawResults(queryRunner);\n            }\n\n        } else {\n            rawResults = await this.loadRawResults(queryRunner);\n        }\n\n        if (rawResults.length > 0) {\n\n            // transform raw results into entities\n            const rawRelationIdResults = await relationIdLoader.load(rawResults);\n            const rawRelationCountResults = await relationCountLoader.load(rawResults);\n            const transformer = new RawSqlResultsToEntityTransformer(this.expressionMap, this.connection.driver, rawRelationIdResults, rawRelationCountResults, this.queryRunner);\n            entities = transformer.transform(rawResults, this.expressionMap.mainAlias!);\n\n            // broadcast all \"after load\" events\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata) {\n                const broadcastResult = new BroadcasterResult();\n                queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, this.expressionMap.mainAlias.metadata, entities);\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\n            }\n        }\n\n        return {\n            raw: rawResults,\n            entities: entities,\n        };\n    }\n\n    protected createOrderByCombinedWithSelectExpression(parentAlias: string): [ string, OrderByCondition] {\n\n        // if table has a default order then apply it\n        const orderBys = this.expressionMap.allOrderBys;\n        const selectString = Object.keys(orderBys)\n            .map(orderCriteria => {\n                if (orderCriteria.indexOf(\".\") !== -1) {\n                    const criteriaParts = orderCriteria.split(\".\");\n                    const aliasName = criteriaParts[0];\n                    const propertyPath = criteriaParts.slice(1).join(\".\");\n                    const alias = this.expressionMap.findAliasByName(aliasName);\n                    const column = alias.metadata.findColumnWithPropertyPath(propertyPath);\n                    return this.escape(parentAlias) + \".\" + this.escape(DriverUtils.buildColumnAlias(this.connection.driver, aliasName, column!.databaseName));\n                } else {\n                    if (this.expressionMap.selects.find(select => select.selection === orderCriteria || select.aliasName === orderCriteria))\n                        return this.escape(parentAlias) + \".\" + orderCriteria;\n\n                    return \"\";\n                }\n            })\n            .join(\", \");\n\n        const orderByObject: OrderByCondition = {};\n        Object.keys(orderBys).forEach(orderCriteria => {\n            if (orderCriteria.indexOf(\".\") !== -1) {\n                const criteriaParts = orderCriteria.split(\".\");\n                const aliasName = criteriaParts[0];\n                const propertyPath = criteriaParts.slice(1).join(\".\");\n                const alias = this.expressionMap.findAliasByName(aliasName);\n                const column = alias.metadata.findColumnWithPropertyPath(propertyPath);\n                orderByObject[this.escape(parentAlias) + \".\" + this.escape(DriverUtils.buildColumnAlias(this.connection.driver, aliasName, column!.databaseName))] = orderBys[orderCriteria];\n            } else {\n                if (this.expressionMap.selects.find(select => select.selection === orderCriteria || select.aliasName === orderCriteria)) {\n                    orderByObject[this.escape(parentAlias) + \".\" + orderCriteria] = orderBys[orderCriteria];\n                } else {\n                    orderByObject[orderCriteria] = orderBys[orderCriteria];\n                }\n            }\n        });\n\n        return [selectString, orderByObject];\n    }\n\n    /**\n     * Loads raw results from the database.\n     */\n    protected async loadRawResults(queryRunner: QueryRunner) {\n        const [sql, parameters] = this.getQueryAndParameters();\n        const queryId = sql + \" -- PARAMETERS: \" + JSON.stringify(parameters);\n        const cacheOptions = typeof this.connection.options.cache === \"object\" ? this.connection.options.cache : {};\n        let savedQueryResultCacheOptions: QueryResultCacheOptions|undefined = undefined;\n        if (this.connection.queryResultCache && (this.expressionMap.cache || cacheOptions.alwaysEnabled)) {\n            savedQueryResultCacheOptions = await this.connection.queryResultCache.getFromCache({\n                identifier: this.expressionMap.cacheId,\n                query: queryId,\n                duration: this.expressionMap.cacheDuration || cacheOptions.duration || 1000\n            }, queryRunner);\n            if (savedQueryResultCacheOptions && !this.connection.queryResultCache.isExpired(savedQueryResultCacheOptions))\n                return JSON.parse(savedQueryResultCacheOptions.result);\n        }\n\n        const results = await queryRunner.query(sql, parameters);\n\n        if (this.connection.queryResultCache && (this.expressionMap.cache || cacheOptions.alwaysEnabled)) {\n            await this.connection.queryResultCache.storeInCache({\n                identifier: this.expressionMap.cacheId,\n                query: queryId,\n                time: new Date().getTime(),\n                duration: this.expressionMap.cacheDuration || cacheOptions.duration || 1000,\n                result: JSON.stringify(results)\n            }, savedQueryResultCacheOptions, queryRunner);\n        }\n\n        return results;\n    }\n\n    /**\n     * Merges into expression map given expression map properties.\n     */\n    protected mergeExpressionMap(expressionMap: Partial<QueryExpressionMap>): this {\n        ObjectUtils.assign(this.expressionMap, expressionMap);\n        return this;\n    }\n\n    /**\n     * Normalizes a give number - converts to int if possible.\n     */\n    protected normalizeNumber(num: any) {\n        if (typeof num === \"number\" || num === undefined || num === null)\n            return num;\n\n        return Number(num);\n    }\n\n    /**\n     * Creates a query builder used to execute sql queries inside this query builder.\n     */\n    protected obtainQueryRunner() {\n        return this.queryRunner || this.connection.createQueryRunner(\"slave\");\n    }\n\n}\n","import {RelationMetadata} from \"../../metadata/RelationMetadata\";\nimport {QueryBuilderUtils} from \"../QueryBuilderUtils\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {QueryExpressionMap} from \"../QueryExpressionMap\";\nimport {SelectQueryBuilder} from \"../SelectQueryBuilder\";\nimport {ObjectUtils} from \"../../util/ObjectUtils\";\n\n/**\n * Stores all join relation id attributes which will be used to build a JOIN query.\n */\nexport class RelationIdAttribute {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Alias of the joined (destination) table.\n     */\n    alias?: string;\n\n    /**\n     * Name of relation.\n     */\n    relationName: string;\n\n    /**\n     * Property + alias of the object where to joined data should be mapped.\n     */\n    mapToProperty: string;\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>;\n\n    /**\n     * Indicates if relation id should NOT be loaded as id map.\n     */\n    disableMixedMap = false;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private queryExpressionMap: QueryExpressionMap,\n                        relationIdAttribute?: Partial<RelationIdAttribute>) {\n        ObjectUtils.assign(this, relationIdAttribute || {});\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    get joinInverseSideMetadata(): EntityMetadata {\n        return this.relation.inverseEntityMetadata;\n    }\n\n    /**\n     * Alias of the parent of this join.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get parentAlias(): string {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value must be a string representation of alias property`);\n\n        return this.relationName.substr(0, this.relationName.indexOf(\".\"));\n    }\n\n    /**\n     * Relation property name of the parent.\n     * This is used to understand what is joined.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relationPropertyPath(): string {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value must be a string representation of alias property`);\n\n        return this.relationName.substr(this.relationName.indexOf(\".\") + 1);\n    }\n\n    /**\n     * Relation of the parent.\n     * This is used to understand what is joined.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relation(): RelationMetadata {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value must be a string representation of alias property`);\n\n        const relationOwnerSelection = this.queryExpressionMap.findAliasByName(this.parentAlias!);\n        const relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(this.relationPropertyPath!);\n        if (!relation)\n            throw new Error(`Relation with property path ${this.relationPropertyPath} in entity was not found.`);\n        return relation;\n    }\n\n    /**\n     * Generates alias of junction table, whose ids we get.\n     */\n    get junctionAlias(): string {\n        const [parentAlias, relationProperty] = this.relationName.split(\".\");\n        return parentAlias + \"_\" + relationProperty + \"_rid\";\n    }\n\n    /**\n     * Metadata of the joined entity.\n     * If extra condition without entity was joined, then it will return undefined.\n     */\n    get junctionMetadata(): EntityMetadata {\n        return this.relation.junctionEntityMetadata!;\n    }\n\n    get mapToPropertyParentAlias(): string {\n        return this.mapToProperty.substr(0, this.mapToProperty.indexOf(\".\"));\n    }\n\n    get mapToPropertyPropertyPath(): string {\n        return this.mapToProperty.substr(this.mapToProperty.indexOf(\".\") + 1);\n    }\n\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {QueryBuilderUtils} from \"../QueryBuilderUtils\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\nimport {QueryExpressionMap} from \"../QueryExpressionMap\";\nimport {SelectQueryBuilder} from \"../SelectQueryBuilder\";\nimport {ObjectUtils} from \"../../util/ObjectUtils\";\n\nexport class RelationCountAttribute {\n\n    /**\n     * Alias of the joined (destination) table.\n     */\n    alias?: string;\n\n    /**\n     * Name of relation.\n     */\n    relationName: string;\n\n    /**\n     * Property + alias of the object where to joined data should be mapped.\n     */\n    mapToProperty: string;\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private expressionMap: QueryExpressionMap,\n                relationCountAttribute?: Partial<RelationCountAttribute>) {\n        ObjectUtils.assign(this, relationCountAttribute || {});\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    get joinInverseSideMetadata(): EntityMetadata {\n        return this.relation.inverseEntityMetadata;\n    }\n\n    /**\n     * Alias of the parent of this join.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get parentAlias(): string {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value must be a string representation of alias property`);\n\n        return this.relationName.split(\".\")[0];\n    }\n\n    /**\n     * Relation property name of the parent.\n     * This is used to understand what is joined.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relationProperty(): string|undefined {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value is a string representation of alias property`);\n\n        return this.relationName.split(\".\")[1];\n    }\n\n    get junctionAlias(): string {\n        const [parentAlias, relationProperty] = this.relationName.split(\".\");\n        return parentAlias + \"_\" + relationProperty + \"_rc\";\n    }\n\n    /**\n     * Relation of the parent.\n     * This is used to understand what is joined.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relation(): RelationMetadata {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value is a string representation of alias property`);\n\n        const [parentAlias, propertyPath] = this.relationName.split(\".\");\n        const relationOwnerSelection = this.expressionMap.findAliasByName(parentAlias);\n        const relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(propertyPath);\n        if (!relation)\n            throw new Error(`Relation with property path ${propertyPath} in entity was not found.`);\n        return relation;\n    }\n\n    /**\n     * Metadata of the joined entity.\n     * If table without entity was joined, then it will return undefined.\n     */\n    get metadata(): EntityMetadata {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value is a string representation of alias property`);\n\n        const parentAlias = this.relationName.split(\".\")[0];\n        const selection = this.expressionMap.findAliasByName(parentAlias);\n        return selection.metadata;\n    }\n\n    get mapToPropertyPropertyName(): string {\n        return this.mapToProperty!.split(\".\")[1];\n    }\n\n}\n","import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {OrmUtils} from \"../util/OrmUtils\";\nimport {QueryExpressionMap} from \"./QueryExpressionMap\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {UpdateResult} from \"./result/UpdateResult\";\nimport {InsertResult} from \"./result/InsertResult\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\n\n/**\n * Updates entity with returning results in the entity insert and update operations.\n */\nexport class ReturningResultsEntityUpdator {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected queryRunner: QueryRunner,\n                protected expressionMap: QueryExpressionMap) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Updates entities with a special columns after updation query execution.\n     */\n    async update(updateResult: UpdateResult, entities: ObjectLiteral[]): Promise<void> {\n        const metadata = this.expressionMap.mainAlias!.metadata;\n\n        await Promise.all(entities.map(async (entity, entityIndex) => {\n\n            // if database supports returning/output statement then we already should have updating values in the raw data returned by insert query\n            if (this.queryRunner.connection.driver.isReturningSqlSupported()) {\n                if (this.queryRunner.connection.driver instanceof OracleDriver && Array.isArray(updateResult.raw) && this.expressionMap.extraReturningColumns.length > 0) {\n                    updateResult.raw = updateResult.raw.reduce((newRaw, rawItem, rawItemIndex) => {\n                        newRaw[this.expressionMap.extraReturningColumns[rawItemIndex].databaseName] = rawItem[0];\n                        return newRaw;\n                    }, {} as ObjectLiteral);\n                }\n                const result = Array.isArray(updateResult.raw) ? updateResult.raw[entityIndex] : updateResult.raw;\n                const returningColumns = this.queryRunner.connection.driver.createGeneratedMap(metadata, result);\n                if (returningColumns) {\n                    this.queryRunner.manager.merge(metadata.target as any, entity, returningColumns);\n                    updateResult.generatedMaps.push(returningColumns);\n                }\n\n            } else {\n\n                // for driver which do not support returning/output statement we need to perform separate query and load what we need\n                const updationColumns = this.getUpdationReturningColumns();\n                if (updationColumns.length > 0) {\n\n                    // get entity id by which we will get needed data\n                    const entityId = this.expressionMap.mainAlias!.metadata.getEntityIdMap(entity);\n                    if (!entityId)\n                        throw new Error(`Cannot update entity because entity id is not set in the entity.`);\n\n                    // execute query to get needed data\n                    const loadedReturningColumns = await this.queryRunner.manager\n                        .createQueryBuilder()\n                        .select(metadata.primaryColumns.map(column => metadata.targetName + \".\" + column.propertyPath))\n                        .addSelect(this.getUpdationReturningColumns().map(column => metadata.targetName + \".\" + column.propertyPath))\n                        .from(metadata.target, metadata.targetName)\n                        .where(entityId)\n                        .setOption(\"create-pojo\") // use POJO because created object can contain default values, e.g. property = null and those properties maight be overridden by merge process\n                        .getOne() as any;\n\n                    if (loadedReturningColumns) {\n                        this.queryRunner.manager.merge(metadata.target as any, entity, loadedReturningColumns);\n                        updateResult.generatedMaps.push(loadedReturningColumns);\n                    }\n                }\n            }\n        }));\n    }\n\n    /**\n     * Updates entities with a special columns after insertion query execution.\n     */\n    async insert(insertResult: InsertResult, entities: ObjectLiteral[]): Promise<void> {\n        const metadata = this.expressionMap.mainAlias!.metadata;\n        const insertionColumns = this.getInsertionReturningColumns();\n\n        const generatedMaps = entities.map((entity, entityIndex) => {\n            if (this.queryRunner.connection.driver instanceof OracleDriver && Array.isArray(insertResult.raw) && this.expressionMap.extraReturningColumns.length > 0) {\n                insertResult.raw = insertResult.raw.reduce((newRaw, rawItem, rawItemIndex) => {\n                    newRaw[this.expressionMap.extraReturningColumns[rawItemIndex].databaseName] = rawItem[0];\n                    return newRaw;\n                }, {} as ObjectLiteral);\n            }\n            // get all values generated by a database for us\n            const result = Array.isArray(insertResult.raw) ? insertResult.raw[entityIndex] : insertResult.raw;\n            const generatedMap = this.queryRunner.connection.driver.createGeneratedMap(metadata, result, entityIndex, entities.length) || {};\n\n            // if database does not support uuid generation we need to get uuid values\n            // generated by orm and set them to the generatedMap\n            if (this.queryRunner.connection.driver.isUUIDGenerationSupported() === false) {\n                metadata.generatedColumns.forEach(generatedColumn => {\n                    if (generatedColumn.generationStrategy === \"uuid\") {\n                        // uuid can be defined by user in a model, that's why first we get it\n                        let uuid = generatedColumn.getEntityValue(entity);\n                        if (!uuid) // if it was not defined by a user then InsertQueryBuilder generates it by its own, get this generated uuid value\n                            uuid = this.expressionMap.nativeParameters[\"uuid_\" + generatedColumn.databaseName + entityIndex];\n\n                        OrmUtils.mergeDeep(generatedMap, generatedColumn.createValueMap(uuid));\n                    }\n                });\n            }\n\n            this.queryRunner.manager.merge(metadata.target as any, entity, generatedMap); // todo: this should not be here, but problem with below line\n            return generatedMap;\n        });\n\n        // for postgres and mssql we use returning/output statement to get values of inserted default and generated values\n        // for other drivers we have to re-select this data from the database\n        if (this.queryRunner.connection.driver.isReturningSqlSupported() === false && insertionColumns.length > 0) {\n            const entityIds = entities.map((entity) => {\n                const entityId = metadata.getEntityIdMap(entity)!;\n\n                // We have to check for an empty `entityId` - if we don't, the query against the database\n                // effectively drops the `where` clause entirely and the first record will be returned -\n                // not what we want at all.\n                if (!entityId)\n                    throw new Error(`Cannot update entity because entity id is not set in the entity.`);\n\n                return entityId;\n            });\n\n            // to select just inserted entities we need a criteria to select by.\n            // for newly inserted entities in drivers which do not support returning statement\n            // row identifier can only be an increment column\n            // (since its the only thing that can be generated by those databases)\n            // or (and) other primary key which is defined by a user and inserted value has it\n\n            const returningResult: any = await this.queryRunner.manager\n                .createQueryBuilder()\n                .select(metadata.primaryColumns.map(column => metadata.targetName + \".\" + column.propertyPath))\n                .addSelect(insertionColumns.map(column => metadata.targetName + \".\" + column.propertyPath))\n                .from(metadata.target, metadata.targetName)\n                .where(entityIds)\n                .setOption(\"create-pojo\") // use POJO because created object can contain default values, e.g. property = null and those properties maight be overridden by merge process\n                .getMany();\n\n            entities.forEach((entity, entityIndex) => {\n                this.queryRunner.manager.merge(metadata.target as any, generatedMaps[entityIndex], returningResult[entityIndex]);\n            });\n        }\n\n        entities.forEach((entity, entityIndex) => {\n            const entityId = metadata.getEntityIdMap(entity)!;\n            insertResult.identifiers.push(entityId);\n            insertResult.generatedMaps.push(generatedMaps[entityIndex]);\n            this.queryRunner.manager.merge(this.expressionMap.mainAlias!.metadata.target as any, entity, generatedMaps[entityIndex], generatedMaps[entityIndex]); // todo: why twice?!\n        });\n    }\n\n    /**\n     * Columns we need to be returned from the database when we insert entity.\n     */\n    getInsertionReturningColumns(): ColumnMetadata[] {\n\n        // for databases which support returning statement we need to return extra columns like id\n        // for other databases we don't need to return id column since its returned by a driver already\n        const needToCheckGenerated = this.queryRunner.connection.driver.isReturningSqlSupported();\n\n        // filter out the columns of which we need database inserted values to update our entity\n        return this.expressionMap.mainAlias!.metadata.columns.filter(column => {\n            return  column.default !== undefined ||\n                    (needToCheckGenerated && column.isGenerated)  ||\n                    column.isCreateDate ||\n                    column.isUpdateDate ||\n                    column.isDeleteDate ||\n                    column.isVersion;\n        });\n    }\n\n    /**\n     * Columns we need to be returned from the database when we update entity.\n     */\n    getUpdationReturningColumns(): ColumnMetadata[] {\n        return this.expressionMap.mainAlias!.metadata.columns.filter(column => {\n            return column.isUpdateDate || column.isVersion;\n        });\n    }\n\n}\n","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import {TableColumnOptions} from \"../options/TableColumnOptions\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {Driver} from \"../../driver/Driver\";\n\nexport class TableUtils {\n\n    static createTableColumnOptions(columnMetadata: ColumnMetadata, driver: Driver): TableColumnOptions {\n        return {\n            name: columnMetadata.databaseName,\n            length: columnMetadata.length,\n            width: columnMetadata.width,\n            charset: columnMetadata.charset,\n            collation: columnMetadata.collation,\n            precision: columnMetadata.precision,\n            scale: columnMetadata.scale,\n            zerofill: columnMetadata.zerofill,\n            unsigned: columnMetadata.unsigned,\n            asExpression: columnMetadata.asExpression,\n            generatedType: columnMetadata.generatedType,\n            default: driver.normalizeDefault(columnMetadata),\n            onUpdate: columnMetadata.onUpdate,\n            comment: columnMetadata.comment,\n            isGenerated: columnMetadata.isGenerated,\n            generationStrategy: columnMetadata.generationStrategy,\n            isNullable: columnMetadata.isNullable,\n            type: driver.normalizeType(columnMetadata),\n            isPrimary: columnMetadata.isPrimary,\n            isUnique: driver.normalizeIsUnique(columnMetadata),\n            isArray: columnMetadata.isArray || false,\n            enum: columnMetadata.enum ? columnMetadata.enum.map(val => val + \"\") : columnMetadata.enum,\n            enumName: columnMetadata.enumName,\n            spatialFeatureType: columnMetadata.spatialFeatureType,\n            srid: columnMetadata.srid\n        };\n    }\n\n}\n","import {ObjectLiteral} from \"../../common/ObjectLiteral\";\n\n/**\n * Result object returned by InsertQueryBuilder execution.\n */\nexport class InsertResult {\n\n    /**\n     * Contains inserted entity id.\n     * Has entity-like structure (not just column database name and values).\n     */\n    identifiers: ObjectLiteral[] = [];\n\n    /**\n     * Generated values returned by a database.\n     * Has entity-like structure (not just column database name and values).\n     */\n    generatedMaps: ObjectLiteral[] = [];\n\n    /**\n     * Raw SQL result returned by executed query.\n     */\n    raw: any;\n\n}","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Thrown when user tries to update using QueryBuilder but do not specify what to update.\n */\nexport class UpdateValuesMissingError extends Error {\n    name = \"UpdateValuesMissingError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, UpdateValuesMissingError.prototype);\n        this.message = `Cannot perform update query because update values are not defined. Call \"qb.set(...)\" method to specify updated values.`;\n    }\n\n}\n","'use strict';\n\nvar reactIs = require('react-is');\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  '$$typeof': true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  '$$typeof': true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {};\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\n\nfunction getStatics(component) {\n  // React v16.11 and below\n  if (reactIs.isMemo(component)) {\n    return MEMO_STATICS;\n  } // React v16.12 and above\n\n\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n    if (objectPrototype) {\n      var inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n      }\n    }\n\n    var keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    var targetStatics = getStatics(targetComponent);\n    var sourceStatics = getStatics(sourceComponent);\n\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import {WhereExpression} from \"./WhereExpression\";\n\n/**\n * Syntax sugar.\n * Allows to use brackets in WHERE expressions for better syntax.\n */\nexport class Brackets {\n\n    /**\n     * WHERE expression that will be taken into brackets.\n     */\n    whereFactory: (qb: WhereExpression) => any;\n\n    /**\n     * Given WHERE query builder that will build a WHERE expression that will be taken into brackets.\n     */\n    constructor(whereFactory: (qb: WhereExpression) => any) {\n        this.whereFactory = whereFactory;\n    }\n\n}","import {FindOperator} from \"../FindOperator\";\n\n/**\n * Find Options Operator.\n * Example: { someField: In([...]) }\n */\nexport function In<T>(value: T[]|FindOperator<T>): FindOperator<T> {\n    return new FindOperator(\"in\", value as any, true, true);\n}\n","/**\n * Result object returned by DeleteQueryBuilder execution.\n */\nexport class DeleteResult {\n    /**\n     * Raw SQL result returned by executed query.\n     */\n    raw: any;\n\n    /**\n     * Number of affected rows/documents\n     * Not all drivers support this\n     */\n    affected?: number|null;\n}\n","/**\n * Thrown when user tries to execute operation that requires connection to be established.\n */\nexport class ConnectionIsNotSetError extends Error {\n    name = \"ConnectionIsNotSetError\";\n\n    constructor(dbType: string) {\n        super();\n        Object.setPrototypeOf(this, ConnectionIsNotSetError.prototype);\n        this.message = `Connection with ${dbType} database is not established. Check connection configuration.`;\n    }\n\n}","import {EntityTarget} from \"../common/EntityTarget\";\nimport {EntitySchema} from \"../index\";\n\n/**\n * Thrown when no result could be found in methods which are not allowed to return undefined or an empty set.\n */\nexport class EntityNotFoundError extends Error {\n    name = \"EntityNotFound\";\n\n    constructor(entityClass: EntityTarget<any>, criteria: any) {\n        super();\n        Object.setPrototypeOf(this, EntityNotFoundError.prototype);\n        let targetName: string;\n        if (entityClass instanceof EntitySchema) {\n            targetName = entityClass.options.name;\n        } else if (typeof entityClass === \"function\") {\n            targetName = entityClass.name;\n        } else if (typeof entityClass === \"object\" && \"name\" in entityClass) {\n            targetName = entityClass.name;\n        } else {\n            targetName = entityClass;\n        }\n        const criteriaString = this.stringifyCriteria(criteria);\n        this.message = `Could not find any entity of type \"${targetName}\" matching: ${criteriaString}`;\n    }\n\n    private stringifyCriteria(criteria: any): string {\n        try {\n            return JSON.stringify(criteria, null, 4);\n        } catch (e) { }\n        return \"\" + criteria;\n    }\n\n}\n","import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {QueryBuilderUtils} from \"./QueryBuilderUtils\";\nimport {QueryExpressionMap} from \"./QueryExpressionMap\";\nimport {Alias} from \"./Alias\";\nimport {ObjectUtils} from \"../util/ObjectUtils\";\n\n/**\n * Stores all join attributes which will be used to build a JOIN query.\n */\nexport class JoinAttribute {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Join direction.\n     */\n    direction: \"LEFT\"|\"INNER\";\n\n    /**\n     * Alias of the joined (destination) table.\n     */\n    alias: Alias;\n\n    /**\n     * Joined table, entity target, or relation in \"post.category\" format.\n     */\n    entityOrProperty: Function|string;\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    condition?: string;\n\n    /**\n     * Property + alias of the object where to joined data should be mapped.\n     */\n    mapToProperty?: string;\n\n    /**\n     * Indicates if user maps one or many objects from the join.\n     */\n    isMappingMany?: boolean;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection,\n                private queryExpressionMap: QueryExpressionMap,\n                joinAttribute?: JoinAttribute) {\n        ObjectUtils.assign(this, joinAttribute || {});\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    get isMany(): boolean {\n        if (this.isMappingMany !== undefined)\n            return this.isMappingMany;\n\n        if (this.relation)\n            return this.relation.isManyToMany || this.relation.isOneToMany;\n\n        return false;\n    }\n\n\n    isSelectedCache: boolean;\n    isSelectedEvaluated: boolean = false;\n    /**\n     * Indicates if this join is selected.\n     */\n    get isSelected(): boolean {\n        if (!this.isSelectedEvaluated) {\n            let getValue = () => {\n                for (const select of this.queryExpressionMap.selects) {\n                    if (select.selection === this.alias.name)\n                        return true;\n\n                    if (this.metadata && !!this.metadata.columns.find(column => select.selection === this.alias.name + \".\" + column.propertyPath))\n                        return true;\n                }\n\n                return false;\n            };\n            this.isSelectedCache = getValue();\n            this.isSelectedEvaluated = true;\n        }\n        return this.isSelectedCache;\n\n    }\n\n    /**\n     * Name of the table which we should join.\n     */\n    get tablePath(): string {\n        return this.metadata ? this.metadata.tablePath : this.entityOrProperty as string;\n    }\n\n    /**\n     * Alias of the parent of this join.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get parentAlias(): string|undefined {\n        if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\n            return undefined;\n\n        return this.entityOrProperty.substr(0, this.entityOrProperty.indexOf(\".\"));\n    }\n\n    /**\n     * Relation property name of the parent.\n     * This is used to understand what is joined.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relationPropertyPath(): string|undefined {\n        if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\n            return undefined;\n\n        return this.entityOrProperty.substr(this.entityOrProperty.indexOf(\".\") + 1);\n    }\n\n    relationCache: RelationMetadata|undefined;\n    relationEvaluated: boolean = false;\n    /**\n     * Relation of the parent.\n     * This is used to understand what is joined.\n     * This is available when join was made using \"post.category\" syntax.\n     * Relation can be undefined if entityOrProperty is regular entity or custom table.\n     */\n    get relation(): RelationMetadata | undefined {\n        if (!this.relationEvaluated) {\n            let getValue = () => {\n                if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\n                    return undefined;\n\n                const relationOwnerSelection = this.queryExpressionMap.findAliasByName(this.parentAlias!);\n                let relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(this.relationPropertyPath!);\n\n                if (relation) {\n                    return relation;\n                }\n\n                if (relationOwnerSelection.metadata.parentEntityMetadata) {\n                    relation = relationOwnerSelection.metadata.parentEntityMetadata.findRelationWithPropertyPath(this.relationPropertyPath!);\n                    if (relation) {\n                        return relation;\n                    }\n                }\n\n                throw new Error(`Relation with property path ${this.relationPropertyPath} in entity was not found.`);\n            };\n            this.relationCache = getValue.bind(this)();\n            this.relationEvaluated = true;\n        }\n        return this.relationCache;\n    }\n\n    /**\n     * Metadata of the joined entity.\n     * If table without entity was joined, then it will return undefined.\n     */\n    get metadata(): EntityMetadata|undefined {\n\n        // entityOrProperty is relation, e.g. \"post.category\"\n        if (this.relation)\n            return this.relation.inverseEntityMetadata;\n\n        // entityOrProperty is Entity class\n        if (this.connection.hasMetadata(this.entityOrProperty))\n            return this.connection.getMetadata(this.entityOrProperty);\n\n        return undefined;\n\n        /*if (typeof this.entityOrProperty === \"string\") { // entityOrProperty is a custom table\n\n            // first try to find entity with such name, this is needed when entity does not have a target class,\n            // and its target is a string name (scenario when plain old javascript is used or entity schema is loaded from files)\n            const metadata = this.connection.entityMetadatas.find(metadata => metadata.name === this.entityOrProperty);\n            if (metadata)\n                return metadata;\n\n            // check if we have entity with such table name, and use its metadata if found\n            return this.connection.entityMetadatas.find(metadata => metadata.tableName === this.entityOrProperty);\n        }*/\n    }\n\n    /**\n     * Generates alias of junction table, whose ids we get.\n     */\n    get junctionAlias(): string {\n        if (!this.relation)\n            throw new Error(`Cannot get junction table for join without relation.`);\n\n        return this.relation.isOwning ? this.parentAlias + \"_\" + this.alias.name : this.alias.name + \"_\" + this.parentAlias;\n    }\n\n    get mapToPropertyParentAlias(): string|undefined {\n        if (!this.mapToProperty)\n            return undefined;\n\n        return this.mapToProperty!.split(\".\")[0];\n    }\n\n    get mapToPropertyPropertyName(): string|undefined {\n        if (!this.mapToProperty)\n            return undefined;\n\n        return this.mapToProperty!.split(\".\")[1];\n    }\n\n}\n","/**\n *\n */\nexport class EntityColumnNotFound extends Error {\n    name = \"EntityColumnNotFound\";\n\n    constructor(propertyPath: string) {\n        super();\n        Object.setPrototypeOf(this, EntityColumnNotFound.prototype);\n        this.message = `No entity column \"${propertyPath}\" was found.`;\n    }\n\n}\n","/**\n * Thrown when user tries to build an UPDATE query with LIMIT but the database does not support it.\n*/\nexport class LimitOnUpdateNotSupportedError extends Error {\n    name = \"LimitOnUpdateNotSupportedError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, LimitOnUpdateNotSupportedError.prototype);\n        this.message = `Your database does not support LIMIT on UPDATE statements.`;\n    }\n\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","import {CockroachDriver} from \"../driver/cockroachdb/CockroachDriver\";\nimport {SapDriver} from \"../driver/sap/SapDriver\";\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\";\nimport {QueryBuilder} from \"./QueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {Connection} from \"../connection/Connection\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {WhereExpression} from \"./WhereExpression\";\nimport {Brackets} from \"./Brackets\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {UpdateResult} from \"./result/UpdateResult\";\nimport {ReturningStatementNotSupportedError} from \"../error/ReturningStatementNotSupportedError\";\nimport {ReturningResultsEntityUpdator} from \"./ReturningResultsEntityUpdator\";\nimport {SqljsDriver} from \"../driver/sqljs/SqljsDriver\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {BroadcasterResult} from \"../subscriber/BroadcasterResult\";\nimport {AbstractSqliteDriver} from \"../driver/sqlite-abstract/AbstractSqliteDriver\";\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\nimport {LimitOnUpdateNotSupportedError} from \"../error/LimitOnUpdateNotSupportedError\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {UpdateValuesMissingError} from \"../error/UpdateValuesMissingError\";\nimport {EntityColumnNotFound} from \"../error/EntityColumnNotFound\";\nimport {QueryDeepPartialEntity} from \"./QueryPartialEntity\";\nimport {AuroraDataApiDriver} from \"../driver/aurora-data-api/AuroraDataApiDriver\";\nimport {BetterSqlite3Driver} from \"../driver/better-sqlite3/BetterSqlite3Driver\";\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class UpdateQueryBuilder<Entity> extends QueryBuilder<Entity> implements WhereExpression {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connectionOrQueryBuilder: Connection|QueryBuilder<any>, queryRunner?: QueryRunner) {\n        super(connectionOrQueryBuilder as any, queryRunner);\n        this.expressionMap.aliasNamePrefixingEnabled = false;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        let sql = this.createComment();\n        sql += this.createUpdateExpression();\n        sql += this.createOrderByExpression();\n        sql += this.createLimitExpression();\n        return sql.trim();\n    }\n\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute(): Promise<UpdateResult> {\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs: boolean = false;\n\n        try {\n\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n\n            // call before updation methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\n                const broadcastResult = new BroadcasterResult();\n                queryRunner.broadcaster.broadcastBeforeUpdateEvent(broadcastResult, this.expressionMap.mainAlias!.metadata, this.expressionMap.valuesSet);\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\n            }\n\n            let declareSql: string | null = null;\n            let selectOutputSql: string | null = null;\n\n            // if update entity mode is enabled we may need extra columns for the returning statement\n            const returningResultsEntityUpdator = new ReturningResultsEntityUpdator(queryRunner, this.expressionMap);\n            if (this.expressionMap.updateEntity === true &&\n                this.expressionMap.mainAlias!.hasMetadata &&\n                this.expressionMap.whereEntities.length > 0) {\n                this.expressionMap.extraReturningColumns = returningResultsEntityUpdator.getUpdationReturningColumns();\n\n                if (this.expressionMap.extraReturningColumns.length > 0 && this.connection.driver instanceof SqlServerDriver) {\n                    declareSql = this.connection.driver.buildTableVariableDeclaration(\"@OutputTable\", this.expressionMap.extraReturningColumns);\n                    selectOutputSql = `SELECT * FROM @OutputTable`;\n                }\n            }\n\n            // execute update query\n            const [updateSql, parameters] = this.getQueryAndParameters();\n            const updateResult = new UpdateResult();\n            const statements = [declareSql, updateSql, selectOutputSql];\n            const result = await queryRunner.query(\n                statements.filter(sql => sql != null).join(\";\\n\\n\"),\n                parameters,\n            );\n\n            if (this.connection.driver instanceof PostgresDriver) {\n                updateResult.raw = result[0];\n                updateResult.affected = result[1];\n            }\n            else if (this.connection.driver instanceof MysqlDriver) {\n                updateResult.raw = result;\n                updateResult.affected = result.affectedRows;\n            }\n            else if (this.connection.driver instanceof BetterSqlite3Driver) { // only works for better-sqlite3\n                updateResult.raw = result;\n                updateResult.affected = result.changes;\n            }\n            else {\n                updateResult.raw = result;\n            }\n\n            // if we are updating entities and entity updation is enabled we must update some of entity columns (like version, update date, etc.)\n            if (this.expressionMap.updateEntity === true &&\n                this.expressionMap.mainAlias!.hasMetadata &&\n                this.expressionMap.whereEntities.length > 0) {\n                await returningResultsEntityUpdator.update(updateResult, this.expressionMap.whereEntities);\n            }\n\n            // call after updation methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\n                const broadcastResult = new BroadcasterResult();\n                queryRunner.broadcaster.broadcastAfterUpdateEvent(broadcastResult, this.expressionMap.mainAlias!.metadata);\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\n            }\n\n            // close transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.commitTransaction();\n\n            return updateResult;\n\n        } catch (error) {\n\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n            throw error;\n\n        } finally {\n            if (queryRunner !== this.queryRunner) { // means we created our own query runner\n                await queryRunner.release();\n            }\n            if (this.connection.driver instanceof SqljsDriver && !queryRunner.isTransactionActive) {\n                await this.connection.driver.autoSave();\n            }\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Values needs to be updated.\n     */\n    set(values: QueryDeepPartialEntity<Entity>): this {\n        this.expressionMap.valuesSet = values;\n        return this;\n    }\n\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(where: string|((qb: this) => string)|Brackets|ObjectLiteral|ObjectLiteral[], parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n        const condition = this.computeWhereParameter(where);\n        if (condition)\n            this.expressionMap.wheres = [{ type: \"simple\", condition: condition }];\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(where: string|((qb: this) => string)|Brackets, parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"and\", condition: this.computeWhereParameter(where) });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(where: string|((qb: this) => string)|Brackets, parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"or\", condition: this.computeWhereParameter(where) });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    whereInIds(ids: any|any[]): this {\n        return this.where(this.createWhereIdsExpression(ids));\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    andWhereInIds(ids: any|any[]): this {\n        return this.andWhere(this.createWhereIdsExpression(ids));\n    }\n\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     */\n    orWhereInIds(ids: any|any[]): this {\n        return this.orWhere(this.createWhereIdsExpression(ids));\n    }\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    output(columns: string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    output(output: string): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string|string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string|string[]): this {\n        return this.returning(output);\n    }\n\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    returning(columns: string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    returning(returning: string): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string|string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string|string[]): this {\n\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported())\n            throw new ReturningStatementNotSupportedError();\n\n        this.expressionMap.returning = returning;\n        return this;\n    }\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     *\n     * Calling order by without order set will remove all previously set order bys.\n     */\n    orderBy(): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(sort: string, order?: \"ASC\"|\"DESC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(order: OrderByCondition): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(sort?: string|OrderByCondition, order: \"ASC\"|\"DESC\" = \"ASC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this {\n        if (sort) {\n            if (sort instanceof Object) {\n                this.expressionMap.orderBys = sort as OrderByCondition;\n            } else {\n                if (nulls) {\n                    this.expressionMap.orderBys = { [sort as string]: { order, nulls } };\n                } else {\n                    this.expressionMap.orderBys = { [sort as string]: order };\n                }\n            }\n        } else {\n            this.expressionMap.orderBys = {};\n        }\n        return this;\n    }\n\n    /**\n     * Adds ORDER BY condition in the query builder.\n     */\n    addOrderBy(sort: string, order: \"ASC\"|\"DESC\" = \"ASC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this {\n        if (nulls) {\n            this.expressionMap.orderBys[sort] = { order, nulls };\n        } else {\n            this.expressionMap.orderBys[sort] = order;\n        }\n        return this;\n    }\n\n    /**\n     * Sets LIMIT - maximum number of rows to be selected.\n     */\n    limit(limit?: number): this {\n        this.expressionMap.limit = limit;\n        return this;\n    }\n\n    /**\n     * Indicates if entity must be updated after update operation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    whereEntity(entity: Entity|Entity[]): this {\n        if (!this.expressionMap.mainAlias!.hasMetadata)\n            throw new Error(`.whereEntity method can only be used on queries which update real entity table.`);\n\n        this.expressionMap.wheres = [];\n        const entities: Entity[] = Array.isArray(entity) ? entity : [entity];\n        entities.forEach(entity => {\n\n            const entityIdMap = this.expressionMap.mainAlias!.metadata.getEntityIdMap(entity);\n            if (!entityIdMap)\n                throw new Error(`Provided entity does not have ids set, cannot perform operation.`);\n\n            this.orWhereInIds(entityIdMap);\n        });\n\n        this.expressionMap.whereEntities = entities;\n        return this;\n    }\n\n    /**\n     * Indicates if entity must be updated after update operation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    updateEntity(enabled: boolean): this {\n        this.expressionMap.updateEntity = enabled;\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates UPDATE express used to perform insert query.\n     */\n    protected createUpdateExpression() {\n        const valuesSet = this.getValueSet();\n        const metadata = this.expressionMap.mainAlias!.hasMetadata ? this.expressionMap.mainAlias!.metadata : undefined;\n\n        // prepare columns and values to be updated\n        const updateColumnAndValues: string[] = [];\n        const updatedColumns: ColumnMetadata[] = [];\n        const newParameters: ObjectLiteral = {};\n        let parametersCount =   this.connection.driver instanceof MysqlDriver ||\n                                this.connection.driver instanceof AuroraDataApiDriver ||\n                                this.connection.driver instanceof OracleDriver ||\n                                this.connection.driver instanceof AbstractSqliteDriver ||\n                                this.connection.driver instanceof SapDriver\n            ? 0 : Object.keys(this.expressionMap.nativeParameters).length;\n        if (metadata) {\n            EntityMetadata.createPropertyPath(metadata, valuesSet).forEach(propertyPath => {\n                // todo: make this and other query builder to work with properly with tables without metadata\n                const columns = metadata.findColumnsWithPropertyPath(propertyPath);\n\n                if (columns.length <= 0) {\n                    throw new EntityColumnNotFound(propertyPath);\n                }\n\n                columns.forEach(column => {\n                    if (!column.isUpdate) { return; }\n                    updatedColumns.push(column);\n\n                    const paramName = \"upd_\" + column.databaseName;\n\n                    //\n                    let value = column.getEntityValue(valuesSet);\n                    if (column.referencedColumn && value instanceof Object) {\n                        value = column.referencedColumn.getEntityValue(value);\n                    }\n                    else if (!(value instanceof Function)) {\n                        value = this.connection.driver.preparePersistentValue(value, column);\n                    }\n\n                    // todo: duplication zone\n                    if (value instanceof Function) { // support for SQL expressions in update query\n                        updateColumnAndValues.push(this.escape(column.databaseName) + \" = \" + value());\n                    } else if (this.connection.driver instanceof SapDriver && value === null) {\n                        updateColumnAndValues.push(this.escape(column.databaseName) + \" = NULL\");\n                    } else {\n                        if (this.connection.driver instanceof SqlServerDriver) {\n                            value = this.connection.driver.parametrizeValue(column, value);\n\n                        // } else if (value instanceof Array) {\n                        //     value = new ArrayParameter(value);\n                        }\n\n                        if (this.connection.driver instanceof MysqlDriver ||\n                            this.connection.driver instanceof AuroraDataApiDriver ||\n                            this.connection.driver instanceof OracleDriver ||\n                            this.connection.driver instanceof AbstractSqliteDriver ||\n                            this.connection.driver instanceof SapDriver) {\n                            newParameters[paramName] = value;\n                        } else {\n                            this.expressionMap.nativeParameters[paramName] = value;\n                        }\n\n                        let expression = null;\n                        if ((this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver) && this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            const useLegacy = this.connection.driver.options.legacySpatialSupport;\n                            const geomFromText = useLegacy ? \"GeomFromText\" : \"ST_GeomFromText\";\n                            if (column.srid != null) {\n                                expression = `${geomFromText}(${this.connection.driver.createParameter(paramName, parametersCount)}, ${column.srid})`;\n                            } else {\n                                expression = `${geomFromText}(${this.connection.driver.createParameter(paramName, parametersCount)})`;\n                            }\n                        } else if (this.connection.driver instanceof PostgresDriver && this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            if (column.srid != null) {\n                              expression = `ST_SetSRID(ST_GeomFromGeoJSON(${this.connection.driver.createParameter(paramName, parametersCount)}), ${column.srid})::${column.type}`;\n                            } else {\n                              expression = `ST_GeomFromGeoJSON(${this.connection.driver.createParameter(paramName, parametersCount)})::${column.type}`;\n                            }\n                        } else if (this.connection.driver instanceof SqlServerDriver && this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            expression = column.type + \"::STGeomFromText(\" + this.connection.driver.createParameter(paramName, parametersCount) + \", \" + (column.srid || \"0\") + \")\";\n                        } else {\n                            expression = this.connection.driver.createParameter(paramName, parametersCount);\n                        }\n                        updateColumnAndValues.push(this.escape(column.databaseName) + \" = \" + expression);\n                        parametersCount++;\n                    }\n                });\n            });\n\n            if (metadata.versionColumn && updatedColumns.indexOf(metadata.versionColumn) === -1)\n                updateColumnAndValues.push(this.escape(metadata.versionColumn.databaseName) + \" = \" + this.escape(metadata.versionColumn.databaseName) + \" + 1\");\n            if (metadata.updateDateColumn && updatedColumns.indexOf(metadata.updateDateColumn) === -1)\n                updateColumnAndValues.push(this.escape(metadata.updateDateColumn.databaseName) + \" = CURRENT_TIMESTAMP\"); // todo: fix issue with CURRENT_TIMESTAMP(6) being used, can \"DEFAULT\" be used?!\n\n        } else {\n            Object.keys(valuesSet).map(key => {\n                let value = valuesSet[key];\n\n                // todo: duplication zone\n                if (value instanceof Function) { // support for SQL expressions in update query\n                    updateColumnAndValues.push(this.escape(key) + \" = \" + value());\n                } else if (this.connection.driver instanceof SapDriver && value === null) {\n                    updateColumnAndValues.push(this.escape(key) + \" = NULL\");\n                } else {\n\n                    // we need to store array values in a special class to make sure parameter replacement will work correctly\n                    // if (value instanceof Array)\n                    //     value = new ArrayParameter(value);\n\n                    if (this.connection.driver instanceof MysqlDriver ||\n                        this.connection.driver instanceof AuroraDataApiDriver ||\n                        this.connection.driver instanceof OracleDriver ||\n                        this.connection.driver instanceof AbstractSqliteDriver ||\n                        this.connection.driver instanceof SapDriver) {\n                        newParameters[key] = value;\n                    } else {\n                        this.expressionMap.nativeParameters[key] = value;\n                    }\n\n                    updateColumnAndValues.push(this.escape(key) + \" = \" + this.connection.driver.createParameter(key, parametersCount));\n                    parametersCount++;\n                }\n            });\n        }\n\n        if (updateColumnAndValues.length <= 0) {\n            throw new UpdateValuesMissingError();\n        }\n\n        // we re-write parameters this way because we want our \"UPDATE ... SET\" parameters to be first in the list of \"nativeParameters\"\n        // because some drivers like mysql depend on order of parameters\n        if (this.connection.driver instanceof MysqlDriver ||\n            this.connection.driver instanceof AuroraDataApiDriver ||\n            this.connection.driver instanceof OracleDriver ||\n            this.connection.driver instanceof AbstractSqliteDriver ||\n            this.connection.driver instanceof SapDriver) {\n            this.expressionMap.nativeParameters = Object.assign(newParameters, this.expressionMap.nativeParameters);\n        }\n\n        // get a table name and all column database names\n        const whereExpression = this.createWhereExpression();\n        const returningExpression = this.createReturningExpression();\n\n        // generate and return sql update query\n        if (returningExpression && (this.connection.driver instanceof PostgresDriver || this.connection.driver instanceof OracleDriver || this.connection.driver instanceof CockroachDriver)) {\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")}${whereExpression} RETURNING ${returningExpression}`;\n\n        } else if (returningExpression && this.connection.driver instanceof SqlServerDriver) {\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")} OUTPUT ${returningExpression}${whereExpression}`;\n\n        } else {\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")}${whereExpression}`; // todo: how do we replace aliases in where to nothing?\n        }\n    }\n\n    /**\n     * Creates \"ORDER BY\" part of SQL query.\n     */\n    protected createOrderByExpression() {\n        const orderBys = this.expressionMap.orderBys;\n        if (Object.keys(orderBys).length > 0)\n            return \" ORDER BY \" + Object.keys(orderBys)\n                    .map(columnName => {\n                        if (typeof orderBys[columnName] === \"string\") {\n                            return this.replacePropertyNames(columnName) + \" \" + orderBys[columnName];\n                        } else {\n                            return this.replacePropertyNames(columnName) + \" \" + (orderBys[columnName] as any).order + \" \" + (orderBys[columnName] as any).nulls;\n                        }\n                    })\n                    .join(\", \");\n\n        return \"\";\n    }\n\n    /**\n     * Creates \"LIMIT\" parts of SQL query.\n     */\n    protected createLimitExpression(): string {\n        let limit: number|undefined = this.expressionMap.limit;\n\n        if (limit) {\n            if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver) {\n                return \" LIMIT \" + limit;\n            } else {\n                throw new LimitOnUpdateNotSupportedError();\n            }\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Gets array of values need to be inserted into the target table.\n     */\n    protected getValueSet(): ObjectLiteral {\n        if (this.expressionMap.valuesSet instanceof Object)\n            return this.expressionMap.valuesSet;\n\n        throw new UpdateValuesMissingError();\n    }\n\n}\n","import {CockroachDriver} from \"../driver/cockroachdb/CockroachDriver\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {QueryBuilder} from \"./QueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {EntityTarget} from \"../common/EntityTarget\";\nimport {Connection} from \"../connection/Connection\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {WhereExpression} from \"./WhereExpression\";\nimport {Brackets} from \"./Brackets\";\nimport {DeleteResult} from \"./result/DeleteResult\";\nimport {ReturningStatementNotSupportedError} from \"../error/ReturningStatementNotSupportedError\";\nimport {SqljsDriver} from \"../driver/sqljs/SqljsDriver\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {BroadcasterResult} from \"../subscriber/BroadcasterResult\";\nimport {EntitySchema} from \"../index\";\nimport {AuroraDataApiDriver} from \"../driver/aurora-data-api/AuroraDataApiDriver\";\nimport {BetterSqlite3Driver} from \"../driver/better-sqlite3/BetterSqlite3Driver\";\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class DeleteQueryBuilder<Entity> extends QueryBuilder<Entity> implements WhereExpression {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connectionOrQueryBuilder: Connection|QueryBuilder<any>, queryRunner?: QueryRunner) {\n        super(connectionOrQueryBuilder as any, queryRunner);\n        this.expressionMap.aliasNamePrefixingEnabled = false;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        let sql = this.createComment();\n        sql += this.createDeleteExpression();\n        return sql.trim();\n    }\n\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute(): Promise<DeleteResult> {\n        const [sql, parameters] = this.getQueryAndParameters();\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs: boolean = false;\n\n        try {\n\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n\n            // call before deletion methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\n                const broadcastResult = new BroadcasterResult();\n                queryRunner.broadcaster.broadcastBeforeRemoveEvent(broadcastResult, this.expressionMap.mainAlias!.metadata);\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\n            }\n\n            // execute query\n            const deleteResult = new DeleteResult();\n            const result = await queryRunner.query(sql, parameters);\n\n            const driver = queryRunner.connection.driver;\n            if (driver instanceof MysqlDriver || driver instanceof AuroraDataApiDriver) {\n                deleteResult.raw = result;\n                deleteResult.affected = result.affectedRows;\n\n            } else if (driver instanceof SqlServerDriver || driver instanceof PostgresDriver || driver instanceof CockroachDriver) {\n                deleteResult.raw = result[0] ? result[0] : null;\n                // don't return 0 because it could confuse. null means that we did not receive this value\n                deleteResult.affected = typeof result[1] === \"number\" ? result[1] : null;\n\n            } else if (driver instanceof OracleDriver) {\n                deleteResult.affected = result;\n\n            } else if (driver instanceof BetterSqlite3Driver) { // only works for better-sqlite3\n                deleteResult.raw = result;\n                deleteResult.affected = result.changes;\n\n            } else {\n                deleteResult.raw = result;\n            }\n\n            // call after deletion methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\n                const broadcastResult = new BroadcasterResult();\n                queryRunner.broadcaster.broadcastAfterRemoveEvent(broadcastResult, this.expressionMap.mainAlias!.metadata);\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\n            }\n\n            // close transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.commitTransaction();\n\n            return deleteResult;\n\n        } catch (error) {\n\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n            throw error;\n\n        } finally {\n            if (queryRunner !== this.queryRunner) { // means we created our own query runner\n                await queryRunner.release();\n            }\n            if (this.connection.driver instanceof SqljsDriver && !queryRunner.isTransactionActive) {\n                await this.connection.driver.autoSave();\n            }\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    from<T>(entityTarget: EntityTarget<T>, aliasName?: string): DeleteQueryBuilder<T> {\n        entityTarget = entityTarget instanceof EntitySchema ? entityTarget.options.name : entityTarget;\n        const mainAlias = this.createFromAlias(entityTarget, aliasName);\n        this.expressionMap.setMainAlias(mainAlias);\n        return (this as any) as DeleteQueryBuilder<T>;\n    }\n\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(where: Brackets|string|((qb: this) => string)|ObjectLiteral|ObjectLiteral[], parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n        const condition = this.computeWhereParameter(where);\n        if (condition)\n            this.expressionMap.wheres = [{ type: \"simple\", condition: condition }];\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(where: Brackets|string|((qb: this) => string), parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"and\", condition: this.computeWhereParameter(where) });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(where: Brackets|string|((qb: this) => string), parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"or\", condition: this.computeWhereParameter(where) });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    whereInIds(ids: any|any[]): this {\n        return this.where(this.createWhereIdsExpression(ids));\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    andWhereInIds(ids: any|any[]): this {\n        return this.andWhere(this.createWhereIdsExpression(ids));\n    }\n\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     */\n    orWhereInIds(ids: any|any[]): this {\n        return this.orWhere(this.createWhereIdsExpression(ids));\n    }\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    output(columns: string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    output(output: string): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string|string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string|string[]): this {\n        return this.returning(output);\n    }\n\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    returning(columns: string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    returning(returning: string): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string|string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string|string[]): this {\n\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported())\n            throw new ReturningStatementNotSupportedError();\n\n        this.expressionMap.returning = returning;\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates DELETE express used to perform query.\n     */\n    protected createDeleteExpression() {\n        const tableName = this.getTableName(this.getMainTableName());\n        const whereExpression = this.createWhereExpression();\n        const returningExpression = this.createReturningExpression();\n\n        if (returningExpression && (this.connection.driver instanceof PostgresDriver || this.connection.driver instanceof CockroachDriver)) {\n            return `DELETE FROM ${tableName}${whereExpression} RETURNING ${returningExpression}`;\n\n        } else if (returningExpression !== \"\" && this.connection.driver instanceof SqlServerDriver) {\n            return `DELETE FROM ${tableName} OUTPUT ${returningExpression}${whereExpression}`;\n\n        } else {\n            return `DELETE FROM ${tableName}${whereExpression}`;\n        }\n    }\n\n}\n","import {SapDriver} from \"../driver/sap/SapDriver\";\nimport {QueryBuilder} from \"./QueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {QueryExpressionMap} from \"./QueryExpressionMap\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\n\n/**\n * Allows to work with entity relations and perform specific operations with those relations.\n *\n * todo: add transactions everywhere\n */\nexport class RelationUpdater {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected queryBuilder: QueryBuilder<any>,\n                protected expressionMap: QueryExpressionMap) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs set or add operation on a relation.\n     */\n    async update(value: any|any[]): Promise<void> {\n        const relation = this.expressionMap.relationMetadata;\n\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n\n            const updateSet = relation.joinColumns.reduce((updateSet, joinColumn) => {\n                const relationValue = value instanceof Object ? joinColumn.referencedColumn!.getEntityValue(value) : value;\n                joinColumn.setEntityValue(updateSet, relationValue);\n                return updateSet;\n            }, {} as any);\n\n            if (!this.expressionMap.of || (Array.isArray(this.expressionMap.of) && !this.expressionMap.of.length)) return;\n\n            await this.queryBuilder\n                .createQueryBuilder()\n                .update(relation.entityMetadata.target)\n                .set(updateSet)\n                .whereInIds(this.expressionMap.of)\n                .execute();\n\n        } else if ((relation.isOneToOneNotOwner || relation.isOneToMany) && value === null) { // we handle null a bit different way\n\n            const updateSet: ObjectLiteral = {};\n            relation.inverseRelation!.joinColumns.forEach(column => {\n                updateSet[column.propertyName] = null;\n            });\n\n            const ofs = Array.isArray(this.expressionMap.of) ? this.expressionMap.of : [this.expressionMap.of];\n            const parameters: ObjectLiteral = {};\n            const conditions: string[] = [];\n            ofs.forEach((of, ofIndex) => {\n                relation.inverseRelation!.joinColumns.map((column, columnIndex) => {\n                    const parameterName = \"joinColumn_\" + ofIndex + \"_\" + columnIndex;\n                    parameters[parameterName] = of instanceof Object ? column.referencedColumn!.getEntityValue(of) : of;\n                    conditions.push(`${column.propertyPath} = :${parameterName}`);\n                });\n            });\n            const condition = conditions.map(str => \"(\" + str + \")\").join(\" OR \");\n            if (!condition) return;\n\n            await this.queryBuilder\n                .createQueryBuilder()\n                .update(relation.inverseEntityMetadata.target)\n                .set(updateSet)\n                .where(condition)\n                .setParameters(parameters)\n                .execute();\n\n        } else if (relation.isOneToOneNotOwner || relation.isOneToMany) {\n\n            if (Array.isArray(this.expressionMap.of))\n                throw new Error(`You cannot update relations of multiple entities with the same related object. Provide a single entity into .of method.`);\n\n            const of = this.expressionMap.of;\n            const updateSet = relation.inverseRelation!.joinColumns.reduce((updateSet, joinColumn) => {\n                const relationValue = of instanceof Object ? joinColumn.referencedColumn!.getEntityValue(of) : of;\n                joinColumn.setEntityValue(updateSet, relationValue);\n                return updateSet;\n            }, {} as any);\n\n            if (!value || (Array.isArray(value) && !value.length)) return;\n\n            await this.queryBuilder\n                .createQueryBuilder()\n                .update(relation.inverseEntityMetadata.target)\n                .set(updateSet)\n                .whereInIds(value)\n                .execute();\n\n        } else { // many to many\n            const junctionMetadata = relation.junctionEntityMetadata!;\n            const ofs = Array.isArray(this.expressionMap.of) ? this.expressionMap.of : [this.expressionMap.of];\n            const values = Array.isArray(value) ? value : [value];\n            const firstColumnValues = relation.isManyToManyOwner ? ofs : values;\n            const secondColumnValues = relation.isManyToManyOwner ? values : ofs;\n\n            const bulkInserted: ObjectLiteral[] = [];\n            firstColumnValues.forEach(firstColumnVal => {\n                secondColumnValues.forEach(secondColumnVal => {\n                    const inserted: ObjectLiteral = {};\n                    junctionMetadata.ownerColumns.forEach(column => {\n                        inserted[column.databaseName] = firstColumnVal instanceof Object ? column.referencedColumn!.getEntityValue(firstColumnVal) : firstColumnVal;\n                    });\n                    junctionMetadata.inverseColumns.forEach(column => {\n                        inserted[column.databaseName] = secondColumnVal instanceof Object ? column.referencedColumn!.getEntityValue(secondColumnVal) : secondColumnVal;\n                    });\n                    bulkInserted.push(inserted);\n                });\n            });\n\n            if (!bulkInserted.length) return;\n\n            if (this.queryBuilder.connection.driver instanceof OracleDriver || this.queryBuilder.connection.driver instanceof SapDriver) {\n                await Promise.all(bulkInserted.map(value => {\n                    return this.queryBuilder\n                        .createQueryBuilder()\n                        .insert()\n                        .into(junctionMetadata.tableName)\n                        .values(value)\n                        .execute();\n                }));\n            } else {\n                await this.queryBuilder\n                    .createQueryBuilder()\n                    .insert()\n                    .into(junctionMetadata.tableName)\n                    .values(bulkInserted)\n                    .execute();\n            }\n        }\n    }\n\n}\n","import {QueryBuilder} from \"./QueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {QueryExpressionMap} from \"./QueryExpressionMap\";\n\n/**\n * Allows to work with entity relations and perform specific operations with those relations.\n *\n * todo: add transactions everywhere\n */\nexport class RelationRemover {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected queryBuilder: QueryBuilder<any>,\n                protected expressionMap: QueryExpressionMap) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs remove operation on a relation.\n     */\n    async remove(value: any|any[]): Promise<void> {\n        const relation = this.expressionMap.relationMetadata;\n\n        if (relation.isOneToMany) {\n\n            // if (this.expressionMap.of instanceof Array)\n            //     throw new Error(`You cannot update relations of multiple entities with the same related object. Provide a single entity into .of method.`);\n\n            // DELETE FROM post WHERE post.categoryId = of AND post.id = id\n            const ofs = Array.isArray(this.expressionMap.of) ? this.expressionMap.of : [this.expressionMap.of];\n            const values = Array.isArray(value) ? value : [value];\n\n            const updateSet: ObjectLiteral = {};\n            relation.inverseRelation!.joinColumns.forEach(column => {\n                updateSet[column.propertyName] = null;\n            });\n\n            const parameters: ObjectLiteral = {};\n            const conditions: string[] = [];\n            ofs.forEach((of, ofIndex) => {\n                conditions.push(...values.map((value, valueIndex) => {\n                    return [\n                        ...relation.inverseRelation!.joinColumns.map((column, columnIndex) => {\n                            const parameterName = \"joinColumn_\" + ofIndex + \"_\" + valueIndex + \"_\" + columnIndex;\n                            parameters[parameterName] = of instanceof Object ? column.referencedColumn!.getEntityValue(of) : of;\n                            return `${column.propertyPath} = :${parameterName}`;\n                        }),\n                        ...relation.inverseRelation!.entityMetadata.primaryColumns.map((column, columnIndex) => {\n                            const parameterName = \"primaryColumn_\" + valueIndex + \"_\" + valueIndex + \"_\" + columnIndex;\n                            parameters[parameterName] = value instanceof Object ? column.getEntityValue(value) : value;\n                            return `${column.propertyPath} = :${parameterName}`;\n                        })\n                    ].join(\" AND \");\n                }));\n            });\n            const condition = conditions.map(str => \"(\" + str + \")\").join(\" OR \");\n            if (!condition) return;\n\n            await this.queryBuilder\n                .createQueryBuilder()\n                .update(relation.inverseEntityMetadata.target)\n                .set(updateSet)\n                .where(condition)\n                .setParameters(parameters)\n                .execute();\n\n        } else { // many to many\n\n            const junctionMetadata = relation.junctionEntityMetadata!;\n            const ofs = Array.isArray(this.expressionMap.of) ? this.expressionMap.of : [this.expressionMap.of];\n            const values = Array.isArray(value) ? value : [value];\n            const firstColumnValues = relation.isManyToManyOwner ? ofs : values;\n            const secondColumnValues = relation.isManyToManyOwner ? values : ofs;\n\n            const parameters: ObjectLiteral = {};\n            const conditions: string[] = [];\n            firstColumnValues.forEach((firstColumnVal, firstColumnValIndex) => {\n                conditions.push(...secondColumnValues.map((secondColumnVal, secondColumnValIndex) => {\n                    return [\n                        ...junctionMetadata.ownerColumns.map((column, columnIndex) => {\n                            const parameterName = \"firstValue_\" + firstColumnValIndex + \"_\" + secondColumnValIndex + \"_\" + columnIndex;\n                            parameters[parameterName] = firstColumnVal instanceof Object ? column.referencedColumn!.getEntityValue(firstColumnVal) : firstColumnVal;\n                            return `${column.databaseName} = :${parameterName}`;\n                        }),\n                        ...junctionMetadata.inverseColumns.map((column, columnIndex) => {\n                            const parameterName = \"secondValue_\" + firstColumnValIndex + \"_\" + secondColumnValIndex + \"_\" + columnIndex;\n                            parameters[parameterName] = secondColumnVal instanceof Object ? column.referencedColumn!.getEntityValue(secondColumnVal) : secondColumnVal;\n                            return `${column.databaseName} = :${parameterName}`;\n                        })\n                    ].join(\" AND \");\n                }));\n            });\n            const condition = conditions.map(str => \"(\" + str + \")\").join(\" OR \");\n\n            await this.queryBuilder\n                .createQueryBuilder()\n                .delete()\n                .from(junctionMetadata.tableName)\n                .where(condition)\n                .setParameters(parameters)\n                .execute();\n        }\n    }\n\n}\n","import {QueryBuilder} from \"./QueryBuilder\";\nimport {RelationUpdater} from \"./RelationUpdater\";\nimport {RelationRemover} from \"./RelationRemover\";\n\n/**\n * Allows to work with entity relations and perform specific operations with those relations.\n *\n * todo: add transactions everywhere\n */\nexport class RelationQueryBuilder<Entity> extends QueryBuilder<Entity> {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        return \"\";\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Sets entity (target) which relations will be updated.\n     */\n    of(entity: any|any[]): this {\n        this.expressionMap.of = entity;\n        return this;\n    }\n\n    /**\n     * Sets entity relation's value.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Works only for many-to-one and one-to-one relations.\n     * For many-to-many and one-to-many relations use #add and #remove methods instead.\n     */\n    async set(value: any): Promise<void> {\n        const relation = this.expressionMap.relationMetadata;\n\n        if (!this.expressionMap.of) // todo: move this check before relation query builder creation?\n            throw new Error(`Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.`);\n\n        if (relation.isManyToMany || relation.isOneToMany)\n            throw new Error(`Set operation is only supported for many-to-one and one-to-one relations. ` +\n                `However given \"${relation.propertyPath}\" has ${relation.relationType} relation. ` +\n                `Use .add() method instead.`);\n\n        // if there are multiple join columns then user must send id map as \"value\" argument. check if he really did it\n        if (relation.joinColumns &&\n            relation.joinColumns.length > 1 &&\n            (!(value instanceof Object) || Object.keys(value).length < relation.joinColumns.length))\n            throw new Error(`Value to be set into the relation must be a map of relation ids, for example: .set({ firstName: \"...\", lastName: \"...\" })`);\n\n        const updater = new RelationUpdater(this, this.expressionMap);\n        return updater.update(value);\n    }\n\n    /**\n     * Adds (binds) given value to entity relation.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\n     * Works only for many-to-many and one-to-many relations.\n     * For many-to-one and one-to-one use #set method instead.\n     */\n    async add(value: any|any[]): Promise<void> {\n        if (Array.isArray(value) && value.length === 0)\n            return;\n\n        const relation = this.expressionMap.relationMetadata;\n\n        if (!this.expressionMap.of) // todo: move this check before relation query builder creation?\n            throw new Error(`Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.`);\n\n        if (relation.isManyToOne || relation.isOneToOne)\n            throw new Error(`Add operation is only supported for many-to-many and one-to-many relations. ` +\n                `However given \"${relation.propertyPath}\" has ${relation.relationType} relation. ` +\n                `Use .set() method instead.`);\n\n        // if there are multiple join columns then user must send id map as \"value\" argument. check if he really did it\n        if (relation.joinColumns &&\n            relation.joinColumns.length > 1 &&\n            (!(value instanceof Object) || Object.keys(value).length < relation.joinColumns.length))\n            throw new Error(`Value to be set into the relation must be a map of relation ids, for example: .set({ firstName: \"...\", lastName: \"...\" })`);\n\n        const updater = new RelationUpdater(this, this.expressionMap);\n        return updater.update(value);\n    }\n\n    /**\n     * Removes (unbinds) given value from entity relation.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\n     * Works only for many-to-many and one-to-many relations.\n     * For many-to-one and one-to-one use #set method instead.\n     */\n    async remove(value: any|any[]): Promise<void> {\n        if (Array.isArray(value) && value.length === 0)\n            return;\n\n        const relation = this.expressionMap.relationMetadata;\n\n        if (!this.expressionMap.of) // todo: move this check before relation query builder creation?\n            throw new Error(`Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.`);\n\n        if (relation.isManyToOne || relation.isOneToOne)\n            throw new Error(`Add operation is only supported for many-to-many and one-to-many relations. ` +\n                `However given \"${relation.propertyPath}\" has ${relation.relationType} relation. ` +\n                `Use .set(null) method instead.`);\n\n        const remover = new RelationRemover(this, this.expressionMap);\n        return remover.remove(value);\n    }\n\n    /**\n     * Adds (binds) and removes (unbinds) given values to/from entity relation.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\n     * Works only for many-to-many and one-to-many relations.\n     * For many-to-one and one-to-one use #set method instead.\n     */\n    async addAndRemove(added: any|any[], removed: any|any[]): Promise<void> {\n        await this.remove(removed);\n        await this.add(added);\n    }\n\n    /**\n     * Gets entity's relation id.\n    async getId(): Promise<any> {\n\n    }*/\n\n    /**\n     * Gets entity's relation ids.\n    async getIds(): Promise<any[]> {\n        return [];\n    }*/\n\n    /**\n     * Loads a single entity (relational) from the relation.\n     * You can also provide id of relational entity to filter by.\n     */\n    async loadOne<T = any>(): Promise<T|undefined> {\n        return this.loadMany<T>().then(results => results[0]);\n    }\n\n    /**\n     * Loads many entities (relational) from the relation.\n     * You can also provide ids of relational entities to filter by.\n     */\n    async loadMany<T = any>(): Promise<T[]> {\n        let of = this.expressionMap.of;\n        if (!(of instanceof Object)) {\n            const metadata = this.expressionMap.mainAlias!.metadata;\n            if (metadata.hasMultiplePrimaryKeys)\n                throw new Error(`Cannot load entity because only one primary key was specified, however entity contains multiple primary keys`);\n\n            of = metadata.primaryColumns[0].createValueMap(of);\n        }\n\n        return this.connection.relationLoader.load(this.expressionMap.relationMetadata, of);\n    }\n\n}\n","/**\n * Thrown when user tries to insert using QueryBuilder but do not specify what to insert.\n */\nexport class InsertValuesMissingError extends Error {\n    name = \"InsertValuesMissingError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, InsertValuesMissingError.prototype);\n        this.message = `Cannot perform insert query because values are not defined. Call \"qb.values(...)\" method to specify inserted values.`;\n    }\n\n}","import {CockroachDriver} from \"../driver/cockroachdb/CockroachDriver\";\nimport {SapDriver} from \"../driver/sap/SapDriver\";\nimport {QueryBuilder} from \"./QueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {EntityTarget} from \"../common/EntityTarget\";\nimport {QueryDeepPartialEntity} from \"./QueryPartialEntity\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {RandomGenerator} from \"../util/RandomGenerator\";\nimport {InsertResult} from \"./result/InsertResult\";\nimport {ReturningStatementNotSupportedError} from \"../error/ReturningStatementNotSupportedError\";\nimport {InsertValuesMissingError} from \"../error/InsertValuesMissingError\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {ReturningResultsEntityUpdator} from \"./ReturningResultsEntityUpdator\";\nimport {AbstractSqliteDriver} from \"../driver/sqlite-abstract/AbstractSqliteDriver\";\nimport {SqljsDriver} from \"../driver/sqljs/SqljsDriver\";\nimport {BroadcasterResult} from \"../subscriber/BroadcasterResult\";\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {AuroraDataApiDriver} from \"../driver/aurora-data-api/AuroraDataApiDriver\";\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class InsertQueryBuilder<Entity> extends QueryBuilder<Entity> {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        let sql = this.createComment();\n        sql += this.createInsertExpression();\n        return sql.trim();\n    }\n\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute(): Promise<InsertResult> {\n        // console.time(\".value sets\");\n        const valueSets: ObjectLiteral[] = this.getValueSets();\n        // console.timeEnd(\".value sets\");\n\n        // If user passed empty array of entities then we don't need to do\n        // anything.\n        //\n        // Fixes GitHub issues #3111 and #5734. If we were to let this through\n        // we would run into problems downstream, like subscribers getting\n        // invoked with the empty array where they expect an entity, and SQL\n        // queries with an empty VALUES clause.\n        if (valueSets.length === 0)\n            return new InsertResult();\n\n        // console.time(\"QueryBuilder.execute\");\n        // console.time(\".database stuff\");\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs: boolean = false;\n\n        try {\n\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n\n            // console.timeEnd(\".database stuff\");\n\n            // call before insertion methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\n                const broadcastResult = new BroadcasterResult();\n                valueSets.forEach(valueSet => {\n                    queryRunner.broadcaster.broadcastBeforeInsertEvent(broadcastResult, this.expressionMap.mainAlias!.metadata, valueSet);\n                });\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\n            }\n\n            let declareSql: string | null = null;\n            let selectOutputSql: string | null = null;\n\n            // if update entity mode is enabled we may need extra columns for the returning statement\n            // console.time(\".prepare returning statement\");\n            const returningResultsEntityUpdator = new ReturningResultsEntityUpdator(queryRunner, this.expressionMap);\n            if (this.expressionMap.updateEntity === true && this.expressionMap.mainAlias!.hasMetadata) {\n                if (!(valueSets.length > 1 && this.connection.driver instanceof OracleDriver)) {\n                    this.expressionMap.extraReturningColumns = returningResultsEntityUpdator.getInsertionReturningColumns();\n                }\n                if (this.expressionMap.extraReturningColumns.length > 0 && this.connection.driver instanceof SqlServerDriver) {\n                    declareSql = this.connection.driver.buildTableVariableDeclaration(\"@OutputTable\", this.expressionMap.extraReturningColumns);\n                    selectOutputSql = `SELECT * FROM @OutputTable`;\n                }\n            }\n            // console.timeEnd(\".prepare returning statement\");\n\n            // execute query\n            // console.time(\".getting query and parameters\");\n            const [insertSql, parameters] = this.getQueryAndParameters();\n            // console.timeEnd(\".getting query and parameters\");\n            const insertResult = new InsertResult();\n            // console.time(\".query execution by database\");\n            const statements = [declareSql, insertSql, selectOutputSql];\n            insertResult.raw = await queryRunner.query(\n                statements.filter(sql => sql != null).join(\";\\n\\n\"),\n                parameters,\n            );\n            // console.timeEnd(\".query execution by database\");\n\n            // load returning results and set them to the entity if entity updation is enabled\n            if (this.expressionMap.updateEntity === true && this.expressionMap.mainAlias!.hasMetadata) {\n                // console.time(\".updating entity\");\n                await returningResultsEntityUpdator.insert(insertResult, valueSets);\n                // console.timeEnd(\".updating entity\");\n            }\n\n            // call after insertion methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\n                const broadcastResult = new BroadcasterResult();\n                valueSets.forEach(valueSet => {\n                    queryRunner.broadcaster.broadcastAfterInsertEvent(broadcastResult, this.expressionMap.mainAlias!.metadata, valueSet);\n                });\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\n            }\n\n            // close transaction if we started it\n            // console.time(\".commit\");\n            if (transactionStartedByUs) {\n                await queryRunner.commitTransaction();\n            }\n            // console.timeEnd(\".commit\");\n\n            return insertResult;\n\n        } catch (error) {\n\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n            throw error;\n\n        } finally {\n\n            // console.time(\".releasing connection\");\n            if (queryRunner !== this.queryRunner) { // means we created our own query runner\n                await queryRunner.release();\n            }\n            if (this.connection.driver instanceof SqljsDriver && !queryRunner.isTransactionActive) {\n                await this.connection.driver.autoSave();\n            }\n            // console.timeEnd(\".releasing connection\");\n            // console.timeEnd(\"QueryBuilder.execute\");\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Specifies INTO which entity's table insertion will be executed.\n     */\n    into<T>(entityTarget: EntityTarget<T>, columns?: string[]): InsertQueryBuilder<T> {\n        entityTarget = entityTarget instanceof EntitySchema ? entityTarget.options.name : entityTarget;\n        const mainAlias = this.createFromAlias(entityTarget);\n        this.expressionMap.setMainAlias(mainAlias);\n        this.expressionMap.insertColumns = columns || [];\n        return (this as any) as InsertQueryBuilder<T>;\n    }\n\n    /**\n     * Values needs to be inserted into table.\n     */\n    values(values: QueryDeepPartialEntity<Entity>|QueryDeepPartialEntity<Entity>[]): this {\n        this.expressionMap.valuesSet = values;\n        return this;\n    }\n\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    output(columns: string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    output(output: string): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string|string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string|string[]): this {\n        return this.returning(output);\n    }\n\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    returning(columns: string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    returning(returning: string): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string|string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string|string[]): this {\n\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported())\n            throw new ReturningStatementNotSupportedError();\n\n        this.expressionMap.returning = returning;\n        return this;\n    }\n\n    /**\n     * Indicates if entity must be updated after insertion operations.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    updateEntity(enabled: boolean): this {\n        this.expressionMap.updateEntity = enabled;\n        return this;\n    }\n\n    /**\n     * Adds additional ON CONFLICT statement supported in postgres and cockroach.\n     */\n    onConflict(statement: string): this {\n        this.expressionMap.onConflict = statement;\n        return this;\n    }\n\n    /**\n     * Adds additional ignore statement supported in databases.\n     */\n    orIgnore(statement: string | boolean = true): this {\n        this.expressionMap.onIgnore = statement;\n        return this;\n    }\n\n    /**\n     * Adds additional update statement supported in databases.\n     */\n    orUpdate(statement?: { columns?: string[], overwrite?: string[], conflict_target?: string | string[] }): this {\n      this.expressionMap.onUpdate = {};\n      if (statement && Array.isArray(statement.conflict_target))\n          this.expressionMap.onUpdate.conflict = ` ( ${statement.conflict_target.join(\", \")} ) `;\n      if (statement && typeof statement.conflict_target === \"string\")\n          this.expressionMap.onUpdate.conflict = ` ON CONSTRAINT ${statement.conflict_target} `;\n      if (statement && Array.isArray(statement.columns))\n          this.expressionMap.onUpdate.columns = statement.columns.map(column => `${column} = :${column}`).join(\", \");\n      if (statement && Array.isArray(statement.overwrite)) {\n        if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver) {\n          this.expressionMap.onUpdate.overwrite = statement.overwrite.map(column => `${column} = VALUES(${column})`).join(\", \");\n        } else if (this.connection.driver instanceof PostgresDriver || this.connection.driver instanceof AbstractSqliteDriver || this.connection.driver instanceof CockroachDriver) {\n          this.expressionMap.onUpdate.overwrite = statement.overwrite.map(column => `${column} = EXCLUDED.${column}`).join(\", \");\n        }\n      }\n      return this;\n  }\n\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates INSERT express used to perform insert query.\n     */\n    protected createInsertExpression() {\n        const tableName = this.getTableName(this.getMainTableName());\n        const valuesExpression = this.createValuesExpression(); // its important to get values before returning expression because oracle rely on native parameters and ordering of them is important\n        const returningExpression = (this.connection.driver instanceof OracleDriver && this.getValueSets().length > 1) ? null : this.createReturningExpression(); // oracle doesnt support returning with multi-row insert\n        const columnsExpression = this.createColumnNamesExpression();\n        let query = \"INSERT \";\n\n        if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver) {\n          query += `${this.expressionMap.onIgnore ? \" IGNORE \" : \"\"}`;\n        }\n\n        query += `INTO ${tableName}`;\n\n        // add columns expression\n        if (columnsExpression) {\n            query += `(${columnsExpression})`;\n        } else {\n            if (!valuesExpression && (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver)) // special syntax for mysql DEFAULT VALUES insertion\n                query += \"()\";\n        }\n\n        // add OUTPUT expression\n        if (returningExpression && this.connection.driver instanceof SqlServerDriver) {\n            query += ` OUTPUT ${returningExpression}`;\n        }\n\n        // add VALUES expression\n        if (valuesExpression) {\n            if (this.connection.driver instanceof OracleDriver && this.getValueSets().length > 1) {\n                query += ` ${valuesExpression}`;\n            } else {\n                query += ` VALUES ${valuesExpression}`;\n            }\n        } else {\n            if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver) { // special syntax for mysql DEFAULT VALUES insertion\n                query += \" VALUES ()\";\n            } else {\n                query += ` DEFAULT VALUES`;\n            }\n        }\n        if (this.connection.driver instanceof PostgresDriver || this.connection.driver instanceof AbstractSqliteDriver || this.connection.driver instanceof CockroachDriver) {\n          query += `${this.expressionMap.onIgnore ? \" ON CONFLICT DO NOTHING \" : \"\"}`;\n          query += `${this.expressionMap.onConflict ? \" ON CONFLICT \" + this.expressionMap.onConflict : \"\"}`;\n          if (this.expressionMap.onUpdate) {\n            const { overwrite, columns, conflict } = this.expressionMap.onUpdate;\n            query += `${columns ? \" ON CONFLICT \" + conflict + \" DO UPDATE SET \" + columns : \"\"}`;\n            query += `${overwrite ? \" ON CONFLICT \" + conflict + \" DO UPDATE SET \" + overwrite : \"\"}`;\n          }\n        } else if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver) {\n            if (this.expressionMap.onUpdate) {\n              const { overwrite, columns } = this.expressionMap.onUpdate;\n              query += `${columns ? \" ON DUPLICATE KEY UPDATE \" + columns : \"\"}`;\n              query += `${overwrite ? \" ON DUPLICATE KEY UPDATE \" + overwrite : \"\"}`;\n            }\n        }\n\n        // add RETURNING expression\n        if (returningExpression && (this.connection.driver instanceof PostgresDriver || this.connection.driver instanceof OracleDriver || this.connection.driver instanceof CockroachDriver)) {\n            query += ` RETURNING ${returningExpression}`;\n        }\n\n        return query;\n    }\n\n    /**\n     * Gets list of columns where values must be inserted to.\n     */\n    protected getInsertedColumns(): ColumnMetadata[] {\n        if (!this.expressionMap.mainAlias!.hasMetadata)\n            return [];\n\n        return this.expressionMap.mainAlias!.metadata.columns.filter(column => {\n\n            // if user specified list of columns he wants to insert to, then we filter only them\n            if (this.expressionMap.insertColumns.length)\n                return this.expressionMap.insertColumns.indexOf(column.propertyPath) !== -1;\n\n            // skip columns the user doesn't want included by default\n            if (!column.isInsert) { return false; }\n\n            // if user did not specified such list then return all columns except auto-increment one\n            // for Oracle we return auto-increment column as well because Oracle does not support DEFAULT VALUES expression\n            if (column.isGenerated && column.generationStrategy === \"increment\"\n                && !(this.connection.driver instanceof OracleDriver)\n                && !(this.connection.driver instanceof AbstractSqliteDriver)\n                && !(this.connection.driver instanceof MysqlDriver)\n                && !(this.connection.driver instanceof AuroraDataApiDriver))\n                return false;\n\n            return true;\n        });\n    }\n\n    /**\n     * Creates a columns string where values must be inserted to for INSERT INTO expression.\n     */\n    protected createColumnNamesExpression(): string {\n        const columns = this.getInsertedColumns();\n        if (columns.length > 0)\n            return columns.map(column => this.escape(column.databaseName)).join(\", \");\n\n        // in the case if there are no insert columns specified and table without metadata used\n        // we get columns from the inserted value map, in the case if only one inserted map is specified\n        if (!this.expressionMap.mainAlias!.hasMetadata && !this.expressionMap.insertColumns.length) {\n            const valueSets = this.getValueSets();\n            if (valueSets.length === 1)\n                return Object.keys(valueSets[0]).map(columnName => this.escape(columnName)).join(\", \");\n        }\n\n        // get a table name and all column database names\n        return this.expressionMap.insertColumns.map(columnName => this.escape(columnName)).join(\", \");\n    }\n\n    /**\n     * Creates list of values needs to be inserted in the VALUES expression.\n     */\n    protected createValuesExpression(): string {\n        const valueSets = this.getValueSets();\n        const columns = this.getInsertedColumns();\n\n        // if column metadatas are given then apply all necessary operations with values\n        if (columns.length > 0) {\n            let expression = \"\";\n            let parametersCount = Object.keys(this.expressionMap.nativeParameters).length;\n            valueSets.forEach((valueSet, valueSetIndex) => {\n                columns.forEach((column, columnIndex) => {\n                    if (columnIndex === 0) {\n                        if (this.connection.driver instanceof OracleDriver && valueSets.length > 1) {\n                            expression += \" SELECT \";\n                        } else {\n                            expression += \"(\";\n                        }\n                    }\n                    const paramName = \"i\" + valueSetIndex + \"_\" + column.databaseName;\n\n                    // extract real value from the entity\n                    let value = column.getEntityValue(valueSet);\n\n                    // if column is relational and value is an object then get real referenced column value from this object\n                    // for example column value is { question: { id: 1 } }, value will be equal to { id: 1 }\n                    // and we extract \"1\" from this object\n                    /*if (column.referencedColumn && value instanceof Object && !(value instanceof Function)) { // todo: check if we still need it since getEntityValue already has similar code\n                        value = column.referencedColumn.getEntityValue(value);\n                    }*/\n\n\n                    if (!(value instanceof Function)) {\n                      // make sure our value is normalized by a driver\n                      value = this.connection.driver.preparePersistentValue(value, column);\n                    }\n\n                    // newly inserted entities always have a version equal to 1 (first version)\n                    // also, user-specified version must be empty\n                    if (column.isVersion && value === undefined) {\n                        expression += \"1\";\n\n                    // } else if (column.isNestedSetLeft) {\n                    //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);\n                    //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);\n                    //     const subQuery = `(SELECT c.max + 1 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;\n                    //     expression += subQuery;\n                    //\n                    // } else if (column.isNestedSetRight) {\n                    //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);\n                    //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);\n                    //     const subQuery = `(SELECT c.max + 2 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;\n                    //     expression += subQuery;\n\n                    } else if (column.isDiscriminator) {\n                        this.expressionMap.nativeParameters[\"discriminator_value_\" + parametersCount] = this.expressionMap.mainAlias!.metadata.discriminatorValue;\n                        expression += this.connection.driver.createParameter(\"discriminator_value_\" + parametersCount, parametersCount);\n                        parametersCount++;\n                        // return \"1\";\n\n                    // for create and update dates we insert current date\n                    // no, we don't do it because this constant is already in \"default\" value of the column\n                    // with extended timestamp functionality, like CURRENT_TIMESTAMP(6) for example\n                    // } else if (column.isCreateDate || column.isUpdateDate) {\n                    //     return \"CURRENT_TIMESTAMP\";\n\n                    // if column is generated uuid and database does not support its generation and custom generated value was not provided by a user - we generate a new uuid value for insertion\n                    } else if (column.isGenerated && column.generationStrategy === \"uuid\" && !this.connection.driver.isUUIDGenerationSupported() && value === undefined) {\n\n                        const paramName = \"uuid_\" + column.databaseName + valueSetIndex;\n                        value = RandomGenerator.uuid4();\n                        this.expressionMap.nativeParameters[paramName] = value;\n                        expression += this.connection.driver.createParameter(paramName, parametersCount);\n                        parametersCount++;\n\n                    // if value for this column was not provided then insert default value\n                    } else if (value === undefined) {\n                        if ((this.connection.driver instanceof OracleDriver && valueSets.length > 1) || this.connection.driver instanceof AbstractSqliteDriver || this.connection.driver instanceof SapDriver) { // unfortunately sqlite does not support DEFAULT expression in INSERT queries\n                            if (column.default !== undefined) { // try to use default defined in the column\n                                expression += this.connection.driver.normalizeDefault(column);\n                            } else {\n                                expression += \"NULL\"; // otherwise simply use NULL and pray if column is nullable\n                            }\n\n                        } else {\n                            expression += \"DEFAULT\";\n                        }\n\n                    // support for SQL expressions in queries\n                    } else if (value instanceof Function) {\n                        expression += value();\n\n                    // just any other regular value\n                    } else {\n                        if (this.connection.driver instanceof SqlServerDriver)\n                            value = this.connection.driver.parametrizeValue(column, value);\n\n                        // we need to store array values in a special class to make sure parameter replacement will work correctly\n                        // if (value instanceof Array)\n                        //     value = new ArrayParameter(value);\n\n                        this.expressionMap.nativeParameters[paramName] = value;\n                        if ((this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver) && this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            const useLegacy = this.connection.driver.options.legacySpatialSupport;\n                            const geomFromText = useLegacy ? \"GeomFromText\" : \"ST_GeomFromText\";\n                            if (column.srid != null) {\n                                expression += `${geomFromText}(${this.connection.driver.createParameter(paramName, parametersCount)}, ${column.srid})`;\n                            } else {\n                                expression += `${geomFromText}(${this.connection.driver.createParameter(paramName, parametersCount)})`;\n                            }\n                        } else if (this.connection.driver instanceof PostgresDriver && this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            if (column.srid != null) {\n                              expression += `ST_SetSRID(ST_GeomFromGeoJSON(${this.connection.driver.createParameter(paramName, parametersCount)}), ${column.srid})::${column.type}`;\n                            } else {\n                              expression += `ST_GeomFromGeoJSON(${this.connection.driver.createParameter(paramName, parametersCount)})::${column.type}`;\n                            }\n                        } else if (this.connection.driver instanceof SqlServerDriver && this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            expression += column.type + \"::STGeomFromText(\" + this.connection.driver.createParameter(paramName, parametersCount) + \", \" + (column.srid || \"0\") + \")\";\n                        } else {\n                            expression += this.connection.driver.createParameter(paramName, parametersCount);\n                        }\n                        parametersCount++;\n                    }\n\n                    if (columnIndex === columns.length - 1) {\n                        if (valueSetIndex === valueSets.length - 1) {\n                            if (this.connection.driver instanceof OracleDriver && valueSets.length > 1) {\n                                expression += \" FROM DUAL \";\n                            } else {\n                                expression += \")\";\n                            }\n                        } else {\n                            if (this.connection.driver instanceof OracleDriver && valueSets.length > 1) {\n                                expression += \" FROM DUAL UNION ALL \";\n                            } else {\n                                expression += \"), \";\n                            }\n                        }\n                    } else {\n                        expression += \", \";\n                    }\n                });\n            });\n            if (expression === \"()\")\n                return \"\";\n\n            return expression;\n        } else { // for tables without metadata\n            // get values needs to be inserted\n            let expression = \"\";\n            let parametersCount = Object.keys(this.expressionMap.nativeParameters).length;\n\n            valueSets.forEach((valueSet, insertionIndex) => {\n                const columns = Object.keys(valueSet);\n                columns.forEach((columnName, columnIndex) => {\n                    if (columnIndex === 0) {\n                        expression += \"(\";\n                    }\n                    const paramName = \"i\" + insertionIndex + \"_\" + columnName;\n                    const value = valueSet[columnName];\n\n                    // support for SQL expressions in queries\n                    if (value instanceof Function) {\n                        expression += value();\n\n                    // if value for this column was not provided then insert default value\n                    } else if (value === undefined) {\n                        if (this.connection.driver instanceof AbstractSqliteDriver || this.connection.driver instanceof SapDriver) {\n                            expression += \"NULL\";\n\n                        } else {\n                            expression += \"DEFAULT\";\n                        }\n\n                    // just any other regular value\n                    } else {\n                        this.expressionMap.nativeParameters[paramName] = value;\n                        expression += this.connection.driver.createParameter(paramName, parametersCount);\n                        parametersCount++;\n                    }\n\n                    if (columnIndex === Object.keys(valueSet).length - 1) {\n                        if (insertionIndex === valueSets.length - 1) {\n                            expression += \")\";\n                        } else {\n                            expression += \"), \";\n                        }\n                    }\n                    else {\n                        expression += \", \";\n                    }\n                });\n            });\n            if (expression === \"()\")\n                return \"\";\n            return expression;\n        }\n    }\n\n    /**\n     * Gets array of values need to be inserted into the target table.\n     */\n    protected getValueSets(): ObjectLiteral[] {\n        if (Array.isArray(this.expressionMap.valuesSet))\n            return this.expressionMap.valuesSet;\n\n        if (this.expressionMap.valuesSet instanceof Object)\n            return [this.expressionMap.valuesSet];\n\n        throw new InsertValuesMissingError();\n    }\n\n}\n","import React from \"react\";\nimport { Router } from \"react-router\";\nimport { createBrowserHistory as createHistory } from \"history\";\nimport PropTypes from \"prop-types\";\nimport warning from \"tiny-warning\";\n\n/**\n * The public API for a <Router> that uses HTML5 history.\n */\nclass BrowserRouter extends React.Component {\n  history = createHistory(this.props);\n\n  render() {\n    return <Router history={this.history} children={this.props.children} />;\n  }\n}\n\nif (__DEV__) {\n  BrowserRouter.propTypes = {\n    basename: PropTypes.string,\n    children: PropTypes.node,\n    forceRefresh: PropTypes.bool,\n    getUserConfirmation: PropTypes.func,\n    keyLength: PropTypes.number\n  };\n\n  BrowserRouter.prototype.componentDidMount = function() {\n    warning(\n      !this.props.history,\n      \"<BrowserRouter> ignores the history prop. To use a custom history, \" +\n        \"use `import { Router }` instead of `import { BrowserRouter as Router }`.\"\n    );\n  };\n}\n\nexport default BrowserRouter;\n","import React from \"react\";\nimport { Router } from \"react-router\";\nimport { createHashHistory as createHistory } from \"history\";\nimport PropTypes from \"prop-types\";\nimport warning from \"tiny-warning\";\n\n/**\n * The public API for a <Router> that uses window.location.hash.\n */\nclass HashRouter extends React.Component {\n  history = createHistory(this.props);\n\n  render() {\n    return <Router history={this.history} children={this.props.children} />;\n  }\n}\n\nif (__DEV__) {\n  HashRouter.propTypes = {\n    basename: PropTypes.string,\n    children: PropTypes.node,\n    getUserConfirmation: PropTypes.func,\n    hashType: PropTypes.oneOf([\"hashbang\", \"noslash\", \"slash\"])\n  };\n\n  HashRouter.prototype.componentDidMount = function() {\n    warning(\n      !this.props.history,\n      \"<HashRouter> ignores the history prop. To use a custom history, \" +\n        \"use `import { Router }` instead of `import { HashRouter as Router }`.\"\n    );\n  };\n}\n\nexport default HashRouter;\n","import { createLocation } from \"history\";\n\nexport const resolveToLocation = (to, currentLocation) =>\n  typeof to === \"function\" ? to(currentLocation) : to;\n\nexport const normalizeToLocation = (to, currentLocation) => {\n  return typeof to === \"string\"\n    ? createLocation(to, null, null, currentLocation)\n    : to;\n};\n","import React from \"react\";\nimport { __RouterContext as RouterContext } from \"react-router\";\nimport PropTypes from \"prop-types\";\nimport invariant from \"tiny-invariant\";\nimport {\n  resolveToLocation,\n  normalizeToLocation\n} from \"./utils/locationUtils.js\";\n\n// React 15 compat\nconst forwardRefShim = C => C;\nlet { forwardRef } = React;\nif (typeof forwardRef === \"undefined\") {\n  forwardRef = forwardRefShim;\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nconst LinkAnchor = forwardRef(\n  (\n    {\n      innerRef, // TODO: deprecate\n      navigate,\n      onClick,\n      ...rest\n    },\n    forwardedRef\n  ) => {\n    const { target } = rest;\n\n    let props = {\n      ...rest,\n      onClick: event => {\n        try {\n          if (onClick) onClick(event);\n        } catch (ex) {\n          event.preventDefault();\n          throw ex;\n        }\n\n        if (\n          !event.defaultPrevented && // onClick prevented default\n          event.button === 0 && // ignore everything but left clicks\n          (!target || target === \"_self\") && // let browser handle \"target=_blank\" etc.\n          !isModifiedEvent(event) // ignore clicks with modifier keys\n        ) {\n          event.preventDefault();\n          navigate();\n        }\n      }\n    };\n\n    // React 15 compat\n    if (forwardRefShim !== forwardRef) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.ref = innerRef;\n    }\n\n    /* eslint-disable-next-line jsx-a11y/anchor-has-content */\n    return <a {...props} />;\n  }\n);\n\nif (__DEV__) {\n  LinkAnchor.displayName = \"LinkAnchor\";\n}\n\n/**\n * The public API for rendering a history-aware <a>.\n */\nconst Link = forwardRef(\n  (\n    {\n      component = LinkAnchor,\n      replace,\n      to,\n      innerRef, // TODO: deprecate\n      ...rest\n    },\n    forwardedRef\n  ) => {\n    return (\n      <RouterContext.Consumer>\n        {context => {\n          invariant(context, \"You should not use <Link> outside a <Router>\");\n\n          const { history } = context;\n\n          const location = normalizeToLocation(\n            resolveToLocation(to, context.location),\n            context.location\n          );\n\n          const href = location ? history.createHref(location) : \"\";\n          const props = {\n            ...rest,\n            href,\n            navigate() {\n              const location = resolveToLocation(to, context.location);\n              const method = replace ? history.replace : history.push;\n\n              method(location);\n            }\n          };\n\n          // React 15 compat\n          if (forwardRefShim !== forwardRef) {\n            props.ref = forwardedRef || innerRef;\n          } else {\n            props.innerRef = innerRef;\n          }\n\n          return React.createElement(component, props);\n        }}\n      </RouterContext.Consumer>\n    );\n  }\n);\n\nif (__DEV__) {\n  const toType = PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.func\n  ]);\n  const refType = PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.any })\n  ]);\n\n  Link.displayName = \"Link\";\n\n  Link.propTypes = {\n    innerRef: refType,\n    onClick: PropTypes.func,\n    replace: PropTypes.bool,\n    target: PropTypes.string,\n    to: toType.isRequired\n  };\n}\n\nexport default Link;\n","import React from \"react\";\nimport { __RouterContext as RouterContext, matchPath } from \"react-router\";\nimport PropTypes from \"prop-types\";\nimport invariant from \"tiny-invariant\";\nimport Link from \"./Link.js\";\nimport {\n  resolveToLocation,\n  normalizeToLocation\n} from \"./utils/locationUtils.js\";\n\n// React 15 compat\nconst forwardRefShim = C => C;\nlet { forwardRef } = React;\nif (typeof forwardRef === \"undefined\") {\n  forwardRef = forwardRefShim;\n}\n\nfunction joinClassnames(...classnames) {\n  return classnames.filter(i => i).join(\" \");\n}\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nconst NavLink = forwardRef(\n  (\n    {\n      \"aria-current\": ariaCurrent = \"page\",\n      activeClassName = \"active\",\n      activeStyle,\n      className: classNameProp,\n      exact,\n      isActive: isActiveProp,\n      location: locationProp,\n      sensitive,\n      strict,\n      style: styleProp,\n      to,\n      innerRef, // TODO: deprecate\n      ...rest\n    },\n    forwardedRef\n  ) => {\n    return (\n      <RouterContext.Consumer>\n        {context => {\n          invariant(context, \"You should not use <NavLink> outside a <Router>\");\n\n          const currentLocation = locationProp || context.location;\n          const toLocation = normalizeToLocation(\n            resolveToLocation(to, currentLocation),\n            currentLocation\n          );\n          const { pathname: path } = toLocation;\n          // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202\n          const escapedPath =\n            path && path.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n\n          const match = escapedPath\n            ? matchPath(currentLocation.pathname, {\n                path: escapedPath,\n                exact,\n                sensitive,\n                strict\n              })\n            : null;\n          const isActive = !!(isActiveProp\n            ? isActiveProp(match, currentLocation)\n            : match);\n\n          const className = isActive\n            ? joinClassnames(classNameProp, activeClassName)\n            : classNameProp;\n          const style = isActive ? { ...styleProp, ...activeStyle } : styleProp;\n\n          const props = {\n            \"aria-current\": (isActive && ariaCurrent) || null,\n            className,\n            style,\n            to: toLocation,\n            ...rest\n          };\n\n          // React 15 compat\n          if (forwardRefShim !== forwardRef) {\n            props.ref = forwardedRef || innerRef;\n          } else {\n            props.innerRef = innerRef;\n          }\n\n          return <Link {...props} />;\n        }}\n      </RouterContext.Consumer>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n\n  const ariaCurrentType = PropTypes.oneOf([\n    \"page\",\n    \"step\",\n    \"location\",\n    \"date\",\n    \"time\",\n    \"true\"\n  ]);\n\n  NavLink.propTypes = {\n    ...Link.propTypes,\n    \"aria-current\": ariaCurrentType,\n    activeClassName: PropTypes.string,\n    activeStyle: PropTypes.object,\n    className: PropTypes.string,\n    exact: PropTypes.bool,\n    isActive: PropTypes.func,\n    location: PropTypes.object,\n    sensitive: PropTypes.bool,\n    strict: PropTypes.bool,\n    style: PropTypes.object\n  };\n}\n\nexport default NavLink;\n","import React, { Component } from 'react';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport PropTypes from 'prop-types';\nimport warning from 'tiny-warning';\n\nvar MAX_SIGNED_31_BIT_INT = 1073741823;\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {};\n\nfunction getUniqueId() {\n  var key = '__global_unique_id__';\n  return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;\n}\n\nfunction objectIs(x, y) {\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n\nfunction createEventEmitter(value) {\n  var handlers = [];\n  return {\n    on: function on(handler) {\n      handlers.push(handler);\n    },\n    off: function off(handler) {\n      handlers = handlers.filter(function (h) {\n        return h !== handler;\n      });\n    },\n    get: function get() {\n      return value;\n    },\n    set: function set(newValue, changedBits) {\n      value = newValue;\n      handlers.forEach(function (handler) {\n        return handler(value, changedBits);\n      });\n    }\n  };\n}\n\nfunction onlyChild(children) {\n  return Array.isArray(children) ? children[0] : children;\n}\n\nfunction createReactContext(defaultValue, calculateChangedBits) {\n  var _Provider$childContex, _Consumer$contextType;\n\n  var contextProp = '__create-react-context-' + getUniqueId() + '__';\n\n  var Provider = /*#__PURE__*/function (_Component) {\n    _inheritsLoose(Provider, _Component);\n\n    function Provider() {\n      var _this;\n\n      _this = _Component.apply(this, arguments) || this;\n      _this.emitter = createEventEmitter(_this.props.value);\n      return _this;\n    }\n\n    var _proto = Provider.prototype;\n\n    _proto.getChildContext = function getChildContext() {\n      var _ref;\n\n      return _ref = {}, _ref[contextProp] = this.emitter, _ref;\n    };\n\n    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      if (this.props.value !== nextProps.value) {\n        var oldValue = this.props.value;\n        var newValue = nextProps.value;\n        var changedBits;\n\n        if (objectIs(oldValue, newValue)) {\n          changedBits = 0;\n        } else {\n          changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;\n\n          if (process.env.NODE_ENV !== 'production') {\n            warning((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: ' + changedBits);\n          }\n\n          changedBits |= 0;\n\n          if (changedBits !== 0) {\n            this.emitter.set(nextProps.value, changedBits);\n          }\n        }\n      }\n    };\n\n    _proto.render = function render() {\n      return this.props.children;\n    };\n\n    return Provider;\n  }(Component);\n\n  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = PropTypes.object.isRequired, _Provider$childContex);\n\n  var Consumer = /*#__PURE__*/function (_Component2) {\n    _inheritsLoose(Consumer, _Component2);\n\n    function Consumer() {\n      var _this2;\n\n      _this2 = _Component2.apply(this, arguments) || this;\n      _this2.state = {\n        value: _this2.getValue()\n      };\n\n      _this2.onUpdate = function (newValue, changedBits) {\n        var observedBits = _this2.observedBits | 0;\n\n        if ((observedBits & changedBits) !== 0) {\n          _this2.setState({\n            value: _this2.getValue()\n          });\n        }\n      };\n\n      return _this2;\n    }\n\n    var _proto2 = Consumer.prototype;\n\n    _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      var observedBits = nextProps.observedBits;\n      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;\n    };\n\n    _proto2.componentDidMount = function componentDidMount() {\n      if (this.context[contextProp]) {\n        this.context[contextProp].on(this.onUpdate);\n      }\n\n      var observedBits = this.props.observedBits;\n      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;\n    };\n\n    _proto2.componentWillUnmount = function componentWillUnmount() {\n      if (this.context[contextProp]) {\n        this.context[contextProp].off(this.onUpdate);\n      }\n    };\n\n    _proto2.getValue = function getValue() {\n      if (this.context[contextProp]) {\n        return this.context[contextProp].get();\n      } else {\n        return defaultValue;\n      }\n    };\n\n    _proto2.render = function render() {\n      return onlyChild(this.props.children)(this.state.value);\n    };\n\n    return Consumer;\n  }(Component);\n\n  Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = PropTypes.object, _Consumer$contextType);\n  return {\n    Provider: Provider,\n    Consumer: Consumer\n  };\n}\n\nvar index = React.createContext || createReactContext;\n\nexport default index;\n","var isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options), options)\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens, options) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options))\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n","function memoize(fn) {\n  var cache = {};\n  return function (arg) {\n    if (cache[arg] === undefined) cache[arg] = fn(arg);\n    return cache[arg];\n  };\n}\n\nexport default memoize;\n","import memoize from '@emotion/memoize';\n\nvar reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23\n\nvar index = memoize(function (prop) {\n  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111\n  /* o */\n  && prop.charCodeAt(1) === 110\n  /* n */\n  && prop.charCodeAt(2) < 91;\n}\n/* Z+1 */\n);\n\nexport default index;\n","/**\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n * in FIPS 180-2\n * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n *\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,\n  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,\n  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,\n  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,\n  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,\n  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,\n  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,\n  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,\n  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,\n  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,\n  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,\n  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,\n  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,\n  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,\n  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,\n  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2\n]\n\nvar W = new Array(64)\n\nfunction Sha256 () {\n  this.init()\n\n  this._w = W // new Array(64)\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha256, Hash)\n\nSha256.prototype.init = function () {\n  this._a = 0x6a09e667\n  this._b = 0xbb67ae85\n  this._c = 0x3c6ef372\n  this._d = 0xa54ff53a\n  this._e = 0x510e527f\n  this._f = 0x9b05688c\n  this._g = 0x1f83d9ab\n  this._h = 0x5be0cd19\n\n  return this\n}\n\nfunction ch (x, y, z) {\n  return z ^ (x & (y ^ z))\n}\n\nfunction maj (x, y, z) {\n  return (x & y) | (z & (x | y))\n}\n\nfunction sigma0 (x) {\n  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)\n}\n\nfunction sigma1 (x) {\n  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)\n}\n\nfunction gamma0 (x) {\n  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)\n}\n\nfunction gamma1 (x) {\n  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)\n}\n\nSha256.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n  var f = this._f | 0\n  var g = this._g | 0\n  var h = this._h | 0\n\n  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)\n  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0\n\n  for (var j = 0; j < 64; ++j) {\n    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0\n    var T2 = (sigma0(a) + maj(a, b, c)) | 0\n\n    h = g\n    g = f\n    f = e\n    e = (d + T1) | 0\n    d = c\n    c = b\n    b = a\n    a = (T1 + T2) | 0\n  }\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n  this._f = (f + this._f) | 0\n  this._g = (g + this._g) | 0\n  this._h = (h + this._h) | 0\n}\n\nSha256.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(32)\n\n  H.writeInt32BE(this._a, 0)\n  H.writeInt32BE(this._b, 4)\n  H.writeInt32BE(this._c, 8)\n  H.writeInt32BE(this._d, 12)\n  H.writeInt32BE(this._e, 16)\n  H.writeInt32BE(this._f, 20)\n  H.writeInt32BE(this._g, 24)\n  H.writeInt32BE(this._h, 28)\n\n  return H\n}\n\nmodule.exports = Sha256\n","var inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n]\n\nvar W = new Array(160)\n\nfunction Sha512 () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 128, 112)\n}\n\ninherits(Sha512, Hash)\n\nSha512.prototype.init = function () {\n  this._ah = 0x6a09e667\n  this._bh = 0xbb67ae85\n  this._ch = 0x3c6ef372\n  this._dh = 0xa54ff53a\n  this._eh = 0x510e527f\n  this._fh = 0x9b05688c\n  this._gh = 0x1f83d9ab\n  this._hh = 0x5be0cd19\n\n  this._al = 0xf3bcc908\n  this._bl = 0x84caa73b\n  this._cl = 0xfe94f82b\n  this._dl = 0x5f1d36f1\n  this._el = 0xade682d1\n  this._fl = 0x2b3e6c1f\n  this._gl = 0xfb41bd6b\n  this._hl = 0x137e2179\n\n  return this\n}\n\nfunction Ch (x, y, z) {\n  return z ^ (x & (y ^ z))\n}\n\nfunction maj (x, y, z) {\n  return (x & y) | (z & (x | y))\n}\n\nfunction sigma0 (x, xl) {\n  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)\n}\n\nfunction sigma1 (x, xl) {\n  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)\n}\n\nfunction Gamma0 (x, xl) {\n  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)\n}\n\nfunction Gamma0l (x, xl) {\n  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)\n}\n\nfunction Gamma1 (x, xl) {\n  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)\n}\n\nfunction Gamma1l (x, xl) {\n  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)\n}\n\nfunction getCarry (a, b) {\n  return (a >>> 0) < (b >>> 0) ? 1 : 0\n}\n\nSha512.prototype._update = function (M) {\n  var W = this._w\n\n  var ah = this._ah | 0\n  var bh = this._bh | 0\n  var ch = this._ch | 0\n  var dh = this._dh | 0\n  var eh = this._eh | 0\n  var fh = this._fh | 0\n  var gh = this._gh | 0\n  var hh = this._hh | 0\n\n  var al = this._al | 0\n  var bl = this._bl | 0\n  var cl = this._cl | 0\n  var dl = this._dl | 0\n  var el = this._el | 0\n  var fl = this._fl | 0\n  var gl = this._gl | 0\n  var hl = this._hl | 0\n\n  for (var i = 0; i < 32; i += 2) {\n    W[i] = M.readInt32BE(i * 4)\n    W[i + 1] = M.readInt32BE(i * 4 + 4)\n  }\n  for (; i < 160; i += 2) {\n    var xh = W[i - 15 * 2]\n    var xl = W[i - 15 * 2 + 1]\n    var gamma0 = Gamma0(xh, xl)\n    var gamma0l = Gamma0l(xl, xh)\n\n    xh = W[i - 2 * 2]\n    xl = W[i - 2 * 2 + 1]\n    var gamma1 = Gamma1(xh, xl)\n    var gamma1l = Gamma1l(xl, xh)\n\n    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n    var Wi7h = W[i - 7 * 2]\n    var Wi7l = W[i - 7 * 2 + 1]\n\n    var Wi16h = W[i - 16 * 2]\n    var Wi16l = W[i - 16 * 2 + 1]\n\n    var Wil = (gamma0l + Wi7l) | 0\n    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0\n    Wil = (Wil + gamma1l) | 0\n    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0\n    Wil = (Wil + Wi16l) | 0\n    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0\n\n    W[i] = Wih\n    W[i + 1] = Wil\n  }\n\n  for (var j = 0; j < 160; j += 2) {\n    Wih = W[j]\n    Wil = W[j + 1]\n\n    var majh = maj(ah, bh, ch)\n    var majl = maj(al, bl, cl)\n\n    var sigma0h = sigma0(ah, al)\n    var sigma0l = sigma0(al, ah)\n    var sigma1h = sigma1(eh, el)\n    var sigma1l = sigma1(el, eh)\n\n    // t1 = h + sigma1 + ch + K[j] + W[j]\n    var Kih = K[j]\n    var Kil = K[j + 1]\n\n    var chh = Ch(eh, fh, gh)\n    var chl = Ch(el, fl, gl)\n\n    var t1l = (hl + sigma1l) | 0\n    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0\n    t1l = (t1l + chl) | 0\n    t1h = (t1h + chh + getCarry(t1l, chl)) | 0\n    t1l = (t1l + Kil) | 0\n    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0\n    t1l = (t1l + Wil) | 0\n    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0\n\n    // t2 = sigma0 + maj\n    var t2l = (sigma0l + majl) | 0\n    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0\n\n    hh = gh\n    hl = gl\n    gh = fh\n    gl = fl\n    fh = eh\n    fl = el\n    el = (dl + t1l) | 0\n    eh = (dh + t1h + getCarry(el, dl)) | 0\n    dh = ch\n    dl = cl\n    ch = bh\n    cl = bl\n    bh = ah\n    bl = al\n    al = (t1l + t2l) | 0\n    ah = (t1h + t2h + getCarry(al, t1l)) | 0\n  }\n\n  this._al = (this._al + al) | 0\n  this._bl = (this._bl + bl) | 0\n  this._cl = (this._cl + cl) | 0\n  this._dl = (this._dl + dl) | 0\n  this._el = (this._el + el) | 0\n  this._fl = (this._fl + fl) | 0\n  this._gl = (this._gl + gl) | 0\n  this._hl = (this._hl + hl) | 0\n\n  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0\n  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0\n  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0\n  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0\n  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0\n  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0\n  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0\n  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0\n}\n\nSha512.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(64)\n\n  function writeInt64BE (h, l, offset) {\n    H.writeInt32BE(h, offset)\n    H.writeInt32BE(l, offset + 4)\n  }\n\n  writeInt64BE(this._ah, this._al, 0)\n  writeInt64BE(this._bh, this._bl, 8)\n  writeInt64BE(this._ch, this._cl, 16)\n  writeInt64BE(this._dh, this._dl, 24)\n  writeInt64BE(this._eh, this._el, 32)\n  writeInt64BE(this._fh, this._fl, 40)\n  writeInt64BE(this._gh, this._gl, 48)\n  writeInt64BE(this._hh, this._hl, 56)\n\n  return H\n}\n\nmodule.exports = Sha512\n","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","//! moment.js locale configuration\n//! locale : Czech [cs]\n//! author : petrbela : https://github.com/petrbela\n\n;(function (global, factory) {\n   typeof exports === 'object' && typeof module !== 'undefined'\n       && typeof require === 'function' ? factory(require('../moment')) :\n   typeof define === 'function' && define.amd ? define(['../moment'], factory) :\n   factory(global.moment)\n}(this, (function (moment) { 'use strict';\n\n    //! moment.js locale configuration\n\n    var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split(\n            '_'\n        ),\n        monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_'),\n        monthsParse = [\n            /^led/i,\n            /^úno/i,\n            /^bře/i,\n            /^dub/i,\n            /^kvě/i,\n            /^(čvn|červen$|června)/i,\n            /^(čvc|červenec|července)/i,\n            /^srp/i,\n            /^zář/i,\n            /^říj/i,\n            /^lis/i,\n            /^pro/i,\n        ],\n        // NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.\n        // Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.\n        monthsRegex = /^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;\n\n    function plural(n) {\n        return n > 1 && n < 5 && ~~(n / 10) !== 1;\n    }\n    function translate(number, withoutSuffix, key, isFuture) {\n        var result = number + ' ';\n        switch (key) {\n            case 's': // a few seconds / in a few seconds / a few seconds ago\n                return withoutSuffix || isFuture ? 'pár sekund' : 'pár sekundami';\n            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago\n                if (withoutSuffix || isFuture) {\n                    return result + (plural(number) ? 'sekundy' : 'sekund');\n                } else {\n                    return result + 'sekundami';\n                }\n            case 'm': // a minute / in a minute / a minute ago\n                return withoutSuffix ? 'minuta' : isFuture ? 'minutu' : 'minutou';\n            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago\n                if (withoutSuffix || isFuture) {\n                    return result + (plural(number) ? 'minuty' : 'minut');\n                } else {\n                    return result + 'minutami';\n                }\n            case 'h': // an hour / in an hour / an hour ago\n                return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';\n            case 'hh': // 9 hours / in 9 hours / 9 hours ago\n                if (withoutSuffix || isFuture) {\n                    return result + (plural(number) ? 'hodiny' : 'hodin');\n                } else {\n                    return result + 'hodinami';\n                }\n            case 'd': // a day / in a day / a day ago\n                return withoutSuffix || isFuture ? 'den' : 'dnem';\n            case 'dd': // 9 days / in 9 days / 9 days ago\n                if (withoutSuffix || isFuture) {\n                    return result + (plural(number) ? 'dny' : 'dní');\n                } else {\n                    return result + 'dny';\n                }\n            case 'M': // a month / in a month / a month ago\n                return withoutSuffix || isFuture ? 'měsíc' : 'měsícem';\n            case 'MM': // 9 months / in 9 months / 9 months ago\n                if (withoutSuffix || isFuture) {\n                    return result + (plural(number) ? 'měsíce' : 'měsíců');\n                } else {\n                    return result + 'měsíci';\n                }\n            case 'y': // a year / in a year / a year ago\n                return withoutSuffix || isFuture ? 'rok' : 'rokem';\n            case 'yy': // 9 years / in 9 years / 9 years ago\n                if (withoutSuffix || isFuture) {\n                    return result + (plural(number) ? 'roky' : 'let');\n                } else {\n                    return result + 'lety';\n                }\n        }\n    }\n\n    var cs = moment.defineLocale('cs', {\n        months: months,\n        monthsShort: monthsShort,\n        monthsRegex: monthsRegex,\n        monthsShortRegex: monthsRegex,\n        // NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.\n        // Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.\n        monthsStrictRegex: /^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,\n        monthsShortStrictRegex: /^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,\n        monthsParse: monthsParse,\n        longMonthsParse: monthsParse,\n        shortMonthsParse: monthsParse,\n        weekdays: 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),\n        weekdaysShort: 'ne_po_út_st_čt_pá_so'.split('_'),\n        weekdaysMin: 'ne_po_út_st_čt_pá_so'.split('_'),\n        longDateFormat: {\n            LT: 'H:mm',\n            LTS: 'H:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D. MMMM YYYY',\n            LLL: 'D. MMMM YYYY H:mm',\n            LLLL: 'dddd D. MMMM YYYY H:mm',\n            l: 'D. M. YYYY',\n        },\n        calendar: {\n            sameDay: '[dnes v] LT',\n            nextDay: '[zítra v] LT',\n            nextWeek: function () {\n                switch (this.day()) {\n                    case 0:\n                        return '[v neděli v] LT';\n                    case 1:\n                    case 2:\n                        return '[v] dddd [v] LT';\n                    case 3:\n                        return '[ve středu v] LT';\n                    case 4:\n                        return '[ve čtvrtek v] LT';\n                    case 5:\n                        return '[v pátek v] LT';\n                    case 6:\n                        return '[v sobotu v] LT';\n                }\n            },\n            lastDay: '[včera v] LT',\n            lastWeek: function () {\n                switch (this.day()) {\n                    case 0:\n                        return '[minulou neděli v] LT';\n                    case 1:\n                    case 2:\n                        return '[minulé] dddd [v] LT';\n                    case 3:\n                        return '[minulou středu v] LT';\n                    case 4:\n                    case 5:\n                        return '[minulý] dddd [v] LT';\n                    case 6:\n                        return '[minulou sobotu v] LT';\n                }\n            },\n            sameElse: 'L',\n        },\n        relativeTime: {\n            future: 'za %s',\n            past: 'před %s',\n            s: translate,\n            ss: translate,\n            m: translate,\n            mm: translate,\n            h: translate,\n            hh: translate,\n            d: translate,\n            dd: translate,\n            M: translate,\n            MM: translate,\n            y: translate,\n            yy: translate,\n        },\n        dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n        ordinal: '%d.',\n        week: {\n            dow: 1, // Monday is the first day of the week.\n            doy: 4, // The week that contains Jan 4th is the first week of the year.\n        },\n    });\n\n    return cs;\n\n})));\n","import {EntityMetadata} from \"../metadata/EntityMetadata\";\n\n/**\n */\nexport class MissingDeleteDateColumnError extends Error {\n    name = \"MissingDeleteDateColumnError\";\n\n    constructor(entityMetadata: EntityMetadata) {\n        super();\n        Object.setPrototypeOf(this, MissingDeleteDateColumnError.prototype);\n        this.message = `Entity \"${entityMetadata.name}\" does not have delete date columns.`;\n    }\n\n}","import {CockroachDriver} from \"../driver/cockroachdb/CockroachDriver\";\nimport {QueryBuilder} from \"./QueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {EntityTarget} from \"../common/EntityTarget\";\nimport {Connection} from \"../connection/Connection\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {WhereExpression} from \"./WhereExpression\";\nimport {Brackets} from \"./Brackets\";\nimport {UpdateResult} from \"./result/UpdateResult\";\nimport {ReturningStatementNotSupportedError} from \"../error/ReturningStatementNotSupportedError\";\nimport {ReturningResultsEntityUpdator} from \"./ReturningResultsEntityUpdator\";\nimport {SqljsDriver} from \"../driver/sqljs/SqljsDriver\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {BroadcasterResult} from \"../subscriber/BroadcasterResult\";\nimport {AbstractSqliteDriver} from \"../driver/sqlite-abstract/AbstractSqliteDriver\";\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\nimport {LimitOnUpdateNotSupportedError} from \"../error/LimitOnUpdateNotSupportedError\";\nimport {MissingDeleteDateColumnError} from \"../error/MissingDeleteDateColumnError\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {UpdateValuesMissingError} from \"../error/UpdateValuesMissingError\";\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class SoftDeleteQueryBuilder<Entity> extends QueryBuilder<Entity> implements WhereExpression {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connectionOrQueryBuilder: Connection|QueryBuilder<any>, queryRunner?: QueryRunner) {\n        super(connectionOrQueryBuilder as any, queryRunner);\n        this.expressionMap.aliasNamePrefixingEnabled = false;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        let sql = this.createUpdateExpression();\n        sql += this.createOrderByExpression();\n        sql += this.createLimitExpression();\n        return sql.trim();\n    }\n\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute(): Promise<UpdateResult> {\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs: boolean = false;\n\n        try {\n\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n\n            // call before updation methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\n                const broadcastResult = new BroadcasterResult();\n                queryRunner.broadcaster.broadcastBeforeUpdateEvent(broadcastResult, this.expressionMap.mainAlias!.metadata);\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\n            }\n\n            // if update entity mode is enabled we may need extra columns for the returning statement\n            const returningResultsEntityUpdator = new ReturningResultsEntityUpdator(queryRunner, this.expressionMap);\n            if (this.expressionMap.updateEntity === true &&\n                this.expressionMap.mainAlias!.hasMetadata &&\n                this.expressionMap.whereEntities.length > 0) {\n                this.expressionMap.extraReturningColumns = returningResultsEntityUpdator.getUpdationReturningColumns();\n            }\n\n            // execute update query\n            const [sql, parameters] = this.getQueryAndParameters();\n            const updateResult = new UpdateResult();\n            const result = await queryRunner.query(sql, parameters);\n\n            const driver = queryRunner.connection.driver;\n            if (driver instanceof PostgresDriver) {\n                updateResult.raw = result[0];\n                updateResult.affected = result[1];\n            }\n            else {\n                updateResult.raw = result;\n            }\n\n            // if we are updating entities and entity updation is enabled we must update some of entity columns (like version, update date, etc.)\n            if (this.expressionMap.updateEntity === true &&\n                this.expressionMap.mainAlias!.hasMetadata &&\n                this.expressionMap.whereEntities.length > 0) {\n                await returningResultsEntityUpdator.update(updateResult, this.expressionMap.whereEntities);\n            }\n\n            // call after updation methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\n                const broadcastResult = new BroadcasterResult();\n                queryRunner.broadcaster.broadcastAfterUpdateEvent(broadcastResult, this.expressionMap.mainAlias!.metadata);\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\n            }\n\n            // close transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.commitTransaction();\n\n            return updateResult;\n\n        } catch (error) {\n\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n            throw error;\n\n        } finally {\n            if (queryRunner !== this.queryRunner) { // means we created our own query runner\n                await queryRunner.release();\n            }\n            if (this.connection.driver instanceof SqljsDriver && !queryRunner.isTransactionActive) {\n                await this.connection.driver.autoSave();\n            }\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Specifies FROM which entity's table select/update/delete/soft-delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    from<T>(entityTarget: EntityTarget<T>, aliasName?: string): SoftDeleteQueryBuilder<T> {\n        entityTarget = entityTarget instanceof EntitySchema ? entityTarget.options.name : entityTarget;\n        const mainAlias = this.createFromAlias(entityTarget, aliasName);\n        this.expressionMap.setMainAlias(mainAlias);\n        return (this as any) as SoftDeleteQueryBuilder<T>;\n    }\n\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(where: string|((qb: this) => string)|Brackets|ObjectLiteral|ObjectLiteral[], parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n        const condition = this.computeWhereParameter(where);\n        if (condition)\n            this.expressionMap.wheres = [{ type: \"simple\", condition: condition }];\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(where: string|((qb: this) => string)|Brackets, parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"and\", condition: this.computeWhereParameter(where) });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(where: string|((qb: this) => string)|Brackets, parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"or\", condition: this.computeWhereParameter(where) });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    whereInIds(ids: any|any[]): this {\n        return this.where(this.createWhereIdsExpression(ids));\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    andWhereInIds(ids: any|any[]): this {\n        return this.andWhere(this.createWhereIdsExpression(ids));\n    }\n\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     */\n    orWhereInIds(ids: any|any[]): this {\n        return this.orWhere(this.createWhereIdsExpression(ids));\n    }\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    output(columns: string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    output(output: string): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string|string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string|string[]): this {\n        return this.returning(output);\n    }\n\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    returning(columns: string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    returning(returning: string): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string|string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string|string[]): this {\n\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported())\n            throw new ReturningStatementNotSupportedError();\n\n        this.expressionMap.returning = returning;\n        return this;\n    }\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     *\n     * Calling order by without order set will remove all previously set order bys.\n     */\n    orderBy(): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(sort: string, order?: \"ASC\"|\"DESC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(order: OrderByCondition): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(sort?: string|OrderByCondition, order: \"ASC\"|\"DESC\" = \"ASC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this {\n        if (sort) {\n            if (sort instanceof Object) {\n                this.expressionMap.orderBys = sort as OrderByCondition;\n            } else {\n                if (nulls) {\n                    this.expressionMap.orderBys = { [sort as string]: { order, nulls } };\n                } else {\n                    this.expressionMap.orderBys = { [sort as string]: order };\n                }\n            }\n        } else {\n            this.expressionMap.orderBys = {};\n        }\n        return this;\n    }\n\n    /**\n     * Adds ORDER BY condition in the query builder.\n     */\n    addOrderBy(sort: string, order: \"ASC\"|\"DESC\" = \"ASC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this {\n        if (nulls) {\n            this.expressionMap.orderBys[sort] = { order, nulls };\n        } else {\n            this.expressionMap.orderBys[sort] = order;\n        }\n        return this;\n    }\n\n    /**\n     * Sets LIMIT - maximum number of rows to be selected.\n     */\n    limit(limit?: number): this {\n        this.expressionMap.limit = limit;\n        return this;\n    }\n\n    /**\n     * Indicates if entity must be updated after update operation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    whereEntity(entity: Entity|Entity[]): this {\n        if (!this.expressionMap.mainAlias!.hasMetadata)\n            throw new Error(`.whereEntity method can only be used on queries which update real entity table.`);\n\n        this.expressionMap.wheres = [];\n        const entities: Entity[] = Array.isArray(entity) ? entity : [entity];\n        entities.forEach(entity => {\n\n            const entityIdMap = this.expressionMap.mainAlias!.metadata.getEntityIdMap(entity);\n            if (!entityIdMap)\n                throw new Error(`Provided entity does not have ids set, cannot perform operation.`);\n\n            this.orWhereInIds(entityIdMap);\n        });\n\n        this.expressionMap.whereEntities = entities;\n        return this;\n    }\n\n    /**\n     * Indicates if entity must be updated after update operation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    updateEntity(enabled: boolean): this {\n        this.expressionMap.updateEntity = enabled;\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates UPDATE express used to perform insert query.\n     */\n    protected createUpdateExpression() {\n        const metadata = this.expressionMap.mainAlias!.hasMetadata ? this.expressionMap.mainAlias!.metadata : undefined;\n        if (!metadata)\n            throw new Error(`Cannot get entity metadata for the given alias \"${this.expressionMap.mainAlias}\"`);\n        if (!metadata.deleteDateColumn) {\n            throw new MissingDeleteDateColumnError(metadata);\n        }\n\n        // prepare columns and values to be updated\n        const updateColumnAndValues: string[] = [];\n        const newParameters: ObjectLiteral = {};\n\n        switch (this.expressionMap.queryType) {\n            case \"soft-delete\":\n                updateColumnAndValues.push(this.escape(metadata.deleteDateColumn.databaseName) + \" = CURRENT_TIMESTAMP\");\n                break;\n            case \"restore\":\n                updateColumnAndValues.push(this.escape(metadata.deleteDateColumn.databaseName) + \" = NULL\");\n                break;\n            default:\n                throw new Error(`The queryType must be \"soft-delete\" or \"restore\"`);\n        }\n        if (metadata.versionColumn)\n            updateColumnAndValues.push(this.escape(metadata.versionColumn.databaseName) + \" = \" + this.escape(metadata.versionColumn.databaseName) + \" + 1\");\n        if (metadata.updateDateColumn)\n            updateColumnAndValues.push(this.escape(metadata.updateDateColumn.databaseName) + \" = CURRENT_TIMESTAMP\"); // todo: fix issue with CURRENT_TIMESTAMP(6) being used, can \"DEFAULT\" be used?!\n\n        if (updateColumnAndValues.length <= 0) {\n            throw new UpdateValuesMissingError();\n        }\n\n        // we re-write parameters this way because we want our \"UPDATE ... SET\" parameters to be first in the list of \"nativeParameters\"\n        // because some drivers like mysql depend on order of parameters\n        if (this.connection.driver instanceof MysqlDriver ||\n            this.connection.driver instanceof OracleDriver ||\n            this.connection.driver instanceof AbstractSqliteDriver) {\n            this.expressionMap.nativeParameters = Object.assign(newParameters, this.expressionMap.nativeParameters);\n        }\n\n        // get a table name and all column database names\n        const whereExpression = this.createWhereExpression();\n        const returningExpression = this.createReturningExpression();\n\n        // generate and return sql update query\n        if (returningExpression && (this.connection.driver instanceof PostgresDriver || this.connection.driver instanceof OracleDriver || this.connection.driver instanceof CockroachDriver)) {\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")}${whereExpression} RETURNING ${returningExpression}`;\n\n        } else if (returningExpression && this.connection.driver instanceof SqlServerDriver) {\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")} OUTPUT ${returningExpression}${whereExpression}`;\n\n        } else {\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")}${whereExpression}`; // todo: how do we replace aliases in where to nothing?\n        }\n    }\n\n    /**\n     * Creates \"ORDER BY\" part of SQL query.\n     */\n    protected createOrderByExpression() {\n        const orderBys = this.expressionMap.orderBys;\n        if (Object.keys(orderBys).length > 0)\n            return \" ORDER BY \" + Object.keys(orderBys)\n                    .map(columnName => {\n                        if (typeof orderBys[columnName] === \"string\") {\n                            return this.replacePropertyNames(columnName) + \" \" + orderBys[columnName];\n                        } else {\n                            return this.replacePropertyNames(columnName) + \" \" + (orderBys[columnName] as any).order + \" \" + (orderBys[columnName] as any).nulls;\n                        }\n                    })\n                    .join(\", \");\n\n        return \"\";\n    }\n\n    /**\n     * Creates \"LIMIT\" parts of SQL query.\n     */\n    protected createLimitExpression(): string {\n        let limit: number|undefined = this.expressionMap.limit;\n\n        if (limit) {\n            if (this.connection.driver instanceof MysqlDriver) {\n                return \" LIMIT \" + limit;\n            } else {\n                throw new LimitOnUpdateNotSupportedError();\n            }\n        }\n\n        return \"\";\n    }\n\n}\n","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}\n","var exports = module.exports = function SHA (algorithm) {\n  algorithm = algorithm.toLowerCase()\n\n  var Algorithm = exports[algorithm]\n  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')\n\n  return new Algorithm()\n}\n\nexports.sha = require('./sha')\nexports.sha1 = require('./sha1')\nexports.sha224 = require('./sha224')\nexports.sha256 = require('./sha256')\nexports.sha384 = require('./sha384')\nexports.sha512 = require('./sha512')\n","import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {ColumnType} from \"../../index\";\nimport {ReadStream} from \"../../platform/PlatformTools\";\nimport {BaseQueryRunner} from \"../../query-runner/BaseQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {TableIndexOptions} from \"../../schema-builder/options/TableIndexOptions\";\nimport {Table} from \"../../schema-builder/table/Table\";\nimport {TableCheck} from \"../../schema-builder/table/TableCheck\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {TableExclusion} from \"../../schema-builder/table/TableExclusion\";\nimport {TableForeignKey} from \"../../schema-builder/table/TableForeignKey\";\nimport {TableIndex} from \"../../schema-builder/table/TableIndex\";\nimport {TableUnique} from \"../../schema-builder/table/TableUnique\";\nimport {View} from \"../../schema-builder/view/View\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {Query} from \"../Query\";\nimport {IsolationLevel} from \"../types/IsolationLevel\";\nimport {MssqlParameter} from \"./MssqlParameter\";\nimport {SqlServerDriver} from \"./SqlServerDriver\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\nimport {BroadcasterResult} from \"../../subscriber/BroadcasterResult\";\n\n/**\n * Runs queries on a single SQL Server database connection.\n */\nexport class SqlServerQueryRunner extends BaseQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: SqlServerDriver;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Last executed query in a transaction.\n     * This is needed because in transaction mode mssql cannot execute parallel queries,\n     * that's why we store last executed query promise to wait it when we execute next query.\n     *\n     * @see https://github.com/patriksimek/node-mssql/issues/491\n     */\n    protected queryResponsibilityChain: Promise<any>[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: SqlServerDriver, mode: ReplicationMode) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n        this.mode = mode;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        this.isReleased = true;\n        return Promise.resolve();\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        return new Promise<void>(async (ok, fail) => {\n            this.isTransactionActive = true;\n\n            const pool = await (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection());\n            this.databaseConnection = pool.transaction();\n\n            const transactionCallback = (err: any) => {\n                if (err) {\n                    this.isTransactionActive = false;\n                    return fail(err);\n                }\n                ok();\n                this.connection.logger.logQuery(\"BEGIN TRANSACTION\");\n                if (isolationLevel) {\n                    this.connection.logger.logQuery(\"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel);\n                }\n            };\n\n            if (isolationLevel) {\n                this.databaseConnection.begin(this.convertIsolationLevel(isolationLevel), transactionCallback);\n            } else {\n                this.databaseConnection.begin(transactionCallback);\n            }\n\n            const afterBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);\n            if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n        });\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        return new Promise<void>((ok, fail) => {\n            this.databaseConnection.commit(async (err: any) => {\n                if (err) return fail(err);\n                this.isTransactionActive = false;\n                this.databaseConnection = null;\n\n                const afterBroadcastResult = new BroadcasterResult();\n                this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);\n                if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n\n                ok();\n                this.connection.logger.logQuery(\"COMMIT\");\n            });\n        });\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        return new Promise<void>( (ok, fail) => {\n            this.databaseConnection.rollback(async (err: any) => {\n                if (err) return fail(err);\n                this.isTransactionActive = false;\n                this.databaseConnection = null;\n\n                const afterBroadcastResult = new BroadcasterResult();\n                this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);\n                if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n\n                ok();\n                this.connection.logger.logQuery(\"ROLLBACK\");\n            });\n        });\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let waitingOkay: Function;\n        const waitingPromise = new Promise((ok) => waitingOkay = ok);\n        if (this.queryResponsibilityChain.length) {\n            const otherWaitingPromises = [...this.queryResponsibilityChain];\n            this.queryResponsibilityChain.push(waitingPromise);\n            await Promise.all(otherWaitingPromises);\n        }\n\n        const promise = new Promise(async (ok, fail) => {\n            try {\n                this.driver.connection.logger.logQuery(query, parameters, this);\n                const pool = await (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection());\n                const request = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : pool);\n                if (parameters && parameters.length) {\n                    parameters.forEach((parameter, index) => {\n                        if (parameter instanceof MssqlParameter) {\n                            const mssqlParameter = this.mssqlParameterToNativeParameter(parameter);\n                            if (mssqlParameter) {\n                                request.input(index, mssqlParameter, parameter.value);\n                            } else {\n                                request.input(index, parameter.value);\n                            }\n                        } else {\n                            request.input(index, parameter);\n                        }\n                    });\n                }\n                const queryStartTime = +new Date();\n                request.query(query, (err: any, result: any) => {\n\n                    // log slow queries if maxQueryExecution time is set\n                    const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                    const queryEndTime = +new Date();\n                    const queryExecutionTime = queryEndTime - queryStartTime;\n                    if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                        this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                    const resolveChain = () => {\n                        if (promiseIndex !== -1)\n                            this.queryResponsibilityChain.splice(promiseIndex, 1);\n                        if (waitingPromiseIndex !== -1)\n                            this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\n                        waitingOkay();\n                    };\n\n                    let promiseIndex = this.queryResponsibilityChain.indexOf(promise);\n                    let waitingPromiseIndex = this.queryResponsibilityChain.indexOf(waitingPromise);\n                    if (err) {\n                        this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                        resolveChain();\n                        return fail(new QueryFailedError(query, parameters, err));\n                    }\n\n                    const queryType = query.slice(0, query.indexOf(\" \"));\n                    switch (queryType) {\n                        case \"DELETE\":\n                            // for DELETE query additionally return number of affected rows\n                            ok([result.recordset, result.rowsAffected[0]]);\n                            break;\n                        default:\n                            ok(result.recordset);\n                    }\n                    resolveChain();\n                });\n\n            } catch (err) {\n                fail(err);\n            }\n        });\n        // with this condition, Promise.all causes unexpected behavior.\n        // if (this.isTransactionActive)\n        this.queryResponsibilityChain.push(promise);\n        return promise;\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    async stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let waitingOkay: Function;\n        const waitingPromise = new Promise((ok) => waitingOkay = ok);\n        if (this.queryResponsibilityChain.length) {\n            const otherWaitingPromises = [...this.queryResponsibilityChain];\n            this.queryResponsibilityChain.push(waitingPromise);\n            await Promise.all(otherWaitingPromises);\n        }\n\n        const promise = new Promise<ReadStream>(async (ok, fail) => {\n\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const pool = await (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection());\n            const request = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : pool);\n            request.stream = true;\n            if (parameters && parameters.length) {\n                parameters.forEach((parameter, index) => {\n                    if (parameter instanceof MssqlParameter) {\n                        request.input(index, this.mssqlParameterToNativeParameter(parameter), parameter.value);\n                    } else {\n                        request.input(index, parameter);\n                    }\n                });\n            }\n            request.query(query, (err: any, result: any) => {\n\n                const resolveChain = () => {\n                    if (promiseIndex !== -1)\n                        this.queryResponsibilityChain.splice(promiseIndex, 1);\n                    if (waitingPromiseIndex !== -1)\n                        this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\n                    waitingOkay();\n                };\n\n                let promiseIndex = this.queryResponsibilityChain.indexOf(promise);\n                let waitingPromiseIndex = this.queryResponsibilityChain.indexOf(waitingPromise);\n                if (err) {\n                    this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                    resolveChain();\n                    return fail(err);\n                }\n\n                ok(result.recordset);\n                resolveChain();\n            });\n            if (onEnd) request.on(\"done\", onEnd);\n            if (onError) request.on(\"error\", onError);\n            ok(request as ReadStream);\n        });\n        if (this.isTransactionActive)\n            this.queryResponsibilityChain.push(promise);\n\n        return promise;\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        const results: ObjectLiteral[] = await this.query(`EXEC sp_databases`);\n        return results.map(result => result[\"DATABASE_NAME\"]);\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        const query = database ? `SELECT * FROM \"${database}\".\"sys\".\"schema\"` : `SELECT * FROM \"sys\".\"schemas\"`;\n        const results: ObjectLiteral[] = await this.query(query);\n        return results.map(result => result[\"name\"]);\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        const result = await this.query(`SELECT DB_ID('${database}') as \"db_id\"`);\n        const dbId = result[0][\"db_id\"];\n        return !!dbId;\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        const result = await this.query(`SELECT SCHEMA_ID('${schema}') as \"schema_id\"`);\n        const schemaId = result[0][\"schema_id\"];\n        return !!schemaId;\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table|string): Promise<boolean> {\n        const parsedTableName = this.parseTableName(tableOrName);\n        const schema = parsedTableName.schema === \"SCHEMA_NAME()\" ? parsedTableName.schema : `'${parsedTableName.schema}'`;\n        const sql = `SELECT * FROM \"${parsedTableName.database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_NAME\" = '${parsedTableName.name}' AND \"TABLE_SCHEMA\" = ${schema}`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if column exist in the table.\n     */\n    async hasColumn(tableOrName: Table|string, columnName: string): Promise<boolean> {\n        const parsedTableName = this.parseTableName(tableOrName);\n        const schema = parsedTableName.schema === \"SCHEMA_NAME()\" ? parsedTableName.schema : `'${parsedTableName.schema}'`;\n        const sql = `SELECT * FROM \"${parsedTableName.database}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" WHERE \"TABLE_NAME\" = '${parsedTableName.name}' AND \"COLUMN_NAME\" = '${columnName}' AND \"TABLE_SCHEMA\" = ${schema}`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(database: string, ifNotExist?: boolean): Promise<void> {\n        const up = ifNotExist ? `IF DB_ID('${database}') IS NULL CREATE DATABASE \"${database}\"` : `CREATE DATABASE \"${database}\"`;\n        const down = `DROP DATABASE \"${database}\"`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        const up = ifExist ? `IF DB_ID('${database}') IS NOT NULL DROP DATABASE \"${database}\"` : `DROP DATABASE \"${database}\"`;\n        const down = `CREATE DATABASE \"${database}\"`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n\n    /**\n     * Creates table schema.\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be created in specified database.\n     */\n    async createSchema(schemaPath: string, ifNotExist?: boolean): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        if (schemaPath.indexOf(\".\") === -1) {\n            const upQuery = ifNotExist ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('CREATE SCHEMA \"${schemaPath}\"') END` : `CREATE SCHEMA \"${schemaPath}\"`;\n            upQueries.push(new Query(upQuery));\n            downQueries.push(new Query(`DROP SCHEMA \"${schemaPath}\"`));\n\n        } else {\n            const dbName = schemaPath.split(\".\")[0];\n            const schema = schemaPath.split(\".\")[1];\n            const currentDB = await this.getCurrentDatabase();\n            upQueries.push(new Query(`USE \"${dbName}\"`));\n            downQueries.push(new Query(`USE \"${currentDB}\"`));\n\n            const upQuery = ifNotExist ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('CREATE SCHEMA \"${schema}\"') END` : `CREATE SCHEMA \"${schema}\"`;\n            upQueries.push(new Query(upQuery));\n            downQueries.push(new Query(`DROP SCHEMA \"${schema}\"`));\n\n            upQueries.push(new Query(`USE \"${currentDB}\"`));\n            downQueries.push(new Query(`USE \"${dbName}\"`));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops table schema.\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be dropped in specified database.\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        if (schemaPath.indexOf(\".\") === -1) {\n            const upQuery = ifExist ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('DROP SCHEMA \"${schemaPath}\"') END` : `DROP SCHEMA \"${schemaPath}\"`;\n            upQueries.push(new Query(upQuery));\n            downQueries.push(new Query(`CREATE SCHEMA \"${schemaPath}\"`));\n\n        } else {\n            const dbName = schemaPath.split(\".\")[0];\n            const schema = schemaPath.split(\".\")[1];\n            const currentDB = await this.getCurrentDatabase();\n            upQueries.push(new Query(`USE \"${dbName}\"`));\n            downQueries.push(new Query(`USE \"${currentDB}\"`));\n\n            const upQuery = ifExist ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('DROP SCHEMA \"${schema}\"') END` : `DROP SCHEMA \"${schema}\"`;\n            upQueries.push(new Query(upQuery));\n            downQueries.push(new Query(`CREATE SCHEMA \"${schema}\"`));\n\n            upQueries.push(new Query(`USE \"${currentDB}\"`));\n            downQueries.push(new Query(`USE \"${dbName}\"`));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(table: Table, ifNotExist: boolean = false, createForeignKeys: boolean = true, createIndices: boolean = true): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table);\n            if (isTableExist) return Promise.resolve();\n        }\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(this.createTableSql(table, createForeignKeys));\n        downQueries.push(this.dropTableSql(table));\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        if (createIndices) {\n            table.indices.forEach(index => {\n\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                upQueries.push(this.createIndexSql(table, index));\n                downQueries.push(this.dropIndexSql(table, index));\n            });\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableOrName: Table|string, ifExist?: boolean, dropForeignKeys: boolean = true, dropIndices: boolean = true): Promise<void> {\n        if (ifExist) {\n            const isTableExist = await this.hasTable(tableOrName);\n            if (!isTableExist) return Promise.resolve();\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys;\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n\n        if (dropIndices) {\n            table.indices.forEach(index => {\n                upQueries.push(this.dropIndexSql(table, index));\n                downQueries.push(this.createIndexSql(table, index));\n            });\n        }\n\n        // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (dropForeignKeys)\n            table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        upQueries.push(this.dropTableSql(table));\n        downQueries.push(this.createTableSql(table, createForeignKeys));\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(view: View): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.createViewSql(view));\n        upQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.deleteViewDefinitionSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View|string): Promise<void> {\n        const viewName = target instanceof View ? target.name : target;\n        const view = await this.getCachedView(viewName);\n\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(await this.deleteViewDefinitionSql(view));\n        upQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.createViewSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Renames a table.\n     */\n    async renameTable(oldTableOrName: Table|string, newTableName: string): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        const oldTable = oldTableOrName instanceof Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);\n        let newTable = oldTable.clone();\n\n        // we need database name and schema name to rename FK constraints\n        let dbName: string|undefined = undefined;\n        let schemaName: string|undefined = undefined;\n        let oldTableName: string = oldTable.name;\n        const splittedName = oldTable.name.split(\".\");\n        if (splittedName.length === 3) {\n            dbName = splittedName[0];\n            oldTableName = splittedName[2];\n            if (splittedName[1] !== \"\")\n                schemaName = splittedName[1];\n\n        } else if (splittedName.length === 2) {\n            schemaName = splittedName[0];\n            oldTableName = splittedName[1];\n        }\n\n        newTable.name = this.driver.buildTableName(newTableName, schemaName, dbName);\n\n        // if we have tables with database which differs from database specified in config, we must change currently used database.\n        // This need because we can not rename objects from another database.\n        const currentDB = await this.getCurrentDatabase();\n        if (dbName && dbName !== currentDB) {\n            upQueries.push(new Query(`USE \"${dbName}\"`));\n            downQueries.push(new Query(`USE \"${currentDB}\"`));\n        }\n\n        // rename table\n        upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(oldTable, true)}\", \"${newTableName}\"`));\n        downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}\", \"${oldTableName}\"`));\n\n        // rename primary key constraint\n        if (newTable.primaryColumns.length > 0) {\n            const columnNames = newTable.primaryColumns.map(column => column.name);\n\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\n            const newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);\n\n            // rename primary constraint\n            upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${oldPkName}\", \"${newPkName}\"`));\n            downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${newPkName}\", \"${oldPkName}\"`));\n        }\n\n        // rename unique constraints\n        newTable.uniques.forEach(unique => {\n            // build new constraint name\n            const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);\n\n            // build queries\n            upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${unique.name}\", \"${newUniqueName}\"`));\n            downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${newUniqueName}\", \"${unique.name}\"`));\n\n            // replace constraint name\n            unique.name = newUniqueName;\n        });\n\n        // rename index constraints\n        newTable.indices.forEach(index => {\n            // build new constraint name\n            const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n\n            // build queries\n            upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${index.name}\", \"${newIndexName}\", \"INDEX\"`));\n            downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${newIndexName}\", \"${index.name}\", \"INDEX\"`));\n\n            // replace constraint name\n            index.name = newIndexName;\n        });\n\n        // rename foreign key constraints\n        newTable.foreignKeys.forEach(foreignKey => {\n            // build new constraint name\n            const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n            // build queries\n            upQueries.push(new Query(`EXEC sp_rename \"${this.buildForeignKeyName(foreignKey.name!, schemaName, dbName)}\", \"${newForeignKeyName}\"`));\n            downQueries.push(new Query(`EXEC sp_rename \"${this.buildForeignKeyName(newForeignKeyName, schemaName, dbName)}\", \"${foreignKey.name}\"`));\n\n            // replace constraint name\n            foreignKey.name = newForeignKeyName;\n        });\n\n        // change currently used database back to default db.\n        if (dbName && dbName !== currentDB) {\n            upQueries.push(new Query(`USE \"${currentDB}\"`));\n            downQueries.push(new Query(`USE \"${dbName}\"`));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n\n        // rename old table and replace it in cached tabled;\n        oldTable.name = newTable.name;\n        this.replaceCachedTable(oldTable, newTable);\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(tableOrName: Table|string, column: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column, false, true)}`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${column.name}\"`));\n\n        // create or update primary key constraint\n        if (column.isPrimary) {\n            const primaryColumns = clonedTable.primaryColumns;\n            // if table already have primary key, me must drop it and recreate again\n            if (primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            }\n\n            primaryColumns.push(column);\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n        }\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            upQueries.push(this.createIndexSql(table, columnIndex));\n            downQueries.push(this.dropIndexSql(table, columnIndex));\n        }\n\n        // create unique constraint\n        if (column.isUnique) {\n            const uniqueConstraint = new TableUnique({\n               name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n               columnNames: [column.name]\n            });\n            clonedTable.uniques.push(uniqueConstraint);\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${column.name}\")`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\n        }\n\n        // remove default constraint\n        if (column.default !== null && column.default !== undefined) {\n            const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${defaultName}\"`));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.addColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newTableColumnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        let newColumn: TableColumn|undefined = undefined;\n        if (newTableColumnOrName instanceof TableColumn) {\n            newColumn = newTableColumnOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newTableColumnOrName;\n        }\n\n        await this.changeColumn(table, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newColumn: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        let clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        const oldColumn = oldTableColumnOrName instanceof TableColumn\n            ? oldTableColumnOrName\n            : table.columns.find(column => column.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        if ((newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== \"uuid\") || newColumn.type !== oldColumn.type || newColumn.length !== oldColumn.length) {\n            // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n            await this.dropColumn(table, oldColumn);\n            await this.addColumn(table, newColumn);\n\n            // update cloned table\n            clonedTable = table.clone();\n\n        } else {\n            if (newColumn.name !== oldColumn.name) {\n\n                // we need database name and schema name to rename FK constraints\n                let dbName: string|undefined = undefined;\n                let schemaName: string|undefined = undefined;\n                const splittedName = table.name.split(\".\");\n                if (splittedName.length === 3) {\n                    dbName = splittedName[0];\n                    if (splittedName[1] !== \"\")\n                        schemaName = splittedName[1];\n\n                } else if (splittedName.length === 2) {\n                    schemaName = splittedName[0];\n                }\n\n                // if we have tables with database which differs from database specified in config, we must change currently used database.\n                // This need because we can not rename objects from another database.\n                const currentDB = await this.getCurrentDatabase();\n                if (dbName && dbName !== currentDB) {\n                    upQueries.push(new Query(`USE \"${dbName}\"`));\n                    downQueries.push(new Query(`USE \"${currentDB}\"`));\n                }\n\n                // rename the column\n                upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(table, true)}.${oldColumn.name}\", \"${newColumn.name}\"`));\n                downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(table, true)}.${newColumn.name}\", \"${oldColumn.name}\"`));\n\n                if (oldColumn.isPrimary === true) {\n                    const primaryColumns = clonedTable.primaryColumns;\n\n                    // build old primary constraint name\n                    const columnNames = primaryColumns.map(column => column.name);\n                    const oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    // replace old column name with new column name\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n                    columnNames.push(newColumn.name);\n\n                    // build new primary constraint name\n                    const newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    // rename primary constraint\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${oldPkName}\", \"${newPkName}\"`));\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${newPkName}\", \"${oldPkName}\"`));\n                }\n\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach(index => {\n                    // build new constraint name\n                    index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                    index.columnNames.push(newColumn.name);\n                    const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n\n                    // build queries\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${index.name}\", \"${newIndexName}\", \"INDEX\"`));\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${newIndexName}\", \"${index.name}\", \"INDEX\"`));\n\n                    // replace constraint name\n                    index.name = newIndexName;\n                });\n\n                // rename foreign key constraints\n                clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {\n                    // build new constraint name\n                    foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                    foreignKey.columnNames.push(newColumn.name);\n                    const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n                    // build queries\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.buildForeignKeyName(foreignKey.name!, schemaName, dbName)}\", \"${newForeignKeyName}\"`));\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.buildForeignKeyName(newForeignKeyName, schemaName, dbName)}\", \"${foreignKey.name}\"`));\n\n                    // replace constraint name\n                    foreignKey.name = newForeignKeyName;\n                });\n\n                // rename check constraints\n                clonedTable.findColumnChecks(oldColumn).forEach(check => {\n                    // build new constraint name\n                    check.columnNames!.splice(check.columnNames!.indexOf(oldColumn.name), 1);\n                    check.columnNames!.push(newColumn.name);\n                    const newCheckName = this.connection.namingStrategy.checkConstraintName(clonedTable, check.expression!);\n\n                    // build queries\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${check.name}\", \"${newCheckName}\"`));\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${newCheckName}\", \"${check.name}\"`));\n\n                    // replace constraint name\n                    check.name = newCheckName;\n                });\n\n                // rename unique constraints\n                clonedTable.findColumnUniques(oldColumn).forEach(unique => {\n                    // build new constraint name\n                    unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);\n                    unique.columnNames.push(newColumn.name);\n                    const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames);\n\n                    // build queries\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${unique.name}\", \"${newUniqueName}\"`));\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${newUniqueName}\", \"${unique.name}\"`));\n\n                    // replace constraint name\n                    unique.name = newUniqueName;\n                });\n\n                // rename default constraints\n                if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                    const oldDefaultName = this.connection.namingStrategy.defaultConstraintName(table.name, oldColumn.name);\n                    const newDefaultName = this.connection.namingStrategy.defaultConstraintName(table.name, newColumn.name);\n\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${oldDefaultName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${oldDefaultName}\" DEFAULT ${oldColumn.default} FOR \"${newColumn.name}\"`));\n\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${newDefaultName}\" DEFAULT ${oldColumn.default} FOR \"${newColumn.name}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${newDefaultName}\"`));\n                }\n\n                // change currently used database back to default db.\n                if (dbName && dbName !== currentDB) {\n                    upQueries.push(new Query(`USE \"${currentDB}\"`));\n                    downQueries.push(new Query(`USE \"${dbName}\"`));\n                }\n\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);\n                clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn!)].name = newColumn.name;\n                oldColumn.name = newColumn.name;\n            }\n\n            if (this.isColumnChanged(oldColumn, newColumn, false)) {\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN ${this.buildCreateColumnSql(table, newColumn, true, false)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN ${this.buildCreateColumnSql(table, oldColumn, true, false)}`));\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                const primaryColumns = clonedTable.primaryColumns;\n\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                }\n\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn);\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = true;\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n\n                } else {\n                    const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);\n                    primaryColumns.splice(primaryColumns.indexOf(primaryColumn!), 1);\n\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = false;\n\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                        const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    }\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueConstraint = new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [newColumn.name]),\n                        columnNames: [newColumn.name]\n                    });\n                    clonedTable.uniques.push(uniqueConstraint);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${newColumn.name}\")`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\n\n                } else {\n                    const uniqueConstraint = clonedTable.uniques.find(unique => {\n                        return unique.columnNames.length === 1 && !!unique.columnNames.find(columnName => columnName === newColumn.name);\n                    });\n                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint!), 1);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint!.name}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint!.name}\" UNIQUE (\"${newColumn.name}\")`));\n                }\n            }\n\n            if (newColumn.default !== oldColumn.default) {\n\n                // (note) if there is a previous default, we need to drop its constraint first\n                if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                    const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, oldColumn.name);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${defaultName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${oldColumn.default} FOR \"${oldColumn.name}\"`));\n                }\n\n                if (newColumn.default !== null && newColumn.default !== undefined) {\n                    const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, newColumn.name);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${newColumn.default} FOR \"${newColumn.name}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${defaultName}\"`));\n                }\n            }\n\n            await this.executeQueries(upQueries, downQueries);\n            this.replaceCachedTable(table, clonedTable);\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableOrName: Table|string, changedColumns: { newColumn: TableColumn, oldColumn: TableColumn }[]): Promise<void> {\n        for (const {oldColumn, newColumn} of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn);\n        }\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableOrName: Table|string, columnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n        if (!column)\n            throw new Error(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\n\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // drop primary key constraint\n        if (column.isPrimary) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n            const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name);\n            tableColumn!.isPrimary = false;\n\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            }\n        }\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n            upQueries.push(this.dropIndexSql(table, columnIndex));\n            downQueries.push(this.createIndexSql(table, columnIndex));\n        }\n\n        // drop column check\n        const columnCheck = clonedTable.checks.find(check => !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name);\n        if (columnCheck) {\n            clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n        }\n\n        // drop column unique\n        const columnUnique = clonedTable.uniques.find(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\n        if (columnUnique) {\n            clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);\n            upQueries.push(this.dropUniqueConstraintSql(table, columnUnique));\n            downQueries.push(this.createUniqueConstraintSql(table, columnUnique));\n        }\n\n        // drop default constraint\n        if (column.default !== null && column.default !== undefined) {\n            const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${defaultName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${column.default} FOR \"${column.name}\"`));\n        }\n\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${column.name}\"`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column, false, false)}`));\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.removeColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(tableOrName: Table|string, columnNames: string[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n\n        const up = this.createPrimaryKeySql(table, columnNames);\n\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n        clonedTable.columns.forEach(column => {\n            if (columnNames.find(columnName => columnName === column.name))\n                column.isPrimary = true;\n        });\n        const down = this.dropPrimaryKeySql(clonedTable);\n\n        await this.executeQueries(up, down);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const columnNames = columns.map(column => column.name);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns;\n        if (primaryColumns.length > 0) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNamesString = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        }\n\n        // update columns in table.\n        clonedTable.columns\n            .filter(column => columnNames.indexOf(column.name) !== -1)\n            .forEach(column => column.isPrimary = true);\n\n        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName: Table|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const up = this.dropPrimaryKeySql(table);\n        const down = this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name));\n        await this.executeQueries(up, down);\n        table.primaryColumns.forEach(column => {\n            column.isPrimary = false;\n        });\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(tableOrName: Table|string, uniqueConstraint: TableUnique): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!uniqueConstraint.name)\n            uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table.name, uniqueConstraint.columnNames);\n\n        const up = this.createUniqueConstraintSql(table, uniqueConstraint);\n        const down = this.dropUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.addUniqueConstraint(uniqueConstraint);\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        const promises = uniqueConstraints.map(uniqueConstraint => this.createUniqueConstraint(tableOrName, uniqueConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops unique constraint.\n     */\n    async dropUniqueConstraint(tableOrName: Table|string, uniqueOrName: TableUnique|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const uniqueConstraint = uniqueOrName instanceof TableUnique ? uniqueOrName : table.uniques.find(u => u.name === uniqueOrName);\n        if (!uniqueConstraint)\n            throw new Error(`Supplied unique constraint was not found in table ${table.name}`);\n\n        const up = this.dropUniqueConstraintSql(table, uniqueConstraint);\n        const down = this.createUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.removeUniqueConstraint(uniqueConstraint);\n    }\n\n    /**\n     * Drops an unique constraints.\n     */\n    async dropUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        const promises = uniqueConstraints.map(uniqueConstraint => this.dropUniqueConstraint(tableOrName, uniqueConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new check constraint.\n     */\n    async createCheckConstraint(tableOrName: Table|string, checkConstraint: TableCheck): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression!);\n\n        const up = this.createCheckConstraintSql(table, checkConstraint);\n        const down = this.dropCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.addCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Creates a new check constraints.\n     */\n    async createCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.createCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(tableOrName: Table|string, checkOrName: TableCheck|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);\n        if (!checkConstraint)\n            throw new Error(`Supplied check constraint was not found in table ${table.name}`);\n\n        const up = this.dropCheckConstraintSql(table, checkConstraint);\n        const down = this.createCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.removeCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.dropCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(tableOrName: Table|string, exclusionConstraint: TableExclusion): Promise<void> {\n        throw new Error(`SqlServer does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`SqlServer does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(tableOrName: Table|string, exclusionOrName: TableExclusion|string): Promise<void> {\n        throw new Error(`SqlServer does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`SqlServer does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableOrName: Table|string, foreignKey: TableForeignKey): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n        const up = this.createForeignKeySql(table, foreignKey);\n        const down = this.dropForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.addForeignKey(foreignKey);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);\n        if (!foreignKey)\n            throw new Error(`Supplied foreign key was not found in table ${table.name}`);\n\n        const up = this.dropForeignKeySql(table, foreignKey);\n        const down = this.createForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.removeForeignKey(foreignKey);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableOrName: Table|string, index: TableIndex): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n\n        const up = this.createIndexSql(table, index);\n        const down = this.dropIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.addIndex(index);\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.createIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops an index.\n     */\n    async dropIndex(tableOrName: Table|string, indexOrName: TableIndex|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);\n        if (!index)\n            throw new Error(`Supplied index was not found in table ${table.name}`);\n\n        const up = this.dropIndexSql(table, index);\n        const down = this.createIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.removeIndex(index);\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.dropIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tablePath: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tablePath)}`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(database?: string): Promise<void> {\n        if (database) {\n            const isDatabaseExist = await this.hasDatabase(database);\n            if (!isDatabaseExist)\n                return Promise.resolve();\n        }\n\n        await this.startTransaction();\n        try {\n            let allViewsSql = database\n                ? `SELECT * FROM \"${database}\".\"INFORMATION_SCHEMA\".\"VIEWS\"`\n                : `SELECT * FROM \"INFORMATION_SCHEMA\".\"VIEWS\"`;\n            const allViewsResults: ObjectLiteral[] = await this.query(allViewsSql);\n\n            await Promise.all(allViewsResults.map(viewResult => {\n                // 'DROP VIEW' does not allow specifying the database name as a prefix to the object name.\n                const dropTableSql = `DROP VIEW \"${viewResult[\"TABLE_SCHEMA\"]}\".\"${viewResult[\"TABLE_NAME\"]}\"`;\n                return this.query(dropTableSql);\n            }));\n\n            let allTablesSql = database\n                ? `SELECT * FROM \"${database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'`\n                : `SELECT * FROM \"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'`;\n            const allTablesResults: ObjectLiteral[] = await this.query(allTablesSql);\n            await Promise.all(allTablesResults.map(async tablesResult => {\n                // const tableName = database ? `\"${tablesResult[\"TABLE_CATALOG\"]}\".\"sys\".\"foreign_keys\"` : `\"sys\".\"foreign_keys\"`;\n                const dropForeignKeySql = `SELECT 'ALTER TABLE \"${tablesResult[\"TABLE_CATALOG\"]}\".\"' + OBJECT_SCHEMA_NAME(\"fk\".\"parent_object_id\", DB_ID('${tablesResult[\"TABLE_CATALOG\"]}')) + '\".\"' + OBJECT_NAME(\"fk\".\"parent_object_id\", DB_ID('${tablesResult[\"TABLE_CATALOG\"]}')) + '\" ` +\n                    `DROP CONSTRAINT \"' + \"fk\".\"name\" + '\"' as \"query\" FROM \"${tablesResult[\"TABLE_CATALOG\"]}\".\"sys\".\"foreign_keys\" AS \"fk\" ` +\n                    `WHERE \"fk\".\"referenced_object_id\" = OBJECT_ID('\"${tablesResult[\"TABLE_CATALOG\"]}\".\"${tablesResult[\"TABLE_SCHEMA\"]}\".\"${tablesResult[\"TABLE_NAME\"]}\"')`;\n                const dropFkQueries: ObjectLiteral[] = await this.query(dropForeignKeySql);\n                return Promise.all(dropFkQueries.map(result => result[\"query\"]).map(dropQuery => this.query(dropQuery)));\n            }));\n            await Promise.all(allTablesResults.map(tablesResult => {\n                if (tablesResult[\"TABLE_NAME\"].startsWith(\"#\")) {\n                    // don't try to drop temporary tables\n                    return;\n                }\n\n                const dropTableSql = `DROP TABLE \"${tablesResult[\"TABLE_CATALOG\"]}\".\"${tablesResult[\"TABLE_SCHEMA\"]}\".\"${tablesResult[\"TABLE_NAME\"]}\"`;\n                return this.query(dropTableSql);\n            }));\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Return current database.\n     */\n    protected async getCurrentDatabase(): Promise<string> {\n        const currentDBQuery = await this.query(`SELECT DB_NAME() AS \"db_name\"`);\n        return currentDBQuery[0][\"db_name\"];\n    }\n\n    /**\n     * Return current schema.\n     */\n    protected async getCurrentSchema(): Promise<string> {\n        const currentSchemaQuery = await this.query(`SELECT SCHEMA_NAME() AS \"schema_name\"`);\n        return currentSchemaQuery[0][\"schema_name\"];\n    }\n\n    protected async loadViews(viewPaths: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName());\n        if (!hasTable)\n            return Promise.resolve([]);\n\n        const currentSchema = await this.getCurrentSchema();\n        const currentDatabase = await this.getCurrentDatabase();\n\n        const extractTableSchemaAndName = (tableName: string): string[] => {\n            let [database, schema, name] = tableName.split(\".\");\n            // if name is empty, it means that tableName have only schema name and table name or only table name\n            if (!name) {\n                // if schema is empty, it means tableName have only name of a table. Otherwise it means that we have \"schemaName\".\"tableName\" string.\n                if (!schema) {\n                    name = database;\n                    schema = this.driver.options.schema || currentSchema;\n\n                } else {\n                    name = schema;\n                    schema = database;\n                }\n            } else if (schema === \"\") {\n                schema = this.driver.options.schema || currentSchema;\n            }\n\n            return [schema, name];\n        };\n\n        const dbNames = viewPaths\n            .filter(viewPath => viewPath.split(\".\").length === 3)\n            .map(viewPath => viewPath.split(\".\")[0]);\n\n        if (this.driver.database && !dbNames.find(dbName => dbName === this.driver.database))\n            dbNames.push(this.driver.database);\n\n        const viewsCondition = viewPaths.map(viewPath => {\n            const [schema, name] = extractTableSchemaAndName(viewPath);\n            return `(\"T\".\"SCHEMA\" = '${schema}' AND \"T\".\"NAME\" = '${name}')`;\n        }).join(\" OR \");\n\n        const query = dbNames.map(dbName => {\n            return `SELECT \"T\".*, \"V\".\"CHECK_OPTION\" FROM ${this.escapePath(this.getTypeormMetadataTableName())} \"t\" ` +\n                `INNER JOIN \"${dbName}\".\"INFORMATION_SCHEMA\".\"VIEWS\" \"V\" ON \"V\".\"TABLE_SCHEMA\" = \"T\".\"SCHEMA\" AND \"v\".\"TABLE_NAME\" = \"T\".\"NAME\" WHERE \"T\".\"TYPE\" = 'VIEW' ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`;\n        }).join(\" UNION ALL \");\n\n        const dbViews = await this.query(query);\n        return dbViews.map((dbView: any) => {\n            const view = new View();\n            const db = dbView[\"TABLE_CATALOG\"] === currentDatabase ? undefined : dbView[\"TABLE_CATALOG\"];\n            const schema = dbView[\"schema\"] === currentSchema && !this.driver.options.schema ? undefined : dbView[\"schema\"];\n            view.name = this.driver.buildTableName(dbView[\"name\"], schema, db);\n            view.expression = dbView[\"value\"];\n            return view;\n        });\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames: string[]): Promise<Table[]> {\n\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        const schemaNames: string[] = [];\n        const currentSchema = await this.getCurrentSchema();\n        const currentDatabase = await this.getCurrentDatabase();\n\n        const extractTableSchemaAndName = (tableName: string): string[] => {\n            let [database, schema, name] = tableName.split(\".\");\n            // if name is empty, it means that tableName have only schema name and table name or only table name\n            if (!name) {\n                // if schema is empty, it means tableName have only name of a table. Otherwise it means that we have \"schemaName\".\"tableName\" string.\n                if (!schema) {\n                    name = database;\n                    schema = this.driver.options.schema || currentSchema;\n\n                } else {\n                    name = schema;\n                    schema = database;\n                }\n            } else if (schema === \"\") {\n                schema = this.driver.options.schema || currentSchema;\n            }\n\n            return [schema, name];\n        };\n\n        tableNames.filter(tablePath => tablePath.indexOf(\".\") !== -1)\n            .forEach(tablePath => {\n                if (tablePath.split(\".\").length === 3) {\n                    if (tablePath.split(\".\")[1] !== \"\")\n                        schemaNames.push(tablePath.split(\".\")[1]);\n                } else {\n                    schemaNames.push(tablePath.split(\".\")[0]);\n                }\n            });\n        schemaNames.push(this.driver.options.schema || currentSchema);\n\n        const dbNames = tableNames\n            .filter(tablePath => tablePath.split(\".\").length === 3)\n            .map(tablePath => tablePath.split(\".\")[0]);\n        if (this.driver.database && !dbNames.find(dbName => dbName === this.driver.database))\n            dbNames.push(this.driver.database);\n\n        // load tables, columns, indices and foreign keys\n        const schemaNamesString = schemaNames.map(name => \"'\" + name + \"'\").join(\", \");\n\n        const tablesCondition = tableNames.map(tableName => {\n            const [schema, name] = extractTableSchemaAndName(tableName);\n            return `(\"TABLE_SCHEMA\" = '${schema}' AND \"TABLE_NAME\" = '${name}')`;\n        }).join(\" OR \");\n\n        const tablesSql = dbNames.map(dbName => {\n            return `SELECT * FROM \"${dbName}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE ` + tablesCondition;\n        }).join(\" UNION ALL \");\n\n        const columnsSql = dbNames.map(dbName => {\n            return `SELECT * FROM \"${dbName}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" WHERE ` + tablesCondition;\n        }).join(\" UNION ALL \");\n\n        const constraintsCondition = tableNames.map(tableName => {\n            const [schema, name] = extractTableSchemaAndName(tableName);\n            return `(\"columnUsages\".\"TABLE_SCHEMA\" = '${schema}' AND \"columnUsages\".\"TABLE_NAME\" = '${name}' ` +\n             `AND \"tableConstraints\".\"TABLE_SCHEMA\" = '${schema}' AND \"tableConstraints\".\"TABLE_NAME\" = '${name}')`;\n        }).join(\" OR \");\n\n        const constraintsSql = dbNames.map(dbName => {\n            return `SELECT \"columnUsages\".*, \"tableConstraints\".\"CONSTRAINT_TYPE\", \"chk\".\"definition\" ` +\n                `FROM \"${dbName}\".\"INFORMATION_SCHEMA\".\"CONSTRAINT_COLUMN_USAGE\" \"columnUsages\" ` +\n                `INNER JOIN \"${dbName}\".\"INFORMATION_SCHEMA\".\"TABLE_CONSTRAINTS\" \"tableConstraints\" ON \"tableConstraints\".\"CONSTRAINT_NAME\" = \"columnUsages\".\"CONSTRAINT_NAME\" ` +\n                `LEFT JOIN \"${dbName}\".\"sys\".\"check_constraints\" \"chk\" ON \"chk\".\"name\" = \"columnUsages\".\"CONSTRAINT_NAME\" ` +\n                `WHERE (${constraintsCondition}) AND \"tableConstraints\".\"CONSTRAINT_TYPE\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')`;\n        }).join(\" UNION ALL \");\n\n        const foreignKeysSql = dbNames.map(dbName => {\n            return `SELECT \"fk\".\"name\" AS \"FK_NAME\", '${dbName}' AS \"TABLE_CATALOG\", \"s1\".\"name\" AS \"TABLE_SCHEMA\", \"t1\".\"name\" AS \"TABLE_NAME\", ` +\n                `\"col1\".\"name\" AS \"COLUMN_NAME\", \"s2\".\"name\" AS \"REF_SCHEMA\", \"t2\".\"name\" AS \"REF_TABLE\", \"col2\".\"name\" AS \"REF_COLUMN\", ` +\n                `\"fk\".\"delete_referential_action_desc\" AS \"ON_DELETE\", \"fk\".\"update_referential_action_desc\" AS \"ON_UPDATE\" ` +\n                `FROM \"${dbName}\".\"sys\".\"foreign_keys\" \"fk\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"foreign_key_columns\" \"fkc\" ON \"fkc\".\"constraint_object_id\" = \"fk\".\"object_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"tables\" \"t1\" ON \"t1\".\"object_id\" = \"fk\".\"parent_object_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"schemas\" \"s1\" ON \"s1\".\"schema_id\" = \"t1\".\"schema_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"tables\" \"t2\" ON \"t2\".\"object_id\" = \"fk\".\"referenced_object_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"schemas\" \"s2\" ON \"s2\".\"schema_id\" = \"t2\".\"schema_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"columns\" \"col1\" ON \"col1\".\"column_id\" = \"fkc\".\"parent_column_id\" AND \"col1\".\"object_id\" = \"fk\".\"parent_object_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"columns\" \"col2\" ON \"col2\".\"column_id\" = \"fkc\".\"referenced_column_id\" AND \"col2\".\"object_id\" = \"fk\".\"referenced_object_id\"`;\n        }).join(\" UNION ALL \");\n\n        const identityColumnsSql = dbNames.map(dbName => {\n            return `SELECT \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"COLUMN_NAME\", \"TABLE_NAME\" ` +\n                `FROM \"${dbName}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" ` +\n                `WHERE COLUMNPROPERTY(object_id(\"TABLE_CATALOG\" + '.' + \"TABLE_SCHEMA\" + '.' + \"TABLE_NAME\"), \"COLUMN_NAME\", 'IsIdentity') = 1 AND \"TABLE_SCHEMA\" IN (${schemaNamesString})`;\n        }).join(\" UNION ALL \");\n\n        const dbCollationsSql = `SELECT \"NAME\", \"COLLATION_NAME\" FROM \"sys\".\"databases\"`;\n\n        const indicesSql = dbNames.map(dbName => {\n            return `SELECT '${dbName}' AS \"TABLE_CATALOG\", \"s\".\"name\" AS \"TABLE_SCHEMA\", \"t\".\"name\" AS \"TABLE_NAME\", ` +\n                `\"ind\".\"name\" AS \"INDEX_NAME\", \"col\".\"name\" AS \"COLUMN_NAME\", \"ind\".\"is_unique\" AS \"IS_UNIQUE\", \"ind\".\"filter_definition\" as \"CONDITION\" ` +\n                `FROM \"${dbName}\".\"sys\".\"indexes\" \"ind\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"index_columns\" \"ic\" ON \"ic\".\"object_id\" = \"ind\".\"object_id\" AND \"ic\".\"index_id\" = \"ind\".\"index_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"columns\" \"col\" ON \"col\".\"object_id\" = \"ic\".\"object_id\" AND \"col\".\"column_id\" = \"ic\".\"column_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"tables\" \"t\" ON \"t\".\"object_id\" = \"ind\".\"object_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"schemas\" \"s\" ON \"s\".\"schema_id\" = \"t\".\"schema_id\" ` +\n                `WHERE \"ind\".\"is_primary_key\" = 0 AND \"ind\".\"is_unique_constraint\" = 0 AND \"t\".\"is_ms_shipped\" = 0`;\n        }).join(\" UNION ALL \");\n\n        const [\n            dbTables,\n            dbColumns,\n            dbConstraints,\n            dbForeignKeys,\n            dbIdentityColumns,\n            dbCollations,\n            dbIndices\n        ]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(constraintsSql),\n            this.query(foreignKeysSql),\n            this.query(identityColumnsSql),\n            this.query(dbCollationsSql),\n            this.query(indicesSql),\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return await Promise.all(dbTables.map(async dbTable => {\n            const table = new Table();\n\n            // We do not need to join schema and database names, when db or schema is by default.\n            // In this case we need local variable `tableFullName` for below comparision.\n            const db = dbTable[\"TABLE_CATALOG\"] === currentDatabase ? undefined : dbTable[\"TABLE_CATALOG\"];\n            const schema = dbTable[\"TABLE_SCHEMA\"] === currentSchema && !this.driver.options.schema ? undefined : dbTable[\"TABLE_SCHEMA\"];\n            table.name = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], schema, db);\n            const tableFullName = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], dbTable[\"TABLE_SCHEMA\"], dbTable[\"TABLE_CATALOG\"]);\n            const defaultCollation = dbCollations.find(dbCollation => dbCollation[\"NAME\"] === dbTable[\"TABLE_CATALOG\"])!;\n\n            // create columns from the loaded columns\n            table.columns = dbColumns\n                .filter(dbColumn => this.driver.buildTableName(dbColumn[\"TABLE_NAME\"], dbColumn[\"TABLE_SCHEMA\"], dbColumn[\"TABLE_CATALOG\"]) === tableFullName)\n                .map(dbColumn => {\n                    const columnConstraints = dbConstraints.filter(dbConstraint => {\n                        return this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"CONSTRAINT_SCHEMA\"], dbConstraint[\"CONSTRAINT_CATALOG\"]) === tableFullName\n                            && dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                    });\n\n                    const uniqueConstraint = columnConstraints.find(constraint => constraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\");\n                    const isConstraintComposite = uniqueConstraint\n                        ? !!dbConstraints.find(dbConstraint => dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\"\n                            && dbConstraint[\"CONSTRAINT_NAME\"] === uniqueConstraint[\"CONSTRAINT_NAME\"]\n                            && dbConstraint[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"])\n                        : false;\n\n                    const isPrimary = !!columnConstraints.find(constraint =>  constraint[\"CONSTRAINT_TYPE\"] === \"PRIMARY KEY\");\n                    const isGenerated = !!dbIdentityColumns.find(column => {\n                        return this.driver.buildTableName(column[\"TABLE_NAME\"], column[\"TABLE_SCHEMA\"], column[\"TABLE_CATALOG\"]) === tableFullName\n                            && column[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                    });\n\n                    const tableColumn = new TableColumn();\n                    tableColumn.name = dbColumn[\"COLUMN_NAME\"];\n                    tableColumn.type = dbColumn[\"DATA_TYPE\"].toLowerCase();\n\n                    // check only columns that have length property\n                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type as ColumnType) !== -1 && dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"]) {\n                        const length = dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"].toString();\n                        if (length === \"-1\") {\n                            tableColumn.length = \"MAX\";\n                        } else {\n                            tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length) ? length : \"\";\n                        }\n                    }\n\n                    if (tableColumn.type === \"decimal\" || tableColumn.type === \"numeric\") {\n                        if (dbColumn[\"NUMERIC_PRECISION\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"NUMERIC_PRECISION\"]))\n                            tableColumn.precision = dbColumn[\"NUMERIC_PRECISION\"];\n                        if (dbColumn[\"NUMERIC_SCALE\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"NUMERIC_SCALE\"]))\n                            tableColumn.scale = dbColumn[\"NUMERIC_SCALE\"];\n                    }\n\n                    if (tableColumn.type === \"nvarchar\") {\n                        // Check if this is an enum\n                        const columnCheckConstraints = columnConstraints.filter(constraint => constraint[\"CONSTRAINT_TYPE\"] === \"CHECK\");\n                        if (columnCheckConstraints.length) {\n                            const isEnumRegexp = new RegExp(\"^\\\\(\\\\[\" + tableColumn.name + \"\\\\]='[^']+'(?: OR \\\\[\" + tableColumn.name + \"\\\\]='[^']+')*\\\\)$\");\n                            for (const checkConstraint of columnCheckConstraints) {\n                                if (isEnumRegexp.test(checkConstraint[\"definition\"])) {\n                                    // This is an enum constraint, make column into an enum\n                                    tableColumn.type = \"simple-enum\";\n                                    tableColumn.enum = [];\n                                    const enumValueRegexp = new RegExp(\"\\\\[\" + tableColumn.name + \"\\\\]='([^']+)'\", \"g\");\n                                    let result;\n                                    while ((result = enumValueRegexp.exec(checkConstraint[\"definition\"])) !== null) {\n                                        tableColumn.enum.unshift(result[1]);\n                                    }\n                                    // Skip other column constraints\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    tableColumn.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined\n                        ? this.removeParenthesisFromDefault(dbColumn[\"COLUMN_DEFAULT\"])\n                        : undefined;\n                    tableColumn.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\n                    tableColumn.isPrimary = isPrimary;\n                    tableColumn.isUnique = !!uniqueConstraint && !isConstraintComposite;\n                    tableColumn.isGenerated = isGenerated;\n                    if (isGenerated)\n                        tableColumn.generationStrategy = \"increment\";\n                    if (tableColumn.default === \"newsequentialid()\") {\n                        tableColumn.isGenerated = true;\n                        tableColumn.generationStrategy = \"uuid\";\n                        tableColumn.default = undefined;\n                    }\n\n                    // todo: unable to get default charset\n                    // tableColumn.charset = dbColumn[\"CHARACTER_SET_NAME\"];\n                    if (dbColumn[\"COLLATION_NAME\"])\n                        tableColumn.collation = dbColumn[\"COLLATION_NAME\"] === defaultCollation[\"COLLATION_NAME\"] ? undefined : dbColumn[\"COLLATION_NAME\"];\n\n                    if (tableColumn.type === \"datetime2\" || tableColumn.type === \"time\" || tableColumn.type === \"datetimeoffset\") {\n                        tableColumn.precision = !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"DATETIME_PRECISION\"]) ? dbColumn[\"DATETIME_PRECISION\"] : undefined;\n                    }\n\n                    return tableColumn;\n                });\n\n            // find unique constraints of table, group them by constraint name and build TableUnique.\n            const tableUniqueConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"CONSTRAINT_SCHEMA\"], dbConstraint[\"CONSTRAINT_CATALOG\"]) === tableFullName\n                    && dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\";\n            }), dbConstraint => dbConstraint[\"CONSTRAINT_NAME\"]);\n\n            table.uniques = tableUniqueConstraints.map(constraint => {\n                const uniques = dbConstraints.filter(dbC => dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]);\n                return new TableUnique({\n                    name: constraint[\"CONSTRAINT_NAME\"],\n                    columnNames: uniques.map(u => u[\"COLUMN_NAME\"])\n                });\n            });\n\n            // find check constraints of table, group them by constraint name and build TableCheck.\n            const tableCheckConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"CONSTRAINT_SCHEMA\"], dbConstraint[\"CONSTRAINT_CATALOG\"]) === tableFullName\n                    && dbConstraint[\"CONSTRAINT_TYPE\"] === \"CHECK\";\n            }), dbConstraint => dbConstraint[\"CONSTRAINT_NAME\"]);\n\n            table.checks = tableCheckConstraints.map(constraint => {\n                const checks = dbConstraints.filter(dbC => dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]);\n                return new TableCheck({\n                    name: constraint[\"CONSTRAINT_NAME\"],\n                    columnNames: checks.map(c => c[\"COLUMN_NAME\"]),\n                    expression: constraint[\"definition\"]\n                });\n            });\n\n            // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {\n                return this.driver.buildTableName(dbForeignKey[\"TABLE_NAME\"], dbForeignKey[\"TABLE_SCHEMA\"], dbForeignKey[\"TABLE_CATALOG\"]) === tableFullName;\n            }), dbForeignKey => dbForeignKey[\"FK_NAME\"]);\n\n            table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"FK_NAME\"] === dbForeignKey[\"FK_NAME\"]);\n\n                // if referenced table located in currently used db and schema, we don't need to concat db and schema names to table name.\n                const db = dbForeignKey[\"TABLE_CATALOG\"] === currentDatabase ? undefined : dbForeignKey[\"TABLE_CATALOG\"];\n                const schema = dbForeignKey[\"REF_SCHEMA\"] === currentSchema ? undefined : dbForeignKey[\"REF_SCHEMA\"];\n                const referencedTableName = this.driver.buildTableName(dbForeignKey[\"REF_TABLE\"], schema, db);\n\n                return new TableForeignKey({\n                    name: dbForeignKey[\"FK_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedTableName: referencedTableName,\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REF_COLUMN\"]),\n                    onDelete: dbForeignKey[\"ON_DELETE\"].replace(\"_\", \" \"), // SqlServer returns NO_ACTION, instead of NO ACTION\n                    onUpdate: dbForeignKey[\"ON_UPDATE\"].replace(\"_\", \" \") // SqlServer returns NO_ACTION, instead of NO ACTION\n                });\n            });\n\n            // find index constraints of table, group them by constraint name and build TableIndex.\n            const tableIndexConstraints = OrmUtils.uniq(dbIndices.filter(dbIndex => {\n                return this.driver.buildTableName(dbIndex[\"TABLE_NAME\"], dbIndex[\"TABLE_SCHEMA\"], dbIndex[\"TABLE_CATALOG\"]) === tableFullName;\n            }), dbIndex => dbIndex[\"INDEX_NAME\"]);\n\n            table.indices = tableIndexConstraints.map(constraint => {\n                const indices = dbIndices.filter(index => {\n                    return index[\"TABLE_CATALOG\"] === constraint[\"TABLE_CATALOG\"]\n                        && index[\"TABLE_SCHEMA\"] === constraint[\"TABLE_SCHEMA\"]\n                        && index[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"]\n                        && index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"];\n                });\n                return new TableIndex(<TableIndexOptions>{\n                    table: table,\n                    name: constraint[\"INDEX_NAME\"],\n                    columnNames: indices.map(i => i[\"COLUMN_NAME\"]),\n                    isUnique: constraint[\"IS_UNIQUE\"],\n                    where: constraint[\"CONDITION\"]\n                });\n            });\n\n            return table;\n        }));\n    }\n\n    /**\n     * Builds and returns SQL for create table.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(table, column, false, true)).join(\", \");\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;\n\n        table.columns\n            .filter(column => column.isUnique)\n            .forEach(column => {\n                const isUniqueExist = table.uniques.some(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\n                if (!isUniqueExist)\n                    table.uniques.push(new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                        columnNames: [column.name]\n                    }));\n            });\n\n        if (table.uniques.length > 0) {\n            const uniquesSql = table.uniques.map(unique => {\n                const uniqueName = unique.name ? unique.name : this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);\n                const columnNames = unique.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`;\n            }).join(\", \");\n\n            sql += `, ${uniquesSql}`;\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks.map(check => {\n                const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression!);\n                return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`;\n            }).join(\", \");\n\n            sql += `, ${checksSql}`;\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys.map(fk => {\n                const columnNames = fk.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                if (!fk.name)\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);\n                const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n\n                let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(fk.referencedTableName)} (${referencedColumnNames})`;\n                if (fk.onDelete)\n                    constraint += ` ON DELETE ${fk.onDelete}`;\n                if (fk.onUpdate)\n                    constraint += ` ON UPDATE ${fk.onUpdate}`;\n\n                return constraint;\n            }).join(\", \");\n\n            sql += `, ${foreignKeysSql}`;\n        }\n\n        const primaryColumns = table.columns.filter(column => column.isPrimary);\n        if (primaryColumns.length > 0) {\n            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`;\n        }\n\n        sql += `)`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(tableOrName: Table|string, ifExist?: boolean): Query {\n        const query = ifExist ? `DROP TABLE IF EXISTS ${this.escapePath(tableOrName)}` : `DROP TABLE ${this.escapePath(tableOrName)}`;\n        return new Query(query);\n    }\n\n    protected createViewSql(view: View): Query {\n        if (typeof view.expression === \"string\") {\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression}`);\n        } else {\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression(this.connection).getQuery()}`);\n        }\n    }\n\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\n        const currentSchema = await this.getCurrentSchema();\n        const parsedTableName = this.parseTableName(view, currentSchema);\n        const expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n        const [query, parameters] = this.connection.createQueryBuilder()\n            .insert()\n            .into(this.getTypeormMetadataTableName())\n            .values({ type: \"VIEW\", database: parsedTableName.database, schema: parsedTableName.schema, name: parsedTableName.name, value: expression })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(viewOrPath: View|string): Query {\n        return new Query(`DROP VIEW ${this.escapePath(viewOrPath)}`);\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected async deleteViewDefinitionSql(viewOrPath: View|string): Promise<Query> {\n        const currentSchema = await this.getCurrentSchema();\n        const parsedTableName = this.parseTableName(viewOrPath, currentSchema);\n\n        const qb = this.connection.createQueryBuilder();\n        const [query, parameters] = qb.delete()\n            .from(this.getTypeormMetadataTableName())\n            .where(`${qb.escape(\"type\")} = 'VIEW'`)\n            .andWhere(`${qb.escape(\"database\")} = :database`, { database: parsedTableName.database })\n            .andWhere(`${qb.escape(\"schema\")} = :schema`, { schema: parsedTableName.schema })\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name: parsedTableName.name })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON ${this.escapePath(table)} (${columns}) ${index.where ? \"WHERE \" + index.where : \"\"}`);\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(table: Table, indexOrName: TableIndex|string): Query {\n        let indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n        return new Query(`DROP INDEX \"${indexName}\" ON ${this.escapePath(table)}`);\n    }\n\n    /**\n     * Builds create primary key sql.\n     */\n    protected createPrimaryKeySql(table: Table, columnNames: string[]): Query {\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`);\n    }\n\n    /**\n     * Builds drop primary key sql.\n     */\n    protected dropPrimaryKeySql(table: Table): Query {\n        const columnNames = table.primaryColumns.map(column => column.name);\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${primaryKeyName}\"`);\n    }\n\n    /**\n     * Builds create unique constraint sql.\n     */\n    protected createUniqueConstraintSql(table: Table, uniqueConstraint: TableUnique): Query {\n        const columnNames = uniqueConstraint.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (${columnNames})`);\n    }\n\n    /**\n     * Builds drop unique constraint sql.\n     */\n    protected dropUniqueConstraintSql(table: Table, uniqueOrName: TableUnique|string): Query {\n        const uniqueName = uniqueOrName instanceof TableUnique ? uniqueOrName.name : uniqueOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueName}\"`);\n    }\n\n    /**\n     * Builds create check constraint sql.\n     */\n    protected createCheckConstraintSql(table: Table, checkConstraint: TableCheck): Query {\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${checkConstraint.name}\" CHECK (${checkConstraint.expression})`);\n    }\n\n    /**\n     * Builds drop check constraint sql.\n     */\n    protected dropCheckConstraintSql(table: Table, checkOrName: TableCheck|string): Query {\n        const checkName = checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${checkName}\"`);\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(table: Table, foreignKey: TableForeignKey): Query {\n        const columnNames = foreignKey.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\"` + column + `\"`).join(\",\");\n        let sql = `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${foreignKey.name}\" FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;\n        if (foreignKey.onDelete)\n            sql += ` ON DELETE ${foreignKey.onDelete}`;\n        if (foreignKey.onUpdate)\n            sql += ` ON UPDATE ${foreignKey.onUpdate}`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(table: Table, foreignKeyOrName: TableForeignKey|string): Query {\n        const foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${foreignKeyName}\"`);\n    }\n\n    /**\n     * Escapes given table or View path.\n     */\n    protected escapePath(target: Table|View|string, disableEscape?: boolean): string {\n        let name = target instanceof Table || target instanceof View ? target.name : target;\n        if (this.driver.options.schema) {\n            if (name.indexOf(\".\") === -1) {\n                name = `${this.driver.options.schema}.${name}`;\n            } else if (name.split(\".\").length === 3) {\n                const splittedName = name.split(\".\");\n                const dbName = splittedName[0];\n                const tableName = splittedName[2];\n                name = `${dbName}.${this.driver.options.schema}.${tableName}`;\n            }\n        }\n\n        return name.split(\".\").map(i => {\n            // this condition need because when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n            if (i === \"\")\n                return i;\n            return disableEscape ? i : `\"${i}\"`;\n        }).join(\".\");\n    }\n\n    protected parseTableName(target: Table|View|string, schema?: string) {\n        const tableName = (target instanceof Table || target instanceof View) ? target.name : target;\n        if (tableName.split(\".\").length === 3) {\n            return {\n                database: tableName.split(\".\")[0],\n                schema: tableName.split(\".\")[1] === \"\" ? schema || \"SCHEMA_NAME()\" : tableName.split(\".\")[1],\n                name: tableName.split(\".\")[2]\n            };\n        } else if (tableName.split(\".\").length === 2) {\n            return {\n                database: this.driver.database,\n                schema: tableName.split(\".\")[0],\n                name: tableName.split(\".\")[1]\n            };\n        } else {\n            return {\n                database: this.driver.database,\n                schema: this.driver.options.schema ? this.driver.options.schema : schema || \"SCHEMA_NAME()\",\n                name: tableName\n            };\n        }\n    }\n\n    /**\n     * Concat database name and schema name to the foreign key name.\n     * Needs because FK name is relevant to the schema and database.\n     */\n    protected buildForeignKeyName(fkName: string, schemaName: string|undefined, dbName: string|undefined): string {\n        let joinedFkName = fkName;\n        if (schemaName)\n            joinedFkName = schemaName + \".\" + joinedFkName;\n        if (dbName)\n            joinedFkName = dbName + \".\" + joinedFkName;\n\n        return joinedFkName;\n    }\n\n    /**\n     * Removes parenthesis around default value.\n     * Sql server returns default value with parenthesis around, e.g.\n     *  ('My text') - for string\n     *  ((1)) - for number\n     *  (newsequentialId()) - for function\n     */\n    protected removeParenthesisFromDefault(defaultValue: string): any {\n        if (defaultValue.substr(0, 1) !== \"(\")\n            return defaultValue;\n        const normalizedDefault = defaultValue.substr(1, defaultValue.lastIndexOf(\")\") - 1);\n        return this.removeParenthesisFromDefault(normalizedDefault);\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(table: Table, column: TableColumn, skipIdentity: boolean, createDefault: boolean) {\n        let c = `\"${column.name}\" ${this.connection.driver.createFullType(column)}`;\n\n        if (column.enum)\n            c += \" CHECK( \" + column.name + \" IN (\" + column.enum.map(val => \"'\" + val + \"'\").join(\",\") + \") )\";\n\n        if (column.collation)\n            c += \" COLLATE \" + column.collation;\n\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n\n        if (column.isGenerated === true && column.generationStrategy === \"increment\" && !skipIdentity) // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" IDENTITY(1,1)\";\n\n        if (column.default !== undefined && column.default !== null && createDefault) {\n            // we create named constraint to be able to delete this constraint when column been dropped\n            const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n            c += ` CONSTRAINT \"${defaultName}\" DEFAULT ${column.default}`;\n        }\n\n        if (column.isGenerated && column.generationStrategy === \"uuid\" && !column.default) {\n            // we create named constraint to be able to delete this constraint when column been dropped\n            const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n            c += ` CONSTRAINT \"${defaultName}\" DEFAULT NEWSEQUENTIALID()`;\n        }\n        return c;\n    }\n\n    /**\n     * Converts MssqlParameter into real mssql parameter type.\n     */\n    protected mssqlParameterToNativeParameter(parameter: MssqlParameter): any {\n        switch (this.driver.normalizeType({ type: parameter.type as any })) {\n            case \"bit\":\n                return this.driver.mssql.Bit;\n            case \"bigint\":\n                return this.driver.mssql.BigInt;\n            case \"decimal\":\n                return this.driver.mssql.Decimal(...parameter.params);\n            case \"float\":\n                return this.driver.mssql.Float;\n            case \"int\":\n                return this.driver.mssql.Int;\n            case \"money\":\n                return this.driver.mssql.Money;\n            case \"numeric\":\n                return this.driver.mssql.Numeric(...parameter.params);\n            case \"smallint\":\n                return this.driver.mssql.SmallInt;\n            case \"smallmoney\":\n                return this.driver.mssql.SmallMoney;\n            case \"real\":\n                return this.driver.mssql.Real;\n            case \"tinyint\":\n                return this.driver.mssql.TinyInt;\n            case \"char\":\n                return this.driver.mssql.Char(...parameter.params);\n            case \"nchar\":\n                return this.driver.mssql.NChar(...parameter.params);\n            case \"text\":\n                return this.driver.mssql.Text;\n            case \"ntext\":\n                return this.driver.mssql.Ntext;\n            case \"varchar\":\n                return this.driver.mssql.VarChar(...parameter.params);\n            case \"nvarchar\":\n                return this.driver.mssql.NVarChar(...parameter.params);\n            case \"xml\":\n                return this.driver.mssql.Xml;\n            case \"time\":\n                return this.driver.mssql.Time(...parameter.params);\n            case \"date\":\n                return this.driver.mssql.Date;\n            case \"datetime\":\n                return this.driver.mssql.DateTime;\n            case \"datetime2\":\n                return this.driver.mssql.DateTime2(...parameter.params);\n            case \"datetimeoffset\":\n                return this.driver.mssql.DateTimeOffset(...parameter.params);\n            case \"smalldatetime\":\n                return this.driver.mssql.SmallDateTime;\n            case \"uniqueidentifier\":\n                return this.driver.mssql.UniqueIdentifier;\n            case \"variant\":\n                return this.driver.mssql.Variant;\n            case \"binary\":\n                return this.driver.mssql.Binary;\n            case \"varbinary\":\n                return this.driver.mssql.VarBinary(...parameter.params);\n            case \"image\":\n                return this.driver.mssql.Image;\n            case \"udt\":\n                return this.driver.mssql.UDT;\n            case \"rowversion\":\n                return this.driver.mssql.RowVersion;\n        }\n    }\n\n    /**\n     * Converts string literal of isolation level to enum.\n     * The underlying mssql driver requires an enum for the isolation level.\n     */\n    convertIsolationLevel(isolation: IsolationLevel) {\n        const ISOLATION_LEVEL = this.driver.mssql.ISOLATION_LEVEL;\n        switch (isolation) {\n            case \"READ UNCOMMITTED\":\n                return ISOLATION_LEVEL.READ_UNCOMMITTED;\n            case \"REPEATABLE READ\":\n                return ISOLATION_LEVEL.REPEATABLE_READ;\n            case \"SERIALIZABLE\":\n                return ISOLATION_LEVEL.SERIALIZABLE;\n\n            case \"READ COMMITTED\":\n            default:\n                return ISOLATION_LEVEL.READ_COMMITTED;\n        }\n    }\n\n}\n","import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {ColumnType, QueryFailedError} from \"../../index\";\nimport {ReadStream} from \"../../platform/PlatformTools\";\nimport {BaseQueryRunner} from \"../../query-runner/BaseQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {TableIndexOptions} from \"../../schema-builder/options/TableIndexOptions\";\nimport {Table} from \"../../schema-builder/table/Table\";\nimport {TableCheck} from \"../../schema-builder/table/TableCheck\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {TableExclusion} from \"../../schema-builder/table/TableExclusion\";\nimport {TableForeignKey} from \"../../schema-builder/table/TableForeignKey\";\nimport {TableIndex} from \"../../schema-builder/table/TableIndex\";\nimport {TableUnique} from \"../../schema-builder/table/TableUnique\";\nimport {View} from \"../../schema-builder/view/View\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {Query} from \"../Query\";\nimport {IsolationLevel} from \"../types/IsolationLevel\";\nimport {SapDriver} from \"./SapDriver\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\nimport {BroadcasterResult} from \"../../subscriber/BroadcasterResult\";\n\n/**\n * Runs queries on a single SQL Server database connection.\n */\nexport class SapQueryRunner extends BaseQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: SapDriver;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Last executed query in a transaction.\n     * This is needed because we cannot rely on parallel queries because we use second query\n     * to select CURRENT_IDENTITY_VALUE()\n     */\n    protected queryResponsibilityChain: Promise<any>[] = [];\n\n    /**\n     * Promise used to obtain a database connection from a pool for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: SapDriver, mode: ReplicationMode) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n        this.mode = mode;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    async connect(): Promise<any> {\n        if (this.databaseConnection)\n            return this.databaseConnection;\n\n        this.databaseConnection = await this.driver.obtainMasterConnection();\n\n        return this.databaseConnection;\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        this.isReleased = true;\n\n        if (this.databaseConnection) {\n            return this.driver.master.release(this.databaseConnection);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        this.isTransactionActive = true;\n        if (isolationLevel) {\n            await this.query(`SET TRANSACTION ISOLATION LEVEL ${isolationLevel || \"\"}`);\n        }\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        await this.query(\"COMMIT\");\n        this.isTransactionActive = false;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        await this.query(\"ROLLBACK\");\n        this.isTransactionActive = false;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let waitingOkay: Function;\n        const waitingPromise = new Promise((ok) => waitingOkay = ok);\n        if (this.queryResponsibilityChain.length) {\n            const otherWaitingPromises = [...this.queryResponsibilityChain];\n            this.queryResponsibilityChain.push(waitingPromise);\n            await Promise.all(otherWaitingPromises);\n        }\n\n        const promise = new Promise(async (ok, fail) => {\n           try {\n               const databaseConnection = await this.connect();\n               // we disable autocommit because ROLLBACK does not work in autocommit mode\n               databaseConnection.setAutoCommit(!this.isTransactionActive);\n               this.driver.connection.logger.logQuery(query, parameters, this);\n               const queryStartTime = +new Date();\n               const isInsertQuery = query.substr(0, 11) === \"INSERT INTO\";\n\n               const statement = databaseConnection.prepare(query);\n               statement.exec(parameters, (err: any, result: any) => {\n\n                   // log slow queries if maxQueryExecution time is set\n                   const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                   const queryEndTime = +new Date();\n                   const queryExecutionTime = queryEndTime - queryStartTime;\n                   if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                       this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                   const resolveChain = () => {\n                       if (promiseIndex !== -1)\n                           this.queryResponsibilityChain.splice(promiseIndex, 1);\n                       if (waitingPromiseIndex !== -1)\n                           this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\n                       waitingOkay();\n                   };\n\n                   let promiseIndex = this.queryResponsibilityChain.indexOf(promise);\n                   let waitingPromiseIndex = this.queryResponsibilityChain.indexOf(waitingPromise);\n                   if (err) {\n                       this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                       resolveChain();\n                       return fail(new QueryFailedError(query, parameters, err));\n\n                   } else {\n                       if (isInsertQuery) {\n                           const lastIdQuery = `SELECT CURRENT_IDENTITY_VALUE() FROM \"SYS\".\"DUMMY\"`;\n                           this.driver.connection.logger.logQuery(lastIdQuery, [], this);\n                           databaseConnection.exec(lastIdQuery, (err: any, result: { \"CURRENT_IDENTITY_VALUE()\": number }[]) => {\n                               if (err) {\n                                   this.driver.connection.logger.logQueryError(err, lastIdQuery, [], this);\n                                   resolveChain();\n                                   fail(new QueryFailedError(lastIdQuery, [], err));\n                                   return;\n                               }\n                               ok(result[0][\"CURRENT_IDENTITY_VALUE()\"]);\n                               resolveChain();\n                           });\n                       } else {\n                           ok(result);\n                           resolveChain();\n                       }\n                   }\n               });\n           } catch (err) {\n                fail(err);\n            }\n        });\n\n        // with this condition, Promise.all causes unexpected behavior.\n        // if (this.isTransactionActive)\n        this.queryResponsibilityChain.push(promise);\n        return promise;\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    async stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        throw new Error(`Stream is not supported by SAP driver.`);\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        const results: ObjectLiteral[] = await this.query(`SELECT DATABASE_NAME FROM \"SYS\".\"M_DATABASES\"`);\n        return results.map(result => result[\"DATABASE_NAME\"]);\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        const query = database ? `SELECT * FROM \"${database}\".\"SYS\".\"SCHEMAS\"` : `SELECT * FROM \"SYS\".\"SCHEMAS\"`;\n        const results: ObjectLiteral[] = await this.query(query);\n        return results.map(result => result[\"SCHEMA_NAME\"]);\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        const databases = await this.getDatabases();\n        return databases.indexOf(database) !== -1;\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        const schemas = await this.getSchemas();\n        return schemas.indexOf(schema) !== -1;\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table|string): Promise<boolean> {\n        const parsedTableName = this.parseTableName(tableOrName);\n        const sql = `SELECT * FROM \"SYS\".\"TABLES\" WHERE \"SCHEMA_NAME\" = ${parsedTableName.schema} AND \"TABLE_NAME\" = ${parsedTableName.tableName}`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableOrName: Table|string, columnName: string): Promise<boolean> {\n        const parsedTableName = this.parseTableName(tableOrName);\n        const sql = `SELECT * FROM \"SYS\".\"TABLE_COLUMNS\" WHERE \"SCHEMA_NAME\" = ${parsedTableName.schema} AND \"TABLE_NAME\" = ${parsedTableName.tableName} AND \"COLUMN_NAME\" = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(database: string, ifNotExist?: boolean): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(schema: string, ifNotExist?: boolean): Promise<void> {\n        let exist = false;\n        if (ifNotExist) {\n            const result = await this.query(`SELECT * FROM \"SYS\".\"SCHEMAS\" WHERE \"SCHEMA_NAME\" = '${schema}'`);\n            exist = !!result.length;\n        }\n        if (!ifNotExist || (ifNotExist && !exist)) {\n            const up = `CREATE SCHEMA \"${schema}\"`;\n            const down = `DROP SCHEMA \"${schema}\" CASCADE`;\n            await this.executeQueries(new Query(up), new Query(down));\n        }\n    }\n\n    /**\n     * Drops table schema\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean, isCascade?: boolean): Promise<void> {\n        const schema = schemaPath.indexOf(\".\") === -1 ? schemaPath : schemaPath.split(\".\")[0];\n        let exist = false;\n        if (ifExist) {\n            const result = await this.query(`SELECT * FROM \"SYS\".\"SCHEMAS\" WHERE \"SCHEMA_NAME\" = '${schema}'`);\n            exist = !!result.length;\n        }\n        if (!ifExist || (ifExist && exist)) {\n            const up = `DROP SCHEMA \"${schema}\" ${isCascade ? \"CASCADE\" : \"\"}`;\n            const down = `CREATE SCHEMA \"${schema}\"`;\n            await this.executeQueries(new Query(up), new Query(down));\n        }\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(table: Table, ifNotExist: boolean = false, createForeignKeys: boolean = true, createIndices: boolean = true): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table);\n            if (isTableExist) return Promise.resolve();\n        }\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(this.createTableSql(table, createForeignKeys));\n        downQueries.push(this.dropTableSql(table));\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        if (createIndices) {\n            table.indices.forEach(index => {\n\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                upQueries.push(this.createIndexSql(table, index));\n                downQueries.push(this.dropIndexSql(table, index));\n            });\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableOrName: Table|string, ifExist?: boolean, dropForeignKeys: boolean = true, dropIndices: boolean = true): Promise<void> {\n        if (ifExist) {\n            const isTableExist = await this.hasTable(tableOrName);\n            if (!isTableExist) return Promise.resolve();\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys;\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n\n        if (dropIndices) {\n            table.indices.forEach(index => {\n                upQueries.push(this.dropIndexSql(table, index));\n                downQueries.push(this.createIndexSql(table, index));\n            });\n        }\n\n        // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (dropForeignKeys)\n            table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        upQueries.push(this.dropTableSql(table));\n        downQueries.push(this.createTableSql(table, createForeignKeys));\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(view: View): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.createViewSql(view));\n        upQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.deleteViewDefinitionSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View|string): Promise<void> {\n        const viewName = target instanceof View ? target.name : target;\n        const view = await this.getCachedView(viewName);\n\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(await this.deleteViewDefinitionSql(view));\n        upQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.createViewSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Renames a table.\n     */\n    async renameTable(oldTableOrName: Table|string, newTableName: string): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        const oldTable = oldTableOrName instanceof Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);\n        const newTable = oldTable.clone();\n        const oldTableName = oldTable.name.indexOf(\".\") === -1 ? oldTable.name : oldTable.name.split(\".\")[1];\n        const schemaName = oldTable.name.indexOf(\".\") === -1 ? undefined : oldTable.name.split(\".\")[0];\n        newTable.name = schemaName ? `${schemaName}.${newTableName}` : newTableName;\n\n        // rename table\n        upQueries.push(new Query(`RENAME TABLE ${this.escapePath(oldTable.name)} TO ${this.escapePath(newTableName)}`));\n        downQueries.push(new Query(`RENAME TABLE ${this.escapePath(newTable.name)} TO ${this.escapePath(oldTableName)}`));\n\n        // drop old FK's. Foreign keys must be dropped before the primary keys are dropped\n        newTable.foreignKeys.forEach(foreignKey => {\n            upQueries.push(this.dropForeignKeySql(newTable, foreignKey));\n            downQueries.push(this.createForeignKeySql(newTable, foreignKey));\n        });\n\n        // SAP HANA does not allow to drop PK's which is referenced by foreign keys.\n        // To avoid this, we must drop all referential foreign keys and recreate them later\n        const referencedForeignKeySql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = '${schemaName}' AND \"REFERENCED_TABLE_NAME\" = '${oldTableName}'`;\n        const dbForeignKeys: ObjectLiteral[] = await this.query(referencedForeignKeySql);\n        let referencedForeignKeys: TableForeignKey[] = [];\n        const referencedForeignKeyTableMapping: { tableName: string, fkName: string }[] = [];\n        if (dbForeignKeys.length > 0) {\n            referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey[\"SCHEMA_NAME\"]}.${dbForeignKey[\"TABLE_NAME\"]}`, fkName: dbForeignKey[\"CONSTRAINT_NAME\"] });\n                return new TableForeignKey({\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedTableName: newTable.name, // we use renamed table name\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                    onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                    onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                });\n            });\n\n            // drop referenced foreign keys\n            referencedForeignKeys.forEach(foreignKey => {\n                const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                upQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                downQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            });\n        }\n\n        // rename primary key constraint\n        if (newTable.primaryColumns.length > 0) {\n            const columnNames = newTable.primaryColumns.map(column => column.name);\n            const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\n            const newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);\n\n            // drop old PK\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} DROP CONSTRAINT \"${oldPkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} ADD CONSTRAINT \"${oldPkName}\" PRIMARY KEY (${columnNamesString})`));\n\n            // create new PK\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} ADD CONSTRAINT \"${newPkName}\" PRIMARY KEY (${columnNamesString})`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} DROP CONSTRAINT \"${newPkName}\"`));\n        }\n\n        // recreate foreign keys with new constraint names\n        newTable.foreignKeys.forEach(foreignKey => {\n            // replace constraint name\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n            // create new FK's\n            upQueries.push(this.createForeignKeySql(newTable, foreignKey));\n            downQueries.push(this.dropForeignKeySql(newTable, foreignKey));\n        });\n\n        // restore referenced foreign keys\n        referencedForeignKeys.forEach(foreignKey => {\n            const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n            upQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            downQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n        });\n\n        // rename index constraints\n        newTable.indices.forEach(index => {\n            // build new constraint name\n            const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n\n            // drop old index\n            upQueries.push(this.dropIndexSql(newTable, index));\n            downQueries.push(this.createIndexSql(newTable, index));\n\n            // replace constraint name\n            index.name = newIndexName;\n\n            // create new index\n            upQueries.push(this.createIndexSql(newTable, index));\n            downQueries.push(this.dropIndexSql(newTable, index));\n        });\n\n        await this.executeQueries(upQueries, downQueries);\n\n        // rename old table and replace it in cached tabled;\n        oldTable.name = newTable.name;\n        this.replaceCachedTable(oldTable, newTable);\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(tableOrName: Table|string, column: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const parsedTableName = this.parseTableName(table);\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(new Query(this.addColumnSql(table, column)));\n        downQueries.push(new Query(this.dropColumnSql(table, column)));\n\n        // create or update primary key constraint\n        if (column.isPrimary) {\n            const primaryColumns = clonedTable.primaryColumns;\n            // if table already have primary key, me must drop it and recreate again\n            if (primaryColumns.length > 0) {\n                // SAP HANA does not allow to drop PK's which is referenced by foreign keys.\n                // To avoid this, we must drop all referential foreign keys and recreate them later\n                const referencedForeignKeySql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = ${parsedTableName.schema} AND \"REFERENCED_TABLE_NAME\" = ${parsedTableName.tableName}`;\n                const dbForeignKeys: ObjectLiteral[] = await this.query(referencedForeignKeySql);\n                let referencedForeignKeys: TableForeignKey[] = [];\n                const referencedForeignKeyTableMapping: { tableName: string, fkName: string }[] = [];\n                if (dbForeignKeys.length > 0) {\n                    referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {\n                        const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                        referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey[\"SCHEMA_NAME\"]}.${dbForeignKey[\"TABLE_NAME\"]}`, fkName: dbForeignKey[\"CONSTRAINT_NAME\"] });\n                        return new TableForeignKey({\n                            name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                            columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                            referencedTableName: table.name,\n                            referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                            onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                            onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                        });\n                    });\n\n                    // drop referenced foreign keys\n                    referencedForeignKeys.forEach(foreignKey => {\n                        const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                        upQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                        downQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n                    });\n                }\n\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n\n                // restore referenced foreign keys\n                referencedForeignKeys.forEach(foreignKey => {\n                    const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                    upQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n                    downQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                });\n            }\n\n            primaryColumns.push(column);\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n        }\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            upQueries.push(this.createIndexSql(table, columnIndex));\n            downQueries.push(this.dropIndexSql(table, columnIndex));\n\n        } else if (column.isUnique) {\n            const uniqueIndex = new TableIndex({\n                name: this.connection.namingStrategy.indexName(table.name, [column.name]),\n                columnNames: [column.name],\n                isUnique: true\n            });\n            clonedTable.indices.push(uniqueIndex);\n            clonedTable.uniques.push(new TableUnique({\n                name: uniqueIndex.name,\n                columnNames: uniqueIndex.columnNames\n            }));\n            upQueries.push(this.createIndexSql(table, uniqueIndex));\n            downQueries.push(this.dropIndexSql(table, uniqueIndex));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.addColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newTableColumnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        let newColumn: TableColumn|undefined = undefined;\n        if (newTableColumnOrName instanceof TableColumn) {\n            newColumn = newTableColumnOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newTableColumnOrName;\n        }\n\n        await this.changeColumn(table, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newColumn: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        let clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        const oldColumn = oldTableColumnOrName instanceof TableColumn\n            ? oldTableColumnOrName\n            : table.columns.find(column => column.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        if ((newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== \"uuid\") || newColumn.type !== oldColumn.type || newColumn.length !== oldColumn.length) {\n            // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n            await this.dropColumn(table, oldColumn);\n            await this.addColumn(table, newColumn);\n\n            // update cloned table\n            clonedTable = table.clone();\n\n        } else {\n            if (newColumn.name !== oldColumn.name) {\n\n                // rename column\n                upQueries.push(new Query(`RENAME COLUMN ${this.escapePath(table)}.\"${oldColumn.name}\" TO \"${newColumn.name}\"`));\n                downQueries.push(new Query(`RENAME COLUMN ${this.escapePath(table)}.\"${newColumn.name}\" TO \"${oldColumn.name}\"`));\n\n                if (oldColumn.isPrimary === true) {\n                    const primaryColumns = clonedTable.primaryColumns;\n\n                    // build old primary constraint name\n                    const columnNames = primaryColumns.map(column => column.name);\n                    const oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    // replace old column name with new column name\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n                    columnNames.push(newColumn.name);\n                    const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n\n                    // drop old PK\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${oldPkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${oldPkName}\" PRIMARY KEY (${columnNamesString})`));\n\n                    // build new primary constraint name\n                    const newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    // create new PK\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${newPkName}\" PRIMARY KEY (${columnNamesString})`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${newPkName}\"`));\n                }\n\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach(index => {\n                    // build new constraint name\n                    index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                    index.columnNames.push(newColumn.name);\n                    const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n\n                    // drop old index\n                    upQueries.push(this.dropIndexSql(clonedTable, index));\n                    downQueries.push(this.createIndexSql(clonedTable, index));\n\n                    // replace constraint name\n                    index.name = newIndexName;\n\n                    // create new index\n                    upQueries.push(this.createIndexSql(clonedTable, index));\n                    downQueries.push(this.dropIndexSql(clonedTable, index));\n                });\n\n                // rename foreign key constraints\n                clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {\n                    // build new constraint name\n                    foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                    foreignKey.columnNames.push(newColumn.name);\n                    const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n                    upQueries.push(this.dropForeignKeySql(clonedTable, foreignKey));\n                    downQueries.push(this.createForeignKeySql(clonedTable, foreignKey));\n\n                    // replace constraint name\n                    foreignKey.name = newForeignKeyName;\n\n                    // create new FK's\n                    upQueries.push(this.createForeignKeySql(clonedTable, foreignKey));\n                    downQueries.push(this.dropForeignKeySql(clonedTable, foreignKey));\n                });\n\n                // rename check constraints\n                clonedTable.findColumnChecks(oldColumn).forEach(check => {\n                    // build new constraint name\n                    check.columnNames!.splice(check.columnNames!.indexOf(oldColumn.name), 1);\n                    check.columnNames!.push(newColumn.name);\n                    const newCheckName = this.connection.namingStrategy.checkConstraintName(clonedTable, check.expression!);\n\n                    upQueries.push(this.dropCheckConstraintSql(clonedTable, check));\n                    downQueries.push(this.createCheckConstraintSql(clonedTable, check));\n\n                    // replace constraint name\n                    check.name = newCheckName;\n\n                    upQueries.push(this.createCheckConstraintSql(clonedTable, check));\n                    downQueries.push(this.dropCheckConstraintSql(clonedTable, check));\n                });\n\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);\n                clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn!)].name = newColumn.name;\n                oldColumn.name = newColumn.name;\n            }\n\n            if (this.isColumnChanged(oldColumn, newColumn)) {\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (${this.buildCreateColumnSql(newColumn)})`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (${this.buildCreateColumnSql(oldColumn)})`));\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                const primaryColumns = clonedTable.primaryColumns;\n\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                }\n\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn);\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = true;\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n\n                } else {\n                    const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);\n                    primaryColumns.splice(primaryColumns.indexOf(primaryColumn!), 1);\n\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = false;\n\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                        const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    }\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueIndex = new TableIndex({\n                        name: this.connection.namingStrategy.indexName(table.name, [newColumn.name]),\n                        columnNames: [newColumn.name],\n                        isUnique: true\n                    });\n                    clonedTable.indices.push(uniqueIndex);\n                    clonedTable.uniques.push(new TableUnique({\n                        name: uniqueIndex.name,\n                        columnNames: uniqueIndex.columnNames\n                    }));\n                    upQueries.push(this.createIndexSql(table, uniqueIndex));\n                    downQueries.push(this.dropIndexSql(table, uniqueIndex));\n\n                } else {\n                    const uniqueIndex = clonedTable.indices.find(index => {\n                        return index.columnNames.length === 1 && index.isUnique === true && !!index.columnNames.find(columnName => columnName === newColumn.name);\n                    });\n                    clonedTable.indices.splice(clonedTable.indices.indexOf(uniqueIndex!), 1);\n\n                    const tableUnique = clonedTable.uniques.find(unique => unique.name === uniqueIndex!.name);\n                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(tableUnique!), 1);\n\n                    upQueries.push(this.dropIndexSql(table, uniqueIndex!));\n                    downQueries.push(this.createIndexSql(table, uniqueIndex!));\n                }\n            }\n\n            if (newColumn.default !== oldColumn.default) {\n                if (newColumn.default !== null && newColumn.default !== undefined) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (\"${newColumn.name}\" ${this.connection.driver.createFullType(newColumn)} DEFAULT ${newColumn.default})`));\n\n                    if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (\"${oldColumn.name}\" ${this.connection.driver.createFullType(oldColumn)} DEFAULT ${oldColumn.default})`));\n                    } else {\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (\"${oldColumn.name}\" ${this.connection.driver.createFullType(oldColumn)} DEFAULT NULL)`));\n                    }\n\n                } else if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (\"${newColumn.name}\" ${this.connection.driver.createFullType(newColumn)} DEFAULT NULL)`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (\"${oldColumn.name}\" ${this.connection.driver.createFullType(oldColumn)} DEFAULT ${oldColumn.default})`));\n                }\n            }\n\n            await this.executeQueries(upQueries, downQueries);\n            this.replaceCachedTable(table, clonedTable);\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableOrName: Table|string, changedColumns: { newColumn: TableColumn, oldColumn: TableColumn }[]): Promise<void> {\n        for (const {oldColumn, newColumn} of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn)\n        }\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableOrName: Table|string, columnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const parsedTableName = this.parseTableName(table);\n        const column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n        if (!column)\n            throw new Error(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\n\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // drop primary key constraint\n        if (column.isPrimary) {\n            // SAP HANA does not allow to drop PK's which is referenced by foreign keys.\n            // To avoid this, we must drop all referential foreign keys and recreate them later\n            const referencedForeignKeySql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = ${parsedTableName.schema} AND \"REFERENCED_TABLE_NAME\" = ${parsedTableName.tableName}`;\n            const dbForeignKeys: ObjectLiteral[] = await this.query(referencedForeignKeySql);\n            let referencedForeignKeys: TableForeignKey[] = [];\n            const referencedForeignKeyTableMapping: { tableName: string, fkName: string }[] = [];\n            if (dbForeignKeys.length > 0) {\n                referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {\n                    const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                    referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey[\"SCHEMA_NAME\"]}.${dbForeignKey[\"TABLE_NAME\"]}`, fkName: dbForeignKey[\"CONSTRAINT_NAME\"] });\n                    return new TableForeignKey({\n                        name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                        columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                        referencedTableName: table.name,\n                        referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                        onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                        onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                    });\n                });\n\n                // drop referenced foreign keys\n                referencedForeignKeys.forEach(foreignKey => {\n                    const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                    upQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                    downQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n                });\n            }\n\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n            const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name);\n            tableColumn!.isPrimary = false;\n\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            }\n\n            // restore referenced foreign keys\n            referencedForeignKeys.forEach(foreignKey => {\n                const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                upQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n                downQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n            });\n        }\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n            upQueries.push(this.dropIndexSql(table, columnIndex));\n            downQueries.push(this.createIndexSql(table, columnIndex));\n\n        } else if (column.isUnique) {\n            // we splice constraints both from table uniques and indices.\n            const uniqueName = this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]);\n            const foundUnique = clonedTable.uniques.find(unique => unique.name === uniqueName);\n            if (foundUnique) {\n                clonedTable.uniques.splice(clonedTable.uniques.indexOf(foundUnique), 1);\n                upQueries.push(this.dropIndexSql(table, uniqueName));\n                downQueries.push(new Query(`CREATE UNIQUE INDEX \"${uniqueName}\" ON ${this.escapePath(table)} (\"${column.name}\")`));\n            }\n\n            const indexName = this.connection.namingStrategy.indexName(table.name, [column.name]);\n            const foundIndex = clonedTable.indices.find(index => index.name === indexName);\n            if (foundIndex) {\n                clonedTable.indices.splice(clonedTable.indices.indexOf(foundIndex), 1);\n                upQueries.push(this.dropIndexSql(table, indexName));\n                downQueries.push(new Query(`CREATE UNIQUE INDEX \"${indexName}\" ON ${this.escapePath(table)} (\"${column.name}\")`));\n            }\n        }\n\n        // drop column check\n        const columnCheck = clonedTable.checks.find(check => !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name);\n        if (columnCheck) {\n            clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n        }\n\n        upQueries.push(new Query(this.dropColumnSql(table, column)));\n        downQueries.push(new Query(this.addColumnSql(table, column)));\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.removeColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(tableOrName: Table|string, columnNames: string[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n\n        const up = this.createPrimaryKeySql(table, columnNames);\n\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n        clonedTable.columns.forEach(column => {\n            if (columnNames.find(columnName => columnName === column.name))\n                column.isPrimary = true;\n        });\n        const down = this.dropPrimaryKeySql(clonedTable);\n\n        await this.executeQueries(up, down);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const parsedTableName = this.parseTableName(table);\n        const clonedTable = table.clone();\n        const columnNames = columns.map(column => column.name);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // SAP HANA does not allow to drop PK's which is referenced by foreign keys.\n        // To avoid this, we must drop all referential foreign keys and recreate them later\n        const referencedForeignKeySql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = ${parsedTableName.schema} AND \"REFERENCED_TABLE_NAME\" = ${parsedTableName.tableName}`;\n        const dbForeignKeys: ObjectLiteral[] = await this.query(referencedForeignKeySql);\n        let referencedForeignKeys: TableForeignKey[] = [];\n        const referencedForeignKeyTableMapping: { tableName: string, fkName: string }[] = [];\n        if (dbForeignKeys.length > 0) {\n            referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey[\"SCHEMA_NAME\"]}.${dbForeignKey[\"TABLE_NAME\"]}`, fkName: dbForeignKey[\"CONSTRAINT_NAME\"] });\n                return new TableForeignKey({\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedTableName: table.name,\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                    onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                    onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                });\n            });\n\n            // drop referenced foreign keys\n            referencedForeignKeys.forEach(foreignKey => {\n                const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                upQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                downQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            });\n        }\n\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns;\n        if (primaryColumns.length > 0) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNamesString = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        }\n\n        // update columns in table.\n        clonedTable.columns\n            .filter(column => columnNames.indexOf(column.name) !== -1)\n            .forEach(column => column.isPrimary = true);\n\n        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n\n        // restore referenced foreign keys\n        referencedForeignKeys.forEach(foreignKey => {\n            const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n            upQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            downQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n        });\n\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName: Table|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const parsedTableName = this.parseTableName(table);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // SAP HANA does not allow to drop PK's which is referenced by foreign keys.\n        // To avoid this, we must drop all referential foreign keys and recreate them later\n        const referencedForeignKeySql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = ${parsedTableName.schema} AND \"REFERENCED_TABLE_NAME\" = ${parsedTableName.tableName}`;\n        const dbForeignKeys: ObjectLiteral[] = await this.query(referencedForeignKeySql);\n        let referencedForeignKeys: TableForeignKey[] = [];\n        const referencedForeignKeyTableMapping: { tableName: string, fkName: string }[] = [];\n        if (dbForeignKeys.length > 0) {\n            referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey[\"SCHEMA_NAME\"]}.${dbForeignKey[\"TABLE_NAME\"]}`, fkName: dbForeignKey[\"CONSTRAINT_NAME\"] });\n                return new TableForeignKey({\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedTableName: table.name,\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                    onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                    onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                });\n            });\n\n            // drop referenced foreign keys\n            referencedForeignKeys.forEach(foreignKey => {\n                const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                upQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                downQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            });\n        }\n\n        upQueries.push(this.dropPrimaryKeySql(table));\n        downQueries.push(this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name)));\n\n        // restore referenced foreign keys\n        referencedForeignKeys.forEach(foreignKey => {\n            const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n            upQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            downQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n        });\n\n        await this.executeQueries(upQueries, downQueries);\n        table.primaryColumns.forEach(column => {\n            column.isPrimary = false;\n        });\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(tableOrName: Table|string, uniqueConstraint: TableUnique): Promise<void> {\n        throw new Error(`SAP HANA does not support unique constraints. Use unique index instead.`);\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        throw new Error(`SAP HANA does not support unique constraints. Use unique index instead.`);\n    }\n\n    /**\n     * Drops unique constraint.\n     */\n    async dropUniqueConstraint(tableOrName: Table|string, uniqueOrName: TableUnique|string): Promise<void> {\n        throw new Error(`SAP HANA does not support unique constraints. Use unique index instead.`);\n    }\n\n    /**\n     * Drops an unique constraints.\n     */\n    async dropUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        throw new Error(`SAP HANA does not support unique constraints. Use unique index instead.`);\n    }\n\n    /**\n     * Creates a new check constraint.\n     */\n    async createCheckConstraint(tableOrName: Table|string, checkConstraint: TableCheck): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression!);\n\n        const up = this.createCheckConstraintSql(table, checkConstraint);\n        const down = this.dropCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.addCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Creates a new check constraints.\n     */\n    async createCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.createCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(tableOrName: Table|string, checkOrName: TableCheck|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);\n        if (!checkConstraint)\n            throw new Error(`Supplied check constraint was not found in table ${table.name}`);\n\n        const up = this.dropCheckConstraintSql(table, checkConstraint);\n        const down = this.createCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.removeCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.dropCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(tableOrName: Table|string, exclusionConstraint: TableExclusion): Promise<void> {\n        throw new Error(`SAP HANA does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`SAP HANA does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(tableOrName: Table|string, exclusionOrName: TableExclusion|string): Promise<void> {\n        throw new Error(`SAP HANA does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`SAP HANA does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableOrName: Table|string, foreignKey: TableForeignKey): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n        const up = this.createForeignKeySql(table, foreignKey);\n        const down = this.dropForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.addForeignKey(foreignKey);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);\n        if (!foreignKey)\n            throw new Error(`Supplied foreign key was not found in table ${table.name}`);\n\n        const up = this.dropForeignKeySql(table, foreignKey);\n        const down = this.createForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.removeForeignKey(foreignKey);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableOrName: Table|string, index: TableIndex): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n\n        const up = this.createIndexSql(table, index);\n        const down = this.dropIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.addIndex(index);\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.createIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops an index.\n     */\n    async dropIndex(tableOrName: Table|string, indexOrName: TableIndex|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);\n        if (!index)\n            throw new Error(`Supplied index was not found in table ${table.name}`);\n\n        const up = this.dropIndexSql(table, index);\n        const down = this.createIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.removeIndex(index);\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.dropIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tablePath: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tablePath)}`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        const schemas: string[] = [];\n        this.connection.entityMetadatas\n            .filter(metadata => metadata.schema)\n            .forEach(metadata => {\n                const isSchemaExist = !!schemas.find(schema => schema === metadata.schema);\n                if (!isSchemaExist)\n                    schemas.push(metadata.schema!);\n            });\n\n        schemas.push(this.driver.options.schema || \"current_schema\");\n        const schemaNamesString = schemas.map(name => {\n            return name === \"current_schema\" ? name : \"'\" + name + \"'\";\n        }).join(\", \");\n\n        await this.startTransaction();\n        try {\n            // const selectViewDropsQuery = `SELECT 'DROP VIEW IF EXISTS \"' || schemaname || '\".\"' || viewname || '\" CASCADE;' as \"query\" ` +\n            //     `FROM \"pg_views\" WHERE \"schemaname\" IN (${schemaNamesString}) AND \"viewname\" NOT IN ('geography_columns', 'geometry_columns', 'raster_columns', 'raster_overviews')`;\n            // const dropViewQueries: ObjectLiteral[] = await this.query(selectViewDropsQuery);\n            // await Promise.all(dropViewQueries.map(q => this.query(q[\"query\"])));\n\n            // ignore spatial_ref_sys; it's a special table supporting PostGIS\n            const selectTableDropsQuery = `SELECT 'DROP TABLE \"' || schema_name || '\".\"' || table_name || '\" CASCADE;' as \"query\" FROM \"SYS\".\"TABLES\" WHERE \"SCHEMA_NAME\" IN (${schemaNamesString}) AND \"TABLE_NAME\" NOT IN ('SYS_AFL_GENERATOR_PARAMETERS') AND \"IS_COLUMN_TABLE\" = 'TRUE'`;\n            const dropTableQueries: ObjectLiteral[] = await this.query(selectTableDropsQuery);\n            await Promise.all(dropTableQueries.map(q => this.query(q[\"query\"])));\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Return current database.\n     */\n    protected async getCurrentDatabase(): Promise<string> {\n        const currentDBQuery = await this.query(`SELECT \"VALUE\" AS \"db_name\" FROM \"SYS\".\"M_SYSTEM_OVERVIEW\" WHERE \"SECTION\" = 'System' and \"NAME\" = 'Instance ID'`);\n        return currentDBQuery[0][\"db_name\"];\n    }\n\n    /**\n     * Return current schema.\n     */\n    protected async getCurrentSchema(): Promise<string> {\n        const currentSchemaQuery = await this.query(`SELECT CURRENT_SCHEMA AS \"schema_name\" FROM \"SYS\".\"DUMMY\"`);\n        return currentSchemaQuery[0][\"schema_name\"];\n    }\n\n    protected async loadViews(viewNames: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName());\n        if (!hasTable)\n            return Promise.resolve([]);\n\n        const currentSchema = await this.getCurrentSchema();\n\n        const viewsCondition = viewNames.map(viewName => {\n            let [schema, name] = viewName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"t\".\"schema\" = '${schema}' AND \"t\".\"name\" = '${name}')`;\n        }).join(\" OR \");\n\n        const query = `SELECT \"t\".* FROM ${this.escapePath(this.getTypeormMetadataTableName())} \"t\" WHERE \"t\".\"type\" = 'VIEW' ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`;\n        const dbViews = await this.query(query);\n        return dbViews.map((dbView: any) => {\n            const view = new View();\n            const schema = dbView[\"schema\"] === currentSchema && !this.driver.options.schema ? undefined : dbView[\"schema\"];\n            view.name = this.driver.buildTableName(dbView[\"name\"], schema);\n            view.expression = dbView[\"value\"];\n            return view;\n        });\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames: string[]): Promise<Table[]> {\n\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        const currentSchema = await this.getCurrentSchema();\n        const tablesCondition = tableNames.map(tableName => {\n            let [schema, name] = tableName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"SCHEMA_NAME\" = '${schema}' AND \"TABLE_NAME\" = '${name}')`;\n        }).join(\" OR \");\n        const tablesSql = `SELECT * FROM \"SYS\".\"TABLES\" WHERE ` + tablesCondition;\n        const columnsSql = `SELECT * FROM \"SYS\".\"TABLE_COLUMNS\" WHERE ` + tablesCondition + ` ORDER BY \"POSITION\"`;\n\n        const constraintsCondition = tableNames.map(tableName => {\n            let [schema, name] = tableName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"SCHEMA_NAME\" = '${schema}' AND \"TABLE_NAME\" = '${name}')`;\n        }).join(\" OR \");\n\n        const constraintsSql = `SELECT * FROM \"SYS\".\"CONSTRAINTS\" WHERE (${constraintsCondition}) ORDER BY \"POSITION\"`;\n\n        const indicesCondition = tableNames.map(tableName => {\n            let [schema, name] = tableName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"I\".\"SCHEMA_NAME\" = '${schema}' AND \"I\".\"TABLE_NAME\" = '${name}')`;\n        }).join(\" OR \");\n        // excluding primary key and autogenerated fulltext indices\n        const indicesSql = `SELECT \"I\".\"INDEX_TYPE\", \"I\".\"SCHEMA_NAME\", \"I\".\"TABLE_NAME\", \"I\".\"INDEX_NAME\", \"IC\".\"COLUMN_NAME\", \"I\".\"CONSTRAINT\" ` +\n            `FROM \"SYS\".\"INDEXES\" \"I\" INNER JOIN \"SYS\".\"INDEX_COLUMNS\" \"IC\" ON \"IC\".\"INDEX_OID\" = \"I\".\"INDEX_OID\" ` +\n            `WHERE (${indicesCondition}) AND (\"I\".\"CONSTRAINT\" IS NULL OR \"I\".\"CONSTRAINT\" != 'PRIMARY KEY') AND \"I\".\"INDEX_NAME\" NOT LIKE '%_SYS_FULLTEXT_%' ORDER BY \"IC\".\"POSITION\"`;\n\n        const foreignKeysCondition = tableNames.map(tableName => {\n            let [schema, name] = tableName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"SCHEMA_NAME\" = '${schema}' AND \"TABLE_NAME\" = '${name}')`;\n        }).join(\" OR \");\n        const foreignKeysSql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE (${foreignKeysCondition}) ORDER BY \"POSITION\"`;\n        const [dbTables, dbColumns, dbConstraints, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(constraintsSql),\n            this.query(indicesSql),\n            this.query(foreignKeysSql),\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create tables for loaded tables\n        return Promise.all(dbTables.map(async dbTable => {\n            const table = new Table();\n\n            // We do not need to join schema name, when database is by default.\n            // In this case we need local variable `tableFullName` for below comparision.\n            const schema = dbTable[\"SCHEMA_NAME\"] === currentSchema && !this.driver.options.schema ? undefined : dbTable[\"SCHEMA_NAME\"];\n            table.name = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], schema);\n            const tableFullName = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], dbTable[\"SCHEMA_NAME\"]);\n\n            // create columns from the loaded columns\n            table.columns = await Promise.all(dbColumns\n                .filter(dbColumn => this.driver.buildTableName(dbColumn[\"TABLE_NAME\"], dbColumn[\"SCHEMA_NAME\"]) === tableFullName)\n                .map(async dbColumn => {\n\n                    const columnConstraints = dbConstraints.filter(dbConstraint => {\n                        return this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"SCHEMA_NAME\"]) === tableFullName && dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                    });\n\n                    const columnUniqueIndex = dbIndices.find(dbIndex => {\n                        const indexTableFullName = this.driver.buildTableName(dbIndex[\"TABLE_NAME\"], dbIndex[\"SCHEMA_NAME\"]);\n                        if (indexTableFullName !== tableFullName) {\n                            return false;\n                        }\n\n                        // Index is not for this column\n                        if (dbIndex[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"]) {\n                            return false;\n                        }\n\n                        return dbIndex[\"CONSTRAINT\"] && dbIndex[\"CONSTRAINT\"].indexOf(\"UNIQUE\") !== -1;\n                    });\n\n                    const tableMetadata = this.connection.entityMetadatas.find(metadata => metadata.tablePath === table.name);\n                    const hasIgnoredIndex = columnUniqueIndex && tableMetadata && tableMetadata.indices\n                        .some(index => index.name === columnUniqueIndex[\"INDEX_NAME\"] && index.synchronize === false);\n\n                    const isConstraintComposite = columnUniqueIndex\n                        ? !!dbIndices.find(dbIndex => dbIndex[\"INDEX_NAME\"] === columnUniqueIndex[\"INDEX_NAME\"] && dbIndex[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"])\n                        : false;\n\n                    const tableColumn = new TableColumn();\n                    tableColumn.name = dbColumn[\"COLUMN_NAME\"];\n                    tableColumn.type = dbColumn[\"DATA_TYPE_NAME\"].toLowerCase();\n\n                    if (tableColumn.type === \"dec\" || tableColumn.type === \"decimal\") {\n                        // If one of these properties was set, and another was not, Postgres sets '0' in to unspecified property\n                        // we set 'undefined' in to unspecified property to avoid changing column on sync\n                        if (dbColumn[\"LENGTH\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"LENGTH\"])) {\n                            tableColumn.precision = dbColumn[\"LENGTH\"];\n                        } else if (dbColumn[\"SCALE\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"SCALE\"])) {\n                            tableColumn.precision = undefined;\n                        }\n                        if (dbColumn[\"SCALE\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"SCALE\"])) {\n                            tableColumn.scale = dbColumn[\"SCALE\"];\n                        } else if (dbColumn[\"LENGTH\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"LENGTH\"])) {\n                            tableColumn.scale = undefined;\n                        }\n                    }\n\n                    if (dbColumn[\"DATA_TYPE_NAME\"].toLowerCase() === \"array\") {\n                        tableColumn.isArray = true;\n                        tableColumn.type = dbColumn[\"CS_DATA_TYPE_NAME\"].toLowerCase();\n                    }\n\n                    // check only columns that have length property\n                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type as ColumnType) !== -1 && dbColumn[\"LENGTH\"]) {\n                        const length = dbColumn[\"LENGTH\"].toString();\n                        tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length) ? length : \"\";\n                    }\n                    tableColumn.isUnique = !!columnUniqueIndex && !hasIgnoredIndex && !isConstraintComposite;\n                    tableColumn.isNullable = dbColumn[\"IS_NULLABLE\"] === \"TRUE\";\n                    tableColumn.isPrimary = !!columnConstraints.find(constraint => constraint[\"IS_PRIMARY_KEY\"] === \"TRUE\");\n                    tableColumn.isGenerated = dbColumn[\"GENERATION_TYPE\"] === \"ALWAYS AS IDENTITY\";\n                    if (tableColumn.isGenerated)\n                        tableColumn.generationStrategy = \"increment\";\n\n                    if (dbColumn[\"DEFAULT_VALUE\"] === null\n                        || dbColumn[\"DEFAULT_VALUE\"] === undefined) {\n                        tableColumn.default = undefined;\n\n                    } else {\n                        if (tableColumn.type === \"char\" || tableColumn.type === \"nchar\" || tableColumn.type === \"varchar\" ||\n                            tableColumn.type === \"nvarchar\" || tableColumn.type === \"alphanum\" || tableColumn.type === \"shorttext\") {\n                            tableColumn.default = `'${dbColumn[\"DEFAULT_VALUE\"]}'`;\n                        } else if (tableColumn.type === \"boolean\") {\n                            tableColumn.default = dbColumn[\"DEFAULT_VALUE\"] === \"1\" ? \"true\" : \"false\";\n                        } else {\n                            tableColumn.default = dbColumn[\"DEFAULT_VALUE\"];\n                        }\n                    }\n                    tableColumn.comment = \"\"; // dbColumn[\"COLUMN_COMMENT\"];\n                    if (dbColumn[\"character_set_name\"])\n                        tableColumn.charset = dbColumn[\"character_set_name\"];\n                    if (dbColumn[\"collation_name\"])\n                        tableColumn.collation = dbColumn[\"collation_name\"];\n                    return tableColumn;\n                }));\n\n            // find check constraints of table, group them by constraint name and build TableCheck.\n            const tableCheckConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"SCHEMA_NAME\"]) === tableFullName\n                    && dbConstraint[\"CHECK_CONDITION\"] !== null && dbConstraint[\"CHECK_CONDITION\"] !== undefined;\n            }), dbConstraint => dbConstraint[\"CONSTRAINT_NAME\"]);\n\n            table.checks = tableCheckConstraints.map(constraint => {\n                const checks = dbConstraints.filter(dbC => dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]);\n                return new TableCheck({\n                    name: constraint[\"CONSTRAINT_NAME\"],\n                    columnNames: checks.map(c => c[\"COLUMN_NAME\"]),\n                    expression: constraint[\"CHECK_CONDITION\"],\n                });\n            });\n\n            // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {\n                return this.driver.buildTableName(dbForeignKey[\"TABLE_NAME\"], dbForeignKey[\"SCHEMA_NAME\"]) === tableFullName;\n            }), dbForeignKey => dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n            table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                // if referenced table located in currently used schema, we don't need to concat schema name to table name.\n                const schema = dbForeignKey[\"REFERENCED_SCHEMA_NAME\"] === currentSchema ? undefined : dbForeignKey[\"REFERENCED_SCHEMA_NAME\"];\n                const referencedTableName = this.driver.buildTableName(dbForeignKey[\"REFERENCED_TABLE_NAME\"], schema);\n\n                return new TableForeignKey({\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedTableName: referencedTableName,\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                    onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                    onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                });\n            });\n\n            // find index constraints of table, group them by constraint name and build TableIndex.\n            const tableIndexConstraints = OrmUtils.uniq(dbIndices.filter(dbIndex => {\n                return this.driver.buildTableName(dbIndex[\"TABLE_NAME\"], dbIndex[\"SCHEMA_NAME\"]) === tableFullName;\n            }), dbIndex => dbIndex[\"INDEX_NAME\"]);\n\n            table.indices = tableIndexConstraints.map(constraint => {\n                const indices = dbIndices.filter(index => {\n                    return index[\"SCHEMA_NAME\"] === constraint[\"SCHEMA_NAME\"]\n                        && index[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"]\n                        && index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"];\n                });\n                return new TableIndex(<TableIndexOptions>{\n                    table: table,\n                    name: constraint[\"INDEX_NAME\"],\n                    columnNames: indices.map(i => i[\"COLUMN_NAME\"]),\n                    isUnique: constraint[\"CONSTRAINT\"] && constraint[\"CONSTRAINT\"].indexOf(\"UNIQUE\") !== -1,\n                    isFulltext: constraint[\"INDEX_TYPE\"] === \"FULLTEXT\"\n                });\n            });\n\n            return table;\n        }));\n    }\n\n    /**\n     * Builds and returns SQL for create table.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;\n\n        // we create unique indexes instead of unique constraints, because SAP HANA does not have unique constraints.\n        // if we mark column as Unique, it means that we create UNIQUE INDEX.\n        table.columns\n            .filter(column => column.isUnique)\n            .forEach(column => {\n                const isUniqueIndexExist = table.indices.some(index => {\n                    return index.columnNames.length === 1 && !!index.isUnique && index.columnNames.indexOf(column.name) !== -1;\n                });\n                const isUniqueConstraintExist = table.uniques.some(unique => {\n                    return unique.columnNames.length === 1 && unique.columnNames.indexOf(column.name) !== -1;\n                });\n                if (!isUniqueIndexExist && !isUniqueConstraintExist)\n                    table.indices.push(new TableIndex({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                        columnNames: [column.name],\n                        isUnique: true\n                    }));\n            });\n\n        // as SAP HANA does not have unique constraints, we must create table indices from table uniques and mark them as unique.\n        if (table.uniques.length > 0) {\n            table.uniques.forEach(unique => {\n                const uniqueExist = table.indices.some(index => index.name === unique.name);\n                if (!uniqueExist) {\n                    table.indices.push(new TableIndex({\n                        name: unique.name,\n                        columnNames: unique.columnNames,\n                        isUnique: true\n                    }));\n                }\n            });\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks.map(check => {\n                const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression!);\n                return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`;\n            }).join(\", \");\n\n            sql += `, ${checksSql}`;\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys.map(fk => {\n                const columnNames = fk.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                if (!fk.name)\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);\n                const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n\n                let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(fk.referencedTableName)} (${referencedColumnNames})`;\n                // SAP HANA does not have \"NO ACTION\" option for FK's\n                if (fk.onDelete) {\n                    const onDelete = fk.onDelete === \"NO ACTION\" ? \"RESTRICT\" : fk.onDelete;\n                    constraint += ` ON DELETE ${onDelete}`;\n                }\n                if (fk.onUpdate) {\n                    const onUpdate = fk.onUpdate === \"NO ACTION\" ? \"RESTRICT\" : fk.onUpdate;\n                    constraint += ` ON UPDATE ${onUpdate}`;\n                }\n\n                return constraint;\n            }).join(\", \");\n\n            sql += `, ${foreignKeysSql}`;\n        }\n\n        const primaryColumns = table.columns.filter(column => column.isPrimary);\n        if (primaryColumns.length > 0) {\n            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`;\n        }\n\n        sql += `)`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(tableOrName: Table|string, ifExist?: boolean): Query {\n        const query = ifExist ? `DROP TABLE IF EXISTS ${this.escapePath(tableOrName)}` : `DROP TABLE ${this.escapePath(tableOrName)}`;\n        return new Query(query);\n    }\n\n    protected createViewSql(view: View): Query {\n        if (typeof view.expression === \"string\") {\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression}`);\n        } else {\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression(this.connection).getQuery()}`);\n        }\n    }\n\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\n        const currentSchema = await this.getCurrentSchema();\n        const splittedName = view.name.split(\".\");\n        let schema = this.driver.options.schema || currentSchema;\n        let name = view.name;\n        if (splittedName.length === 2) {\n            schema = splittedName[0];\n            name = splittedName[1];\n        }\n\n        const expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n        const [query, parameters] = this.connection.createQueryBuilder()\n            .insert()\n            .into(this.getTypeormMetadataTableName())\n            .values({ type: \"VIEW\", schema: schema, name: name, value: expression })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(viewOrPath: View|string): Query {\n        return new Query(`DROP VIEW ${this.escapePath(viewOrPath)}`);\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected async deleteViewDefinitionSql(viewOrPath: View|string): Promise<Query> {\n        const currentSchema = await this.getCurrentSchema();\n        const viewName = viewOrPath instanceof View ? viewOrPath.name : viewOrPath;\n        const splittedName = viewName.split(\".\");\n        let schema = this.driver.options.schema || currentSchema;\n        let name = viewName;\n        if (splittedName.length === 2) {\n            schema = splittedName[0];\n            name = splittedName[1];\n        }\n\n        const qb = this.connection.createQueryBuilder();\n        const [query, parameters] = qb.delete()\n            .from(this.getTypeormMetadataTableName())\n            .where(`${qb.escape(\"type\")} = 'VIEW'`)\n            .andWhere(`${qb.escape(\"schema\")} = :schema`, { schema })\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    protected addColumnSql(table: Table, column: TableColumn): string {\n        return `ALTER TABLE ${this.escapePath(table)} ADD (${this.buildCreateColumnSql(column)})`;\n    }\n\n    protected dropColumnSql(table: Table, column: TableColumn): string {\n        return `ALTER TABLE ${this.escapePath(table)} DROP (\"${column.name}\")`;\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        let indexType = \"\";\n        if (index.isUnique) {\n            indexType += \"UNIQUE \";\n        }\n        if (index.isFulltext) {\n            indexType += \"FULLTEXT \";\n        }\n\n        return new Query(`CREATE ${indexType}INDEX \"${index.name}\" ON ${this.escapePath(table)} (${columns}) ${index.where ? \"WHERE \" + index.where : \"\"}`);\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(table: Table, indexOrName: TableIndex|string): Query {\n        let indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n        const parsedTableName = this.parseTableName(table);\n        if (parsedTableName.schema === \"current_schema\") {\n            return new Query(`DROP INDEX \"${indexName}\"`);\n        } else {\n            return new Query(`DROP INDEX \"${parsedTableName.schema.replace(/'/g, \"\")}\".\"${indexName}\"`);\n        }\n    }\n\n    /**\n     * Builds create primary key sql.\n     */\n    protected createPrimaryKeySql(table: Table, columnNames: string[]): Query {\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`);\n    }\n\n    /**\n     * Builds drop primary key sql.\n     */\n    protected dropPrimaryKeySql(table: Table): Query {\n        const columnNames = table.primaryColumns.map(column => column.name);\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${primaryKeyName}\"`);\n    }\n\n    /**\n     * Builds create check constraint sql.\n     */\n    protected createCheckConstraintSql(table: Table, checkConstraint: TableCheck): Query {\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${checkConstraint.name}\" CHECK (${checkConstraint.expression})`);\n    }\n\n    /**\n     * Builds drop check constraint sql.\n     */\n    protected dropCheckConstraintSql(table: Table, checkOrName: TableCheck|string): Query {\n        const checkName = checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${checkName}\"`);\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(tableOrName: Table|string, foreignKey: TableForeignKey): Query {\n        const columnNames = foreignKey.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\"` + column + `\"`).join(\",\");\n        let sql = `ALTER TABLE ${this.escapePath(tableOrName)} ADD CONSTRAINT \"${foreignKey.name}\" FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;\n\n        // SAP HANA does not have \"NO ACTION\" option for FK's\n        if (foreignKey.onDelete) {\n            const onDelete = foreignKey.onDelete === \"NO ACTION\" ? \"RESTRICT\" : foreignKey.onDelete;\n            sql += ` ON DELETE ${onDelete}`;\n        }\n        if (foreignKey.onUpdate) {\n            const onUpdate = foreignKey.onUpdate === \"NO ACTION\" ? \"RESTRICT\" : foreignKey.onUpdate;\n            sql += ` ON UPDATE ${onUpdate}`;\n        }\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Query {\n        const foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(tableOrName)} DROP CONSTRAINT \"${foreignKeyName}\"`);\n    }\n\n    /**\n     * Escapes given table or view path.\n     */\n    protected escapePath(target: Table|View|string, disableEscape?: boolean): string {\n        let tableName = target instanceof Table || target instanceof View ? target.name : target;\n        tableName = tableName.indexOf(\".\") === -1 && this.driver.options.schema ? `${this.driver.options.schema}.${tableName}` : tableName;\n\n        return tableName.split(\".\").map(i => {\n            return disableEscape ? i : `\"${i}\"`;\n        }).join(\".\");\n    }\n\n    /**\n     * Returns object with table schema and table name.\n     */\n    protected parseTableName(target: Table|string) {\n        const tableName = target instanceof Table ? target.name : target;\n        if (tableName.indexOf(\".\") === -1) {\n            return {\n                schema: this.driver.options.schema ? `'${this.driver.options.schema}'` : \"current_schema\",\n                tableName: `'${tableName}'`\n            };\n        } else {\n            return {\n                schema: `'${tableName.split(\".\")[0]}'`,\n                tableName: `'${tableName.split(\".\")[1]}'`\n            };\n        }\n    }\n\n    /**\n     * Concat database name and schema name to the foreign key name.\n     * Needs because FK name is relevant to the schema and database.\n     */\n    protected buildForeignKeyName(fkName: string, schemaName: string|undefined, dbName: string|undefined): string {\n        let joinedFkName = fkName;\n        if (schemaName)\n            joinedFkName = schemaName + \".\" + joinedFkName;\n        if (dbName)\n            joinedFkName = dbName + \".\" + joinedFkName;\n\n        return joinedFkName;\n    }\n\n    /**\n     * Removes parenthesis around default value.\n     * Sql server returns default value with parenthesis around, e.g.\n     *  ('My text') - for string\n     *  ((1)) - for number\n     *  (newsequentialId()) - for function\n     */\n    protected removeParenthesisFromDefault(defaultValue: any): any {\n        if (defaultValue.substr(0, 1) !== \"(\")\n            return defaultValue;\n        const normalizedDefault = defaultValue.substr(1, defaultValue.lastIndexOf(\")\") - 1);\n        return this.removeParenthesisFromDefault(normalizedDefault);\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: TableColumn) {\n        let c = `\"${column.name}\" ` + this.connection.driver.createFullType(column);\n        if (column.charset)\n            c += \" CHARACTER SET \" + column.charset;\n        if (column.collation)\n            c += \" COLLATE \" + column.collation;\n        if (column.default !== undefined && column.default !== null) // DEFAULT must be placed before NOT NULL\n            c += \" DEFAULT \" + column.default;\n        if (column.isNullable !== true && !column.isGenerated) // NOT NULL is not supported with GENERATED\n            c += \" NOT NULL\";\n        if (column.isGenerated === true && column.generationStrategy === \"increment\")\n            c += \" GENERATED ALWAYS AS IDENTITY\";\n\n        return c;\n    }\n\n}\n","import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {Table} from \"../../schema-builder/table/Table\";\nimport {TableForeignKey} from \"../../schema-builder/table/TableForeignKey\";\nimport {TableIndex} from \"../../schema-builder/table/TableIndex\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {View} from \"../../schema-builder/view/View\";\nimport {Query} from \"../Query\";\nimport {OracleDriver} from \"./OracleDriver\";\nimport {ReadStream} from \"../../platform/PlatformTools\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\nimport {TableUnique} from \"../../schema-builder/table/TableUnique\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\nimport {BaseQueryRunner} from \"../../query-runner/BaseQueryRunner\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {TableCheck} from \"../../schema-builder/table/TableCheck\";\nimport {ColumnType} from \"../../index\";\nimport {IsolationLevel} from \"../types/IsolationLevel\";\nimport {TableExclusion} from \"../../schema-builder/table/TableExclusion\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\nimport {BroadcasterResult} from \"../../subscriber/BroadcasterResult\";\n\n/**\n * Runs queries on a single oracle database connection.\n */\nexport class OracleQueryRunner extends BaseQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: OracleDriver;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Promise used to obtain a database connection for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: OracleDriver, mode: ReplicationMode) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n        this.mode = mode;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise;\n\n        if (this.mode === \"slave\" && this.driver.isReplicated) {\n            this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(connection => {\n                this.databaseConnection = connection;\n                return this.databaseConnection;\n            });\n\n        } else { // master\n            this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(connection => {\n                this.databaseConnection = connection;\n                return this.databaseConnection;\n            });\n        }\n\n        return this.databaseConnectionPromise;\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.isReleased = true;\n            if (this.databaseConnection) {\n                this.databaseConnection.close((err: any) => {\n                    if (err)\n                        return fail(err);\n\n                    ok();\n                });\n            } else {\n                ok();\n            }\n        });\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel: IsolationLevel = \"READ COMMITTED\"): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        // await this.query(\"START TRANSACTION\");\n        if (isolationLevel !== \"SERIALIZABLE\" && isolationLevel !== \"READ COMMITTED\") {\n            throw new Error(`Oracle only supports SERIALIZABLE and READ COMMITTED isolation`);\n        }\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        await this.query(\"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel);\n        this.isTransactionActive = true;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        await this.query(\"COMMIT\");\n        this.isTransactionActive = false;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        await this.query(\"ROLLBACK\");\n        this.isTransactionActive = false;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise(async (ok, fail) => {\n            try {\n                this.driver.connection.logger.logQuery(query, parameters, this);\n                const queryStartTime = +new Date();\n\n                const handler = (err: any, result: any) => {\n\n                    // log slow queries if maxQueryExecution time is set\n                    const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                    const queryEndTime = +new Date();\n                    const queryExecutionTime = queryEndTime - queryStartTime;\n                    if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                        this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                    if (err) {\n                        this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                        return fail(new QueryFailedError(query, parameters, err));\n                    }\n                    // TODO: find better solution. Must return result instead of properties\n                    ok(result.rows || result.outBinds || result.rowsAffected);\n                };\n                const executionOptions = {\n                    autoCommit: this.isTransactionActive ? false : true\n                };\n\n                const databaseConnection = await this.connect();\n                databaseConnection.execute(query, parameters || {}, executionOptions, handler);\n\n            } catch (err) {\n                fail(err);\n            }\n        });\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        throw new Error(`Stream is not supported by Oracle driver.`);\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        return Promise.resolve([]);\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        return Promise.resolve([]);\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        return Promise.resolve(false);\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        return Promise.resolve(false);\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table|string): Promise<boolean> {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const sql = `SELECT \"TABLE_NAME\" FROM \"USER_TABLES\" WHERE \"TABLE_NAME\" = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableOrName: Table|string, columnName: string): Promise<boolean> {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const sql = `SELECT \"COLUMN_NAME\" FROM \"USER_TAB_COLS\" WHERE \"TABLE_NAME\" = '${tableName}' AND \"COLUMN_NAME\" = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(database: string, ifNotExist?: boolean): Promise<void> {\n        await this.query(`CREATE DATABASE IF NOT EXISTS \"${database}\"`);\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(schemas: string, ifNotExist?: boolean): Promise<void> {\n        throw new Error(`Schema create queries are not supported by Oracle driver.`);\n    }\n\n    /**\n     * Drops table schema.\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\n        throw new Error(`Schema drop queries are not supported by Oracle driver.`);\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(table: Table, ifNotExist: boolean = false, createForeignKeys: boolean = true, createIndices: boolean = true): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table);\n            if (isTableExist) return Promise.resolve();\n        }\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(this.createTableSql(table, createForeignKeys));\n        downQueries.push(this.dropTableSql(table));\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        if (createIndices) {\n            table.indices.forEach(index => {\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                upQueries.push(this.createIndexSql(table, index));\n                downQueries.push(this.dropIndexSql(index));\n            });\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableOrName: Table|string, ifExist?: boolean, dropForeignKeys: boolean = true, dropIndices: boolean = true): Promise<void> {// It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n        if (ifExist) {\n            const isTableExist = await this.hasTable(tableOrName);\n            if (!isTableExist) return Promise.resolve();\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys;\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n\n        if (dropIndices) {\n            table.indices.forEach(index => {\n                upQueries.push(this.dropIndexSql(index));\n                downQueries.push(this.createIndexSql(table, index));\n            });\n        }\n\n        // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (dropForeignKeys)\n            table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        upQueries.push(this.dropTableSql(table));\n        downQueries.push(this.createTableSql(table, createForeignKeys));\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(view: View): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.createViewSql(view));\n        upQueries.push(this.insertViewDefinitionSql(view));\n        downQueries.push(this.dropViewSql(view));\n        downQueries.push(this.deleteViewDefinitionSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View|string): Promise<void> {\n        const viewName = target instanceof View ? target.name : target;\n        const view = await this.getCachedView(viewName);\n\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.deleteViewDefinitionSql(view));\n        upQueries.push(this.dropViewSql(view));\n        downQueries.push(this.insertViewDefinitionSql(view));\n        downQueries.push(this.createViewSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Renames the given table.\n     */\n    async renameTable(oldTableOrName: Table|string, newTableOrName: Table|string): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        const oldTable = oldTableOrName instanceof Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);\n        let newTable = oldTable.clone();\n\n        if (newTableOrName instanceof Table) {\n            newTable = newTableOrName;\n        } else {\n            newTable.name = newTableOrName;\n        }\n\n        // rename table\n        upQueries.push(new Query(`ALTER TABLE \"${oldTable.name}\" RENAME TO \"${newTable.name}\"`));\n        downQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME TO \"${oldTable.name}\"`));\n\n        // rename primary key constraint\n        if (newTable.primaryColumns.length > 0) {\n            const columnNames = newTable.primaryColumns.map(column => column.name);\n\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\n            const newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);\n\n            // build queries\n            upQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${oldPkName}\" TO \"${newPkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${newPkName}\" TO \"${oldPkName}\"`));\n        }\n\n        // rename unique constraints\n        newTable.uniques.forEach(unique => {\n            // build new constraint name\n            const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);\n\n            // build queries\n            upQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${unique.name}\" TO \"${newUniqueName}\"`));\n            downQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${newUniqueName}\" TO \"${unique.name}\"`));\n\n            // replace constraint name\n            unique.name = newUniqueName;\n        });\n\n        // rename index constraints\n        newTable.indices.forEach(index => {\n            // build new constraint name\n            const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n\n            // build queries\n            upQueries.push(new Query(`ALTER INDEX \"${index.name}\" RENAME TO \"${newIndexName}\"`));\n            downQueries.push(new Query(`ALTER INDEX \"${newIndexName}\" RENAME TO \"${index.name}\"`));\n\n            // replace constraint name\n            index.name = newIndexName;\n        });\n\n        // rename foreign key constraints\n        newTable.foreignKeys.forEach(foreignKey => {\n            // build new constraint name\n            const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n            // build queries\n            upQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${foreignKey.name}\" TO \"${newForeignKeyName}\"`));\n            downQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${newForeignKeyName}\" TO \"${foreignKey.name}\"`));\n\n            // replace constraint name\n            foreignKey.name = newForeignKeyName;\n        });\n\n        await this.executeQueries(upQueries, downQueries);\n\n        // rename old table and replace it in cached tabled;\n        oldTable.name = newTable.name;\n        this.replaceCachedTable(oldTable, newTable);\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(tableOrName: Table|string, column: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD ${this.buildCreateColumnSql(column)}`));\n        downQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP COLUMN \"${column.name}\"`));\n\n        // create or update primary key constraint\n        if (column.isPrimary) {\n            const primaryColumns = clonedTable.primaryColumns;\n            // if table already have primary key, me must drop it and recreate again\n            if (primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`));\n                downQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            }\n\n            primaryColumns.push(column);\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            downQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`));\n        }\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n            upQueries.push(this.createIndexSql(table, columnIndex));\n            downQueries.push(this.dropIndexSql(columnIndex));\n        }\n\n        // create unique constraint\n        if (column.isUnique) {\n            const uniqueConstraint = new TableUnique({\n                name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                columnNames: [column.name]\n            });\n            clonedTable.uniques.push(uniqueConstraint);\n            upQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${column.name}\")`));\n            downQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.addColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newTableColumnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        let newColumn: TableColumn|undefined = undefined;\n        if (newTableColumnOrName instanceof TableColumn) {\n            newColumn = newTableColumnOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newTableColumnOrName;\n        }\n\n        await this.changeColumn(table, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newColumn: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        let clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        const oldColumn = oldTableColumnOrName instanceof TableColumn\n            ? oldTableColumnOrName\n            : table.columns.find(column => column.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        if ((newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== \"uuid\") || oldColumn.type !== newColumn.type || oldColumn.length !== newColumn.length) {\n            // Oracle does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n            await this.dropColumn(table, oldColumn);\n            await this.addColumn(table, newColumn);\n\n            // update cloned table\n            clonedTable = table.clone();\n\n        } else {\n            if (newColumn.name !== oldColumn.name) {\n                // rename column\n                upQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME COLUMN \"${oldColumn.name}\" TO \"${newColumn.name}\"`));\n                downQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME COLUMN \"${newColumn.name}\" TO \"${oldColumn.name}\"`));\n\n                // rename column primary key constraint\n                if (oldColumn.isPrimary === true) {\n                    const primaryColumns = clonedTable.primaryColumns;\n\n                    // build old primary constraint name\n                    const columnNames = primaryColumns.map(column => column.name);\n                    const oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    // replace old column name with new column name\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n                    columnNames.push(newColumn.name);\n\n                    // build new primary constraint name\n                    const newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    upQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${oldPkName}\" TO \"${newPkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${newPkName}\" TO \"${oldPkName}\"`));\n                }\n\n                // rename unique constraints\n                clonedTable.findColumnUniques(oldColumn).forEach(unique => {\n                    // build new constraint name\n                    unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);\n                    unique.columnNames.push(newColumn.name);\n                    const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames);\n\n                    // build queries\n                    upQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${unique.name}\" TO \"${newUniqueName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${newUniqueName}\" TO \"${unique.name}\"`));\n\n                    // replace constraint name\n                    unique.name = newUniqueName;\n                });\n\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach(index => {\n                    // build new constraint name\n                    index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                    index.columnNames.push(newColumn.name);\n                    const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n\n                    // build queries\n                    upQueries.push(new Query(`ALTER INDEX \"${index.name}\" RENAME TO \"${newIndexName}\"`));\n                    downQueries.push(new Query(`ALTER INDEX \"${newIndexName}\" RENAME TO \"${index.name}\"`));\n\n                    // replace constraint name\n                    index.name = newIndexName;\n                });\n\n                // rename foreign key constraints\n                clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {\n                    // build new constraint name\n                    foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                    foreignKey.columnNames.push(newColumn.name);\n                    const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n                    // build queries\n                    upQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${foreignKey.name}\" TO \"${newForeignKeyName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${newForeignKeyName}\" TO \"${foreignKey.name}\"`));\n\n                    // replace constraint name\n                    foreignKey.name = newForeignKeyName;\n                });\n\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);\n                clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn!)].name = newColumn.name;\n                oldColumn.name = newColumn.name;\n            }\n\n            if (this.isColumnChanged(oldColumn, newColumn, true)) {\n                let defaultUp: string = \"\";\n                let defaultDown: string = \"\";\n                let nullableUp:  string = \"\";\n                let nullableDown:  string = \"\";\n\n                // changing column default\n                if (newColumn.default !== null && newColumn.default !== undefined) {\n                    defaultUp = `DEFAULT ${newColumn.default}`;\n\n                    if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                        defaultDown = `DEFAULT ${oldColumn.default}`;\n                    } else {\n                        defaultDown = \"DEFAULT NULL\";\n                    }\n\n                } else if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                    defaultUp = \"DEFAULT NULL\";\n                    defaultDown = `DEFAULT ${oldColumn.default}`;\n                }\n\n                // changing column isNullable property\n                if (newColumn.isNullable !== oldColumn.isNullable) {\n                    if (newColumn.isNullable === true) {\n                        nullableUp = \"NULL\";\n                        nullableDown = \"NOT NULL\";\n                    } else {\n                        nullableUp = \"NOT NULL\";\n                        nullableDown = \"NULL\";\n                    }\n                }\n\n                upQueries.push(new Query(`ALTER TABLE \"${table.name}\" MODIFY \"${oldColumn.name}\" ${this.connection.driver.createFullType(newColumn)} ${defaultUp} ${nullableUp}`));\n                downQueries.push(new Query(`ALTER TABLE \"${table.name}\" MODIFY \"${oldColumn.name}\" ${this.connection.driver.createFullType(oldColumn)} ${defaultDown} ${nullableDown}`));\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                const primaryColumns = clonedTable.primaryColumns;\n\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                }\n\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn);\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = true;\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                    downQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`));\n\n                } else {\n                    const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);\n                    primaryColumns.splice(primaryColumns.indexOf(primaryColumn!), 1);\n\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = false;\n\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                        const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                        upQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                        downQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`));\n                    }\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueConstraint = new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [newColumn.name]),\n                        columnNames: [newColumn.name]\n                    });\n                    clonedTable.uniques.push(uniqueConstraint);\n                    upQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${newColumn.name}\")`));\n                    downQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\n\n                } else {\n                    const uniqueConstraint = clonedTable.uniques.find(unique => {\n                        return unique.columnNames.length === 1 && !!unique.columnNames.find(columnName => columnName === newColumn.name);\n                    });\n                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint!), 1);\n                    upQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${uniqueConstraint!.name}\"`));\n                    downQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${uniqueConstraint!.name}\" UNIQUE (\"${newColumn.name}\")`));\n                }\n            }\n\n            await this.executeQueries(upQueries, downQueries);\n            this.replaceCachedTable(table, clonedTable);\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableOrName: Table|string, changedColumns: { newColumn: TableColumn, oldColumn: TableColumn }[]): Promise<void> {\n        for (const {oldColumn, newColumn} of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn);\n        }\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableOrName: Table|string, columnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n        if (!column)\n            throw new Error(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\n\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // drop primary key constraint\n        if (column.isPrimary) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n            const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE \"${clonedTable.name}\" DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE \"${clonedTable.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name);\n            tableColumn!.isPrimary = false;\n\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE \"${clonedTable.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                downQueries.push(new Query(`ALTER TABLE \"${clonedTable.name}\" DROP CONSTRAINT \"${pkName}\"`));\n            }\n        }\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            upQueries.push(this.dropIndexSql(columnIndex));\n            downQueries.push(this.createIndexSql(table, columnIndex));\n        }\n\n        // drop column check\n        const columnCheck = clonedTable.checks.find(check => !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name);\n        if (columnCheck) {\n            clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n        }\n\n        // drop column unique\n        const columnUnique = clonedTable.uniques.find(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\n        if (columnUnique) {\n            clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);\n            upQueries.push(this.dropUniqueConstraintSql(table, columnUnique));\n            downQueries.push(this.createUniqueConstraintSql(table, columnUnique));\n        }\n\n        upQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP COLUMN \"${column.name}\"`));\n        downQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD ${this.buildCreateColumnSql(column)}`));\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.removeColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(tableOrName: Table|string, columnNames: string[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n\n        const up = this.createPrimaryKeySql(table, columnNames);\n\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n        clonedTable.columns.forEach(column => {\n            if (columnNames.find(columnName => columnName === column.name))\n                column.isPrimary = true;\n        });\n        const down = this.dropPrimaryKeySql(clonedTable);\n\n        await this.executeQueries(up, down);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const columnNames = columns.map(column => column.name);\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns;\n        if (primaryColumns.length > 0) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNamesString = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        }\n\n        // update columns in table.\n        clonedTable.columns\n            .filter(column => columnNames.indexOf(column.name) !== -1)\n            .forEach(column => column.isPrimary = true);\n\n        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        upQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        downQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`));\n\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName: Table|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const up = this.dropPrimaryKeySql(table);\n        const down = this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name));\n        await this.executeQueries(up, down);\n        table.primaryColumns.forEach(column => {\n            column.isPrimary = false;\n        });\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(tableOrName: Table|string, uniqueConstraint: TableUnique): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!uniqueConstraint.name)\n            uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table.name, uniqueConstraint.columnNames);\n\n        const up = this.createUniqueConstraintSql(table, uniqueConstraint);\n        const down = this.dropUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.addUniqueConstraint(uniqueConstraint);\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        const promises = uniqueConstraints.map(uniqueConstraint => this.createUniqueConstraint(tableOrName, uniqueConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops an unique constraint.\n     */\n    async dropUniqueConstraint(tableOrName: Table|string, uniqueOrName: TableUnique|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const uniqueConstraint = uniqueOrName instanceof TableUnique ? uniqueOrName : table.uniques.find(u => u.name === uniqueOrName);\n        if (!uniqueConstraint)\n            throw new Error(`Supplied unique constraint was not found in table ${table.name}`);\n\n        const up = this.dropUniqueConstraintSql(table, uniqueConstraint);\n        const down = this.createUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.removeUniqueConstraint(uniqueConstraint);\n    }\n\n    /**\n     * Creates an unique constraints.\n     */\n    async dropUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        const promises = uniqueConstraints.map(uniqueConstraint => this.dropUniqueConstraint(tableOrName, uniqueConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates new check constraint.\n     */\n    async createCheckConstraint(tableOrName: Table|string, checkConstraint: TableCheck): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression!);\n\n        const up = this.createCheckConstraintSql(table, checkConstraint);\n        const down = this.dropCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.addCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Creates new check constraints.\n     */\n    async createCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.createCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(tableOrName: Table|string, checkOrName: TableCheck|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);\n        if (!checkConstraint)\n            throw new Error(`Supplied check constraint was not found in table ${table.name}`);\n\n        const up = this.dropCheckConstraintSql(table, checkConstraint);\n        const down = this.createCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.removeCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.dropCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(tableOrName: Table|string, exclusionConstraint: TableExclusion): Promise<void> {\n        throw new Error(`Oracle does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`Oracle does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(tableOrName: Table|string, exclusionOrName: TableExclusion|string): Promise<void> {\n        throw new Error(`Oracle does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`Oracle does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableOrName: Table|string, foreignKey: TableForeignKey): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n        const up = this.createForeignKeySql(table, foreignKey);\n        const down = this.dropForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.addForeignKey(foreignKey);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);\n        if (!foreignKey)\n            throw new Error(`Supplied foreign key was not found in table ${table.name}`);\n\n        const up = this.dropForeignKeySql(table, foreignKey);\n        const down = this.createForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.removeForeignKey(foreignKey);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableOrName: Table|string, index: TableIndex): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n\n        const up = this.createIndexSql(table, index);\n        const down = this.dropIndexSql(index);\n        await this.executeQueries(up, down);\n        table.addIndex(index);\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.createIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableOrName: Table|string, indexOrName: TableIndex|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);\n        if (!index)\n            throw new Error(`Supplied index was not found in table ${table.name}`);\n\n        const up = this.dropIndexSql(index);\n        const down = this.createIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.removeIndex(index);\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.dropIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tableName: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE \"${tableName}\"`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        await this.startTransaction();\n        try {\n            const dropViewsQuery = `SELECT 'DROP VIEW \"' || VIEW_NAME || '\"' AS \"query\" FROM \"USER_VIEWS\"`;\n            const dropViewQueries: ObjectLiteral[] = await this.query(dropViewsQuery);\n            await Promise.all(dropViewQueries.map(query => this.query(query[\"query\"])));\n\n            const dropTablesQuery = `SELECT 'DROP TABLE \"' || TABLE_NAME || '\" CASCADE CONSTRAINTS' AS \"query\" FROM \"USER_TABLES\"`;\n            const dropTableQueries: ObjectLiteral[] = await this.query(dropTablesQuery);\n            await Promise.all(dropTableQueries.map(query => this.query(query[\"query\"])));\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n        }\n\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected async loadViews(viewNames: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName());\n        if (!hasTable)\n            return Promise.resolve([]);\n\n        const viewNamesString = viewNames.map(name => \"'\" + name + \"'\").join(\", \");\n        let query = `SELECT \"T\".* FROM \"${this.getTypeormMetadataTableName()}\" \"T\" INNER JOIN \"USER_VIEWS\" \"V\" ON \"V\".\"VIEW_NAME\" = \"T\".\"name\" WHERE \"T\".\"type\" = 'VIEW'`;\n        if (viewNamesString.length > 0)\n            query += ` AND \"T\".\"name\" IN (${viewNamesString})`;\n        const dbViews = await this.query(query);\n        return dbViews.map((dbView: any) => {\n            const view = new View();\n            view.name = dbView[\"name\"];\n            view.expression = dbView[\"value\"];\n            return view;\n        });\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames: string[]): Promise<Table[]> {\n\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        // load tables, columns, indices and foreign keys\n        const tableNamesString = tableNames.map(name => \"'\" + name + \"'\").join(\", \");\n        const tablesSql = `SELECT * FROM \"USER_TABLES\" WHERE \"TABLE_NAME\" IN (${tableNamesString})`;\n        const columnsSql = `SELECT * FROM \"USER_TAB_COLS\" WHERE \"TABLE_NAME\" IN (${tableNamesString})`;\n\n        const indicesSql = `SELECT \"IND\".\"INDEX_NAME\", \"IND\".\"TABLE_NAME\", \"IND\".\"UNIQUENESS\", ` +\n            `LISTAGG (\"COL\".\"COLUMN_NAME\", ',') WITHIN GROUP (ORDER BY \"COL\".\"COLUMN_NAME\") AS \"COLUMN_NAMES\" ` +\n            `FROM \"USER_INDEXES\" \"IND\" ` +\n            `INNER JOIN \"USER_IND_COLUMNS\" \"COL\" ON \"COL\".\"INDEX_NAME\" = \"IND\".\"INDEX_NAME\" ` +\n            `LEFT JOIN \"USER_CONSTRAINTS\" \"CON\" ON \"CON\".\"CONSTRAINT_NAME\" = \"IND\".\"INDEX_NAME\" ` +\n            `WHERE \"IND\".\"TABLE_NAME\" IN (${tableNamesString}) AND \"CON\".\"CONSTRAINT_NAME\" IS NULL ` +\n            `GROUP BY \"IND\".\"INDEX_NAME\", \"IND\".\"TABLE_NAME\", \"IND\".\"UNIQUENESS\"`;\n\n        const foreignKeysSql = `SELECT \"C\".\"CONSTRAINT_NAME\", \"C\".\"TABLE_NAME\", \"COL\".\"COLUMN_NAME\", \"REF_COL\".\"TABLE_NAME\" AS \"REFERENCED_TABLE_NAME\", ` +\n            `\"REF_COL\".\"COLUMN_NAME\" AS \"REFERENCED_COLUMN_NAME\", \"C\".\"DELETE_RULE\" AS \"ON_DELETE\" ` +\n            `FROM \"USER_CONSTRAINTS\" \"C\" ` +\n            `INNER JOIN \"USER_CONS_COLUMNS\" \"COL\" ON \"COL\".\"OWNER\" = \"C\".\"OWNER\" AND \"COL\".\"CONSTRAINT_NAME\" = \"C\".\"CONSTRAINT_NAME\" ` +\n            `INNER JOIN \"USER_CONS_COLUMNS\" \"REF_COL\" ON \"REF_COL\".\"OWNER\" = \"C\".\"R_OWNER\" AND \"REF_COL\".\"CONSTRAINT_NAME\" = \"C\".\"R_CONSTRAINT_NAME\" AND \"REF_COL\".\"POSITION\" = \"COL\".\"POSITION\" ` +\n            `WHERE \"C\".\"TABLE_NAME\" IN (${tableNamesString}) AND \"C\".\"CONSTRAINT_TYPE\" = 'R'`;\n\n        const constraintsSql = `SELECT \"C\".\"CONSTRAINT_NAME\", \"C\".\"CONSTRAINT_TYPE\", \"C\".\"TABLE_NAME\", \"COL\".\"COLUMN_NAME\", \"C\".\"SEARCH_CONDITION\" ` +\n            `FROM \"USER_CONSTRAINTS\" \"C\" ` +\n            `INNER JOIN \"USER_CONS_COLUMNS\" \"COL\" ON \"COL\".\"OWNER\" = \"C\".\"OWNER\" AND \"COL\".\"CONSTRAINT_NAME\" = \"C\".\"CONSTRAINT_NAME\" ` +\n            `WHERE \"C\".\"TABLE_NAME\" IN (${tableNamesString}) AND \"C\".\"CONSTRAINT_TYPE\" IN ('C', 'U', 'P') AND \"C\".\"GENERATED\" = 'USER NAME'`;\n\n        const [dbTables, dbColumns, dbIndices, dbForeignKeys, dbConstraints]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(indicesSql),\n            this.query(foreignKeysSql),\n            this.query(constraintsSql),\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create tables for loaded tables\n        return dbTables.map(dbTable => {\n            const table = new Table();\n            table.name = dbTable[\"TABLE_NAME\"];\n\n            // create columns from the loaded columns\n            table.columns = dbColumns\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === table.name)\n                .map(dbColumn => {\n                    const columnConstraints = dbConstraints.filter(dbConstraint => dbConstraint[\"TABLE_NAME\"] === table.name && dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"]);\n\n                    const uniqueConstraint = columnConstraints.find(constraint => constraint[\"CONSTRAINT_TYPE\"] === \"U\");\n                    const isConstraintComposite = uniqueConstraint\n                        ? !!dbConstraints.find(dbConstraint => dbConstraint[\"CONSTRAINT_TYPE\"] === \"U\"\n                            && dbConstraint[\"CONSTRAINT_NAME\"] === uniqueConstraint[\"CONSTRAINT_NAME\"]\n                            && dbConstraint[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"])\n                        : false;\n                    const isUnique = !!uniqueConstraint && !isConstraintComposite;\n\n                    const isPrimary = !!columnConstraints.find(constraint =>  constraint[\"CONSTRAINT_TYPE\"] === \"P\");\n\n                    const tableColumn = new TableColumn();\n                    tableColumn.name = dbColumn[\"COLUMN_NAME\"];\n                    tableColumn.type = dbColumn[\"DATA_TYPE\"].toLowerCase();\n                    if (tableColumn.type.indexOf(\"(\") !== -1)\n                        tableColumn.type = tableColumn.type.replace(/\\([0-9]*\\)/, \"\");\n\n                    // check only columns that have length property\n                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type as ColumnType) !== -1) {\n                        const length = tableColumn.type === \"raw\" ? dbColumn[\"DATA_LENGTH\"] : dbColumn[\"CHAR_COL_DECL_LENGTH\"];\n                        tableColumn.length = length && !this.isDefaultColumnLength(table, tableColumn, length) ? length.toString() : \"\";\n                    }\n\n                    if (tableColumn.type === \"number\" || tableColumn.type === \"float\") {\n                        if (dbColumn[\"DATA_PRECISION\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"DATA_PRECISION\"]))\n                            tableColumn.precision = dbColumn[\"DATA_PRECISION\"];\n                        if (dbColumn[\"DATA_SCALE\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"DATA_SCALE\"]))\n                            tableColumn.scale = dbColumn[\"DATA_SCALE\"];\n\n                    } else if ((tableColumn.type === \"timestamp\"\n                        || tableColumn.type === \"timestamp with time zone\"\n                        || tableColumn.type === \"timestamp with local time zone\") && dbColumn[\"DATA_SCALE\"] !== null) {\n                        tableColumn.precision = !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"DATA_SCALE\"]) ? dbColumn[\"DATA_SCALE\"] : undefined;\n                    }\n\n                    tableColumn.default = dbColumn[\"DATA_DEFAULT\"] !== null\n                        && dbColumn[\"DATA_DEFAULT\"] !== undefined\n                        && dbColumn[\"DATA_DEFAULT\"].trim() !== \"NULL\" ? tableColumn.default = dbColumn[\"DATA_DEFAULT\"].trim() : undefined;\n\n                    tableColumn.isNullable = dbColumn[\"NULLABLE\"] === \"Y\";\n                    tableColumn.isUnique = isUnique;\n                    tableColumn.isPrimary = isPrimary;\n                    tableColumn.isGenerated = dbColumn[\"IDENTITY_COLUMN\"] === \"YES\";\n                    if (tableColumn.isGenerated) {\n                        tableColumn.generationStrategy = \"increment\";\n                        tableColumn.default = undefined;\n                    }\n                    tableColumn.comment = \"\"; // todo\n                    return tableColumn;\n                });\n\n            // find unique constraints of table, group them by constraint name and build TableUnique.\n            const tableUniqueConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return dbConstraint[\"TABLE_NAME\"] === table.name && dbConstraint[\"CONSTRAINT_TYPE\"] === \"U\";\n            }), dbConstraint => dbConstraint[\"CONSTRAINT_NAME\"]);\n\n            table.uniques = tableUniqueConstraints.map(constraint => {\n                const uniques = dbConstraints.filter(dbC => dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]);\n                return new TableUnique({\n                    name: constraint[\"CONSTRAINT_NAME\"],\n                    columnNames: uniques.map(u => u[\"COLUMN_NAME\"])\n                });\n            });\n\n            // find check constraints of table, group them by constraint name and build TableCheck.\n            const tableCheckConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return dbConstraint[\"TABLE_NAME\"] === table.name && dbConstraint[\"CONSTRAINT_TYPE\"] === \"C\";\n            }), dbConstraint => dbConstraint[\"CONSTRAINT_NAME\"]);\n\n            table.checks = tableCheckConstraints.map(constraint => {\n                const checks = dbConstraints.filter(dbC => dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]);\n                return new TableCheck({\n                    name: constraint[\"CONSTRAINT_NAME\"],\n                    columnNames: checks.map(c => c[\"COLUMN_NAME\"]),\n                    expression: constraint[\"SEARCH_CONDITION\"]\n                });\n            });\n\n            // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {\n                return dbForeignKey[\"TABLE_NAME\"] === table.name;\n            }), dbForeignKey => dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n            table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n                return new TableForeignKey({\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedTableName: dbForeignKey[\"REFERENCED_TABLE_NAME\"],\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                    onDelete: dbForeignKey[\"ON_DELETE\"],\n                    onUpdate: \"NO ACTION\", // Oracle does not have onUpdate option in FK's, but we need it for proper synchronization\n                });\n            });\n\n            // create TableIndex objects from the loaded indices\n            table.indices = dbIndices\n                .filter(dbIndex => dbIndex[\"TABLE_NAME\"] === table.name)\n                .map(dbIndex => {\n                    return new TableIndex({\n                        name: dbIndex[\"INDEX_NAME\"],\n                        columnNames: dbIndex[\"COLUMN_NAMES\"].split(\",\"),\n                        isUnique: dbIndex[\"UNIQUENESS\"] === \"UNIQUE\"\n                    });\n                });\n\n            return table;\n        });\n    }\n\n    /**\n     * Builds and returns SQL for create table.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\n\n        table.columns\n            .filter(column => column.isUnique)\n            .forEach(column => {\n                const isUniqueExist = table.uniques.some(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\n                if (!isUniqueExist)\n                    table.uniques.push(new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                        columnNames: [column.name]\n                    }));\n            });\n\n        if (table.uniques.length > 0) {\n            const uniquesSql = table.uniques.map(unique => {\n                const uniqueName = unique.name ? unique.name : this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);\n                const columnNames = unique.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`;\n            }).join(\", \");\n\n            sql += `, ${uniquesSql}`;\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks.map(check => {\n                const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression!);\n                return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`;\n            }).join(\", \");\n\n            sql += `, ${checksSql}`;\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys.map(fk => {\n                const columnNames = fk.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                if (!fk.name)\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);\n                const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES \"${fk.referencedTableName}\" (${referencedColumnNames})`;\n                if (fk.onDelete && fk.onDelete !== \"NO ACTION\") // Oracle does not support NO ACTION, but we set NO ACTION by default in EntityMetadata\n                    constraint += ` ON DELETE ${fk.onDelete}`;\n\n                return constraint;\n            }).join(\", \");\n\n            sql += `, ${foreignKeysSql}`;\n        }\n\n        const primaryColumns = table.columns.filter(column => column.isPrimary);\n        if (primaryColumns.length > 0) {\n            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`;\n        }\n\n        sql += `)`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(tableOrName: Table|string, ifExist?: boolean): Query {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const query = ifExist ? `DROP TABLE IF EXISTS \"${tableName}\"` : `DROP TABLE \"${tableName}\"`;\n        return new Query(query);\n    }\n\n    protected createViewSql(view: View): Query {\n        const materializedClause = view.materialized ? \"MATERIALIZED \" : \"\";\n        if (typeof view.expression === \"string\") {\n            return new Query(`CREATE ${materializedClause}VIEW \"${view.name}\" AS ${view.expression}`);\n        } else {\n            return new Query(`CREATE ${materializedClause}VIEW \"${view.name}\" AS ${view.expression(this.connection).getQuery()}`);\n        }\n    }\n\n    protected insertViewDefinitionSql(view: View): Query {\n        const expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n        const [query, parameters] = this.connection.createQueryBuilder()\n            .insert()\n            .into(this.getTypeormMetadataTableName())\n            .values({ type: \"VIEW\", name: view.name, value: expression })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(viewOrPath: View|string): Query {\n        const viewName = viewOrPath instanceof View ? viewOrPath.name : viewOrPath;\n        return new Query(`DROP VIEW \"${viewName}\"`);\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected deleteViewDefinitionSql(viewOrPath: View|string): Query {\n        const viewName = viewOrPath instanceof View ? viewOrPath.name : viewOrPath;\n        const qb = this.connection.createQueryBuilder();\n        const [query, parameters] = qb.delete()\n            .from(this.getTypeormMetadataTableName())\n            .where(`${qb.escape(\"type\")} = 'VIEW'`)\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name: viewName })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${table.name}\" (${columns})`);\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(indexOrName: TableIndex|string): Query {\n        let indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n        return new Query(`DROP INDEX \"${indexName}\"`);\n    }\n\n    /**\n     * Builds create primary key sql.\n     */\n    protected createPrimaryKeySql(table: Table, columnNames: string[]): Query {\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`);\n    }\n\n    /**\n     * Builds drop primary key sql.\n     */\n    protected dropPrimaryKeySql(table: Table): Query {\n        const columnNames = table.primaryColumns.map(column => column.name);\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        return new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${primaryKeyName}\"`);\n    }\n\n    /**\n     * Builds create unique constraint sql.\n     */\n    protected createUniqueConstraintSql(table: Table, uniqueConstraint: TableUnique): Query {\n        const columnNames = uniqueConstraint.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        return new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (${columnNames})`);\n    }\n\n    /**\n     * Builds drop unique constraint sql.\n     */\n    protected dropUniqueConstraintSql(table: Table, uniqueOrName: TableUnique|string): Query {\n        const uniqueName = uniqueOrName instanceof TableUnique ? uniqueOrName.name : uniqueOrName;\n        return new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${uniqueName}\"`);\n    }\n\n    /**\n     * Builds create check constraint sql.\n     */\n    protected createCheckConstraintSql(table: Table, checkConstraint: TableCheck): Query {\n        return new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${checkConstraint.name}\" CHECK (${checkConstraint.expression})`);\n    }\n\n    /**\n     * Builds drop check constraint sql.\n     */\n    protected dropCheckConstraintSql(table: Table, checkOrName: TableCheck|string): Query {\n        const checkName = checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\n        return new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${checkName}\"`);\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(table: Table, foreignKey: TableForeignKey): Query {\n        const columnNames = foreignKey.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\"` + column + `\"`).join(\",\");\n        let sql = `ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${foreignKey.name}\" FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES \"${foreignKey.referencedTableName}\" (${referencedColumnNames})`;\n        // Oracle does not support NO ACTION, but we set NO ACTION by default in EntityMetadata\n        if (foreignKey.onDelete && foreignKey.onDelete !== \"NO ACTION\")\n            sql += ` ON DELETE ${foreignKey.onDelete}`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(table: Table, foreignKeyOrName: TableForeignKey|string): Query {\n        const foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\n        return new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${foreignKeyName}\"`);\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: TableColumn) {\n        let c = `\"${column.name}\" ` + this.connection.driver.createFullType(column);\n        if (column.charset)\n            c += \" CHARACTER SET \" + column.charset;\n        if (column.collation)\n            c += \" COLLATE \" + column.collation;\n        if (column.default !== undefined && column.default !== null) // DEFAULT must be placed before NOT NULL\n            c += \" DEFAULT \" + column.default;\n        if (column.isNullable !== true && !column.isGenerated) // NOT NULL is not supported with GENERATED\n            c += \" NOT NULL\";\n        if (column.isGenerated === true && column.generationStrategy === \"increment\")\n            c += \" GENERATED BY DEFAULT AS IDENTITY\";\n\n        return c;\n    }\n\n\n}\n","import {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {AbstractSqliteQueryRunner} from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport {SqljsDriver} from \"./SqljsDriver\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class SqljsQueryRunner extends AbstractSqliteQueryRunner {\n    \n    /**\n     * Database driver used by connection.\n     */\n    driver: SqljsDriver;\n    \n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: SqljsDriver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public methods\n    // -------------------------------------------------------------------------\n    \n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        await super.commitTransaction();\n        await this.driver.autoSave();\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters: any[] = []): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise<any[]>(async (ok, fail) => {\n            const databaseConnection = this.driver.databaseConnection;\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const queryStartTime = +new Date();\n            let statement: any;\n            try {\n                statement = databaseConnection.prepare(query);\n                if (parameters) {\n                    parameters = parameters.map(p => typeof p !== 'undefined' ? p : null);\n\n                    statement.bind(parameters);\n                }\n                \n                // log slow queries if maxQueryExecution time is set\n                const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                const queryEndTime = +new Date();\n                const queryExecutionTime = queryEndTime - queryStartTime;\n                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                    this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                const result: any[] = [];\n\n                while (statement.step()) {\n                    result.push(statement.getAsObject());\n                }\n                \n                statement.free();\n                ok(result);\n            }\n            catch (e) {\n                if (statement) {\n                    statement.free();\n                }\n\n                this.driver.connection.logger.logQueryError(e, query, parameters, this);\n                fail(new QueryFailedError(query, parameters, e));\n            }\n        });\n    }\n}","import {AbstractSqliteDriver} from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport {NativescriptConnectionOptions} from \"./NativescriptConnectionOptions\";\nimport {NativescriptQueryRunner} from \"./NativescriptQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {Connection} from \"../../connection/Connection\";\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\nimport {ColumnType} from \"../types/ColumnTypes\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\n\n/**\n * Organizes communication with sqlite DBMS within Nativescript.\n */\nexport class NativescriptDriver extends AbstractSqliteDriver {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: NativescriptConnectionOptions;\n\n    /**\n     * Nativescript driver module\n     * this is most likely `nativescript-sqlite`\n     * but user can pass his own\n     */\n    driver: any;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n\n        this.connection = connection;\n        this.options = connection.options as NativescriptConnectionOptions;\n        this.database = this.options.database;\n        this.driver = this.options.driver;\n\n        // validate options to make sure everything is set\n        if (!this.options.database) {\n            throw new DriverOptionNotSetError(\"database\");\n        }\n\n        // load sqlite package\n        this.loadDependencies();\n    }\n\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.queryRunner = undefined;\n            this.databaseConnection.close().then(ok).catch(fail);\n        });\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner) {\n            this.queryRunner = new NativescriptQueryRunner(this);\n        }\n\n        return this.queryRunner;\n    }\n\n    normalizeType(column: { type?: ColumnType, length?: number | string, precision?: number|null, scale?: number }): string {\n        if ((column.type as any) === Buffer) {\n            return \"blob\";\n        }\n\n        return super.normalizeType(column);\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        return new Promise<void>((ok, fail) => {\n            const options = Object.assign({}, {\n                readOnly: this.options.readOnly,\n                key: this.options.key,\n                multithreading: this.options.multithreading,\n                migrate: this.options.migrate,\n                iosFlags: this.options.iosFlags,\n                androidFlags: this.options.androidFlags,\n            }, this.options.extra || {});\n\n            new this.sqlite(this.options.database, options, (err: Error, db: any): any => {\n                if (err) return fail(err);\n\n                // use object mode to work with TypeORM\n                db.resultType(this.sqlite.RESULTSASOBJECT);\n\n\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete work with sqlite.\n                db.execSQL(`PRAGMA foreign_keys = ON;`, [], (err: Error, result: any): any => {\n                    if (err) return fail(err);\n                    // We are all set\n                    ok(db);\n                });\n            });\n        });\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        this.sqlite = this.driver;\n        if (!this.driver) {\n            throw new DriverPackageNotInstalledError(\"Nativescript\", \"nativescript-sqlite\");\n        }\n    }\n}\n","import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\nimport {AbstractSqliteQueryRunner} from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport {NativescriptDriver} from \"./NativescriptDriver\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class NativescriptQueryRunner extends AbstractSqliteQueryRunner {\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: NativescriptDriver;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: NativescriptDriver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const connection = this.driver.connection;\n\n        return new Promise<any[]>( (ok, fail) => {\n            const isInsertQuery = query.substr(0, 11) === \"INSERT INTO\";\n\n            const handler = function (err: any, result: any) {\n\n                // log slow queries if maxQueryExecution time is set\n                const maxQueryExecutionTime = connection.options.maxQueryExecutionTime;\n                const queryEndTime = +new Date();\n                const queryExecutionTime = queryEndTime - queryStartTime;\n                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                    connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                if (err) {\n                    connection.logger.logQueryError(err, query, parameters, this);\n                    fail(new QueryFailedError(query, parameters, err));\n                } else {\n                    // when isInsertQuery == true, result is the id\n                    ok(result);\n                }\n            };\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const queryStartTime = +new Date();\n            this.connect().then(databaseConnection => {\n                if (isInsertQuery) {\n                    databaseConnection.execSQL(query, parameters, handler);\n                } else {\n                    databaseConnection.all(query, parameters, handler);\n                }\n            });\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\");\n    }\n}","import {Driver} from \"../../driver/Driver\";\nimport {RelationIdLoadResult} from \"../relation-id/RelationIdLoadResult\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {Alias} from \"../Alias\";\nimport {RelationCountLoadResult} from \"../relation-count/RelationCountLoadResult\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {QueryExpressionMap} from \"../QueryExpressionMap\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {QueryRunner} from \"../..\";\nimport {DriverUtils} from \"../../driver/DriverUtils\";\n\n/**\n * Transforms raw sql results returned from the database into entity object.\n * Entity is constructed based on its entity metadata.\n */\nexport class RawSqlResultsToEntityTransformer {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected expressionMap: QueryExpressionMap,\n                protected driver: Driver,\n                protected rawRelationIdResults: RelationIdLoadResult[],\n                protected rawRelationCountResults: RelationCountLoadResult[],\n                protected queryRunner?: QueryRunner) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated\n     * we need to group our result and we must have some unique id (primary key in our case)\n     */\n    transform(rawResults: any[], alias: Alias): any[] {\n        const group = this.group(rawResults, alias);\n        const entities: any[] = [];\n        group.forEach(results => {\n            const entity = this.transformRawResultsGroup(results, alias);\n            if (entity !== undefined)\n                entities.push(entity);\n        });\n        return entities;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Groups given raw results by ids of given alias.\n     */\n    protected group(rawResults: any[], alias: Alias): Map<string, any[]> {\n        const map = new Map();\n        const keys: string[] = [];\n        if (alias.metadata.tableType === \"view\") {\n            keys.push(...alias.metadata.columns.map(column => DriverUtils.buildColumnAlias(this.driver, alias.name, column.databaseName)));\n        } else {\n            keys.push(...alias.metadata.primaryColumns.map(column => DriverUtils.buildColumnAlias(this.driver, alias.name, column.databaseName)));\n        }\n        rawResults.forEach(rawResult => {\n            const id = keys.map(key => {\n                const keyValue = rawResult[key];\n\n                if (Buffer.isBuffer(keyValue)) {\n                    return keyValue.toString(\"hex\");\n                }\n\n                if (typeof keyValue === \"object\") {\n                    return JSON.stringify(keyValue);\n                }\n\n                return keyValue;\n            }).join(\"_\"); // todo: check partial\n\n            const items = map.get(id);\n            if (!items) {\n                map.set(id, [rawResult]);\n            } else {\n                items.push(rawResult);\n            }\n        });\n        return map;\n    }\n\n    /**\n     * Transforms set of data results into single entity.\n     */\n    protected transformRawResultsGroup(rawResults: any[], alias: Alias): ObjectLiteral|undefined {\n        // let hasColumns = false; // , hasEmbeddedColumns = false, hasParentColumns = false, hasParentEmbeddedColumns = false;\n        let metadata = alias.metadata;\n\n        if (metadata.discriminatorColumn) {\n            const discriminatorValues = rawResults.map(result => result[DriverUtils.buildColumnAlias(this.driver, alias.name, alias.metadata.discriminatorColumn!.databaseName)]);\n            const discriminatorMetadata = metadata.childEntityMetadatas.find(childEntityMetadata => {\n                return typeof discriminatorValues.find(value => value === childEntityMetadata.discriminatorValue) !== 'undefined';\n            });\n            if (discriminatorMetadata)\n                metadata = discriminatorMetadata;\n        }\n        let entity: any = this.expressionMap.options.indexOf(\"create-pojo\") !== -1 ? {} : metadata.create(this.queryRunner);\n\n        // get value from columns selections and put them into newly created entity\n        const hasColumns = this.transformColumns(rawResults, alias, entity, metadata);\n        const hasRelations = this.transformJoins(rawResults, entity, alias, metadata);\n        const hasRelationIds = this.transformRelationIds(rawResults, alias, entity, metadata);\n        const hasRelationCounts = this.transformRelationCounts(rawResults, alias, entity);\n\n        // if we have at least one selected column then return this entity\n        // since entity must have at least primary columns to be really selected and transformed into entity\n        if (hasColumns)\n            return entity;\n\n        // if we don't have any selected column we should not return entity,\n        // except for the case when entity only contain a primary column as a relation to another entity\n        // in this case its absolutely possible our entity to not have any columns except a single relation\n        const hasOnlyVirtualPrimaryColumns = metadata.primaryColumns.filter(column => column.isVirtual === false).length === 0; // todo: create metadata.hasOnlyVirtualPrimaryColumns\n        if (hasOnlyVirtualPrimaryColumns && (hasRelations || hasRelationIds || hasRelationCounts))\n            return entity;\n\n        return undefined;\n    }\n\n    // get value from columns selections and put them into object\n    protected transformColumns(rawResults: any[], alias: Alias, entity: ObjectLiteral, metadata: EntityMetadata): boolean {\n        let hasData = false;\n        metadata.columns.forEach(column => {\n\n            // if table inheritance is used make sure this column is not child's column\n            if (metadata.childEntityMetadatas.length > 0 && metadata.childEntityMetadatas.map(metadata => metadata.target).indexOf(column.target) !== -1)\n                return;\n\n            const value = rawResults[0][DriverUtils.buildColumnAlias(this.driver, alias.name, column.databaseName)];\n            if (value === undefined || column.isVirtual)\n                return;\n\n            // if user does not selected the whole entity or he used partial selection and does not select this particular column\n            // then we don't add this column and its value into the entity\n            if (!this.expressionMap.selects.find(select => select.selection === alias.name || select.selection === alias.name + \".\" + column.propertyPath))\n                return;\n\n            column.setEntityValue(entity, this.driver.prepareHydratedValue(value, column));\n            if (value !== null) // we don't mark it as has data because if we will have all nulls in our object - we don't need such object\n                hasData = true;\n        });\n        return hasData;\n    }\n\n    /**\n     * Transforms joined entities in the given raw results by a given alias and stores to the given (parent) entity\n     */\n    protected transformJoins(rawResults: any[], entity: ObjectLiteral, alias: Alias, metadata: EntityMetadata) {\n        let hasData = false;\n\n        // let discriminatorValue: string = \"\";\n        // if (metadata.discriminatorColumn)\n        //     discriminatorValue = rawResults[0][DriverUtils.buildColumnAlias(this.connection.driver, alias.name, alias.metadata.discriminatorColumn!.databaseName)];\n\n        this.expressionMap.joinAttributes.forEach(join => { // todo: we have problem here - when inner joins are used without selects it still create empty array\n\n            // skip joins without metadata\n            if (!join.metadata)\n                return;\n\n            // if simple left or inner join was performed without selection then we don't need to do anything\n            if (!join.isSelected)\n                return;\n\n            // this check need to avoid setting properties than not belong to entity when single table inheritance used. (todo: check if we still need it)\n            // const metadata = metadata.childEntityMetadatas.find(childEntityMetadata => discriminatorValue === childEntityMetadata.discriminatorValue);\n            if (join.relation && !metadata.relations.find(relation => relation === join.relation))\n                return;\n\n            // some checks to make sure this join is for current alias\n            if (join.mapToProperty) {\n                if (join.mapToPropertyParentAlias !== alias.name)\n                    return;\n            } else {\n                if (!join.relation || join.parentAlias !== alias.name || join.relationPropertyPath !== join.relation!.propertyPath)\n                    return;\n            }\n\n            // transform joined data into entities\n            let result: any = this.transform(rawResults, join.alias);\n            result = !join.isMany ? result[0] : result;\n            result = !join.isMany && result === undefined ? null : result; // this is needed to make relations to return null when its joined but nothing was found in the database\n            if (result === undefined) // if nothing was joined then simply return\n                return;\n\n            // if join was mapped to some property then save result to that property\n            if (join.mapToPropertyPropertyName) {\n                entity[join.mapToPropertyPropertyName] = result; // todo: fix embeds\n\n            } else { // otherwise set to relation\n                join.relation!.setEntityValue(entity, result);\n            }\n\n            hasData = true;\n        });\n        return hasData;\n    }\n\n    protected transformRelationIds(rawSqlResults: any[], alias: Alias, entity: ObjectLiteral, metadata: EntityMetadata): boolean {\n        let hasData = false;\n        this.rawRelationIdResults.forEach(rawRelationIdResult => {\n            if (rawRelationIdResult.relationIdAttribute.parentAlias !== alias.name)\n                return;\n\n            const relation = rawRelationIdResult.relationIdAttribute.relation;\n            const valueMap = this.createValueMapFromJoinColumns(relation, rawRelationIdResult.relationIdAttribute.parentAlias, rawSqlResults);\n            if (valueMap === undefined || valueMap === null)\n                return;\n\n            const idMaps = rawRelationIdResult.results.map(result => {\n                const entityPrimaryIds = this.extractEntityPrimaryIds(relation, result);\n                if (OrmUtils.compareIds(entityPrimaryIds, valueMap) === false)\n                    return;\n\n                let columns: ColumnMetadata[];\n                if (relation.isManyToOne || relation.isOneToOneOwner) {\n                    columns = relation.joinColumns.map(joinColumn => joinColumn);\n                } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                    columns = relation.inverseEntityMetadata.primaryColumns.map(joinColumn => joinColumn);\n                    // columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn.referencedColumn!); //.inverseEntityMetadata.primaryColumns.map(joinColumn => joinColumn);\n                } else { // ManyToMany\n                    if (relation.isOwning) {\n                        columns = relation.inverseJoinColumns.map(joinColumn => joinColumn);\n                    } else {\n                        columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn);\n                    }\n                }\n\n                const idMap = columns.reduce((idMap, column) => {\n                    let value = result[column.databaseName];\n                    if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                        if (column.isVirtual && column.referencedColumn && column.referencedColumn.propertyName !== column.propertyName) // if column is a relation\n                            value = column.referencedColumn.createValueMap(value);\n\n                        return OrmUtils.mergeDeep(idMap, column.createValueMap(value));\n                    } else {\n                        if (column.referencedColumn!.referencedColumn) // if column is a relation\n                            value = column.referencedColumn!.referencedColumn!.createValueMap(value);\n\n                        return OrmUtils.mergeDeep(idMap, column.referencedColumn!.createValueMap(value));\n                    }\n                }, {} as ObjectLiteral);\n\n                if (columns.length === 1 && rawRelationIdResult.relationIdAttribute.disableMixedMap === false) {\n                    if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                        return columns[0].getEntityValue(idMap);\n                    } else {\n                        return columns[0].referencedColumn!.getEntityValue(idMap);\n                    }\n                }\n                return idMap;\n            }).filter(result => result !== undefined);\n\n            const properties = rawRelationIdResult.relationIdAttribute.mapToPropertyPropertyPath.split(\".\");\n            const mapToProperty = (properties: string[], map: ObjectLiteral, value: any): any => {\n\n                const property = properties.shift();\n                if (property && properties.length === 0) {\n                    map[property] = value;\n                    return map;\n                } else if (property && properties.length > 0) {\n                    mapToProperty(properties, map[property], value);\n                } else {\n                    return map;\n                }\n            };\n            if (relation.isOneToOne || relation.isManyToOne) {\n                if (idMaps[0] !== undefined) {\n                    mapToProperty(properties, entity, idMaps[0]);\n                    hasData = true;\n                }\n            } else {\n                mapToProperty(properties, entity, idMaps);\n                if (idMaps.length > 0) {\n                    hasData = true;\n                }\n            }\n        });\n\n        return hasData;\n    }\n\n    protected transformRelationCounts(rawSqlResults: any[], alias: Alias, entity: ObjectLiteral): boolean {\n        let hasData = false;\n        this.rawRelationCountResults\n            .filter(rawRelationCountResult => rawRelationCountResult.relationCountAttribute.parentAlias === alias.name)\n            .forEach(rawRelationCountResult => {\n                const relation = rawRelationCountResult.relationCountAttribute.relation;\n                let referenceColumnName: string;\n\n                if (relation.isOneToMany) {\n                    referenceColumnName = relation.inverseRelation!.joinColumns[0].referencedColumn!.databaseName;  // todo: fix joinColumns[0]\n\n                } else {\n                    referenceColumnName = relation.isOwning ? relation.joinColumns[0].referencedColumn!.databaseName : relation.inverseRelation!.joinColumns[0].referencedColumn!.databaseName;\n                }\n\n                const referenceColumnValue = rawSqlResults[0][DriverUtils.buildColumnAlias(this.driver, alias.name, referenceColumnName)]; // we use zero index since its grouped data // todo: selection with alias for entity columns wont work\n                if (referenceColumnValue !== undefined && referenceColumnValue !== null) {\n                    entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = 0;\n                    rawRelationCountResult.results\n                        .filter(result => result[\"parentId\"] === referenceColumnValue)\n                        .forEach(result => {\n                            entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = parseInt(result[\"cnt\"]);\n                            hasData = true;\n                        });\n                }\n            });\n\n        return hasData;\n    }\n\n    private createValueMapFromJoinColumns(relation: RelationMetadata, parentAlias: string, rawSqlResults: any[]): ObjectLiteral {\n        let columns: ColumnMetadata[];\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n            columns = relation.entityMetadata.primaryColumns.map(joinColumn => joinColumn);\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn);\n        } else {\n            if (relation.isOwning) {\n                columns = relation.joinColumns.map(joinColumn => joinColumn);\n            } else {\n                columns = relation.inverseRelation!.inverseJoinColumns.map(joinColumn => joinColumn);\n            }\n        }\n        return columns.reduce((valueMap, column) => {\n            rawSqlResults.forEach(rawSqlResult => {\n                if (relation.isManyToOne || relation.isOneToOneOwner) {\n                    valueMap[column.databaseName] = this.driver.prepareHydratedValue(rawSqlResult[DriverUtils.buildColumnAlias(this.driver, parentAlias, column.databaseName)], column);\n                } else {\n                    valueMap[column.databaseName] =  this.driver.prepareHydratedValue(rawSqlResult[DriverUtils.buildColumnAlias(this.driver, parentAlias, column.referencedColumn!.databaseName)], column);\n                }\n            });\n            return valueMap;\n        }, {} as ObjectLiteral);\n\n    }\n\n    private extractEntityPrimaryIds(relation: RelationMetadata, relationIdRawResult: any) {\n        let columns: ColumnMetadata[];\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n            columns = relation.entityMetadata.primaryColumns.map(joinColumn => joinColumn);\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn);\n        } else {\n            if (relation.isOwning) {\n                columns = relation.joinColumns.map(joinColumn => joinColumn);\n            } else {\n                columns = relation.inverseRelation!.inverseJoinColumns.map(joinColumn => joinColumn);\n            }\n        }\n        return columns.reduce((data, column) => {\n            data[column.databaseName] = relationIdRawResult[column.databaseName];\n            return data;\n        }, {} as ObjectLiteral);\n    }\n\n    /*private removeVirtualColumns(entity: ObjectLiteral, alias: Alias) {\n        const virtualColumns = this.expressionMap.selects\n            .filter(select => select.virtual)\n            .map(select => select.selection.replace(alias.name + \".\", \"\"));\n\n        virtualColumns.forEach(virtualColumn => delete entity[virtualColumn]);\n    }*/\n\n}\n","//\n\nmodule.exports = function shallowEqual(objA, objB, compare, compareContext) {\n  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;\n\n  if (ret !== void 0) {\n    return !!ret;\n  }\n\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== \"object\" || !objA || typeof objB !== \"object\" || !objB) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);\n\n  // Test for A's keys different from B.\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx];\n\n    if (!bHasOwnProperty(key)) {\n      return false;\n    }\n\n    var valueA = objA[key];\n    var valueB = objB[key];\n\n    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;\n\n    if (ret === false || (ret === void 0 && valueA !== valueB)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n","function stylis_min (W) {\n  function M(d, c, e, h, a) {\n    for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B = e.length, J = B - 1, y, f = '', p = '', F = '', G = '', C; l < B;) {\n      g = e.charCodeAt(l);\n      l === J && 0 !== b + n + v + m && (0 !== b && (g = 47 === b ? 10 : 47), n = v = m = 0, B++, J++);\n\n      if (0 === b + n + v + m) {\n        if (l === J && (0 < r && (f = f.replace(N, '')), 0 < f.trim().length)) {\n          switch (g) {\n            case 32:\n            case 9:\n            case 59:\n            case 13:\n            case 10:\n              break;\n\n            default:\n              f += e.charAt(l);\n          }\n\n          g = 59;\n        }\n\n        switch (g) {\n          case 123:\n            f = f.trim();\n            q = f.charCodeAt(0);\n            k = 1;\n\n            for (t = ++l; l < B;) {\n              switch (g = e.charCodeAt(l)) {\n                case 123:\n                  k++;\n                  break;\n\n                case 125:\n                  k--;\n                  break;\n\n                case 47:\n                  switch (g = e.charCodeAt(l + 1)) {\n                    case 42:\n                    case 47:\n                      a: {\n                        for (u = l + 1; u < J; ++u) {\n                          switch (e.charCodeAt(u)) {\n                            case 47:\n                              if (42 === g && 42 === e.charCodeAt(u - 1) && l + 2 !== u) {\n                                l = u + 1;\n                                break a;\n                              }\n\n                              break;\n\n                            case 10:\n                              if (47 === g) {\n                                l = u + 1;\n                                break a;\n                              }\n\n                          }\n                        }\n\n                        l = u;\n                      }\n\n                  }\n\n                  break;\n\n                case 91:\n                  g++;\n\n                case 40:\n                  g++;\n\n                case 34:\n                case 39:\n                  for (; l++ < J && e.charCodeAt(l) !== g;) {\n                  }\n\n              }\n\n              if (0 === k) break;\n              l++;\n            }\n\n            k = e.substring(t, l);\n            0 === q && (q = (f = f.replace(ca, '').trim()).charCodeAt(0));\n\n            switch (q) {\n              case 64:\n                0 < r && (f = f.replace(N, ''));\n                g = f.charCodeAt(1);\n\n                switch (g) {\n                  case 100:\n                  case 109:\n                  case 115:\n                  case 45:\n                    r = c;\n                    break;\n\n                  default:\n                    r = O;\n                }\n\n                k = M(c, r, k, g, a + 1);\n                t = k.length;\n                0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(''), void 0 !== C && 0 === (t = (k = C.trim()).length) && (g = 0, k = ''));\n                if (0 < t) switch (g) {\n                  case 115:\n                    f = f.replace(da, ea);\n\n                  case 100:\n                  case 109:\n                  case 45:\n                    k = f + '{' + k + '}';\n                    break;\n\n                  case 107:\n                    f = f.replace(fa, '$1 $2');\n                    k = f + '{' + k + '}';\n                    k = 1 === w || 2 === w && L('@' + k, 3) ? '@-webkit-' + k + '@' + k : '@' + k;\n                    break;\n\n                  default:\n                    k = f + k, 112 === h && (k = (p += k, ''));\n                } else k = '';\n                break;\n\n              default:\n                k = M(c, X(c, f, I), k, h, a + 1);\n            }\n\n            F += k;\n            k = I = r = u = q = 0;\n            f = '';\n            g = e.charCodeAt(++l);\n            break;\n\n          case 125:\n          case 59:\n            f = (0 < r ? f.replace(N, '') : f).trim();\n            if (1 < (t = f.length)) switch (0 === u && (q = f.charCodeAt(0), 45 === q || 96 < q && 123 > q) && (t = (f = f.replace(' ', ':')).length), 0 < A && void 0 !== (C = H(1, f, c, d, D, z, p.length, h, a, h)) && 0 === (t = (f = C.trim()).length) && (f = '\\x00\\x00'), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {\n              case 0:\n                break;\n\n              case 64:\n                if (105 === g || 99 === g) {\n                  G += f + e.charAt(l);\n                  break;\n                }\n\n              default:\n                58 !== f.charCodeAt(t - 1) && (p += P(f, q, g, f.charCodeAt(2)));\n            }\n            I = r = u = q = 0;\n            f = '';\n            g = e.charCodeAt(++l);\n        }\n      }\n\n      switch (g) {\n        case 13:\n        case 10:\n          47 === b ? b = 0 : 0 === 1 + q && 107 !== h && 0 < f.length && (r = 1, f += '\\x00');\n          0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);\n          z = 1;\n          D++;\n          break;\n\n        case 59:\n        case 125:\n          if (0 === b + n + v + m) {\n            z++;\n            break;\n          }\n\n        default:\n          z++;\n          y = e.charAt(l);\n\n          switch (g) {\n            case 9:\n            case 32:\n              if (0 === n + m + b) switch (x) {\n                case 44:\n                case 58:\n                case 9:\n                case 32:\n                  y = '';\n                  break;\n\n                default:\n                  32 !== g && (y = ' ');\n              }\n              break;\n\n            case 0:\n              y = '\\\\0';\n              break;\n\n            case 12:\n              y = '\\\\f';\n              break;\n\n            case 11:\n              y = '\\\\v';\n              break;\n\n            case 38:\n              0 === n + b + m && (r = I = 1, y = '\\f' + y);\n              break;\n\n            case 108:\n              if (0 === n + b + m + E && 0 < u) switch (l - u) {\n                case 2:\n                  112 === x && 58 === e.charCodeAt(l - 3) && (E = x);\n\n                case 8:\n                  111 === K && (E = K);\n              }\n              break;\n\n            case 58:\n              0 === n + b + m && (u = l);\n              break;\n\n            case 44:\n              0 === b + v + n + m && (r = 1, y += '\\r');\n              break;\n\n            case 34:\n            case 39:\n              0 === b && (n = n === g ? 0 : 0 === n ? g : n);\n              break;\n\n            case 91:\n              0 === n + b + v && m++;\n              break;\n\n            case 93:\n              0 === n + b + v && m--;\n              break;\n\n            case 41:\n              0 === n + b + m && v--;\n              break;\n\n            case 40:\n              if (0 === n + b + m) {\n                if (0 === q) switch (2 * x + 3 * K) {\n                  case 533:\n                    break;\n\n                  default:\n                    q = 1;\n                }\n                v++;\n              }\n\n              break;\n\n            case 64:\n              0 === b + v + n + m + u + k && (k = 1);\n              break;\n\n            case 42:\n            case 47:\n              if (!(0 < n + m + v)) switch (b) {\n                case 0:\n                  switch (2 * g + 3 * e.charCodeAt(l + 1)) {\n                    case 235:\n                      b = 47;\n                      break;\n\n                    case 220:\n                      t = l, b = 42;\n                  }\n\n                  break;\n\n                case 42:\n                  47 === g && 42 === x && t + 2 !== l && (33 === e.charCodeAt(t + 2) && (p += e.substring(t, l + 1)), y = '', b = 0);\n              }\n          }\n\n          0 === b && (f += y);\n      }\n\n      K = x;\n      x = g;\n      l++;\n    }\n\n    t = p.length;\n\n    if (0 < t) {\n      r = c;\n      if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), void 0 !== C && 0 === (p = C).length)) return G + p + F;\n      p = r.join(',') + '{' + p + '}';\n\n      if (0 !== w * E) {\n        2 !== w || L(p, 2) || (E = 0);\n\n        switch (E) {\n          case 111:\n            p = p.replace(ha, ':-moz-$1') + p;\n            break;\n\n          case 112:\n            p = p.replace(Q, '::-webkit-input-$1') + p.replace(Q, '::-moz-$1') + p.replace(Q, ':-ms-input-$1') + p;\n        }\n\n        E = 0;\n      }\n    }\n\n    return G + p + F;\n  }\n\n  function X(d, c, e) {\n    var h = c.trim().split(ia);\n    c = h;\n    var a = h.length,\n        m = d.length;\n\n    switch (m) {\n      case 0:\n      case 1:\n        var b = 0;\n\n        for (d = 0 === m ? '' : d[0] + ' '; b < a; ++b) {\n          c[b] = Z(d, c[b], e).trim();\n        }\n\n        break;\n\n      default:\n        var v = b = 0;\n\n        for (c = []; b < a; ++b) {\n          for (var n = 0; n < m; ++n) {\n            c[v++] = Z(d[n] + ' ', h[b], e).trim();\n          }\n        }\n\n    }\n\n    return c;\n  }\n\n  function Z(d, c, e) {\n    var h = c.charCodeAt(0);\n    33 > h && (h = (c = c.trim()).charCodeAt(0));\n\n    switch (h) {\n      case 38:\n        return c.replace(F, '$1' + d.trim());\n\n      case 58:\n        return d.trim() + c.replace(F, '$1' + d.trim());\n\n      default:\n        if (0 < 1 * e && 0 < c.indexOf('\\f')) return c.replace(F, (58 === d.charCodeAt(0) ? '' : '$1') + d.trim());\n    }\n\n    return d + c;\n  }\n\n  function P(d, c, e, h) {\n    var a = d + ';',\n        m = 2 * c + 3 * e + 4 * h;\n\n    if (944 === m) {\n      d = a.indexOf(':', 9) + 1;\n      var b = a.substring(d, a.length - 1).trim();\n      b = a.substring(0, d).trim() + b + ';';\n      return 1 === w || 2 === w && L(b, 1) ? '-webkit-' + b + b : b;\n    }\n\n    if (0 === w || 2 === w && !L(a, 1)) return a;\n\n    switch (m) {\n      case 1015:\n        return 97 === a.charCodeAt(10) ? '-webkit-' + a + a : a;\n\n      case 951:\n        return 116 === a.charCodeAt(3) ? '-webkit-' + a + a : a;\n\n      case 963:\n        return 110 === a.charCodeAt(5) ? '-webkit-' + a + a : a;\n\n      case 1009:\n        if (100 !== a.charCodeAt(4)) break;\n\n      case 969:\n      case 942:\n        return '-webkit-' + a + a;\n\n      case 978:\n        return '-webkit-' + a + '-moz-' + a + a;\n\n      case 1019:\n      case 983:\n        return '-webkit-' + a + '-moz-' + a + '-ms-' + a + a;\n\n      case 883:\n        if (45 === a.charCodeAt(8)) return '-webkit-' + a + a;\n        if (0 < a.indexOf('image-set(', 11)) return a.replace(ja, '$1-webkit-$2') + a;\n        break;\n\n      case 932:\n        if (45 === a.charCodeAt(4)) switch (a.charCodeAt(5)) {\n          case 103:\n            return '-webkit-box-' + a.replace('-grow', '') + '-webkit-' + a + '-ms-' + a.replace('grow', 'positive') + a;\n\n          case 115:\n            return '-webkit-' + a + '-ms-' + a.replace('shrink', 'negative') + a;\n\n          case 98:\n            return '-webkit-' + a + '-ms-' + a.replace('basis', 'preferred-size') + a;\n        }\n        return '-webkit-' + a + '-ms-' + a + a;\n\n      case 964:\n        return '-webkit-' + a + '-ms-flex-' + a + a;\n\n      case 1023:\n        if (99 !== a.charCodeAt(8)) break;\n        b = a.substring(a.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');\n        return '-webkit-box-pack' + b + '-webkit-' + a + '-ms-flex-pack' + b + a;\n\n      case 1005:\n        return ka.test(a) ? a.replace(aa, ':-webkit-') + a.replace(aa, ':-moz-') + a : a;\n\n      case 1e3:\n        b = a.substring(13).trim();\n        c = b.indexOf('-') + 1;\n\n        switch (b.charCodeAt(0) + b.charCodeAt(c)) {\n          case 226:\n            b = a.replace(G, 'tb');\n            break;\n\n          case 232:\n            b = a.replace(G, 'tb-rl');\n            break;\n\n          case 220:\n            b = a.replace(G, 'lr');\n            break;\n\n          default:\n            return a;\n        }\n\n        return '-webkit-' + a + '-ms-' + b + a;\n\n      case 1017:\n        if (-1 === a.indexOf('sticky', 9)) break;\n\n      case 975:\n        c = (a = d).length - 10;\n        b = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(':', 7) + 1).trim();\n\n        switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {\n          case 203:\n            if (111 > b.charCodeAt(8)) break;\n\n          case 115:\n            a = a.replace(b, '-webkit-' + b) + ';' + a;\n            break;\n\n          case 207:\n          case 102:\n            a = a.replace(b, '-webkit-' + (102 < m ? 'inline-' : '') + 'box') + ';' + a.replace(b, '-webkit-' + b) + ';' + a.replace(b, '-ms-' + b + 'box') + ';' + a;\n        }\n\n        return a + ';';\n\n      case 938:\n        if (45 === a.charCodeAt(5)) switch (a.charCodeAt(6)) {\n          case 105:\n            return b = a.replace('-items', ''), '-webkit-' + a + '-webkit-box-' + b + '-ms-flex-' + b + a;\n\n          case 115:\n            return '-webkit-' + a + '-ms-flex-item-' + a.replace(ba, '') + a;\n\n          default:\n            return '-webkit-' + a + '-ms-flex-line-pack' + a.replace('align-content', '').replace(ba, '') + a;\n        }\n        break;\n\n      case 973:\n      case 989:\n        if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4)) break;\n\n      case 931:\n      case 953:\n        if (!0 === la.test(d)) return 115 === (b = d.substring(d.indexOf(':') + 1)).charCodeAt(0) ? P(d.replace('stretch', 'fill-available'), c, e, h).replace(':fill-available', ':stretch') : a.replace(b, '-webkit-' + b) + a.replace(b, '-moz-' + b.replace('fill-', '')) + a;\n        break;\n\n      case 962:\n        if (a = '-webkit-' + a + (102 === a.charCodeAt(5) ? '-ms-' + a : '') + a, 211 === e + h && 105 === a.charCodeAt(13) && 0 < a.indexOf('transform', 10)) return a.substring(0, a.indexOf(';', 27) + 1).replace(ma, '$1-webkit-$2') + a;\n    }\n\n    return a;\n  }\n\n  function L(d, c) {\n    var e = d.indexOf(1 === c ? ':' : '{'),\n        h = d.substring(0, 3 !== c ? e : 10);\n    e = d.substring(e + 1, d.length - 1);\n    return R(2 !== c ? h : h.replace(na, '$1'), e, c);\n  }\n\n  function ea(d, c) {\n    var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));\n    return e !== c + ';' ? e.replace(oa, ' or ($1)').substring(4) : '(' + c + ')';\n  }\n\n  function H(d, c, e, h, a, m, b, v, n, q) {\n    for (var g = 0, x = c, w; g < A; ++g) {\n      switch (w = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {\n        case void 0:\n        case !1:\n        case !0:\n        case null:\n          break;\n\n        default:\n          x = w;\n      }\n    }\n\n    if (x !== c) return x;\n  }\n\n  function T(d) {\n    switch (d) {\n      case void 0:\n      case null:\n        A = S.length = 0;\n        break;\n\n      default:\n        if ('function' === typeof d) S[A++] = d;else if ('object' === typeof d) for (var c = 0, e = d.length; c < e; ++c) {\n          T(d[c]);\n        } else Y = !!d | 0;\n    }\n\n    return T;\n  }\n\n  function U(d) {\n    d = d.prefix;\n    void 0 !== d && (R = null, d ? 'function' !== typeof d ? w = 1 : (w = 2, R = d) : w = 0);\n    return U;\n  }\n\n  function B(d, c) {\n    var e = d;\n    33 > e.charCodeAt(0) && (e = e.trim());\n    V = e;\n    e = [V];\n\n    if (0 < A) {\n      var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);\n      void 0 !== h && 'string' === typeof h && (c = h);\n    }\n\n    var a = M(O, e, c, 0, 0);\n    0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), void 0 !== h && (a = h));\n    V = '';\n    E = 0;\n    z = D = 1;\n    return a;\n  }\n\n  var ca = /^\\0+/g,\n      N = /[\\0\\r\\f]/g,\n      aa = /: */g,\n      ka = /zoo|gra/,\n      ma = /([,: ])(transform)/g,\n      ia = /,\\r+?/g,\n      F = /([\\t\\r\\n ])*\\f?&/g,\n      fa = /@(k\\w+)\\s*(\\S*)\\s*/,\n      Q = /::(place)/g,\n      ha = /:(read-only)/g,\n      G = /[svh]\\w+-[tblr]{2}/,\n      da = /\\(\\s*(.*)\\s*\\)/g,\n      oa = /([\\s\\S]*?);/g,\n      ba = /-self|flex-/g,\n      na = /[^]*?(:[rp][el]a[\\w-]+)[^]*/,\n      la = /stretch|:\\s*\\w+\\-(?:conte|avail)/,\n      ja = /([^-])(image-set\\()/,\n      z = 1,\n      D = 1,\n      E = 0,\n      w = 1,\n      O = [],\n      S = [],\n      A = 0,\n      R = null,\n      Y = 0,\n      V = '';\n  B.use = T;\n  B.set = U;\n  void 0 !== W && U(W);\n  return B;\n}\n\nexport default stylis_min;\n","var unitlessKeys = {\n  animationIterationCount: 1,\n  borderImageOutset: 1,\n  borderImageSlice: 1,\n  borderImageWidth: 1,\n  boxFlex: 1,\n  boxFlexGroup: 1,\n  boxOrdinalGroup: 1,\n  columnCount: 1,\n  columns: 1,\n  flex: 1,\n  flexGrow: 1,\n  flexPositive: 1,\n  flexShrink: 1,\n  flexNegative: 1,\n  flexOrder: 1,\n  gridRow: 1,\n  gridRowEnd: 1,\n  gridRowSpan: 1,\n  gridRowStart: 1,\n  gridColumn: 1,\n  gridColumnEnd: 1,\n  gridColumnSpan: 1,\n  gridColumnStart: 1,\n  msGridRow: 1,\n  msGridRowSpan: 1,\n  msGridColumn: 1,\n  msGridColumnSpan: 1,\n  fontWeight: 1,\n  lineHeight: 1,\n  opacity: 1,\n  order: 1,\n  orphans: 1,\n  tabSize: 1,\n  widows: 1,\n  zIndex: 1,\n  zoom: 1,\n  WebkitLineClamp: 1,\n  // SVG-related properties\n  fillOpacity: 1,\n  floodOpacity: 1,\n  stopOpacity: 1,\n  strokeDasharray: 1,\n  strokeDashoffset: 1,\n  strokeMiterlimit: 1,\n  strokeOpacity: 1,\n  strokeWidth: 1\n};\n\nexport default unitlessKeys;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb, null, ret) },\n            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport isNativeReflectConstruct from \"@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nimport possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","/** @license React v17.0.1\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var l=require(\"object-assign\"),n=60103,p=60106;exports.Fragment=60107;exports.StrictMode=60108;exports.Profiler=60114;var q=60109,r=60110,t=60112;exports.Suspense=60113;var u=60115,v=60116;\nif(\"function\"===typeof Symbol&&Symbol.for){var w=Symbol.for;n=w(\"react.element\");p=w(\"react.portal\");exports.Fragment=w(\"react.fragment\");exports.StrictMode=w(\"react.strict_mode\");exports.Profiler=w(\"react.profiler\");q=w(\"react.provider\");r=w(\"react.context\");t=w(\"react.forward_ref\");exports.Suspense=w(\"react.suspense\");u=w(\"react.memo\");v=w(\"react.lazy\")}var x=\"function\"===typeof Symbol&&Symbol.iterator;\nfunction y(a){if(null===a||\"object\"!==typeof a)return null;a=x&&a[x]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}function z(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}\nvar A={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},B={};function C(a,b,c){this.props=a;this.context=b;this.refs=B;this.updater=c||A}C.prototype.isReactComponent={};C.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(z(85));this.updater.enqueueSetState(this,a,b,\"setState\")};C.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};\nfunction D(){}D.prototype=C.prototype;function E(a,b,c){this.props=a;this.context=b;this.refs=B;this.updater=c||A}var F=E.prototype=new D;F.constructor=E;l(F,C.prototype);F.isPureReactComponent=!0;var G={current:null},H=Object.prototype.hasOwnProperty,I={key:!0,ref:!0,__self:!0,__source:!0};\nfunction J(a,b,c){var e,d={},k=null,h=null;if(null!=b)for(e in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=\"\"+b.key),b)H.call(b,e)&&!I.hasOwnProperty(e)&&(d[e]=b[e]);var g=arguments.length-2;if(1===g)d.children=c;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];d.children=f}if(a&&a.defaultProps)for(e in g=a.defaultProps,g)void 0===d[e]&&(d[e]=g[e]);return{$$typeof:n,type:a,key:k,ref:h,props:d,_owner:G.current}}\nfunction K(a,b){return{$$typeof:n,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function L(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===n}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+a.replace(/[=:]/g,function(a){return b[a]})}var M=/\\/+/g;function N(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(\"\"+a.key):b.toString(36)}\nfunction O(a,b,c,e,d){var k=typeof a;if(\"undefined\"===k||\"boolean\"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case \"string\":case \"number\":h=!0;break;case \"object\":switch(a.$$typeof){case n:case p:h=!0}}if(h)return h=a,d=d(h),a=\"\"===e?\".\"+N(h,0):e,Array.isArray(d)?(c=\"\",null!=a&&(c=a.replace(M,\"$&/\")+\"/\"),O(d,b,c,\"\",function(a){return a})):null!=d&&(L(d)&&(d=K(d,c+(!d.key||h&&h.key===d.key?\"\":(\"\"+d.key).replace(M,\"$&/\")+\"/\")+a)),b.push(d)),1;h=0;e=\"\"===e?\".\":e+\":\";if(Array.isArray(a))for(var g=\n0;g<a.length;g++){k=a[g];var f=e+N(k,g);h+=O(k,b,c,f,d)}else if(f=y(a),\"function\"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=e+N(k,g++),h+=O(k,b,c,f,d);else if(\"object\"===k)throw b=\"\"+a,Error(z(31,\"[object Object]\"===b?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":b));return h}function P(a,b,c){if(null==a)return a;var e=[],d=0;O(a,e,\"\",\"\",function(a){return b.call(c,a,d++)});return e}\nfunction Q(a){if(-1===a._status){var b=a._result;b=b();a._status=0;a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b)},function(b){0===a._status&&(a._status=2,a._result=b)})}if(1===a._status)return a._result;throw a._result;}var R={current:null};function S(){var a=R.current;if(null===a)throw Error(z(321));return a}var T={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:G,IsSomeRendererActing:{current:!1},assign:l};\nexports.Children={map:P,forEach:function(a,b,c){P(a,function(){b.apply(this,arguments)},c)},count:function(a){var b=0;P(a,function(){b++});return b},toArray:function(a){return P(a,function(a){return a})||[]},only:function(a){if(!L(a))throw Error(z(143));return a}};exports.Component=C;exports.PureComponent=E;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T;\nexports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(z(267,a));var e=l({},a.props),d=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=G.current);void 0!==b.key&&(d=\"\"+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)H.call(b,f)&&!I.hasOwnProperty(f)&&(e[f]=void 0===b[f]&&void 0!==g?g[f]:b[f])}var f=arguments.length-2;if(1===f)e.children=c;else if(1<f){g=Array(f);for(var m=0;m<f;m++)g[m]=arguments[m+2];e.children=g}return{$$typeof:n,type:a.type,\nkey:d,ref:k,props:e,_owner:h}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:r,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:q,_context:a};return a.Consumer=a};exports.createElement=J;exports.createFactory=function(a){var b=J.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:t,render:a}};exports.isValidElement=L;\nexports.lazy=function(a){return{$$typeof:v,_payload:{_status:-1,_result:a},_init:Q}};exports.memo=function(a,b){return{$$typeof:u,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return S().useCallback(a,b)};exports.useContext=function(a,b){return S().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return S().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return S().useImperativeHandle(a,b,c)};\nexports.useLayoutEffect=function(a,b){return S().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return S().useMemo(a,b)};exports.useReducer=function(a,b,c){return S().useReducer(a,b,c)};exports.useRef=function(a){return S().useRef(a)};exports.useState=function(a){return S().useState(a)};exports.version=\"17.0.1\";\n","/** @license React v17.0.1\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n'use strict';var aa=require(\"react\"),m=require(\"object-assign\"),r=require(\"scheduler\");function y(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}if(!aa)throw Error(y(227));var ba=new Set,ca={};function da(a,b){ea(a,b);ea(a+\"Capture\",b)}\nfunction ea(a,b){ca[a]=b;for(a=0;a<b.length;a++)ba.add(b[a])}\nvar fa=!(\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement),ha=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,ia=Object.prototype.hasOwnProperty,\nja={},ka={};function la(a){if(ia.call(ka,a))return!0;if(ia.call(ja,a))return!1;if(ha.test(a))return ka[a]=!0;ja[a]=!0;return!1}function ma(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case \"function\":case \"symbol\":return!0;case \"boolean\":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return\"data-\"!==a&&\"aria-\"!==a;default:return!1}}\nfunction na(a,b,c,d){if(null===b||\"undefined\"===typeof b||ma(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function B(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g}var D={};\n\"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style\".split(\" \").forEach(function(a){D[a]=new B(a,0,!1,a,null,!1,!1)});[[\"acceptCharset\",\"accept-charset\"],[\"className\",\"class\"],[\"htmlFor\",\"for\"],[\"httpEquiv\",\"http-equiv\"]].forEach(function(a){var b=a[0];D[b]=new B(b,1,!1,a[1],null,!1,!1)});[\"contentEditable\",\"draggable\",\"spellCheck\",\"value\"].forEach(function(a){D[a]=new B(a,2,!1,a.toLowerCase(),null,!1,!1)});\n[\"autoReverse\",\"externalResourcesRequired\",\"focusable\",\"preserveAlpha\"].forEach(function(a){D[a]=new B(a,2,!1,a,null,!1,!1)});\"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope\".split(\" \").forEach(function(a){D[a]=new B(a,3,!1,a.toLowerCase(),null,!1,!1)});\n[\"checked\",\"multiple\",\"muted\",\"selected\"].forEach(function(a){D[a]=new B(a,3,!0,a,null,!1,!1)});[\"capture\",\"download\"].forEach(function(a){D[a]=new B(a,4,!1,a,null,!1,!1)});[\"cols\",\"rows\",\"size\",\"span\"].forEach(function(a){D[a]=new B(a,6,!1,a,null,!1,!1)});[\"rowSpan\",\"start\"].forEach(function(a){D[a]=new B(a,5,!1,a.toLowerCase(),null,!1,!1)});var oa=/[\\-:]([a-z])/g;function pa(a){return a[1].toUpperCase()}\n\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height\".split(\" \").forEach(function(a){var b=a.replace(oa,\npa);D[b]=new B(b,1,!1,a,null,!1,!1)});\"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type\".split(\" \").forEach(function(a){var b=a.replace(oa,pa);D[b]=new B(b,1,!1,a,\"http://www.w3.org/1999/xlink\",!1,!1)});[\"xml:base\",\"xml:lang\",\"xml:space\"].forEach(function(a){var b=a.replace(oa,pa);D[b]=new B(b,1,!1,a,\"http://www.w3.org/XML/1998/namespace\",!1,!1)});[\"tabIndex\",\"crossOrigin\"].forEach(function(a){D[a]=new B(a,1,!1,a.toLowerCase(),null,!1,!1)});\nD.xlinkHref=new B(\"xlinkHref\",1,!1,\"xlink:href\",\"http://www.w3.org/1999/xlink\",!0,!1);[\"src\",\"href\",\"action\",\"formAction\"].forEach(function(a){D[a]=new B(a,1,!1,a.toLowerCase(),null,!0,!0)});\nfunction qa(a,b,c,d){var e=D.hasOwnProperty(b)?D[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||\"o\"!==b[0]&&\"O\"!==b[0]||\"n\"!==b[1]&&\"N\"!==b[1]?!1:!0;f||(na(b,c,e,d)&&(c=null),d||null===e?la(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,\"\"+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:\"\":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?\"\":\"\"+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}\nvar ra=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,sa=60103,ta=60106,ua=60107,wa=60108,xa=60114,ya=60109,za=60110,Aa=60112,Ba=60113,Ca=60120,Da=60115,Ea=60116,Fa=60121,Ga=60128,Ha=60129,Ia=60130,Ja=60131;\nif(\"function\"===typeof Symbol&&Symbol.for){var E=Symbol.for;sa=E(\"react.element\");ta=E(\"react.portal\");ua=E(\"react.fragment\");wa=E(\"react.strict_mode\");xa=E(\"react.profiler\");ya=E(\"react.provider\");za=E(\"react.context\");Aa=E(\"react.forward_ref\");Ba=E(\"react.suspense\");Ca=E(\"react.suspense_list\");Da=E(\"react.memo\");Ea=E(\"react.lazy\");Fa=E(\"react.block\");E(\"react.scope\");Ga=E(\"react.opaque.id\");Ha=E(\"react.debug_trace_mode\");Ia=E(\"react.offscreen\");Ja=E(\"react.legacy_hidden\")}\nvar Ka=\"function\"===typeof Symbol&&Symbol.iterator;function La(a){if(null===a||\"object\"!==typeof a)return null;a=Ka&&a[Ka]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}var Ma;function Na(a){if(void 0===Ma)try{throw Error();}catch(c){var b=c.stack.trim().match(/\\n( *(at )?)/);Ma=b&&b[1]||\"\"}return\"\\n\"+Ma+a}var Oa=!1;\nfunction Pa(a,b){if(!a||Oa)return\"\";Oa=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,\"props\",{set:function(){throw Error();}}),\"object\"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[])}catch(k){var d=k}Reflect.construct(a,[],b)}else{try{b.call()}catch(k){d=k}a.call(b.prototype)}else{try{throw Error();}catch(k){d=k}a()}}catch(k){if(k&&d&&\"string\"===typeof k.stack){for(var e=k.stack.split(\"\\n\"),\nf=d.stack.split(\"\\n\"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h])return\"\\n\"+e[g].replace(\" at new \",\" at \");while(1<=g&&0<=h)}break}}}finally{Oa=!1,Error.prepareStackTrace=c}return(a=a?a.displayName||a.name:\"\")?Na(a):\"\"}\nfunction Qa(a){switch(a.tag){case 5:return Na(a.type);case 16:return Na(\"Lazy\");case 13:return Na(\"Suspense\");case 19:return Na(\"SuspenseList\");case 0:case 2:case 15:return a=Pa(a.type,!1),a;case 11:return a=Pa(a.type.render,!1),a;case 22:return a=Pa(a.type._render,!1),a;case 1:return a=Pa(a.type,!0),a;default:return\"\"}}\nfunction Ra(a){if(null==a)return null;if(\"function\"===typeof a)return a.displayName||a.name||null;if(\"string\"===typeof a)return a;switch(a){case ua:return\"Fragment\";case ta:return\"Portal\";case xa:return\"Profiler\";case wa:return\"StrictMode\";case Ba:return\"Suspense\";case Ca:return\"SuspenseList\"}if(\"object\"===typeof a)switch(a.$$typeof){case za:return(a.displayName||\"Context\")+\".Consumer\";case ya:return(a._context.displayName||\"Context\")+\".Provider\";case Aa:var b=a.render;b=b.displayName||b.name||\"\";\nreturn a.displayName||(\"\"!==b?\"ForwardRef(\"+b+\")\":\"ForwardRef\");case Da:return Ra(a.type);case Fa:return Ra(a._render);case Ea:b=a._payload;a=a._init;try{return Ra(a(b))}catch(c){}}return null}function Sa(a){switch(typeof a){case \"boolean\":case \"number\":case \"object\":case \"string\":case \"undefined\":return a;default:return\"\"}}function Ta(a){var b=a.type;return(a=a.nodeName)&&\"input\"===a.toLowerCase()&&(\"checkbox\"===b||\"radio\"===b)}\nfunction Ua(a){var b=Ta(a)?\"checked\":\"value\",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=\"\"+a[b];if(!a.hasOwnProperty(b)&&\"undefined\"!==typeof c&&\"function\"===typeof c.get&&\"function\"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=\"\"+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=\"\"+a},stopTracking:function(){a._valueTracker=\nnull;delete a[b]}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a))}function Wa(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d=\"\";a&&(d=Ta(a)?a.checked?\"true\":\"false\":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||(\"undefined\"!==typeof document?document:void 0);if(\"undefined\"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}\nfunction Ya(a,b){var c=b.checked;return m({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?\"\":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:\"checkbox\"===b.type||\"radio\"===b.type?null!=b.checked:null!=b.value}}function $a(a,b){b=b.checked;null!=b&&qa(a,\"checked\",b,!1)}\nfunction ab(a,b){$a(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if(\"number\"===d){if(0===c&&\"\"===a.value||a.value!=c)a.value=\"\"+c}else a.value!==\"\"+c&&(a.value=\"\"+c);else if(\"submit\"===d||\"reset\"===d){a.removeAttribute(\"value\");return}b.hasOwnProperty(\"value\")?bb(a,b.type,c):b.hasOwnProperty(\"defaultValue\")&&bb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}\nfunction cb(a,b,c){if(b.hasOwnProperty(\"value\")||b.hasOwnProperty(\"defaultValue\")){var d=b.type;if(!(\"submit\"!==d&&\"reset\"!==d||void 0!==b.value&&null!==b.value))return;b=\"\"+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;\"\"!==c&&(a.name=\"\");a.defaultChecked=!!a._wrapperState.initialChecked;\"\"!==c&&(a.name=c)}\nfunction bb(a,b,c){if(\"number\"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=\"\"+a._wrapperState.initialValue:a.defaultValue!==\"\"+c&&(a.defaultValue=\"\"+c)}function db(a){var b=\"\";aa.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}function eb(a,b){a=m({children:void 0},b);if(b=db(b.children))a.children=b;return a}\nfunction fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b[\"$\"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty(\"$\"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=\"\"+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}\nfunction gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(y(91));return m({},b,{value:void 0,defaultValue:void 0,children:\"\"+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(y(92));if(Array.isArray(c)){if(!(1>=c.length))throw Error(y(93));c=c[0]}b=c}null==b&&(b=\"\");c=b}a._wrapperState={initialValue:Sa(c)}}\nfunction ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=\"\"+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=\"\"+d)}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&\"\"!==b&&null!==b&&(a.value=b)}var kb={html:\"http://www.w3.org/1999/xhtml\",mathml:\"http://www.w3.org/1998/Math/MathML\",svg:\"http://www.w3.org/2000/svg\"};\nfunction lb(a){switch(a){case \"svg\":return\"http://www.w3.org/2000/svg\";case \"math\":return\"http://www.w3.org/1998/Math/MathML\";default:return\"http://www.w3.org/1999/xhtml\"}}function mb(a,b){return null==a||\"http://www.w3.org/1999/xhtml\"===a?lb(b):\"http://www.w3.org/2000/svg\"===a&&\"foreignObject\"===b?\"http://www.w3.org/1999/xhtml\":a}\nvar nb,ob=function(a){return\"undefined\"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==kb.svg||\"innerHTML\"in a)a.innerHTML=b;else{nb=nb||document.createElement(\"div\");nb.innerHTML=\"<svg>\"+b.valueOf().toString()+\"</svg>\";for(b=nb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});\nfunction pb(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}\nvar qb={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,\nfloodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},rb=[\"Webkit\",\"ms\",\"Moz\",\"O\"];Object.keys(qb).forEach(function(a){rb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);qb[b]=qb[a]})});function sb(a,b,c){return null==b||\"boolean\"===typeof b||\"\"===b?\"\":c||\"number\"!==typeof b||0===b||qb.hasOwnProperty(a)&&qb[a]?(\"\"+b).trim():b+\"px\"}\nfunction tb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf(\"--\"),e=sb(c,b[c],d);\"float\"===c&&(c=\"cssFloat\");d?a.setProperty(c,e):a[c]=e}}var ub=m({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});\nfunction vb(a,b){if(b){if(ub[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(y(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(y(60));if(!(\"object\"===typeof b.dangerouslySetInnerHTML&&\"__html\"in b.dangerouslySetInnerHTML))throw Error(y(61));}if(null!=b.style&&\"object\"!==typeof b.style)throw Error(y(62));}}\nfunction wb(a,b){if(-1===a.indexOf(\"-\"))return\"string\"===typeof b.is;switch(a){case \"annotation-xml\":case \"color-profile\":case \"font-face\":case \"font-face-src\":case \"font-face-uri\":case \"font-face-format\":case \"font-face-name\":case \"missing-glyph\":return!1;default:return!0}}function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;\nfunction Bb(a){if(a=Cb(a)){if(\"function\"!==typeof yb)throw Error(y(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b))}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a])}}function Gb(a,b){return a(b)}function Hb(a,b,c,d,e){return a(b,c,d,e)}function Ib(){}var Jb=Gb,Kb=!1,Lb=!1;function Mb(){if(null!==zb||null!==Ab)Ib(),Fb()}\nfunction Nb(a,b,c){if(Lb)return a(b,c);Lb=!0;try{return Jb(a,b,c)}finally{Lb=!1,Mb()}}\nfunction Ob(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case \"onClick\":case \"onClickCapture\":case \"onDoubleClick\":case \"onDoubleClickCapture\":case \"onMouseDown\":case \"onMouseDownCapture\":case \"onMouseMove\":case \"onMouseMoveCapture\":case \"onMouseUp\":case \"onMouseUpCapture\":case \"onMouseEnter\":(d=!d.disabled)||(a=a.type,d=!(\"button\"===a||\"input\"===a||\"select\"===a||\"textarea\"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&\"function\"!==\ntypeof c)throw Error(y(231,b,typeof c));return c}var Pb=!1;if(fa)try{var Qb={};Object.defineProperty(Qb,\"passive\",{get:function(){Pb=!0}});window.addEventListener(\"test\",Qb,Qb);window.removeEventListener(\"test\",Qb,Qb)}catch(a){Pb=!1}function Rb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(n){this.onError(n)}}var Sb=!1,Tb=null,Ub=!1,Vb=null,Wb={onError:function(a){Sb=!0;Tb=a}};function Xb(a,b,c,d,e,f,g,h,k){Sb=!1;Tb=null;Rb.apply(Wb,arguments)}\nfunction Yb(a,b,c,d,e,f,g,h,k){Xb.apply(this,arguments);if(Sb){if(Sb){var l=Tb;Sb=!1;Tb=null}else throw Error(y(198));Ub||(Ub=!0,Vb=l)}}function Zb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.flags&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function $b(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function ac(a){if(Zb(a)!==a)throw Error(y(188));}\nfunction bc(a){var b=a.alternate;if(!b){b=Zb(a);if(null===b)throw Error(y(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return ac(e),a;if(f===d)return ac(e),b;f=f.sibling}throw Error(y(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===\nc){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(y(189));}}if(c.alternate!==d)throw Error(y(190));}if(3!==c.tag)throw Error(y(188));return c.stateNode.current===c?a:b}function cc(a){a=bc(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}\nfunction dc(a,b){for(var c=a.alternate;null!==b;){if(b===a||b===c)return!0;b=b.return}return!1}var ec,fc,gc,hc,ic=!1,jc=[],kc=null,lc=null,mc=null,nc=new Map,oc=new Map,pc=[],qc=\"mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit\".split(\" \");\nfunction rc(a,b,c,d,e){return{blockedOn:a,domEventName:b,eventSystemFlags:c|16,nativeEvent:e,targetContainers:[d]}}function sc(a,b){switch(a){case \"focusin\":case \"focusout\":kc=null;break;case \"dragenter\":case \"dragleave\":lc=null;break;case \"mouseover\":case \"mouseout\":mc=null;break;case \"pointerover\":case \"pointerout\":nc.delete(b.pointerId);break;case \"gotpointercapture\":case \"lostpointercapture\":oc.delete(b.pointerId)}}\nfunction tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a=rc(b,c,d,e,f),null!==b&&(b=Cb(b),null!==b&&fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}\nfunction uc(a,b,c,d,e){switch(b){case \"focusin\":return kc=tc(kc,a,b,c,d,e),!0;case \"dragenter\":return lc=tc(lc,a,b,c,d,e),!0;case \"mouseover\":return mc=tc(mc,a,b,c,d,e),!0;case \"pointerover\":var f=e.pointerId;nc.set(f,tc(nc.get(f)||null,a,b,c,d,e));return!0;case \"gotpointercapture\":return f=e.pointerId,oc.set(f,tc(oc.get(f)||null,a,b,c,d,e)),!0}return!1}\nfunction vc(a){var b=wc(a.target);if(null!==b){var c=Zb(b);if(null!==c)if(b=c.tag,13===b){if(b=$b(c),null!==b){a.blockedOn=b;hc(a.lanePriority,function(){r.unstable_runWithPriority(a.priority,function(){gc(c)})});return}}else if(3===b&&c.stateNode.hydrate){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}\nfunction xc(a){if(null!==a.blockedOn)return!1;for(var b=a.targetContainers;0<b.length;){var c=yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null!==c)return b=Cb(c),null!==b&&fc(b),a.blockedOn=c,!1;b.shift()}return!0}function zc(a,b,c){xc(a)&&c.delete(b)}\nfunction Ac(){for(ic=!1;0<jc.length;){var a=jc[0];if(null!==a.blockedOn){a=Cb(a.blockedOn);null!==a&&ec(a);break}for(var b=a.targetContainers;0<b.length;){var c=yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null!==c){a.blockedOn=c;break}b.shift()}null===a.blockedOn&&jc.shift()}null!==kc&&xc(kc)&&(kc=null);null!==lc&&xc(lc)&&(lc=null);null!==mc&&xc(mc)&&(mc=null);nc.forEach(zc);oc.forEach(zc)}\nfunction Bc(a,b){a.blockedOn===b&&(a.blockedOn=null,ic||(ic=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Ac)))}\nfunction Cc(a){function b(b){return Bc(b,a)}if(0<jc.length){Bc(jc[0],a);for(var c=1;c<jc.length;c++){var d=jc[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==kc&&Bc(kc,a);null!==lc&&Bc(lc,a);null!==mc&&Bc(mc,a);nc.forEach(b);oc.forEach(b);for(c=0;c<pc.length;c++)d=pc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<pc.length&&(c=pc[0],null===c.blockedOn);)vc(c),null===c.blockedOn&&pc.shift()}\nfunction Dc(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c[\"Webkit\"+a]=\"webkit\"+b;c[\"Moz\"+a]=\"moz\"+b;return c}var Ec={animationend:Dc(\"Animation\",\"AnimationEnd\"),animationiteration:Dc(\"Animation\",\"AnimationIteration\"),animationstart:Dc(\"Animation\",\"AnimationStart\"),transitionend:Dc(\"Transition\",\"TransitionEnd\")},Fc={},Gc={};\nfa&&(Gc=document.createElement(\"div\").style,\"AnimationEvent\"in window||(delete Ec.animationend.animation,delete Ec.animationiteration.animation,delete Ec.animationstart.animation),\"TransitionEvent\"in window||delete Ec.transitionend.transition);function Hc(a){if(Fc[a])return Fc[a];if(!Ec[a])return a;var b=Ec[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Gc)return Fc[a]=b[c];return a}\nvar Ic=Hc(\"animationend\"),Jc=Hc(\"animationiteration\"),Kc=Hc(\"animationstart\"),Lc=Hc(\"transitionend\"),Mc=new Map,Nc=new Map,Oc=[\"abort\",\"abort\",Ic,\"animationEnd\",Jc,\"animationIteration\",Kc,\"animationStart\",\"canplay\",\"canPlay\",\"canplaythrough\",\"canPlayThrough\",\"durationchange\",\"durationChange\",\"emptied\",\"emptied\",\"encrypted\",\"encrypted\",\"ended\",\"ended\",\"error\",\"error\",\"gotpointercapture\",\"gotPointerCapture\",\"load\",\"load\",\"loadeddata\",\"loadedData\",\"loadedmetadata\",\"loadedMetadata\",\"loadstart\",\"loadStart\",\n\"lostpointercapture\",\"lostPointerCapture\",\"playing\",\"playing\",\"progress\",\"progress\",\"seeking\",\"seeking\",\"stalled\",\"stalled\",\"suspend\",\"suspend\",\"timeupdate\",\"timeUpdate\",Lc,\"transitionEnd\",\"waiting\",\"waiting\"];function Pc(a,b){for(var c=0;c<a.length;c+=2){var d=a[c],e=a[c+1];e=\"on\"+(e[0].toUpperCase()+e.slice(1));Nc.set(d,b);Mc.set(d,e);da(e,[d])}}var Qc=r.unstable_now;Qc();var F=8;\nfunction Rc(a){if(0!==(1&a))return F=15,1;if(0!==(2&a))return F=14,2;if(0!==(4&a))return F=13,4;var b=24&a;if(0!==b)return F=12,b;if(0!==(a&32))return F=11,32;b=192&a;if(0!==b)return F=10,b;if(0!==(a&256))return F=9,256;b=3584&a;if(0!==b)return F=8,b;if(0!==(a&4096))return F=7,4096;b=4186112&a;if(0!==b)return F=6,b;b=62914560&a;if(0!==b)return F=5,b;if(a&67108864)return F=4,67108864;if(0!==(a&134217728))return F=3,134217728;b=805306368&a;if(0!==b)return F=2,b;if(0!==(1073741824&a))return F=1,1073741824;\nF=8;return a}function Sc(a){switch(a){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}function Tc(a){switch(a){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(y(358,a));}}\nfunction Uc(a,b){var c=a.pendingLanes;if(0===c)return F=0;var d=0,e=0,f=a.expiredLanes,g=a.suspendedLanes,h=a.pingedLanes;if(0!==f)d=f,e=F=15;else if(f=c&134217727,0!==f){var k=f&~g;0!==k?(d=Rc(k),e=F):(h&=f,0!==h&&(d=Rc(h),e=F))}else f=c&~g,0!==f?(d=Rc(f),e=F):0!==h&&(d=Rc(h),e=F);if(0===d)return 0;d=31-Vc(d);d=c&((0>d?0:1<<d)<<1)-1;if(0!==b&&b!==d&&0===(b&g)){Rc(b);if(e<=F)return b;F=e}b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-Vc(b),e=1<<c,d|=a[c],b&=~e;return d}\nfunction Wc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function Xc(a,b){switch(a){case 15:return 1;case 14:return 2;case 12:return a=Yc(24&~b),0===a?Xc(10,b):a;case 10:return a=Yc(192&~b),0===a?Xc(8,b):a;case 8:return a=Yc(3584&~b),0===a&&(a=Yc(4186112&~b),0===a&&(a=512)),a;case 2:return b=Yc(805306368&~b),0===b&&(b=268435456),b}throw Error(y(358,a));}function Yc(a){return a&-a}function Zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}\nfunction $c(a,b,c){a.pendingLanes|=b;var d=b-1;a.suspendedLanes&=d;a.pingedLanes&=d;a=a.eventTimes;b=31-Vc(b);a[b]=c}var Vc=Math.clz32?Math.clz32:ad,bd=Math.log,cd=Math.LN2;function ad(a){return 0===a?32:31-(bd(a)/cd|0)|0}var dd=r.unstable_UserBlockingPriority,ed=r.unstable_runWithPriority,fd=!0;function gd(a,b,c,d){Kb||Ib();var e=hd,f=Kb;Kb=!0;try{Hb(e,a,b,c,d)}finally{(Kb=f)||Mb()}}function id(a,b,c,d){ed(dd,hd.bind(null,a,b,c,d))}\nfunction hd(a,b,c,d){if(fd){var e;if((e=0===(b&4))&&0<jc.length&&-1<qc.indexOf(a))a=rc(null,a,b,c,d),jc.push(a);else{var f=yc(a,b,c,d);if(null===f)e&&sc(a,d);else{if(e){if(-1<qc.indexOf(a)){a=rc(f,a,b,c,d);jc.push(a);return}if(uc(f,a,b,c,d))return;sc(a,d)}jd(a,b,d,null,c)}}}}\nfunction yc(a,b,c,d){var e=xb(d);e=wc(e);if(null!==e){var f=Zb(e);if(null===f)e=null;else{var g=f.tag;if(13===g){e=$b(f);if(null!==e)return e;e=null}else if(3===g){if(f.stateNode.hydrate)return 3===f.tag?f.stateNode.containerInfo:null;e=null}else f!==e&&(e=null)}}jd(a,b,d,e,c);return null}var kd=null,ld=null,md=null;\nfunction nd(){if(md)return md;var a,b=ld,c=b.length,d,e=\"value\"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}function od(a){var b=a.keyCode;\"charCode\"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return!0}function qd(){return!1}\nfunction rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}m(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():\"unknown\"!==typeof a.returnValue&&\n(a.returnValue=!1),this.isDefaultPrevented=pd)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():\"unknown\"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd)},persist:function(){},isPersistent:pd});return b}\nvar sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=m({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=m({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if(\"movementX\"in\na)return a.movementX;a!==yd&&(yd&&\"mousemove\"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return\"movementY\"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=m({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=m({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=m({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=m({},sd,{clipboardData:function(a){return\"clipboardData\"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=m({},sd,{data:0}),Ld=rd(Kd),Md={Esc:\"Escape\",\nSpacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},Nd={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",116:\"F5\",117:\"F6\",118:\"F7\",\n119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"},Od={Alt:\"altKey\",Control:\"ctrlKey\",Meta:\"metaKey\",Shift:\"shiftKey\"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}\nvar Qd=m({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if(\"Unidentified\"!==b)return b}return\"keypress\"===a.type?(a=od(a),13===a?\"Enter\":String.fromCharCode(a)):\"keydown\"===a.type||\"keyup\"===a.type?Nd[a.keyCode]||\"Unidentified\":\"\"},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return\"keypress\"===a.type?od(a):0},keyCode:function(a){return\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0},which:function(a){return\"keypress\"===\na.type?od(a):\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=m({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=m({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=m({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=m({},Ad,{deltaX:function(a){return\"deltaX\"in a?a.deltaX:\"wheelDeltaX\"in a?-a.wheelDeltaX:0},\ndeltaY:function(a){return\"deltaY\"in a?a.deltaY:\"wheelDeltaY\"in a?-a.wheelDeltaY:\"wheelDelta\"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=fa&&\"CompositionEvent\"in window,be=null;fa&&\"documentMode\"in document&&(be=document.documentMode);var ce=fa&&\"TextEvent\"in window&&!be,de=fa&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;\nfunction ge(a,b){switch(a){case \"keyup\":return-1!==$d.indexOf(b.keyCode);case \"keydown\":return 229!==b.keyCode;case \"keypress\":case \"mousedown\":case \"focusout\":return!0;default:return!1}}function he(a){a=a.detail;return\"object\"===typeof a&&\"data\"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case \"compositionend\":return he(b);case \"keypress\":if(32!==b.which)return null;fe=!0;return ee;case \"textInput\":return a=b.data,a===ee&&fe?null:a;default:return null}}\nfunction ke(a,b){if(ie)return\"compositionend\"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case \"paste\":return null;case \"keypress\":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case \"compositionend\":return de&&\"ko\"!==b.locale?null:b.data;default:return null}}\nvar le={color:!0,date:!0,datetime:!0,\"datetime-local\":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return\"input\"===b?!!le[a.type]:\"textarea\"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,\"onChange\");0<b.length&&(c=new td(\"onChange\",\"change\",null,c,d),a.push({event:c,listeners:b}))}var pe=null,qe=null;function re(a){se(a,0)}function te(a){var b=ue(a);if(Wa(b))return a}\nfunction ve(a,b){if(\"change\"===a)return b}var we=!1;if(fa){var xe;if(fa){var ye=\"oninput\"in document;if(!ye){var ze=document.createElement(\"div\");ze.setAttribute(\"oninput\",\"return;\");ye=\"function\"===typeof ze.oninput}xe=ye}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode)}function Ae(){pe&&(pe.detachEvent(\"onpropertychange\",Be),qe=pe=null)}function Be(a){if(\"value\"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));a=re;if(Kb)a(b);else{Kb=!0;try{Gb(a,b)}finally{Kb=!1,Mb()}}}}\nfunction Ce(a,b,c){\"focusin\"===a?(Ae(),pe=b,qe=c,pe.attachEvent(\"onpropertychange\",Be)):\"focusout\"===a&&Ae()}function De(a){if(\"selectionchange\"===a||\"keyup\"===a||\"keydown\"===a)return te(qe)}function Ee(a,b){if(\"click\"===a)return te(b)}function Fe(a,b){if(\"input\"===a||\"change\"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He=\"function\"===typeof Object.is?Object.is:Ge,Ie=Object.prototype.hasOwnProperty;\nfunction Je(a,b){if(He(a,b))return!0;if(\"object\"!==typeof a||null===a||\"object\"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++)if(!Ie.call(b,c[d])||!He(a[c[d]],b[c[d]]))return!1;return!0}function Ke(a){for(;a&&a.firstChild;)a=a.firstChild;return a}\nfunction Le(a,b){var c=Ke(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Ke(c)}}function Me(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Me(a,b.parentNode):\"contains\"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}\nfunction Ne(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c=\"string\"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=Xa(a.document)}return b}function Oe(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&(\"input\"===b&&(\"text\"===a.type||\"search\"===a.type||\"tel\"===a.type||\"url\"===a.type||\"password\"===a.type)||\"textarea\"===b||\"true\"===a.contentEditable)}\nvar Pe=fa&&\"documentMode\"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;\nfunction Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,\"selectionStart\"in d&&Oe(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Je(Se,d)||(Se=d,d=oe(Re,\"onSelect\"),0<d.length&&(b=new td(\"onSelect\",\"select\",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)))}\nPc(\"cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange\".split(\" \"),\n0);Pc(\"drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel\".split(\" \"),1);Pc(Oc,2);for(var Ve=\"change selectionchange textInput compositionstart compositionend compositionupdate\".split(\" \"),We=0;We<Ve.length;We++)Nc.set(Ve[We],0);ea(\"onMouseEnter\",[\"mouseout\",\"mouseover\"]);\nea(\"onMouseLeave\",[\"mouseout\",\"mouseover\"]);ea(\"onPointerEnter\",[\"pointerout\",\"pointerover\"]);ea(\"onPointerLeave\",[\"pointerout\",\"pointerover\"]);da(\"onChange\",\"change click focusin focusout input keydown keyup selectionchange\".split(\" \"));da(\"onSelect\",\"focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange\".split(\" \"));da(\"onBeforeInput\",[\"compositionend\",\"keypress\",\"textInput\",\"paste\"]);da(\"onCompositionEnd\",\"compositionend focusout keydown keypress keyup mousedown\".split(\" \"));\nda(\"onCompositionStart\",\"compositionstart focusout keydown keypress keyup mousedown\".split(\" \"));da(\"onCompositionUpdate\",\"compositionupdate focusout keydown keypress keyup mousedown\".split(\" \"));var Xe=\"abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting\".split(\" \"),Ye=new Set(\"cancel close invalid load scroll toggle\".split(\" \").concat(Xe));\nfunction Ze(a,b,c){var d=a.type||\"unknown-event\";a.currentTarget=c;Yb(d,b,void 0,a);a.currentTarget=null}\nfunction se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;Ze(e,h,l);f=k}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;Ze(e,h,l);f=k}}}if(Ub)throw a=Vb,Ub=!1,Vb=null,a;}\nfunction G(a,b){var c=$e(b),d=a+\"__bubble\";c.has(d)||(af(b,a,2,!1),c.add(d))}var bf=\"_reactListening\"+Math.random().toString(36).slice(2);function cf(a){a[bf]||(a[bf]=!0,ba.forEach(function(b){Ye.has(b)||df(b,!1,a,null);df(b,!0,a,null)}))}\nfunction df(a,b,c,d){var e=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,f=c;\"selectionchange\"===a&&9!==c.nodeType&&(f=c.ownerDocument);if(null!==d&&!b&&Ye.has(a)){if(\"scroll\"!==a)return;e|=2;f=d}var g=$e(f),h=a+\"__\"+(b?\"capture\":\"bubble\");g.has(h)||(b&&(e|=4),af(f,a,e,b),g.add(h))}\nfunction af(a,b,c,d){var e=Nc.get(b);switch(void 0===e?2:e){case 0:e=gd;break;case 1:e=id;break;default:e=hd}c=e.bind(null,b,c,a);e=void 0;!Pb||\"touchstart\"!==b&&\"touchmove\"!==b&&\"wheel\"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1)}\nfunction jd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return}for(;null!==h;){g=wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode}}d=d.return}Nb(function(){var d=f,e=xb(c),g=[];\na:{var h=Mc.get(a);if(void 0!==h){var k=td,x=a;switch(a){case \"keypress\":if(0===od(c))break a;case \"keydown\":case \"keyup\":k=Rd;break;case \"focusin\":x=\"focus\";k=Fd;break;case \"focusout\":x=\"blur\";k=Fd;break;case \"beforeblur\":case \"afterblur\":k=Fd;break;case \"click\":if(2===c.button)break a;case \"auxclick\":case \"dblclick\":case \"mousedown\":case \"mousemove\":case \"mouseup\":case \"mouseout\":case \"mouseover\":case \"contextmenu\":k=Bd;break;case \"drag\":case \"dragend\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"dragstart\":case \"drop\":k=\nDd;break;case \"touchcancel\":case \"touchend\":case \"touchmove\":case \"touchstart\":k=Vd;break;case Ic:case Jc:case Kc:k=Hd;break;case Lc:k=Xd;break;case \"scroll\":k=vd;break;case \"wheel\":k=Zd;break;case \"copy\":case \"cut\":case \"paste\":k=Jd;break;case \"gotpointercapture\":case \"lostpointercapture\":case \"pointercancel\":case \"pointerdown\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"pointerup\":k=Td}var w=0!==(b&4),z=!w&&\"scroll\"===a,u=w?null!==h?h+\"Capture\":null:h;w=[];for(var t=d,q;null!==\nt;){q=t;var v=q.stateNode;5===q.tag&&null!==v&&(q=v,null!==u&&(v=Ob(t,u),null!=v&&w.push(ef(t,v,q))));if(z)break;t=t.return}0<w.length&&(h=new k(h,x,null,c,e),g.push({event:h,listeners:w}))}}if(0===(b&7)){a:{h=\"mouseover\"===a||\"pointerover\"===a;k=\"mouseout\"===a||\"pointerout\"===a;if(h&&0===(b&16)&&(x=c.relatedTarget||c.fromElement)&&(wc(x)||x[ff]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(x=c.relatedTarget||c.toElement,k=d,x=x?wc(x):null,null!==\nx&&(z=Zb(x),x!==z||5!==x.tag&&6!==x.tag))x=null}else k=null,x=d;if(k!==x){w=Bd;v=\"onMouseLeave\";u=\"onMouseEnter\";t=\"mouse\";if(\"pointerout\"===a||\"pointerover\"===a)w=Td,v=\"onPointerLeave\",u=\"onPointerEnter\",t=\"pointer\";z=null==k?h:ue(k);q=null==x?h:ue(x);h=new w(v,t+\"leave\",k,c,e);h.target=z;h.relatedTarget=q;v=null;wc(e)===d&&(w=new w(u,t+\"enter\",x,c,e),w.target=q,w.relatedTarget=z,v=w);z=v;if(k&&x)b:{w=k;u=x;t=0;for(q=w;q;q=gf(q))t++;q=0;for(v=u;v;v=gf(v))q++;for(;0<t-q;)w=gf(w),t--;for(;0<q-t;)u=\ngf(u),q--;for(;t--;){if(w===u||null!==u&&w===u.alternate)break b;w=gf(w);u=gf(u)}w=null}else w=null;null!==k&&hf(g,h,k,w,!1);null!==x&&null!==z&&hf(g,z,x,w,!0)}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if(\"select\"===k||\"input\"===k&&\"file\"===h.type)var J=ve;else if(me(h))if(we)J=Fe;else{J=De;var K=Ce}else(k=h.nodeName)&&\"input\"===k.toLowerCase()&&(\"checkbox\"===h.type||\"radio\"===h.type)&&(J=Ee);if(J&&(J=J(a,d))){ne(g,J,c,e);break a}K&&K(a,h,d);\"focusout\"===a&&(K=h._wrapperState)&&\nK.controlled&&\"number\"===h.type&&bb(h,\"number\",h.value)}K=d?ue(d):window;switch(a){case \"focusin\":if(me(K)||\"true\"===K.contentEditable)Qe=K,Re=d,Se=null;break;case \"focusout\":Se=Re=Qe=null;break;case \"mousedown\":Te=!0;break;case \"contextmenu\":case \"mouseup\":case \"dragend\":Te=!1;Ue(g,c,e);break;case \"selectionchange\":if(Pe)break;case \"keydown\":case \"keyup\":Ue(g,c,e)}var Q;if(ae)b:{switch(a){case \"compositionstart\":var L=\"onCompositionStart\";break b;case \"compositionend\":L=\"onCompositionEnd\";break b;\ncase \"compositionupdate\":L=\"onCompositionUpdate\";break b}L=void 0}else ie?ge(a,c)&&(L=\"onCompositionEnd\"):\"keydown\"===a&&229===c.keyCode&&(L=\"onCompositionStart\");L&&(de&&\"ko\"!==c.locale&&(ie||\"onCompositionStart\"!==L?\"onCompositionEnd\"===L&&ie&&(Q=nd()):(kd=e,ld=\"value\"in kd?kd.value:kd.textContent,ie=!0)),K=oe(d,L),0<K.length&&(L=new Ld(L,a,null,c,e),g.push({event:L,listeners:K}),Q?L.data=Q:(Q=he(c),null!==Q&&(L.data=Q))));if(Q=ce?je(a,c):ke(a,c))d=oe(d,\"onBeforeInput\"),0<d.length&&(e=new Ld(\"onBeforeInput\",\n\"beforeinput\",null,c,e),g.push({event:e,listeners:d}),e.data=Q)}se(g,b)})}function ef(a,b,c){return{instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+\"Capture\",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Ob(a,c),null!=f&&d.unshift(ef(a,f,e)),f=Ob(a,b),null!=f&&d.push(ef(a,f,e)));a=a.return}return d}function gf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}\nfunction hf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Ob(c,f),null!=k&&g.unshift(ef(c,k,h))):e||(k=Ob(c,f),null!=k&&g.push(ef(c,k,h))));c=c.return}0!==g.length&&a.push({event:b,listeners:g})}function jf(){}var kf=null,lf=null;function mf(a,b){switch(a){case \"button\":case \"input\":case \"select\":case \"textarea\":return!!b.autoFocus}return!1}\nfunction nf(a,b){return\"textarea\"===a||\"option\"===a||\"noscript\"===a||\"string\"===typeof b.children||\"number\"===typeof b.children||\"object\"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var of=\"function\"===typeof setTimeout?setTimeout:void 0,pf=\"function\"===typeof clearTimeout?clearTimeout:void 0;function qf(a){1===a.nodeType?a.textContent=\"\":9===a.nodeType&&(a=a.body,null!=a&&(a.textContent=\"\"))}\nfunction rf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break}return a}function sf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(\"$\"===c||\"$!\"===c||\"$?\"===c){if(0===b)return a;b--}else\"/$\"===c&&b++}a=a.previousSibling}return null}var tf=0;function uf(a){return{$$typeof:Ga,toString:a,valueOf:a}}var vf=Math.random().toString(36).slice(2),wf=\"__reactFiber$\"+vf,xf=\"__reactProps$\"+vf,ff=\"__reactContainer$\"+vf,yf=\"__reactEvents$\"+vf;\nfunction wc(a){var b=a[wf];if(b)return b;for(var c=a.parentNode;c;){if(b=c[ff]||c[wf]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=sf(a);null!==a;){if(c=a[wf])return c;a=sf(a)}return b}a=c;c=a.parentNode}return null}function Cb(a){a=a[wf]||a[ff];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(y(33));}function Db(a){return a[xf]||null}\nfunction $e(a){var b=a[yf];void 0===b&&(b=a[yf]=new Set);return b}var zf=[],Af=-1;function Bf(a){return{current:a}}function H(a){0>Af||(a.current=zf[Af],zf[Af]=null,Af--)}function I(a,b){Af++;zf[Af]=a.current;a.current=b}var Cf={},M=Bf(Cf),N=Bf(!1),Df=Cf;\nfunction Ef(a,b){var c=a.type.contextTypes;if(!c)return Cf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function Ff(a){a=a.childContextTypes;return null!==a&&void 0!==a}function Gf(){H(N);H(M)}function Hf(a,b,c){if(M.current!==Cf)throw Error(y(168));I(M,b);I(N,c)}\nfunction If(a,b,c){var d=a.stateNode;a=b.childContextTypes;if(\"function\"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in a))throw Error(y(108,Ra(b)||\"Unknown\",e));return m({},c,d)}function Jf(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Cf;Df=M.current;I(M,a);I(N,N.current);return!0}function Kf(a,b,c){var d=a.stateNode;if(!d)throw Error(y(169));c?(a=If(a,b,Df),d.__reactInternalMemoizedMergedChildContext=a,H(N),H(M),I(M,a)):H(N);I(N,c)}\nvar Lf=null,Mf=null,Nf=r.unstable_runWithPriority,Of=r.unstable_scheduleCallback,Pf=r.unstable_cancelCallback,Qf=r.unstable_shouldYield,Rf=r.unstable_requestPaint,Sf=r.unstable_now,Tf=r.unstable_getCurrentPriorityLevel,Uf=r.unstable_ImmediatePriority,Vf=r.unstable_UserBlockingPriority,Wf=r.unstable_NormalPriority,Xf=r.unstable_LowPriority,Yf=r.unstable_IdlePriority,Zf={},$f=void 0!==Rf?Rf:function(){},ag=null,bg=null,cg=!1,dg=Sf(),O=1E4>dg?Sf:function(){return Sf()-dg};\nfunction eg(){switch(Tf()){case Uf:return 99;case Vf:return 98;case Wf:return 97;case Xf:return 96;case Yf:return 95;default:throw Error(y(332));}}function fg(a){switch(a){case 99:return Uf;case 98:return Vf;case 97:return Wf;case 96:return Xf;case 95:return Yf;default:throw Error(y(332));}}function gg(a,b){a=fg(a);return Nf(a,b)}function hg(a,b,c){a=fg(a);return Of(a,b,c)}function ig(){if(null!==bg){var a=bg;bg=null;Pf(a)}jg()}\nfunction jg(){if(!cg&&null!==ag){cg=!0;var a=0;try{var b=ag;gg(99,function(){for(;a<b.length;a++){var c=b[a];do c=c(!0);while(null!==c)}});ag=null}catch(c){throw null!==ag&&(ag=ag.slice(a+1)),Of(Uf,ig),c;}finally{cg=!1}}}var kg=ra.ReactCurrentBatchConfig;function lg(a,b){if(a&&a.defaultProps){b=m({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}var mg=Bf(null),ng=null,og=null,pg=null;function qg(){pg=og=ng=null}\nfunction rg(a){var b=mg.current;H(mg);a.type._context._currentValue=b}function sg(a,b){for(;null!==a;){var c=a.alternate;if((a.childLanes&b)===b)if(null===c||(c.childLanes&b)===b)break;else c.childLanes|=b;else a.childLanes|=b,null!==c&&(c.childLanes|=b);a=a.return}}function tg(a,b){ng=a;pg=og=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(ug=!0),a.firstContext=null)}\nfunction vg(a,b){if(pg!==a&&!1!==b&&0!==b){if(\"number\"!==typeof b||1073741823===b)pg=a,b=1073741823;b={context:a,observedBits:b,next:null};if(null===og){if(null===ng)throw Error(y(308));og=b;ng.dependencies={lanes:0,firstContext:b,responders:null}}else og=og.next=b}return a._currentValue}var wg=!1;function xg(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}\nfunction yg(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects})}function zg(a,b){return{eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}function Ag(a,b){a=a.updateQueue;if(null!==a){a=a.shared;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}}\nfunction Bg(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next}while(null!==c);null===f?e=f=b:f=f.next=b}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=\nb;c.lastBaseUpdate=b}\nfunction Cg(a,b,c,d){var e=a.updateQueue;wg=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var n=a.alternate;if(null!==n){n=n.updateQueue;var A=n.lastBaseUpdate;A!==g&&(null===A?n.firstBaseUpdate=l:A.next=l,n.lastBaseUpdate=k)}}if(null!==f){A=e.baseState;g=0;n=l=k=null;do{h=f.lane;var p=f.eventTime;if((d&h)===h){null!==n&&(n=n.next={eventTime:p,lane:0,tag:f.tag,payload:f.payload,callback:f.callback,\nnext:null});a:{var C=a,x=f;h=b;p=c;switch(x.tag){case 1:C=x.payload;if(\"function\"===typeof C){A=C.call(p,A,h);break a}A=C;break a;case 3:C.flags=C.flags&-4097|64;case 0:C=x.payload;h=\"function\"===typeof C?C.call(p,A,h):C;if(null===h||void 0===h)break a;A=m({},A,h);break a;case 2:wg=!0}}null!==f.callback&&(a.flags|=32,h=e.effects,null===h?e.effects=[f]:h.push(f))}else p={eventTime:p,lane:h,tag:f.tag,payload:f.payload,callback:f.callback,next:null},null===n?(l=n=p,k=A):n=n.next=p,g|=h;f=f.next;if(null===\nf)if(h=e.shared.pending,null===h)break;else f=h.next,h.next=null,e.lastBaseUpdate=h,e.shared.pending=null}while(1);null===n&&(k=A);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=n;Dg|=g;a.lanes=g;a.memoizedState=A}}function Eg(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if(\"function\"!==typeof e)throw Error(y(191,e));e.call(d)}}}var Fg=(new aa.Component).refs;\nfunction Gg(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:m({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c)}\nvar Kg={isMounted:function(a){return(a=a._reactInternals)?Zb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=Hg(),e=Ig(a),f=zg(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);Ag(a,f);Jg(a,e,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=Hg(),e=Ig(a),f=zg(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);Ag(a,f);Jg(a,e,d)},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=Hg(),d=Ig(a),e=zg(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=\nb);Ag(a,e);Jg(a,d,c)}};function Lg(a,b,c,d,e,f,g){a=a.stateNode;return\"function\"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Je(c,d)||!Je(e,f):!0}\nfunction Mg(a,b,c){var d=!1,e=Cf;var f=b.contextType;\"object\"===typeof f&&null!==f?f=vg(f):(e=Ff(b)?Df:M.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Ef(a,e):Cf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Kg;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}\nfunction Ng(a,b,c,d){a=b.state;\"function\"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);\"function\"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Kg.enqueueReplaceState(b,b.state,null)}\nfunction Og(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Fg;xg(a);var f=b.contextType;\"object\"===typeof f&&null!==f?e.context=vg(f):(f=Ff(b)?Df:M.current,e.context=Ef(a,f));Cg(a,c,e,d);e.state=a.memoizedState;f=b.getDerivedStateFromProps;\"function\"===typeof f&&(Gg(a,b,f,c),e.state=a.memoizedState);\"function\"===typeof b.getDerivedStateFromProps||\"function\"===typeof e.getSnapshotBeforeUpdate||\"function\"!==typeof e.UNSAFE_componentWillMount&&\"function\"!==typeof e.componentWillMount||\n(b=e.state,\"function\"===typeof e.componentWillMount&&e.componentWillMount(),\"function\"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Kg.enqueueReplaceState(e,e.state,null),Cg(a,c,e,d),e.state=a.memoizedState);\"function\"===typeof e.componentDidMount&&(a.flags|=4)}var Pg=Array.isArray;\nfunction Qg(a,b,c){a=c.ref;if(null!==a&&\"function\"!==typeof a&&\"object\"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(y(309));var d=c.stateNode}if(!d)throw Error(y(147,a));var e=\"\"+a;if(null!==b&&null!==b.ref&&\"function\"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Fg&&(b=d.refs={});null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}if(\"string\"!==typeof a)throw Error(y(284));if(!c._owner)throw Error(y(290,a));}return a}\nfunction Rg(a,b){if(\"textarea\"!==a.type)throw Error(y(31,\"[object Object]\"===Object.prototype.toString.call(b)?\"object with keys {\"+Object.keys(b).join(\", \")+\"}\":b));}\nfunction Sg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.flags=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Tg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags=2,\nc):d;b.flags=2;return c}function g(b){a&&null===b.alternate&&(b.flags=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Ug(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props),d.ref=Qg(a,b,c),d.return=a,d;d=Vg(c.type,c.key,c.props,null,a.mode,d);d.ref=Qg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=\nWg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function n(a,b,c,d,f){if(null===b||7!==b.tag)return b=Xg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function A(a,b,c){if(\"string\"===typeof b||\"number\"===typeof b)return b=Ug(\"\"+b,a.mode,c),b.return=a,b;if(\"object\"===typeof b&&null!==b){switch(b.$$typeof){case sa:return c=Vg(b.type,b.key,b.props,null,a.mode,c),c.ref=Qg(a,null,b),c.return=a,c;case ta:return b=Wg(b,a.mode,c),b.return=a,b}if(Pg(b)||La(b))return b=Xg(b,\na.mode,c,null),b.return=a,b;Rg(a,b)}return null}function p(a,b,c,d){var e=null!==b?b.key:null;if(\"string\"===typeof c||\"number\"===typeof c)return null!==e?null:h(a,b,\"\"+c,d);if(\"object\"===typeof c&&null!==c){switch(c.$$typeof){case sa:return c.key===e?c.type===ua?n(a,b,c.props.children,d,e):k(a,b,c,d):null;case ta:return c.key===e?l(a,b,c,d):null}if(Pg(c)||La(c))return null!==e?null:n(a,b,c,d,null);Rg(a,c)}return null}function C(a,b,c,d,e){if(\"string\"===typeof d||\"number\"===typeof d)return a=a.get(c)||\nnull,h(b,a,\"\"+d,e);if(\"object\"===typeof d&&null!==d){switch(d.$$typeof){case sa:return a=a.get(null===d.key?c:d.key)||null,d.type===ua?n(b,a,d.props.children,e,d.key):k(b,a,d,e);case ta:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Pg(d)||La(d))return a=a.get(c)||null,n(b,a,d,e,null);Rg(b,d)}return null}function x(e,g,h,k){for(var l=null,t=null,u=g,z=g=0,q=null;null!==u&&z<h.length;z++){u.index>z?(q=u,u=null):q=u.sibling;var n=p(e,u,h[z],k);if(null===n){null===u&&(u=q);break}a&&u&&null===\nn.alternate&&b(e,u);g=f(n,g,z);null===t?l=n:t.sibling=n;t=n;u=q}if(z===h.length)return c(e,u),l;if(null===u){for(;z<h.length;z++)u=A(e,h[z],k),null!==u&&(g=f(u,g,z),null===t?l=u:t.sibling=u,t=u);return l}for(u=d(e,u);z<h.length;z++)q=C(u,e,z,h[z],k),null!==q&&(a&&null!==q.alternate&&u.delete(null===q.key?z:q.key),g=f(q,g,z),null===t?l=q:t.sibling=q,t=q);a&&u.forEach(function(a){return b(e,a)});return l}function w(e,g,h,k){var l=La(h);if(\"function\"!==typeof l)throw Error(y(150));h=l.call(h);if(null==\nh)throw Error(y(151));for(var t=l=null,u=g,z=g=0,q=null,n=h.next();null!==u&&!n.done;z++,n=h.next()){u.index>z?(q=u,u=null):q=u.sibling;var w=p(e,u,n.value,k);if(null===w){null===u&&(u=q);break}a&&u&&null===w.alternate&&b(e,u);g=f(w,g,z);null===t?l=w:t.sibling=w;t=w;u=q}if(n.done)return c(e,u),l;if(null===u){for(;!n.done;z++,n=h.next())n=A(e,n.value,k),null!==n&&(g=f(n,g,z),null===t?l=n:t.sibling=n,t=n);return l}for(u=d(e,u);!n.done;z++,n=h.next())n=C(u,e,z,n.value,k),null!==n&&(a&&null!==n.alternate&&\nu.delete(null===n.key?z:n.key),g=f(n,g,z),null===t?l=n:t.sibling=n,t=n);a&&u.forEach(function(a){return b(e,a)});return l}return function(a,d,f,h){var k=\"object\"===typeof f&&null!==f&&f.type===ua&&null===f.key;k&&(f=f.props.children);var l=\"object\"===typeof f&&null!==f;if(l)switch(f.$$typeof){case sa:a:{l=f.key;for(k=d;null!==k;){if(k.key===l){switch(k.tag){case 7:if(f.type===ua){c(a,k.sibling);d=e(k,f.props.children);d.return=a;a=d;break a}break;default:if(k.elementType===f.type){c(a,k.sibling);\nd=e(k,f.props);d.ref=Qg(a,k,f);d.return=a;a=d;break a}}c(a,k);break}else b(a,k);k=k.sibling}f.type===ua?(d=Xg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Vg(f.type,f.key,f.props,null,a.mode,h),h.ref=Qg(a,d,f),h.return=a,a=h)}return g(a);case ta:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=\nWg(f,a.mode,h);d.return=a;a=d}return g(a)}if(\"string\"===typeof f||\"number\"===typeof f)return f=\"\"+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=Ug(f,a.mode,h),d.return=a,a=d),g(a);if(Pg(f))return x(a,d,f,h);if(La(f))return w(a,d,f,h);l&&Rg(a,f);if(\"undefined\"===typeof f&&!k)switch(a.tag){case 1:case 22:case 0:case 11:case 15:throw Error(y(152,Ra(a.type)||\"Component\"));}return c(a,d)}}var Yg=Sg(!0),Zg=Sg(!1),$g={},ah=Bf($g),bh=Bf($g),ch=Bf($g);\nfunction dh(a){if(a===$g)throw Error(y(174));return a}function eh(a,b){I(ch,b);I(bh,a);I(ah,$g);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:mb(null,\"\");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=mb(b,a)}H(ah);I(ah,b)}function fh(){H(ah);H(bh);H(ch)}function gh(a){dh(ch.current);var b=dh(ah.current);var c=mb(b,a.type);b!==c&&(I(bh,a),I(ah,c))}function hh(a){bh.current===a&&(H(ah),H(bh))}var P=Bf(0);\nfunction ih(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||\"$?\"===c.data||\"$!\"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&64))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}var jh=null,kh=null,lh=!1;\nfunction mh(a,b){var c=nh(5,null,null,0);c.elementType=\"DELETED\";c.type=\"DELETED\";c.stateNode=b;c.return=a;c.flags=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}function oh(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=\"\"===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;case 13:return!1;default:return!1}}\nfunction ph(a){if(lh){var b=kh;if(b){var c=b;if(!oh(a,b)){b=rf(c.nextSibling);if(!b||!oh(a,b)){a.flags=a.flags&-1025|2;lh=!1;jh=a;return}mh(jh,c)}jh=a;kh=rf(b.firstChild)}else a.flags=a.flags&-1025|2,lh=!1,jh=a}}function qh(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;jh=a}\nfunction rh(a){if(a!==jh)return!1;if(!lh)return qh(a),lh=!0,!1;var b=a.type;if(5!==a.tag||\"head\"!==b&&\"body\"!==b&&!nf(b,a.memoizedProps))for(b=kh;b;)mh(a,b),b=rf(b.nextSibling);qh(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(y(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(\"/$\"===c){if(0===b){kh=rf(a.nextSibling);break a}b--}else\"$\"!==c&&\"$!\"!==c&&\"$?\"!==c||b++}a=a.nextSibling}kh=null}}else kh=jh?rf(a.stateNode.nextSibling):null;return!0}\nfunction sh(){kh=jh=null;lh=!1}var th=[];function uh(){for(var a=0;a<th.length;a++)th[a]._workInProgressVersionPrimary=null;th.length=0}var vh=ra.ReactCurrentDispatcher,wh=ra.ReactCurrentBatchConfig,xh=0,R=null,S=null,T=null,yh=!1,zh=!1;function Ah(){throw Error(y(321));}function Bh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return!1;return!0}\nfunction Ch(a,b,c,d,e,f){xh=f;R=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;vh.current=null===a||null===a.memoizedState?Dh:Eh;a=c(d,e);if(zh){f=0;do{zh=!1;if(!(25>f))throw Error(y(301));f+=1;T=S=null;b.updateQueue=null;vh.current=Fh;a=c(d,e)}while(zh)}vh.current=Gh;b=null!==S&&null!==S.next;xh=0;T=S=R=null;yh=!1;if(b)throw Error(y(300));return a}function Hh(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===T?R.memoizedState=T=a:T=T.next=a;return T}\nfunction Ih(){if(null===S){var a=R.alternate;a=null!==a?a.memoizedState:null}else a=S.next;var b=null===T?R.memoizedState:T.next;if(null!==b)T=b,S=a;else{if(null===a)throw Error(y(310));S=a;a={memoizedState:S.memoizedState,baseState:S.baseState,baseQueue:S.baseQueue,queue:S.queue,next:null};null===T?R.memoizedState=T=a:T=T.next=a}return T}function Jh(a,b){return\"function\"===typeof b?b(a):b}\nfunction Kh(a){var b=Ih(),c=b.queue;if(null===c)throw Error(y(311));c.lastRenderedReducer=a;var d=S,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){e=e.next;d=d.baseState;var h=g=f=null,k=e;do{var l=k.lane;if((xh&l)===l)null!==h&&(h=h.next={lane:0,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null}),d=k.eagerReducer===a?k.eagerState:a(d,k.action);else{var n={lane:l,action:k.action,eagerReducer:k.eagerReducer,\neagerState:k.eagerState,next:null};null===h?(g=h=n,f=d):h=h.next=n;R.lanes|=l;Dg|=l}k=k.next}while(null!==k&&k!==e);null===h?f=d:h.next=g;He(d,b.memoizedState)||(ug=!0);b.memoizedState=d;b.baseState=f;b.baseQueue=h;c.lastRenderedState=d}return[b.memoizedState,c.dispatch]}\nfunction Lh(a){var b=Ih(),c=b.queue;if(null===c)throw Error(y(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(ug=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}\nfunction Mh(a,b,c){var d=b._getVersion;d=d(b._source);var e=b._workInProgressVersionPrimary;if(null!==e)a=e===d;else if(a=a.mutableReadLanes,a=(xh&a)===a)b._workInProgressVersionPrimary=d,th.push(b);if(a)return c(b._source);th.push(b);throw Error(y(350));}\nfunction Nh(a,b,c,d){var e=U;if(null===e)throw Error(y(349));var f=b._getVersion,g=f(b._source),h=vh.current,k=h.useState(function(){return Mh(e,b,c)}),l=k[1],n=k[0];k=T;var A=a.memoizedState,p=A.refs,C=p.getSnapshot,x=A.source;A=A.subscribe;var w=R;a.memoizedState={refs:p,source:b,subscribe:d};h.useEffect(function(){p.getSnapshot=c;p.setSnapshot=l;var a=f(b._source);if(!He(g,a)){a=c(b._source);He(n,a)||(l(a),a=Ig(w),e.mutableReadLanes|=a&e.pendingLanes);a=e.mutableReadLanes;e.entangledLanes|=a;for(var d=\ne.entanglements,h=a;0<h;){var k=31-Vc(h),v=1<<k;d[k]|=a;h&=~v}}},[c,b,d]);h.useEffect(function(){return d(b._source,function(){var a=p.getSnapshot,c=p.setSnapshot;try{c(a(b._source));var d=Ig(w);e.mutableReadLanes|=d&e.pendingLanes}catch(q){c(function(){throw q;})}})},[b,d]);He(C,c)&&He(x,b)&&He(A,d)||(a={pending:null,dispatch:null,lastRenderedReducer:Jh,lastRenderedState:n},a.dispatch=l=Oh.bind(null,R,a),k.queue=a,k.baseQueue=null,n=Mh(e,b,c),k.memoizedState=k.baseState=n);return n}\nfunction Ph(a,b,c){var d=Ih();return Nh(d,a,b,c)}function Qh(a){var b=Hh();\"function\"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={pending:null,dispatch:null,lastRenderedReducer:Jh,lastRenderedState:a};a=a.dispatch=Oh.bind(null,R,a);return[b.memoizedState,a]}\nfunction Rh(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=R.updateQueue;null===b?(b={lastEffect:null},R.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function Sh(a){var b=Hh();a={current:a};return b.memoizedState=a}function Th(){return Ih().memoizedState}function Uh(a,b,c,d){var e=Hh();R.flags|=a;e.memoizedState=Rh(1|b,c,void 0,void 0===d?null:d)}\nfunction Vh(a,b,c,d){var e=Ih();d=void 0===d?null:d;var f=void 0;if(null!==S){var g=S.memoizedState;f=g.destroy;if(null!==d&&Bh(d,g.deps)){Rh(b,c,f,d);return}}R.flags|=a;e.memoizedState=Rh(1|b,c,f,d)}function Wh(a,b){return Uh(516,4,a,b)}function Xh(a,b){return Vh(516,4,a,b)}function Yh(a,b){return Vh(4,2,a,b)}function Zh(a,b){if(\"function\"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}\nfunction $h(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Vh(4,2,Zh.bind(null,b,a),c)}function ai(){}function bi(a,b){var c=Ih();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Bh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}function ci(a,b){var c=Ih();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Bh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}\nfunction di(a,b){var c=eg();gg(98>c?98:c,function(){a(!0)});gg(97<c?97:c,function(){var c=wh.transition;wh.transition=1;try{a(!1),b()}finally{wh.transition=c}})}\nfunction Oh(a,b,c){var d=Hg(),e=Ig(a),f={lane:e,action:c,eagerReducer:null,eagerState:null,next:null},g=b.pending;null===g?f.next=f:(f.next=g.next,g.next=f);b.pending=f;g=a.alternate;if(a===R||null!==g&&g===R)zh=yh=!0;else{if(0===a.lanes&&(null===g||0===g.lanes)&&(g=b.lastRenderedReducer,null!==g))try{var h=b.lastRenderedState,k=g(h,c);f.eagerReducer=g;f.eagerState=k;if(He(k,h))return}catch(l){}finally{}Jg(a,e,d)}}\nvar Gh={readContext:vg,useCallback:Ah,useContext:Ah,useEffect:Ah,useImperativeHandle:Ah,useLayoutEffect:Ah,useMemo:Ah,useReducer:Ah,useRef:Ah,useState:Ah,useDebugValue:Ah,useDeferredValue:Ah,useTransition:Ah,useMutableSource:Ah,useOpaqueIdentifier:Ah,unstable_isNewReconciler:!1},Dh={readContext:vg,useCallback:function(a,b){Hh().memoizedState=[a,void 0===b?null:b];return a},useContext:vg,useEffect:Wh,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Uh(4,2,Zh.bind(null,\nb,a),c)},useLayoutEffect:function(a,b){return Uh(4,2,a,b)},useMemo:function(a,b){var c=Hh();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=Hh();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={pending:null,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};a=a.dispatch=Oh.bind(null,R,a);return[d.memoizedState,a]},useRef:Sh,useState:Qh,useDebugValue:ai,useDeferredValue:function(a){var b=Qh(a),c=b[0],d=b[1];Wh(function(){var b=wh.transition;\nwh.transition=1;try{d(a)}finally{wh.transition=b}},[a]);return c},useTransition:function(){var a=Qh(!1),b=a[0];a=di.bind(null,a[1]);Sh(a);return[a,b]},useMutableSource:function(a,b,c){var d=Hh();d.memoizedState={refs:{getSnapshot:b,setSnapshot:null},source:a,subscribe:c};return Nh(d,a,b,c)},useOpaqueIdentifier:function(){if(lh){var a=!1,b=uf(function(){a||(a=!0,c(\"r:\"+(tf++).toString(36)));throw Error(y(355));}),c=Qh(b)[1];0===(R.mode&2)&&(R.flags|=516,Rh(5,function(){c(\"r:\"+(tf++).toString(36))},\nvoid 0,null));return b}b=\"r:\"+(tf++).toString(36);Qh(b);return b},unstable_isNewReconciler:!1},Eh={readContext:vg,useCallback:bi,useContext:vg,useEffect:Xh,useImperativeHandle:$h,useLayoutEffect:Yh,useMemo:ci,useReducer:Kh,useRef:Th,useState:function(){return Kh(Jh)},useDebugValue:ai,useDeferredValue:function(a){var b=Kh(Jh),c=b[0],d=b[1];Xh(function(){var b=wh.transition;wh.transition=1;try{d(a)}finally{wh.transition=b}},[a]);return c},useTransition:function(){var a=Kh(Jh)[0];return[Th().current,\na]},useMutableSource:Ph,useOpaqueIdentifier:function(){return Kh(Jh)[0]},unstable_isNewReconciler:!1},Fh={readContext:vg,useCallback:bi,useContext:vg,useEffect:Xh,useImperativeHandle:$h,useLayoutEffect:Yh,useMemo:ci,useReducer:Lh,useRef:Th,useState:function(){return Lh(Jh)},useDebugValue:ai,useDeferredValue:function(a){var b=Lh(Jh),c=b[0],d=b[1];Xh(function(){var b=wh.transition;wh.transition=1;try{d(a)}finally{wh.transition=b}},[a]);return c},useTransition:function(){var a=Lh(Jh)[0];return[Th().current,\na]},useMutableSource:Ph,useOpaqueIdentifier:function(){return Lh(Jh)[0]},unstable_isNewReconciler:!1},ei=ra.ReactCurrentOwner,ug=!1;function fi(a,b,c,d){b.child=null===a?Zg(b,null,c,d):Yg(b,a.child,c,d)}function gi(a,b,c,d,e){c=c.render;var f=b.ref;tg(b,e);d=Ch(a,b,c,d,f,e);if(null!==a&&!ug)return b.updateQueue=a.updateQueue,b.flags&=-517,a.lanes&=~e,hi(a,b,e);b.flags|=1;fi(a,b,d,e);return b.child}\nfunction ii(a,b,c,d,e,f){if(null===a){var g=c.type;if(\"function\"===typeof g&&!ji(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,ki(a,b,g,d,e,f);a=Vg(c.type,null,d,b,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(0===(e&f)&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:Je,c(e,d)&&a.ref===b.ref))return hi(a,b,f);b.flags|=1;a=Tg(g,d);a.ref=b.ref;a.return=b;return b.child=a}\nfunction ki(a,b,c,d,e,f){if(null!==a&&Je(a.memoizedProps,d)&&a.ref===b.ref)if(ug=!1,0!==(f&e))0!==(a.flags&16384)&&(ug=!0);else return b.lanes=a.lanes,hi(a,b,f);return li(a,b,c,d,f)}\nfunction mi(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if(\"hidden\"===d.mode||\"unstable-defer-without-hiding\"===d.mode)if(0===(b.mode&4))b.memoizedState={baseLanes:0},ni(b,c);else if(0!==(c&1073741824))b.memoizedState={baseLanes:0},ni(b,null!==f?f.baseLanes:c);else return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a},ni(b,a),null;else null!==f?(d=f.baseLanes|c,b.memoizedState=null):d=c,ni(b,d);fi(a,b,e,c);return b.child}\nfunction oi(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=128}function li(a,b,c,d,e){var f=Ff(c)?Df:M.current;f=Ef(b,f);tg(b,e);c=Ch(a,b,c,d,f,e);if(null!==a&&!ug)return b.updateQueue=a.updateQueue,b.flags&=-517,a.lanes&=~e,hi(a,b,e);b.flags|=1;fi(a,b,c,e);return b.child}\nfunction pi(a,b,c,d,e){if(Ff(c)){var f=!0;Jf(b)}else f=!1;tg(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2),Mg(b,c,d),Og(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;\"object\"===typeof l&&null!==l?l=vg(l):(l=Ff(c)?Df:M.current,l=Ef(b,l));var n=c.getDerivedStateFromProps,A=\"function\"===typeof n||\"function\"===typeof g.getSnapshotBeforeUpdate;A||\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\n\"function\"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Ng(b,g,d,l);wg=!1;var p=b.memoizedState;g.state=p;Cg(b,d,g,e);k=b.memoizedState;h!==d||p!==k||N.current||wg?(\"function\"===typeof n&&(Gg(b,c,n,d),k=b.memoizedState),(h=wg||Lg(b,c,h,d,p,k,l))?(A||\"function\"!==typeof g.UNSAFE_componentWillMount&&\"function\"!==typeof g.componentWillMount||(\"function\"===typeof g.componentWillMount&&g.componentWillMount(),\"function\"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),\"function\"===\ntypeof g.componentDidMount&&(b.flags|=4)):(\"function\"===typeof g.componentDidMount&&(b.flags|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):(\"function\"===typeof g.componentDidMount&&(b.flags|=4),d=!1)}else{g=b.stateNode;yg(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:lg(b.type,h);g.props=l;A=b.pendingProps;p=g.context;k=c.contextType;\"object\"===typeof k&&null!==k?k=vg(k):(k=Ff(c)?Df:M.current,k=Ef(b,k));var C=c.getDerivedStateFromProps;(n=\"function\"===typeof C||\n\"function\"===typeof g.getSnapshotBeforeUpdate)||\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||(h!==A||p!==k)&&Ng(b,g,d,k);wg=!1;p=b.memoizedState;g.state=p;Cg(b,d,g,e);var x=b.memoizedState;h!==A||p!==x||N.current||wg?(\"function\"===typeof C&&(Gg(b,c,C,d),x=b.memoizedState),(l=wg||Lg(b,c,l,d,p,x,k))?(n||\"function\"!==typeof g.UNSAFE_componentWillUpdate&&\"function\"!==typeof g.componentWillUpdate||(\"function\"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,\nx,k),\"function\"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,k)),\"function\"===typeof g.componentDidUpdate&&(b.flags|=4),\"function\"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=256)):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=256),b.memoizedProps=d,b.memoizedState=x),g.props=d,g.state=x,g.context=k,d=l):(\"function\"!==typeof g.componentDidUpdate||\nh===a.memoizedProps&&p===a.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=256),d=!1)}return qi(a,b,c,d,f,e)}\nfunction qi(a,b,c,d,e,f){oi(a,b);var g=0!==(b.flags&64);if(!d&&!g)return e&&Kf(b,c,!1),hi(a,b,f);d=b.stateNode;ei.current=b;var h=g&&\"function\"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Yg(b,a.child,null,f),b.child=Yg(b,null,h,f)):fi(a,b,h,f);b.memoizedState=d.state;e&&Kf(b,c,!0);return b.child}function ri(a){var b=a.stateNode;b.pendingContext?Hf(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Hf(a,b.context,!1);eh(a,b.containerInfo)}\nvar si={dehydrated:null,retryLane:0};\nfunction ti(a,b,c){var d=b.pendingProps,e=P.current,f=!1,g;(g=0!==(b.flags&64))||(g=null!==a&&null===a.memoizedState?!1:0!==(e&2));g?(f=!0,b.flags&=-65):null!==a&&null===a.memoizedState||void 0===d.fallback||!0===d.unstable_avoidThisFallback||(e|=1);I(P,e&1);if(null===a){void 0!==d.fallback&&ph(b);a=d.children;e=d.fallback;if(f)return a=ui(b,a,e,c),b.child.memoizedState={baseLanes:c},b.memoizedState=si,a;if(\"number\"===typeof d.unstable_expectedLoadTime)return a=ui(b,a,e,c),b.child.memoizedState={baseLanes:c},\nb.memoizedState=si,b.lanes=33554432,a;c=vi({mode:\"visible\",children:a},b.mode,c,null);c.return=b;return b.child=c}if(null!==a.memoizedState){if(f)return d=wi(a,b,d.children,d.fallback,c),f=b.child,e=a.child.memoizedState,f.memoizedState=null===e?{baseLanes:c}:{baseLanes:e.baseLanes|c},f.childLanes=a.childLanes&~c,b.memoizedState=si,d;c=xi(a,b,d.children,c);b.memoizedState=null;return c}if(f)return d=wi(a,b,d.children,d.fallback,c),f=b.child,e=a.child.memoizedState,f.memoizedState=null===e?{baseLanes:c}:\n{baseLanes:e.baseLanes|c},f.childLanes=a.childLanes&~c,b.memoizedState=si,d;c=xi(a,b,d.children,c);b.memoizedState=null;return c}function ui(a,b,c,d){var e=a.mode,f=a.child;b={mode:\"hidden\",children:b};0===(e&2)&&null!==f?(f.childLanes=0,f.pendingProps=b):f=vi(b,e,0,null);c=Xg(c,e,d,null);f.return=a;c.return=a;f.sibling=c;a.child=f;return c}\nfunction xi(a,b,c,d){var e=a.child;a=e.sibling;c=Tg(e,{mode:\"visible\",children:c});0===(b.mode&2)&&(c.lanes=d);c.return=b;c.sibling=null;null!==a&&(a.nextEffect=null,a.flags=8,b.firstEffect=b.lastEffect=a);return b.child=c}\nfunction wi(a,b,c,d,e){var f=b.mode,g=a.child;a=g.sibling;var h={mode:\"hidden\",children:c};0===(f&2)&&b.child!==g?(c=b.child,c.childLanes=0,c.pendingProps=h,g=c.lastEffect,null!==g?(b.firstEffect=c.firstEffect,b.lastEffect=g,g.nextEffect=null):b.firstEffect=b.lastEffect=null):c=Tg(g,h);null!==a?d=Tg(a,d):(d=Xg(d,f,e,null),d.flags|=2);d.return=b;c.return=b;c.sibling=d;b.child=c;return d}function yi(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);sg(a.return,b)}\nfunction zi(a,b,c,d,e,f){var g=a.memoizedState;null===g?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e,lastEffect:f}:(g.isBackwards=b,g.rendering=null,g.renderingStartTime=0,g.last=d,g.tail=c,g.tailMode=e,g.lastEffect=f)}\nfunction Ai(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;fi(a,b,d.children,c);d=P.current;if(0!==(d&2))d=d&1|2,b.flags|=64;else{if(null!==a&&0!==(a.flags&64))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&yi(a,c);else if(19===a.tag)yi(a,c);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}I(P,d);if(0===(b.mode&2))b.memoizedState=\nnull;else switch(e){case \"forwards\":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===ih(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);zi(b,!1,e,c,f,b.lastEffect);break;case \"backwards\":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===ih(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}zi(b,!0,c,null,f,b.lastEffect);break;case \"together\":zi(b,!1,null,null,void 0,b.lastEffect);break;default:b.memoizedState=null}return b.child}\nfunction hi(a,b,c){null!==a&&(b.dependencies=a.dependencies);Dg|=b.lanes;if(0!==(c&b.childLanes)){if(null!==a&&b.child!==a.child)throw Error(y(153));if(null!==b.child){a=b.child;c=Tg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Tg(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}return null}var Bi,Ci,Di,Ei;\nBi=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};Ci=function(){};\nDi=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;dh(ah.current);var f=null;switch(c){case \"input\":e=Ya(a,e);d=Ya(a,d);f=[];break;case \"option\":e=eb(a,e);d=eb(a,d);f=[];break;case \"select\":e=m({},e,{value:void 0});d=m({},d,{value:void 0});f=[];break;case \"textarea\":e=gb(a,e);d=gb(a,d);f=[];break;default:\"function\"!==typeof e.onClick&&\"function\"===typeof d.onClick&&(a.onclick=jf)}vb(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if(\"style\"===\nl){var h=e[l];for(g in h)h.hasOwnProperty(g)&&(c||(c={}),c[g]=\"\")}else\"dangerouslySetInnerHTML\"!==l&&\"children\"!==l&&\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&\"autoFocus\"!==l&&(ca.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if(\"style\"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]=\"\");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||\n(c={}),c[g]=k[g])}else c||(f||(f=[]),f.push(l,c)),c=k;else\"dangerouslySetInnerHTML\"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):\"children\"===l?\"string\"!==typeof k&&\"number\"!==typeof k||(f=f||[]).push(l,\"\"+k):\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&(ca.hasOwnProperty(l)?(null!=k&&\"onScroll\"===l&&G(\"scroll\",a),f||h===k||(f=[])):\"object\"===typeof k&&null!==k&&k.$$typeof===Ga?k.toString():(f=f||[]).push(l,k))}c&&(f=f||[]).push(\"style\",\nc);var l=f;if(b.updateQueue=l)b.flags|=4}};Ei=function(a,b,c,d){c!==d&&(b.flags|=4)};function Fi(a,b){if(!lh)switch(a.tailMode){case \"hidden\":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case \"collapsed\":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}\nfunction Gi(a,b,c){var d=b.pendingProps;switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return Ff(b.type)&&Gf(),null;case 3:fh();H(N);H(M);uh();d=b.stateNode;d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)rh(b)?b.flags|=4:d.hydrate||(b.flags|=256);Ci(b);return null;case 5:hh(b);var e=dh(ch.current);c=b.type;if(null!==a&&null!=b.stateNode)Di(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=128);else{if(!d){if(null===\nb.stateNode)throw Error(y(166));return null}a=dh(ah.current);if(rh(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[wf]=b;d[xf]=f;switch(c){case \"dialog\":G(\"cancel\",d);G(\"close\",d);break;case \"iframe\":case \"object\":case \"embed\":G(\"load\",d);break;case \"video\":case \"audio\":for(a=0;a<Xe.length;a++)G(Xe[a],d);break;case \"source\":G(\"error\",d);break;case \"img\":case \"image\":case \"link\":G(\"error\",d);G(\"load\",d);break;case \"details\":G(\"toggle\",d);break;case \"input\":Za(d,f);G(\"invalid\",d);break;case \"select\":d._wrapperState=\n{wasMultiple:!!f.multiple};G(\"invalid\",d);break;case \"textarea\":hb(d,f),G(\"invalid\",d)}vb(c,f);a=null;for(var g in f)f.hasOwnProperty(g)&&(e=f[g],\"children\"===g?\"string\"===typeof e?d.textContent!==e&&(a=[\"children\",e]):\"number\"===typeof e&&d.textContent!==\"\"+e&&(a=[\"children\",\"\"+e]):ca.hasOwnProperty(g)&&null!=e&&\"onScroll\"===g&&G(\"scroll\",d));switch(c){case \"input\":Va(d);cb(d,f,!0);break;case \"textarea\":Va(d);jb(d);break;case \"select\":case \"option\":break;default:\"function\"===typeof f.onClick&&(d.onclick=\njf)}d=a;b.updateQueue=d;null!==d&&(b.flags|=4)}else{g=9===e.nodeType?e:e.ownerDocument;a===kb.html&&(a=lb(c));a===kb.html?\"script\"===c?(a=g.createElement(\"div\"),a.innerHTML=\"<script>\\x3c/script>\",a=a.removeChild(a.firstChild)):\"string\"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),\"select\"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[wf]=b;a[xf]=d;Bi(a,b,!1,!1);b.stateNode=a;g=wb(c,d);switch(c){case \"dialog\":G(\"cancel\",a);G(\"close\",a);\ne=d;break;case \"iframe\":case \"object\":case \"embed\":G(\"load\",a);e=d;break;case \"video\":case \"audio\":for(e=0;e<Xe.length;e++)G(Xe[e],a);e=d;break;case \"source\":G(\"error\",a);e=d;break;case \"img\":case \"image\":case \"link\":G(\"error\",a);G(\"load\",a);e=d;break;case \"details\":G(\"toggle\",a);e=d;break;case \"input\":Za(a,d);e=Ya(a,d);G(\"invalid\",a);break;case \"option\":e=eb(a,d);break;case \"select\":a._wrapperState={wasMultiple:!!d.multiple};e=m({},d,{value:void 0});G(\"invalid\",a);break;case \"textarea\":hb(a,d);e=\ngb(a,d);G(\"invalid\",a);break;default:e=d}vb(c,e);var h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];\"style\"===f?tb(a,k):\"dangerouslySetInnerHTML\"===f?(k=k?k.__html:void 0,null!=k&&ob(a,k)):\"children\"===f?\"string\"===typeof k?(\"textarea\"!==c||\"\"!==k)&&pb(a,k):\"number\"===typeof k&&pb(a,\"\"+k):\"suppressContentEditableWarning\"!==f&&\"suppressHydrationWarning\"!==f&&\"autoFocus\"!==f&&(ca.hasOwnProperty(f)?null!=k&&\"onScroll\"===f&&G(\"scroll\",a):null!=k&&qa(a,f,k,g))}switch(c){case \"input\":Va(a);cb(a,d,!1);\nbreak;case \"textarea\":Va(a);jb(a);break;case \"option\":null!=d.value&&a.setAttribute(\"value\",\"\"+Sa(d.value));break;case \"select\":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,!0);break;default:\"function\"===typeof e.onClick&&(a.onclick=jf)}mf(c,d)&&(b.flags|=4)}null!==b.ref&&(b.flags|=128)}return null;case 6:if(a&&null!=b.stateNode)Ei(a,b,a.memoizedProps,d);else{if(\"string\"!==typeof d&&null===b.stateNode)throw Error(y(166));\nc=dh(ch.current);dh(ah.current);rh(b)?(d=b.stateNode,c=b.memoizedProps,d[wf]=b,d.nodeValue!==c&&(b.flags|=4)):(d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[wf]=b,b.stateNode=d)}return null;case 13:H(P);d=b.memoizedState;if(0!==(b.flags&64))return b.lanes=c,b;d=null!==d;c=!1;null===a?void 0!==b.memoizedProps.fallback&&rh(b):c=null!==a.memoizedState;if(d&&!c&&0!==(b.mode&2))if(null===a&&!0!==b.memoizedProps.unstable_avoidThisFallback||0!==(P.current&1))0===V&&(V=3);else{if(0===V||3===V)V=\n4;null===U||0===(Dg&134217727)&&0===(Hi&134217727)||Ii(U,W)}if(d||c)b.flags|=4;return null;case 4:return fh(),Ci(b),null===a&&cf(b.stateNode.containerInfo),null;case 10:return rg(b),null;case 17:return Ff(b.type)&&Gf(),null;case 19:H(P);d=b.memoizedState;if(null===d)return null;f=0!==(b.flags&64);g=d.rendering;if(null===g)if(f)Fi(d,!1);else{if(0!==V||null!==a&&0!==(a.flags&64))for(a=b.child;null!==a;){g=ih(a);if(null!==g){b.flags|=64;Fi(d,!1);f=g.updateQueue;null!==f&&(b.updateQueue=f,b.flags|=4);\nnull===d.lastEffect&&(b.firstEffect=null);b.lastEffect=d.lastEffect;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=2,f.nextEffect=null,f.firstEffect=null,f.lastEffect=null,g=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,\nf.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;I(P,P.current&1|2);return b.child}a=a.sibling}null!==d.tail&&O()>Ji&&(b.flags|=64,f=!0,Fi(d,!1),b.lanes=33554432)}else{if(!f)if(a=ih(g),null!==a){if(b.flags|=64,f=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Fi(d,!0),null===d.tail&&\"hidden\"===d.tailMode&&!g.alternate&&!lh)return b=b.lastEffect=d.lastEffect,null!==b&&(b.nextEffect=null),null}else 2*O()-d.renderingStartTime>Ji&&1073741824!==c&&(b.flags|=\n64,f=!0,Fi(d,!1),b.lanes=33554432);d.isBackwards?(g.sibling=b.child,b.child=g):(c=d.last,null!==c?c.sibling=g:b.child=g,d.last=g)}return null!==d.tail?(c=d.tail,d.rendering=c,d.tail=c.sibling,d.lastEffect=b.lastEffect,d.renderingStartTime=O(),c.sibling=null,b=P.current,I(P,f?b&1|2:b&1),c):null;case 23:case 24:return Ki(),null!==a&&null!==a.memoizedState!==(null!==b.memoizedState)&&\"unstable-defer-without-hiding\"!==d.mode&&(b.flags|=4),null}throw Error(y(156,b.tag));}\nfunction Li(a){switch(a.tag){case 1:Ff(a.type)&&Gf();var b=a.flags;return b&4096?(a.flags=b&-4097|64,a):null;case 3:fh();H(N);H(M);uh();b=a.flags;if(0!==(b&64))throw Error(y(285));a.flags=b&-4097|64;return a;case 5:return hh(a),null;case 13:return H(P),b=a.flags,b&4096?(a.flags=b&-4097|64,a):null;case 19:return H(P),null;case 4:return fh(),null;case 10:return rg(a),null;case 23:case 24:return Ki(),null;default:return null}}\nfunction Mi(a,b){try{var c=\"\",d=b;do c+=Qa(d),d=d.return;while(d);var e=c}catch(f){e=\"\\nError generating stack: \"+f.message+\"\\n\"+f.stack}return{value:a,source:b,stack:e}}function Ni(a,b){try{console.error(b.value)}catch(c){setTimeout(function(){throw c;})}}var Oi=\"function\"===typeof WeakMap?WeakMap:Map;function Pi(a,b,c){c=zg(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Qi||(Qi=!0,Ri=d);Ni(a,b)};return c}\nfunction Si(a,b,c){c=zg(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if(\"function\"===typeof d){var e=b.value;c.payload=function(){Ni(a,b);return d(e)}}var f=a.stateNode;null!==f&&\"function\"===typeof f.componentDidCatch&&(c.callback=function(){\"function\"!==typeof d&&(null===Ti?Ti=new Set([this]):Ti.add(this),Ni(a,b));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:\"\"})});return c}var Ui=\"function\"===typeof WeakSet?WeakSet:Set;\nfunction Vi(a){var b=a.ref;if(null!==b)if(\"function\"===typeof b)try{b(null)}catch(c){Wi(a,c)}else b.current=null}function Xi(a,b){switch(b.tag){case 0:case 11:case 15:case 22:return;case 1:if(b.flags&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===b.type?c:lg(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b}return;case 3:b.flags&256&&qf(b.stateNode.containerInfo);return;case 5:case 6:case 4:case 17:return}throw Error(y(163));}\nfunction Yi(a,b,c){switch(c.tag){case 0:case 11:case 15:case 22:b=c.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){a=b=b.next;do{if(3===(a.tag&3)){var d=a.create;a.destroy=d()}a=a.next}while(a!==b)}b=c.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){a=b=b.next;do{var e=a;d=e.next;e=e.tag;0!==(e&4)&&0!==(e&1)&&(Zi(c,a),$i(c,a));a=d}while(a!==b)}return;case 1:a=c.stateNode;c.flags&4&&(null===b?a.componentDidMount():(d=c.elementType===c.type?b.memoizedProps:lg(c.type,b.memoizedProps),a.componentDidUpdate(d,\nb.memoizedState,a.__reactInternalSnapshotBeforeUpdate)));b=c.updateQueue;null!==b&&Eg(c,b,a);return;case 3:b=c.updateQueue;if(null!==b){a=null;if(null!==c.child)switch(c.child.tag){case 5:a=c.child.stateNode;break;case 1:a=c.child.stateNode}Eg(c,b,a)}return;case 5:a=c.stateNode;null===b&&c.flags&4&&mf(c.type,c.memoizedProps)&&a.focus();return;case 6:return;case 4:return;case 12:return;case 13:null===c.memoizedState&&(c=c.alternate,null!==c&&(c=c.memoizedState,null!==c&&(c=c.dehydrated,null!==c&&Cc(c))));\nreturn;case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(y(163));}\nfunction aj(a,b){for(var c=a;;){if(5===c.tag){var d=c.stateNode;if(b)d=d.style,\"function\"===typeof d.setProperty?d.setProperty(\"display\",\"none\",\"important\"):d.display=\"none\";else{d=c.stateNode;var e=c.memoizedProps.style;e=void 0!==e&&null!==e&&e.hasOwnProperty(\"display\")?e.display:null;d.style.display=sb(\"display\",e)}}else if(6===c.tag)c.stateNode.nodeValue=b?\"\":c.memoizedProps;else if((23!==c.tag&&24!==c.tag||null===c.memoizedState||c===a)&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===\na)break;for(;null===c.sibling;){if(null===c.return||c.return===a)return;c=c.return}c.sibling.return=c.return;c=c.sibling}}\nfunction bj(a,b){if(Mf&&\"function\"===typeof Mf.onCommitFiberUnmount)try{Mf.onCommitFiberUnmount(Lf,b)}catch(f){}switch(b.tag){case 0:case 11:case 14:case 15:case 22:a=b.updateQueue;if(null!==a&&(a=a.lastEffect,null!==a)){var c=a=a.next;do{var d=c,e=d.destroy;d=d.tag;if(void 0!==e)if(0!==(d&4))Zi(b,c);else{d=b;try{e()}catch(f){Wi(d,f)}}c=c.next}while(c!==a)}break;case 1:Vi(b);a=b.stateNode;if(\"function\"===typeof a.componentWillUnmount)try{a.props=b.memoizedProps,a.state=b.memoizedState,a.componentWillUnmount()}catch(f){Wi(b,\nf)}break;case 5:Vi(b);break;case 4:cj(a,b)}}function dj(a){a.alternate=null;a.child=null;a.dependencies=null;a.firstEffect=null;a.lastEffect=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.return=null;a.updateQueue=null}function ej(a){return 5===a.tag||3===a.tag||4===a.tag}\nfunction fj(a){a:{for(var b=a.return;null!==b;){if(ej(b))break a;b=b.return}throw Error(y(160));}var c=b;b=c.stateNode;switch(c.tag){case 5:var d=!1;break;case 3:b=b.containerInfo;d=!0;break;case 4:b=b.containerInfo;d=!0;break;default:throw Error(y(161));}c.flags&16&&(pb(b,\"\"),c.flags&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||ej(c.return)){c=null;break a}c=c.return}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.flags&2)continue b;if(null===\nc.child||4===c.tag)continue b;else c.child.return=c,c=c.child}if(!(c.flags&2)){c=c.stateNode;break a}}d?gj(a,c,b):hj(a,c,b)}\nfunction gj(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=jf));else if(4!==d&&(a=a.child,null!==a))for(gj(a,b,c),a=a.sibling;null!==a;)gj(a,b,c),a=a.sibling}\nfunction hj(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(hj(a,b,c),a=a.sibling;null!==a;)hj(a,b,c),a=a.sibling}\nfunction cj(a,b){for(var c=b,d=!1,e,f;;){if(!d){d=c.return;a:for(;;){if(null===d)throw Error(y(160));e=d.stateNode;switch(d.tag){case 5:f=!1;break a;case 3:e=e.containerInfo;f=!0;break a;case 4:e=e.containerInfo;f=!0;break a}d=d.return}d=!0}if(5===c.tag||6===c.tag){a:for(var g=a,h=c,k=h;;)if(bj(g,k),null!==k.child&&4!==k.tag)k.child.return=k,k=k.child;else{if(k===h)break a;for(;null===k.sibling;){if(null===k.return||k.return===h)break a;k=k.return}k.sibling.return=k.return;k=k.sibling}f?(g=e,h=c.stateNode,\n8===g.nodeType?g.parentNode.removeChild(h):g.removeChild(h)):e.removeChild(c.stateNode)}else if(4===c.tag){if(null!==c.child){e=c.stateNode.containerInfo;f=!0;c.child.return=c;c=c.child;continue}}else if(bj(a,c),null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;4===c.tag&&(d=!1)}c.sibling.return=c.return;c=c.sibling}}\nfunction ij(a,b){switch(b.tag){case 0:case 11:case 14:case 15:case 22:var c=b.updateQueue;c=null!==c?c.lastEffect:null;if(null!==c){var d=c=c.next;do 3===(d.tag&3)&&(a=d.destroy,d.destroy=void 0,void 0!==a&&a()),d=d.next;while(d!==c)}return;case 1:return;case 5:c=b.stateNode;if(null!=c){d=b.memoizedProps;var e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[xf]=d;\"input\"===a&&\"radio\"===d.type&&null!=d.name&&$a(c,d);wb(a,e);b=wb(a,d);for(e=0;e<f.length;e+=\n2){var g=f[e],h=f[e+1];\"style\"===g?tb(c,h):\"dangerouslySetInnerHTML\"===g?ob(c,h):\"children\"===g?pb(c,h):qa(c,g,h,b)}switch(a){case \"input\":ab(c,d);break;case \"textarea\":ib(c,d);break;case \"select\":a=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,f=d.value,null!=f?fb(c,!!d.multiple,f,!1):a!==!!d.multiple&&(null!=d.defaultValue?fb(c,!!d.multiple,d.defaultValue,!0):fb(c,!!d.multiple,d.multiple?[]:\"\",!1))}}}return;case 6:if(null===b.stateNode)throw Error(y(162));b.stateNode.nodeValue=\nb.memoizedProps;return;case 3:c=b.stateNode;c.hydrate&&(c.hydrate=!1,Cc(c.containerInfo));return;case 12:return;case 13:null!==b.memoizedState&&(jj=O(),aj(b.child,!0));kj(b);return;case 19:kj(b);return;case 17:return;case 23:case 24:aj(b,null!==b.memoizedState);return}throw Error(y(163));}function kj(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Ui);b.forEach(function(b){var d=lj.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}\nfunction mj(a,b){return null!==a&&(a=a.memoizedState,null===a||null!==a.dehydrated)?(b=b.memoizedState,null!==b&&null===b.dehydrated):!1}var nj=Math.ceil,oj=ra.ReactCurrentDispatcher,pj=ra.ReactCurrentOwner,X=0,U=null,Y=null,W=0,qj=0,rj=Bf(0),V=0,sj=null,tj=0,Dg=0,Hi=0,uj=0,vj=null,jj=0,Ji=Infinity;function wj(){Ji=O()+500}var Z=null,Qi=!1,Ri=null,Ti=null,xj=!1,yj=null,zj=90,Aj=[],Bj=[],Cj=null,Dj=0,Ej=null,Fj=-1,Gj=0,Hj=0,Ij=null,Jj=!1;function Hg(){return 0!==(X&48)?O():-1!==Fj?Fj:Fj=O()}\nfunction Ig(a){a=a.mode;if(0===(a&2))return 1;if(0===(a&4))return 99===eg()?1:2;0===Gj&&(Gj=tj);if(0!==kg.transition){0!==Hj&&(Hj=null!==vj?vj.pendingLanes:0);a=Gj;var b=4186112&~Hj;b&=-b;0===b&&(a=4186112&~a,b=a&-a,0===b&&(b=8192));return b}a=eg();0!==(X&4)&&98===a?a=Xc(12,Gj):(a=Sc(a),a=Xc(a,Gj));return a}\nfunction Jg(a,b,c){if(50<Dj)throw Dj=0,Ej=null,Error(y(185));a=Kj(a,b);if(null===a)return null;$c(a,b,c);a===U&&(Hi|=b,4===V&&Ii(a,W));var d=eg();1===b?0!==(X&8)&&0===(X&48)?Lj(a):(Mj(a,c),0===X&&(wj(),ig())):(0===(X&4)||98!==d&&99!==d||(null===Cj?Cj=new Set([a]):Cj.add(a)),Mj(a,c));vj=a}function Kj(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}\nfunction Mj(a,b){for(var c=a.callbackNode,d=a.suspendedLanes,e=a.pingedLanes,f=a.expirationTimes,g=a.pendingLanes;0<g;){var h=31-Vc(g),k=1<<h,l=f[h];if(-1===l){if(0===(k&d)||0!==(k&e)){l=b;Rc(k);var n=F;f[h]=10<=n?l+250:6<=n?l+5E3:-1}}else l<=b&&(a.expiredLanes|=k);g&=~k}d=Uc(a,a===U?W:0);b=F;if(0===d)null!==c&&(c!==Zf&&Pf(c),a.callbackNode=null,a.callbackPriority=0);else{if(null!==c){if(a.callbackPriority===b)return;c!==Zf&&Pf(c)}15===b?(c=Lj.bind(null,a),null===ag?(ag=[c],bg=Of(Uf,jg)):ag.push(c),\nc=Zf):14===b?c=hg(99,Lj.bind(null,a)):(c=Tc(b),c=hg(c,Nj.bind(null,a)));a.callbackPriority=b;a.callbackNode=c}}\nfunction Nj(a){Fj=-1;Hj=Gj=0;if(0!==(X&48))throw Error(y(327));var b=a.callbackNode;if(Oj()&&a.callbackNode!==b)return null;var c=Uc(a,a===U?W:0);if(0===c)return null;var d=c;var e=X;X|=16;var f=Pj();if(U!==a||W!==d)wj(),Qj(a,d);do try{Rj();break}catch(h){Sj(a,h)}while(1);qg();oj.current=f;X=e;null!==Y?d=0:(U=null,W=0,d=V);if(0!==(tj&Hi))Qj(a,0);else if(0!==d){2===d&&(X|=64,a.hydrate&&(a.hydrate=!1,qf(a.containerInfo)),c=Wc(a),0!==c&&(d=Tj(a,c)));if(1===d)throw b=sj,Qj(a,0),Ii(a,c),Mj(a,O()),b;a.finishedWork=\na.current.alternate;a.finishedLanes=c;switch(d){case 0:case 1:throw Error(y(345));case 2:Uj(a);break;case 3:Ii(a,c);if((c&62914560)===c&&(d=jj+500-O(),10<d)){if(0!==Uc(a,0))break;e=a.suspendedLanes;if((e&c)!==c){Hg();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=of(Uj.bind(null,a),d);break}Uj(a);break;case 4:Ii(a,c);if((c&4186112)===c)break;d=a.eventTimes;for(e=-1;0<c;){var g=31-Vc(c);f=1<<g;g=d[g];g>e&&(e=g);c&=~f}c=e;c=O()-c;c=(120>c?120:480>c?480:1080>c?1080:1920>c?1920:3E3>c?3E3:4320>\nc?4320:1960*nj(c/1960))-c;if(10<c){a.timeoutHandle=of(Uj.bind(null,a),c);break}Uj(a);break;case 5:Uj(a);break;default:throw Error(y(329));}}Mj(a,O());return a.callbackNode===b?Nj.bind(null,a):null}function Ii(a,b){b&=~uj;b&=~Hi;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-Vc(b),d=1<<c;a[c]=-1;b&=~d}}\nfunction Lj(a){if(0!==(X&48))throw Error(y(327));Oj();if(a===U&&0!==(a.expiredLanes&W)){var b=W;var c=Tj(a,b);0!==(tj&Hi)&&(b=Uc(a,b),c=Tj(a,b))}else b=Uc(a,0),c=Tj(a,b);0!==a.tag&&2===c&&(X|=64,a.hydrate&&(a.hydrate=!1,qf(a.containerInfo)),b=Wc(a),0!==b&&(c=Tj(a,b)));if(1===c)throw c=sj,Qj(a,0),Ii(a,b),Mj(a,O()),c;a.finishedWork=a.current.alternate;a.finishedLanes=b;Uj(a);Mj(a,O());return null}\nfunction Vj(){if(null!==Cj){var a=Cj;Cj=null;a.forEach(function(a){a.expiredLanes|=24&a.pendingLanes;Mj(a,O())})}ig()}function Wj(a,b){var c=X;X|=1;try{return a(b)}finally{X=c,0===X&&(wj(),ig())}}function Xj(a,b){var c=X;X&=-2;X|=8;try{return a(b)}finally{X=c,0===X&&(wj(),ig())}}function ni(a,b){I(rj,qj);qj|=b;tj|=b}function Ki(){qj=rj.current;H(rj)}\nfunction Qj(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,pf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&Gf();break;case 3:fh();H(N);H(M);uh();break;case 5:hh(d);break;case 4:fh();break;case 13:H(P);break;case 19:H(P);break;case 10:rg(d);break;case 23:case 24:Ki()}c=c.return}U=a;Y=Tg(a.current,null);W=qj=tj=b;V=0;sj=null;uj=Hi=Dg=0}\nfunction Sj(a,b){do{var c=Y;try{qg();vh.current=Gh;if(yh){for(var d=R.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next}yh=!1}xh=0;T=S=R=null;zh=!1;pj.current=null;if(null===c||null===c.return){V=1;sj=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=W;h.flags|=2048;h.firstEffect=h.lastEffect=null;if(null!==k&&\"object\"===typeof k&&\"function\"===typeof k.then){var l=k;if(0===(h.mode&2)){var n=h.alternate;n?(h.updateQueue=n.updateQueue,h.memoizedState=n.memoizedState,h.lanes=n.lanes):\n(h.updateQueue=null,h.memoizedState=null)}var A=0!==(P.current&1),p=g;do{var C;if(C=13===p.tag){var x=p.memoizedState;if(null!==x)C=null!==x.dehydrated?!0:!1;else{var w=p.memoizedProps;C=void 0===w.fallback?!1:!0!==w.unstable_avoidThisFallback?!0:A?!1:!0}}if(C){var z=p.updateQueue;if(null===z){var u=new Set;u.add(l);p.updateQueue=u}else z.add(l);if(0===(p.mode&2)){p.flags|=64;h.flags|=16384;h.flags&=-2981;if(1===h.tag)if(null===h.alternate)h.tag=17;else{var t=zg(-1,1);t.tag=2;Ag(h,t)}h.lanes|=1;break a}k=\nvoid 0;h=b;var q=f.pingCache;null===q?(q=f.pingCache=new Oi,k=new Set,q.set(l,k)):(k=q.get(l),void 0===k&&(k=new Set,q.set(l,k)));if(!k.has(h)){k.add(h);var v=Yj.bind(null,f,l,h);l.then(v,v)}p.flags|=4096;p.lanes=b;break a}p=p.return}while(null!==p);k=Error((Ra(h.type)||\"A React component\")+\" suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.\")}5!==V&&(V=2);k=Mi(k,h);p=\ng;do{switch(p.tag){case 3:f=k;p.flags|=4096;b&=-b;p.lanes|=b;var J=Pi(p,f,b);Bg(p,J);break a;case 1:f=k;var K=p.type,Q=p.stateNode;if(0===(p.flags&64)&&(\"function\"===typeof K.getDerivedStateFromError||null!==Q&&\"function\"===typeof Q.componentDidCatch&&(null===Ti||!Ti.has(Q)))){p.flags|=4096;b&=-b;p.lanes|=b;var L=Si(p,f,b);Bg(p,L);break a}}p=p.return}while(null!==p)}Zj(c)}catch(va){b=va;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}\nfunction Pj(){var a=oj.current;oj.current=Gh;return null===a?Gh:a}function Tj(a,b){var c=X;X|=16;var d=Pj();U===a&&W===b||Qj(a,b);do try{ak();break}catch(e){Sj(a,e)}while(1);qg();X=c;oj.current=d;if(null!==Y)throw Error(y(261));U=null;W=0;return V}function ak(){for(;null!==Y;)bk(Y)}function Rj(){for(;null!==Y&&!Qf();)bk(Y)}function bk(a){var b=ck(a.alternate,a,qj);a.memoizedProps=a.pendingProps;null===b?Zj(a):Y=b;pj.current=null}\nfunction Zj(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&2048)){c=Gi(c,b,qj);if(null!==c){Y=c;return}c=b;if(24!==c.tag&&23!==c.tag||null===c.memoizedState||0!==(qj&1073741824)||0===(c.mode&4)){for(var d=0,e=c.child;null!==e;)d|=e.lanes|e.childLanes,e=e.sibling;c.childLanes=d}null!==a&&0===(a.flags&2048)&&(null===a.firstEffect&&(a.firstEffect=b.firstEffect),null!==b.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=b.firstEffect),a.lastEffect=b.lastEffect),1<b.flags&&(null!==\na.lastEffect?a.lastEffect.nextEffect=b:a.firstEffect=b,a.lastEffect=b))}else{c=Li(b);if(null!==c){c.flags&=2047;Y=c;return}null!==a&&(a.firstEffect=a.lastEffect=null,a.flags|=2048)}b=b.sibling;if(null!==b){Y=b;return}Y=b=a}while(null!==b);0===V&&(V=5)}function Uj(a){var b=eg();gg(99,dk.bind(null,a,b));return null}\nfunction dk(a,b){do Oj();while(null!==yj);if(0!==(X&48))throw Error(y(327));var c=a.finishedWork;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(y(177));a.callbackNode=null;var d=c.lanes|c.childLanes,e=d,f=a.pendingLanes&~e;a.pendingLanes=e;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=e;a.mutableReadLanes&=e;a.entangledLanes&=e;e=a.entanglements;for(var g=a.eventTimes,h=a.expirationTimes;0<f;){var k=31-Vc(f),l=1<<k;e[k]=0;g[k]=-1;h[k]=-1;f&=~l}null!==\nCj&&0===(d&24)&&Cj.has(a)&&Cj.delete(a);a===U&&(Y=U=null,W=0);1<c.flags?null!==c.lastEffect?(c.lastEffect.nextEffect=c,d=c.firstEffect):d=c:d=c.firstEffect;if(null!==d){e=X;X|=32;pj.current=null;kf=fd;g=Ne();if(Oe(g)){if(\"selectionStart\"in g)h={start:g.selectionStart,end:g.selectionEnd};else a:if(h=(h=g.ownerDocument)&&h.defaultView||window,(l=h.getSelection&&h.getSelection())&&0!==l.rangeCount){h=l.anchorNode;f=l.anchorOffset;k=l.focusNode;l=l.focusOffset;try{h.nodeType,k.nodeType}catch(va){h=null;\nbreak a}var n=0,A=-1,p=-1,C=0,x=0,w=g,z=null;b:for(;;){for(var u;;){w!==h||0!==f&&3!==w.nodeType||(A=n+f);w!==k||0!==l&&3!==w.nodeType||(p=n+l);3===w.nodeType&&(n+=w.nodeValue.length);if(null===(u=w.firstChild))break;z=w;w=u}for(;;){if(w===g)break b;z===h&&++C===f&&(A=n);z===k&&++x===l&&(p=n);if(null!==(u=w.nextSibling))break;w=z;z=w.parentNode}w=u}h=-1===A||-1===p?null:{start:A,end:p}}else h=null;h=h||{start:0,end:0}}else h=null;lf={focusedElem:g,selectionRange:h};fd=!1;Ij=null;Jj=!1;Z=d;do try{ek()}catch(va){if(null===\nZ)throw Error(y(330));Wi(Z,va);Z=Z.nextEffect}while(null!==Z);Ij=null;Z=d;do try{for(g=a;null!==Z;){var t=Z.flags;t&16&&pb(Z.stateNode,\"\");if(t&128){var q=Z.alternate;if(null!==q){var v=q.ref;null!==v&&(\"function\"===typeof v?v(null):v.current=null)}}switch(t&1038){case 2:fj(Z);Z.flags&=-3;break;case 6:fj(Z);Z.flags&=-3;ij(Z.alternate,Z);break;case 1024:Z.flags&=-1025;break;case 1028:Z.flags&=-1025;ij(Z.alternate,Z);break;case 4:ij(Z.alternate,Z);break;case 8:h=Z;cj(g,h);var J=h.alternate;dj(h);null!==\nJ&&dj(J)}Z=Z.nextEffect}}catch(va){if(null===Z)throw Error(y(330));Wi(Z,va);Z=Z.nextEffect}while(null!==Z);v=lf;q=Ne();t=v.focusedElem;g=v.selectionRange;if(q!==t&&t&&t.ownerDocument&&Me(t.ownerDocument.documentElement,t)){null!==g&&Oe(t)&&(q=g.start,v=g.end,void 0===v&&(v=q),\"selectionStart\"in t?(t.selectionStart=q,t.selectionEnd=Math.min(v,t.value.length)):(v=(q=t.ownerDocument||document)&&q.defaultView||window,v.getSelection&&(v=v.getSelection(),h=t.textContent.length,J=Math.min(g.start,h),g=void 0===\ng.end?J:Math.min(g.end,h),!v.extend&&J>g&&(h=g,g=J,J=h),h=Le(t,J),f=Le(t,g),h&&f&&(1!==v.rangeCount||v.anchorNode!==h.node||v.anchorOffset!==h.offset||v.focusNode!==f.node||v.focusOffset!==f.offset)&&(q=q.createRange(),q.setStart(h.node,h.offset),v.removeAllRanges(),J>g?(v.addRange(q),v.extend(f.node,f.offset)):(q.setEnd(f.node,f.offset),v.addRange(q))))));q=[];for(v=t;v=v.parentNode;)1===v.nodeType&&q.push({element:v,left:v.scrollLeft,top:v.scrollTop});\"function\"===typeof t.focus&&t.focus();for(t=\n0;t<q.length;t++)v=q[t],v.element.scrollLeft=v.left,v.element.scrollTop=v.top}fd=!!kf;lf=kf=null;a.current=c;Z=d;do try{for(t=a;null!==Z;){var K=Z.flags;K&36&&Yi(t,Z.alternate,Z);if(K&128){q=void 0;var Q=Z.ref;if(null!==Q){var L=Z.stateNode;switch(Z.tag){case 5:q=L;break;default:q=L}\"function\"===typeof Q?Q(q):Q.current=q}}Z=Z.nextEffect}}catch(va){if(null===Z)throw Error(y(330));Wi(Z,va);Z=Z.nextEffect}while(null!==Z);Z=null;$f();X=e}else a.current=c;if(xj)xj=!1,yj=a,zj=b;else for(Z=d;null!==Z;)b=\nZ.nextEffect,Z.nextEffect=null,Z.flags&8&&(K=Z,K.sibling=null,K.stateNode=null),Z=b;d=a.pendingLanes;0===d&&(Ti=null);1===d?a===Ej?Dj++:(Dj=0,Ej=a):Dj=0;c=c.stateNode;if(Mf&&\"function\"===typeof Mf.onCommitFiberRoot)try{Mf.onCommitFiberRoot(Lf,c,void 0,64===(c.current.flags&64))}catch(va){}Mj(a,O());if(Qi)throw Qi=!1,a=Ri,Ri=null,a;if(0!==(X&8))return null;ig();return null}\nfunction ek(){for(;null!==Z;){var a=Z.alternate;Jj||null===Ij||(0!==(Z.flags&8)?dc(Z,Ij)&&(Jj=!0):13===Z.tag&&mj(a,Z)&&dc(Z,Ij)&&(Jj=!0));var b=Z.flags;0!==(b&256)&&Xi(a,Z);0===(b&512)||xj||(xj=!0,hg(97,function(){Oj();return null}));Z=Z.nextEffect}}function Oj(){if(90!==zj){var a=97<zj?97:zj;zj=90;return gg(a,fk)}return!1}function $i(a,b){Aj.push(b,a);xj||(xj=!0,hg(97,function(){Oj();return null}))}function Zi(a,b){Bj.push(b,a);xj||(xj=!0,hg(97,function(){Oj();return null}))}\nfunction fk(){if(null===yj)return!1;var a=yj;yj=null;if(0!==(X&48))throw Error(y(331));var b=X;X|=32;var c=Bj;Bj=[];for(var d=0;d<c.length;d+=2){var e=c[d],f=c[d+1],g=e.destroy;e.destroy=void 0;if(\"function\"===typeof g)try{g()}catch(k){if(null===f)throw Error(y(330));Wi(f,k)}}c=Aj;Aj=[];for(d=0;d<c.length;d+=2){e=c[d];f=c[d+1];try{var h=e.create;e.destroy=h()}catch(k){if(null===f)throw Error(y(330));Wi(f,k)}}for(h=a.current.firstEffect;null!==h;)a=h.nextEffect,h.nextEffect=null,h.flags&8&&(h.sibling=\nnull,h.stateNode=null),h=a;X=b;ig();return!0}function gk(a,b,c){b=Mi(c,b);b=Pi(a,b,1);Ag(a,b);b=Hg();a=Kj(a,1);null!==a&&($c(a,1,b),Mj(a,b))}\nfunction Wi(a,b){if(3===a.tag)gk(a,a,b);else for(var c=a.return;null!==c;){if(3===c.tag){gk(c,a,b);break}else if(1===c.tag){var d=c.stateNode;if(\"function\"===typeof c.type.getDerivedStateFromError||\"function\"===typeof d.componentDidCatch&&(null===Ti||!Ti.has(d))){a=Mi(b,a);var e=Si(c,a,1);Ag(c,e);e=Hg();c=Kj(c,1);if(null!==c)$c(c,1,e),Mj(c,e);else if(\"function\"===typeof d.componentDidCatch&&(null===Ti||!Ti.has(d)))try{d.componentDidCatch(b,a)}catch(f){}break}}c=c.return}}\nfunction Yj(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=Hg();a.pingedLanes|=a.suspendedLanes&c;U===a&&(W&c)===c&&(4===V||3===V&&(W&62914560)===W&&500>O()-jj?Qj(a,0):uj|=c);Mj(a,b)}function lj(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=0;0===b&&(b=a.mode,0===(b&2)?b=1:0===(b&4)?b=99===eg()?1:2:(0===Gj&&(Gj=tj),b=Yc(62914560&~Gj),0===b&&(b=4194304)));c=Hg();a=Kj(a,b);null!==a&&($c(a,b,c),Mj(a,c))}var ck;\nck=function(a,b,c){var d=b.lanes;if(null!==a)if(a.memoizedProps!==b.pendingProps||N.current)ug=!0;else if(0!==(c&d))ug=0!==(a.flags&16384)?!0:!1;else{ug=!1;switch(b.tag){case 3:ri(b);sh();break;case 5:gh(b);break;case 1:Ff(b.type)&&Jf(b);break;case 4:eh(b,b.stateNode.containerInfo);break;case 10:d=b.memoizedProps.value;var e=b.type._context;I(mg,e._currentValue);e._currentValue=d;break;case 13:if(null!==b.memoizedState){if(0!==(c&b.child.childLanes))return ti(a,b,c);I(P,P.current&1);b=hi(a,b,c);return null!==\nb?b.sibling:null}I(P,P.current&1);break;case 19:d=0!==(c&b.childLanes);if(0!==(a.flags&64)){if(d)return Ai(a,b,c);b.flags|=64}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);I(P,P.current);if(d)break;else return null;case 23:case 24:return b.lanes=0,mi(a,b,c)}return hi(a,b,c)}else ug=!1;b.lanes=0;switch(b.tag){case 2:d=b.type;null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);a=b.pendingProps;e=Ef(b,M.current);tg(b,c);e=Ch(null,b,d,a,e,c);b.flags|=1;if(\"object\"===\ntypeof e&&null!==e&&\"function\"===typeof e.render&&void 0===e.$$typeof){b.tag=1;b.memoizedState=null;b.updateQueue=null;if(Ff(d)){var f=!0;Jf(b)}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;xg(b);var g=d.getDerivedStateFromProps;\"function\"===typeof g&&Gg(b,d,g,a);e.updater=Kg;b.stateNode=e;e._reactInternals=b;Og(b,d,a,c);b=qi(null,b,d,!0,f,c)}else b.tag=0,fi(null,b,e,c),b=b.child;return b;case 16:e=b.elementType;a:{null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);\na=b.pendingProps;f=e._init;e=f(e._payload);b.type=e;f=b.tag=hk(e);a=lg(e,a);switch(f){case 0:b=li(null,b,e,a,c);break a;case 1:b=pi(null,b,e,a,c);break a;case 11:b=gi(null,b,e,a,c);break a;case 14:b=ii(null,b,e,lg(e.type,a),d,c);break a}throw Error(y(306,e,\"\"));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),li(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),pi(a,b,d,e,c);case 3:ri(b);d=b.updateQueue;if(null===a||null===d)throw Error(y(282));\nd=b.pendingProps;e=b.memoizedState;e=null!==e?e.element:null;yg(a,b);Cg(b,d,null,c);d=b.memoizedState.element;if(d===e)sh(),b=hi(a,b,c);else{e=b.stateNode;if(f=e.hydrate)kh=rf(b.stateNode.containerInfo.firstChild),jh=b,f=lh=!0;if(f){a=e.mutableSourceEagerHydrationData;if(null!=a)for(e=0;e<a.length;e+=2)f=a[e],f._workInProgressVersionPrimary=a[e+1],th.push(f);c=Zg(b,null,d,c);for(b.child=c;c;)c.flags=c.flags&-3|1024,c=c.sibling}else fi(a,b,d,c),sh();b=b.child}return b;case 5:return gh(b),null===a&&\nph(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,nf(d,e)?g=null:null!==f&&nf(d,f)&&(b.flags|=16),oi(a,b),fi(a,b,g,c),b.child;case 6:return null===a&&ph(b),null;case 13:return ti(a,b,c);case 4:return eh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Yg(b,null,d,c):fi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),gi(a,b,d,e,c);case 7:return fi(a,b,b.pendingProps,c),b.child;case 8:return fi(a,b,b.pendingProps.children,\nc),b.child;case 12:return fi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;var h=b.type._context;I(mg,h._currentValue);h._currentValue=f;if(null!==g)if(h=g.value,f=He(h,f)?0:(\"function\"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0,0===f){if(g.children===e.children&&!N.current){b=hi(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var k=h.dependencies;if(null!==k){g=h.child;for(var l=\nk.firstContext;null!==l;){if(l.context===d&&0!==(l.observedBits&f)){1===h.tag&&(l=zg(-1,c&-c),l.tag=2,Ag(h,l));h.lanes|=c;l=h.alternate;null!==l&&(l.lanes|=c);sg(h.return,c);k.lanes|=c;break}l=l.next}}else g=10===h.tag?h.type===b.type?null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return}h=g}fi(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,tg(b,c),e=vg(e,\nf.unstable_observedBits),d=d(e),b.flags|=1,fi(a,b,d,c),b.child;case 14:return e=b.type,f=lg(e,b.pendingProps),f=lg(e.type,f),ii(a,b,e,f,d,c);case 15:return ki(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2),b.tag=1,Ff(d)?(a=!0,Jf(b)):a=!1,tg(b,c),Mg(b,d,e),Og(b,d,e,c),qi(null,b,d,!0,a,c);case 19:return Ai(a,b,c);case 23:return mi(a,b,c);case 24:return mi(a,b,c)}throw Error(y(156,b.tag));\n};function ik(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.flags=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childLanes=this.lanes=0;this.alternate=null}function nh(a,b,c,d){return new ik(a,b,c,d)}function ji(a){a=a.prototype;return!(!a||!a.isReactComponent)}\nfunction hk(a){if(\"function\"===typeof a)return ji(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Aa)return 11;if(a===Da)return 14}return 2}\nfunction Tg(a,b){var c=a.alternate;null===c?(c=nh(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};\nc.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}\nfunction Vg(a,b,c,d,e,f){var g=2;d=a;if(\"function\"===typeof a)ji(a)&&(g=1);else if(\"string\"===typeof a)g=5;else a:switch(a){case ua:return Xg(c.children,e,f,b);case Ha:g=8;e|=16;break;case wa:g=8;e|=1;break;case xa:return a=nh(12,c,b,e|8),a.elementType=xa,a.type=xa,a.lanes=f,a;case Ba:return a=nh(13,c,b,e),a.type=Ba,a.elementType=Ba,a.lanes=f,a;case Ca:return a=nh(19,c,b,e),a.elementType=Ca,a.lanes=f,a;case Ia:return vi(c,e,f,b);case Ja:return a=nh(24,c,b,e),a.elementType=Ja,a.lanes=f,a;default:if(\"object\"===\ntypeof a&&null!==a)switch(a.$$typeof){case ya:g=10;break a;case za:g=9;break a;case Aa:g=11;break a;case Da:g=14;break a;case Ea:g=16;d=null;break a;case Fa:g=22;break a}throw Error(y(130,null==a?a:typeof a,\"\"));}b=nh(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Xg(a,b,c,d){a=nh(7,a,d,b);a.lanes=c;return a}function vi(a,b,c,d){a=nh(23,a,d,b);a.elementType=Ia;a.lanes=c;return a}function Ug(a,b,c){a=nh(6,a,null,b);a.lanes=c;return a}\nfunction Wg(a,b,c){b=nh(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}\nfunction jk(a,b,c){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.pendingContext=this.context=null;this.hydrate=c;this.callbackNode=null;this.callbackPriority=0;this.eventTimes=Zc(0);this.expirationTimes=Zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=Zc(0);this.mutableSourceEagerHydrationData=null}\nfunction kk(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:ta,key:null==d?null:\"\"+d,children:a,containerInfo:b,implementation:c}}\nfunction lk(a,b,c,d){var e=b.current,f=Hg(),g=Ig(e);a:if(c){c=c._reactInternals;b:{if(Zb(c)!==c||1!==c.tag)throw Error(y(170));var h=c;do{switch(h.tag){case 3:h=h.stateNode.context;break b;case 1:if(Ff(h.type)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}}h=h.return}while(null!==h);throw Error(y(171));}if(1===c.tag){var k=c.type;if(Ff(k)){c=If(c,k,h);break a}}c=h}else c=Cf;null===b.context?b.context=c:b.pendingContext=c;b=zg(f,g);b.payload={element:a};d=void 0===d?null:d;null!==\nd&&(b.callback=d);Ag(e,b);Jg(e,g,f);return g}function mk(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function nk(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b}}function ok(a,b){nk(a,b);(a=a.alternate)&&nk(a,b)}function pk(){return null}\nfunction qk(a,b,c){var d=null!=c&&null!=c.hydrationOptions&&c.hydrationOptions.mutableSources||null;c=new jk(a,b,null!=c&&!0===c.hydrate);b=nh(3,null,null,2===b?7:1===b?3:0);c.current=b;b.stateNode=c;xg(b);a[ff]=c.current;cf(8===a.nodeType?a.parentNode:a);if(d)for(a=0;a<d.length;a++){b=d[a];var e=b._getVersion;e=e(b._source);null==c.mutableSourceEagerHydrationData?c.mutableSourceEagerHydrationData=[b,e]:c.mutableSourceEagerHydrationData.push(b,e)}this._internalRoot=c}\nqk.prototype.render=function(a){lk(a,this._internalRoot,null,null)};qk.prototype.unmount=function(){var a=this._internalRoot,b=a.containerInfo;lk(null,a,null,function(){b[ff]=null})};function rk(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||\" react-mount-point-unstable \"!==a.nodeValue))}\nfunction sk(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute(\"data-reactroot\")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new qk(a,0,b?{hydrate:!0}:void 0)}\nfunction tk(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f._internalRoot;if(\"function\"===typeof e){var h=e;e=function(){var a=mk(g);h.call(a)}}lk(b,g,a,e)}else{f=c._reactRootContainer=sk(c,d);g=f._internalRoot;if(\"function\"===typeof e){var k=e;e=function(){var a=mk(g);k.call(a)}}Xj(function(){lk(b,g,a,e)})}return mk(g)}ec=function(a){if(13===a.tag){var b=Hg();Jg(a,4,b);ok(a,4)}};fc=function(a){if(13===a.tag){var b=Hg();Jg(a,67108864,b);ok(a,67108864)}};\ngc=function(a){if(13===a.tag){var b=Hg(),c=Ig(a);Jg(a,c,b);ok(a,c)}};hc=function(a,b){return b()};\nyb=function(a,b,c){switch(b){case \"input\":ab(a,c);b=c.name;if(\"radio\"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll(\"input[name=\"+JSON.stringify(\"\"+b)+'][type=\"radio\"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(y(90));Wa(d);ab(d,e)}}}break;case \"textarea\":ib(a,c);break;case \"select\":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1)}};Gb=Wj;\nHb=function(a,b,c,d,e){var f=X;X|=4;try{return gg(98,a.bind(null,b,c,d,e))}finally{X=f,0===X&&(wj(),ig())}};Ib=function(){0===(X&49)&&(Vj(),Oj())};Jb=function(a,b){var c=X;X|=2;try{return a(b)}finally{X=c,0===X&&(wj(),ig())}};function uk(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!rk(b))throw Error(y(200));return kk(a,b,null,c)}var vk={Events:[Cb,ue,Db,Eb,Fb,Oj,{current:!1}]},wk={findFiberByHostInstance:wc,bundleType:0,version:\"17.0.1\",rendererPackageName:\"react-dom\"};\nvar xk={bundleType:wk.bundleType,version:wk.version,rendererPackageName:wk.rendererPackageName,rendererConfig:wk.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ra.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=cc(a);return null===a?null:a.stateNode},findFiberByHostInstance:wk.findFiberByHostInstance||\npk,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if(\"undefined\"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var yk=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!yk.isDisabled&&yk.supportsFiber)try{Lf=yk.inject(xk),Mf=yk}catch(a){}}exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=vk;exports.createPortal=uk;\nexports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if(\"function\"===typeof a.render)throw Error(y(188));throw Error(y(268,Object.keys(a)));}a=cc(b);a=null===a?null:a.stateNode;return a};exports.flushSync=function(a,b){var c=X;if(0!==(c&48))return a(b);X|=1;try{if(a)return gg(99,a.bind(null,b))}finally{X=c,ig()}};exports.hydrate=function(a,b,c){if(!rk(b))throw Error(y(200));return tk(null,a,b,!0,c)};\nexports.render=function(a,b,c){if(!rk(b))throw Error(y(200));return tk(null,a,b,!1,c)};exports.unmountComponentAtNode=function(a){if(!rk(a))throw Error(y(40));return a._reactRootContainer?(Xj(function(){tk(null,null,a,!1,function(){a._reactRootContainer=null;a[ff]=null})}),!0):!1};exports.unstable_batchedUpdates=Wj;exports.unstable_createPortal=function(a,b){return uk(a,b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)};\nexports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!rk(c))throw Error(y(200));if(null==a||void 0===a._reactInternals)throw Error(y(38));return tk(a,b,c,!1,d)};exports.version=\"17.0.1\";\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n","/** @license React v0.20.1\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f,g,h,k;if(\"object\"===typeof performance&&\"function\"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()}}else{var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q}}\nif(\"undefined\"===typeof window||\"function\"!==typeof MessageChannel){var t=null,u=null,w=function(){if(null!==t)try{var a=exports.unstable_now();t(!0,a);t=null}catch(b){throw setTimeout(w,0),b;}};f=function(a){null!==t?setTimeout(f,0,a):(t=a,setTimeout(w,0))};g=function(a,b){u=setTimeout(a,b)};h=function(){clearTimeout(u)};exports.unstable_shouldYield=function(){return!1};k=exports.unstable_forceFrameRate=function(){}}else{var x=window.setTimeout,y=window.clearTimeout;if(\"undefined\"!==typeof console){var z=\nwindow.cancelAnimationFrame;\"function\"!==typeof window.requestAnimationFrame&&console.error(\"This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills\");\"function\"!==typeof z&&console.error(\"This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills\")}var A=!1,B=null,C=-1,D=5,E=0;exports.unstable_shouldYield=function(){return exports.unstable_now()>=\nE};k=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):D=0<a?Math.floor(1E3/a):5};var F=new MessageChannel,G=F.port2;F.port1.onmessage=function(){if(null!==B){var a=exports.unstable_now();E=a+D;try{B(!0,a)?G.postMessage(null):(A=!1,B=null)}catch(b){throw G.postMessage(null),b;}}else A=!1};f=function(a){B=a;A||(A=!0,G.postMessage(null))};g=function(a,b){C=\nx(function(){a(exports.unstable_now())},b)};h=function(){y(C);C=-1}}function H(a,b){var c=a.length;a.push(b);a:for(;;){var d=c-1>>>1,e=a[d];if(void 0!==e&&0<I(e,b))a[d]=b,a[c]=e,c=d;else break a}}function J(a){a=a[0];return void 0===a?null:a}\nfunction K(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>I(n,c))void 0!==r&&0>I(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>I(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function I(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var L=[],M=[],N=1,O=null,P=3,Q=!1,R=!1,S=!1;\nfunction T(a){for(var b=J(M);null!==b;){if(null===b.callback)K(M);else if(b.startTime<=a)K(M),b.sortIndex=b.expirationTime,H(L,b);else break;b=J(M)}}function U(a){S=!1;T(a);if(!R)if(null!==J(L))R=!0,f(V);else{var b=J(M);null!==b&&g(U,b.startTime-a)}}\nfunction V(a,b){R=!1;S&&(S=!1,h());Q=!0;var c=P;try{T(b);for(O=J(L);null!==O&&(!(O.expirationTime>b)||a&&!exports.unstable_shouldYield());){var d=O.callback;if(\"function\"===typeof d){O.callback=null;P=O.priorityLevel;var e=d(O.expirationTime<=b);b=exports.unstable_now();\"function\"===typeof e?O.callback=e:O===J(L)&&K(L);T(b)}else K(L);O=J(L)}if(null!==O)var m=!0;else{var n=J(M);null!==n&&g(U,n.startTime-b);m=!1}return m}finally{O=null,P=c,Q=!1}}var W=k;exports.unstable_IdlePriority=5;\nexports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){R||Q||(R=!0,f(V))};exports.unstable_getCurrentPriorityLevel=function(){return P};exports.unstable_getFirstCallbackNode=function(){return J(L)};\nexports.unstable_next=function(a){switch(P){case 1:case 2:case 3:var b=3;break;default:b=P}var c=P;P=b;try{return a()}finally{P=c}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=W;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=P;P=a;try{return b()}finally{P=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();\"object\"===typeof c&&null!==c?(c=c.delay,c=\"number\"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3}e=c+e;a={id:N++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,H(M,a),null===J(L)&&a===J(M)&&(S?h():S=!0,g(U,c-d))):(a.sortIndex=e,H(L,a),R||Q||(R=!0,f(V)));return a};\nexports.unstable_wrapCallback=function(a){var b=P;return function(){var c=P;P=b;try{return a.apply(this,arguments)}finally{P=c}}};\n","/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar Reflect;\n(function (Reflect) {\n    // Metadata Proposal\n    // https://rbuckton.github.io/reflect-metadata/\n    (function (factory) {\n        var root = typeof global === \"object\" ? global :\n            typeof self === \"object\" ? self :\n                typeof this === \"object\" ? this :\n                    Function(\"return this;\")();\n        var exporter = makeExporter(Reflect);\n        if (typeof root.Reflect === \"undefined\") {\n            root.Reflect = Reflect;\n        }\n        else {\n            exporter = makeExporter(root.Reflect, exporter);\n        }\n        factory(exporter);\n        function makeExporter(target, previous) {\n            return function (key, value) {\n                if (typeof target[key] !== \"function\") {\n                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\n                }\n                if (previous)\n                    previous(key, value);\n            };\n        }\n    })(function (exporter) {\n        var hasOwn = Object.prototype.hasOwnProperty;\n        // feature test for Symbol support\n        var supportsSymbol = typeof Symbol === \"function\";\n        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n        var downLevel = !supportsCreate && !supportsProto;\n        var HashMap = {\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n            create: supportsCreate\n                ? function () { return MakeDictionary(Object.create(null)); }\n                : supportsProto\n                    ? function () { return MakeDictionary({ __proto__: null }); }\n                    : function () { return MakeDictionary({}); },\n            has: downLevel\n                ? function (map, key) { return hasOwn.call(map, key); }\n                : function (map, key) { return key in map; },\n            get: downLevel\n                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\n                : function (map, key) { return map[key]; },\n        };\n        // Load global or shim versions of Map, Set, and WeakMap\n        var functionPrototype = Object.getPrototypeOf(Function);\n        var usePolyfill = typeof process === \"object\" && process.env && process.env[\"REFLECT_METADATA_USE_MAP_POLYFILL\"] === \"true\";\n        var _Map = !usePolyfill && typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n        var _Set = !usePolyfill && typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n        var _WeakMap = !usePolyfill && typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\n        // [[Metadata]] internal slot\n        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n        var Metadata = new _WeakMap();\n        /**\n         * Applies a set of decorators to a property of a target object.\n         * @param decorators An array of decorators.\n         * @param target The target object.\n         * @param propertyKey (Optional) The property key to decorate.\n         * @param attributes (Optional) The property descriptor for the target key.\n         * @remarks Decorators are applied in reverse order.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Example = Reflect.decorate(decoratorsArray, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Object.defineProperty(Example, \"staticMethod\",\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n         *\n         *     // method (on prototype)\n         *     Object.defineProperty(Example.prototype, \"method\",\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n         *\n         */\n        function decorate(decorators, target, propertyKey, attributes) {\n            if (!IsUndefined(propertyKey)) {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\n                    throw new TypeError();\n                if (IsNull(attributes))\n                    attributes = undefined;\n                propertyKey = ToPropertyKey(propertyKey);\n                return DecorateProperty(decorators, target, propertyKey, attributes);\n            }\n            else {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsConstructor(target))\n                    throw new TypeError();\n                return DecorateConstructor(decorators, target);\n            }\n        }\n        exporter(\"decorate\", decorate);\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n        /**\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\n         * @param metadataKey The key for the metadata entry.\n         * @param metadataValue The value for the metadata entry.\n         * @returns A decorator function.\n         * @remarks\n         * If `metadataKey` is already defined for the target and target key, the\n         * metadataValue for that key will be overwritten.\n         * @example\n         *\n         *     // constructor\n         *     @Reflect.metadata(key, value)\n         *     class Example {\n         *     }\n         *\n         *     // property (on constructor, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticProperty;\n         *     }\n         *\n         *     // property (on prototype, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         property;\n         *     }\n         *\n         *     // method (on constructor)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticMethod() { }\n         *     }\n         *\n         *     // method (on prototype)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         method() { }\n         *     }\n         *\n         */\n        function metadata(metadataKey, metadataValue) {\n            function decorator(target, propertyKey) {\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\n                    throw new TypeError();\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n            }\n            return decorator;\n        }\n        exporter(\"metadata\", metadata);\n        /**\n         * Define a unique metadata entry on the target.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param metadataValue A value that contains attached metadata.\n         * @param target The target object on which to define metadata.\n         * @param propertyKey (Optional) The property key for the target.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n         *\n         *     // decorator factory as metadata-producing annotation.\n         *     function MyAnnotation(options): Decorator {\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n         *     }\n         *\n         */\n        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n        }\n        exporter(\"defineMetadata\", defineMetadata);\n        /**\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasMetadata\", hasMetadata);\n        /**\n         * Gets a value indicating whether the target object has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getMetadata\", getMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getOwnMetadata\", getOwnMetadata);\n        /**\n         * Gets the metadata keys defined on the target object or its prototype chain.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getMetadataKeys\", getMetadataKeys);\n        /**\n         * Gets the unique metadata keys defined on the target object.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\n        /**\n         * Deletes the metadata entry from the target object with the provided key.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function deleteMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            if (!metadataMap.delete(metadataKey))\n                return false;\n            if (metadataMap.size > 0)\n                return true;\n            var targetMetadata = Metadata.get(target);\n            targetMetadata.delete(propertyKey);\n            if (targetMetadata.size > 0)\n                return true;\n            Metadata.delete(target);\n            return true;\n        }\n        exporter(\"deleteMetadata\", deleteMetadata);\n        function DecorateConstructor(decorators, target) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsConstructor(decorated))\n                        throw new TypeError();\n                    target = decorated;\n                }\n            }\n            return target;\n        }\n        function DecorateProperty(decorators, target, propertyKey, descriptor) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target, propertyKey, descriptor);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsObject(decorated))\n                        throw new TypeError();\n                    descriptor = decorated;\n                }\n            }\n            return descriptor;\n        }\n        function GetOrCreateMetadataMap(O, P, Create) {\n            var targetMetadata = Metadata.get(O);\n            if (IsUndefined(targetMetadata)) {\n                if (!Create)\n                    return undefined;\n                targetMetadata = new _Map();\n                Metadata.set(O, targetMetadata);\n            }\n            var metadataMap = targetMetadata.get(P);\n            if (IsUndefined(metadataMap)) {\n                if (!Create)\n                    return undefined;\n                metadataMap = new _Map();\n                targetMetadata.set(P, metadataMap);\n            }\n            return metadataMap;\n        }\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n        function OrdinaryHasMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return true;\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryHasMetadata(MetadataKey, parent, P);\n            return false;\n        }\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            return ToBoolean(metadataMap.has(MetadataKey));\n        }\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n        function OrdinaryGetMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryGetMetadata(MetadataKey, parent, P);\n            return undefined;\n        }\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return undefined;\n            return metadataMap.get(MetadataKey);\n        }\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n            metadataMap.set(MetadataKey, MetadataValue);\n        }\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n        function OrdinaryMetadataKeys(O, P) {\n            var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (parent === null)\n                return ownKeys;\n            var parentKeys = OrdinaryMetadataKeys(parent, P);\n            if (parentKeys.length <= 0)\n                return ownKeys;\n            if (ownKeys.length <= 0)\n                return parentKeys;\n            var set = new _Set();\n            var keys = [];\n            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n                var key = ownKeys_1[_i];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n                var key = parentKeys_1[_a];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            return keys;\n        }\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n        function OrdinaryOwnMetadataKeys(O, P) {\n            var keys = [];\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return keys;\n            var keysObj = metadataMap.keys();\n            var iterator = GetIterator(keysObj);\n            var k = 0;\n            while (true) {\n                var next = IteratorStep(iterator);\n                if (!next) {\n                    keys.length = k;\n                    return keys;\n                }\n                var nextValue = IteratorValue(next);\n                try {\n                    keys[k] = nextValue;\n                }\n                catch (e) {\n                    try {\n                        IteratorClose(iterator);\n                    }\n                    finally {\n                        throw e;\n                    }\n                }\n                k++;\n            }\n        }\n        // 6 ECMAScript Data Typ0es and Values\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n        function Type(x) {\n            if (x === null)\n                return 1 /* Null */;\n            switch (typeof x) {\n                case \"undefined\": return 0 /* Undefined */;\n                case \"boolean\": return 2 /* Boolean */;\n                case \"string\": return 3 /* String */;\n                case \"symbol\": return 4 /* Symbol */;\n                case \"number\": return 5 /* Number */;\n                case \"object\": return x === null ? 1 /* Null */ : 6 /* Object */;\n                default: return 6 /* Object */;\n            }\n        }\n        // 6.1.1 The Undefined Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n        function IsUndefined(x) {\n            return x === undefined;\n        }\n        // 6.1.2 The Null Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n        function IsNull(x) {\n            return x === null;\n        }\n        // 6.1.5 The Symbol Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n        function IsSymbol(x) {\n            return typeof x === \"symbol\";\n        }\n        // 6.1.7 The Object Type\n        // https://tc39.github.io/ecma262/#sec-object-type\n        function IsObject(x) {\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n        }\n        // 7.1 Type Conversion\n        // https://tc39.github.io/ecma262/#sec-type-conversion\n        // 7.1.1 ToPrimitive(input [, PreferredType])\n        // https://tc39.github.io/ecma262/#sec-toprimitive\n        function ToPrimitive(input, PreferredType) {\n            switch (Type(input)) {\n                case 0 /* Undefined */: return input;\n                case 1 /* Null */: return input;\n                case 2 /* Boolean */: return input;\n                case 3 /* String */: return input;\n                case 4 /* Symbol */: return input;\n                case 5 /* Number */: return input;\n            }\n            var hint = PreferredType === 3 /* String */ ? \"string\" : PreferredType === 5 /* Number */ ? \"number\" : \"default\";\n            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n            if (exoticToPrim !== undefined) {\n                var result = exoticToPrim.call(input, hint);\n                if (IsObject(result))\n                    throw new TypeError();\n                return result;\n            }\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n        }\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n        function OrdinaryToPrimitive(O, hint) {\n            if (hint === \"string\") {\n                var toString_1 = O.toString;\n                if (IsCallable(toString_1)) {\n                    var result = toString_1.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            else {\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var toString_2 = O.toString;\n                if (IsCallable(toString_2)) {\n                    var result = toString_2.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            throw new TypeError();\n        }\n        // 7.1.2 ToBoolean(argument)\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\n        function ToBoolean(argument) {\n            return !!argument;\n        }\n        // 7.1.12 ToString(argument)\n        // https://tc39.github.io/ecma262/#sec-tostring\n        function ToString(argument) {\n            return \"\" + argument;\n        }\n        // 7.1.14 ToPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-topropertykey\n        function ToPropertyKey(argument) {\n            var key = ToPrimitive(argument, 3 /* String */);\n            if (IsSymbol(key))\n                return key;\n            return ToString(key);\n        }\n        // 7.2 Testing and Comparison Operations\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n        // 7.2.2 IsArray(argument)\n        // https://tc39.github.io/ecma262/#sec-isarray\n        function IsArray(argument) {\n            return Array.isArray\n                ? Array.isArray(argument)\n                : argument instanceof Object\n                    ? argument instanceof Array\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\n        }\n        // 7.2.3 IsCallable(argument)\n        // https://tc39.github.io/ecma262/#sec-iscallable\n        function IsCallable(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.4 IsConstructor(argument)\n        // https://tc39.github.io/ecma262/#sec-isconstructor\n        function IsConstructor(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.7 IsPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\n        function IsPropertyKey(argument) {\n            switch (Type(argument)) {\n                case 3 /* String */: return true;\n                case 4 /* Symbol */: return true;\n                default: return false;\n            }\n        }\n        // 7.3 Operations on Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\n        // 7.3.9 GetMethod(V, P)\n        // https://tc39.github.io/ecma262/#sec-getmethod\n        function GetMethod(V, P) {\n            var func = V[P];\n            if (func === undefined || func === null)\n                return undefined;\n            if (!IsCallable(func))\n                throw new TypeError();\n            return func;\n        }\n        // 7.4 Operations on Iterator Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n        function GetIterator(obj) {\n            var method = GetMethod(obj, iteratorSymbol);\n            if (!IsCallable(method))\n                throw new TypeError(); // from Call\n            var iterator = method.call(obj);\n            if (!IsObject(iterator))\n                throw new TypeError();\n            return iterator;\n        }\n        // 7.4.4 IteratorValue(iterResult)\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n        function IteratorValue(iterResult) {\n            return iterResult.value;\n        }\n        // 7.4.5 IteratorStep(iterator)\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\n        function IteratorStep(iterator) {\n            var result = iterator.next();\n            return result.done ? false : result;\n        }\n        // 7.4.6 IteratorClose(iterator, completion)\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\n        function IteratorClose(iterator) {\n            var f = iterator[\"return\"];\n            if (f)\n                f.call(iterator);\n        }\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n        function OrdinaryGetPrototypeOf(O) {\n            var proto = Object.getPrototypeOf(O);\n            if (typeof O !== \"function\" || O === functionPrototype)\n                return proto;\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n            // Try to determine the superclass constructor. Compatible implementations\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\n            // or ensure each class has a valid `constructor` property on its prototype that\n            // points back to the constructor.\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\n            if (proto !== functionPrototype)\n                return proto;\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n            var prototype = O.prototype;\n            var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n            if (prototypeProto == null || prototypeProto === Object.prototype)\n                return proto;\n            // If the constructor was not a function, then we cannot determine the heritage.\n            var constructor = prototypeProto.constructor;\n            if (typeof constructor !== \"function\")\n                return proto;\n            // If we have some kind of self-reference, then we cannot determine the heritage.\n            if (constructor === O)\n                return proto;\n            // we have a pretty good guess at the heritage.\n            return constructor;\n        }\n        // naive Map shim\n        function CreateMapPolyfill() {\n            var cacheSentinel = {};\n            var arraySentinel = [];\n            var MapIterator = /** @class */ (function () {\n                function MapIterator(keys, values, selector) {\n                    this._index = 0;\n                    this._keys = keys;\n                    this._values = values;\n                    this._selector = selector;\n                }\n                MapIterator.prototype[\"@@iterator\"] = function () { return this; };\n                MapIterator.prototype[iteratorSymbol] = function () { return this; };\n                MapIterator.prototype.next = function () {\n                    var index = this._index;\n                    if (index >= 0 && index < this._keys.length) {\n                        var result = this._selector(this._keys[index], this._values[index]);\n                        if (index + 1 >= this._keys.length) {\n                            this._index = -1;\n                            this._keys = arraySentinel;\n                            this._values = arraySentinel;\n                        }\n                        else {\n                            this._index++;\n                        }\n                        return { value: result, done: false };\n                    }\n                    return { value: undefined, done: true };\n                };\n                MapIterator.prototype.throw = function (error) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    throw error;\n                };\n                MapIterator.prototype.return = function (value) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    return { value: value, done: true };\n                };\n                return MapIterator;\n            }());\n            return /** @class */ (function () {\n                function Map() {\n                    this._keys = [];\n                    this._values = [];\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                }\n                Object.defineProperty(Map.prototype, \"size\", {\n                    get: function () { return this._keys.length; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\n                Map.prototype.get = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    return index >= 0 ? this._values[index] : undefined;\n                };\n                Map.prototype.set = function (key, value) {\n                    var index = this._find(key, /*insert*/ true);\n                    this._values[index] = value;\n                    return this;\n                };\n                Map.prototype.delete = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    if (index >= 0) {\n                        var size = this._keys.length;\n                        for (var i = index + 1; i < size; i++) {\n                            this._keys[i - 1] = this._keys[i];\n                            this._values[i - 1] = this._values[i];\n                        }\n                        this._keys.length--;\n                        this._values.length--;\n                        if (key === this._cacheKey) {\n                            this._cacheKey = cacheSentinel;\n                            this._cacheIndex = -2;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Map.prototype.clear = function () {\n                    this._keys.length = 0;\n                    this._values.length = 0;\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                };\n                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\n                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\n                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\n                Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\n                Map.prototype[iteratorSymbol] = function () { return this.entries(); };\n                Map.prototype._find = function (key, insert) {\n                    if (this._cacheKey !== key) {\n                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);\n                    }\n                    if (this._cacheIndex < 0 && insert) {\n                        this._cacheIndex = this._keys.length;\n                        this._keys.push(key);\n                        this._values.push(undefined);\n                    }\n                    return this._cacheIndex;\n                };\n                return Map;\n            }());\n            function getKey(key, _) {\n                return key;\n            }\n            function getValue(_, value) {\n                return value;\n            }\n            function getEntry(key, value) {\n                return [key, value];\n            }\n        }\n        // naive Set shim\n        function CreateSetPolyfill() {\n            return /** @class */ (function () {\n                function Set() {\n                    this._map = new _Map();\n                }\n                Object.defineProperty(Set.prototype, \"size\", {\n                    get: function () { return this._map.size; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Set.prototype.has = function (value) { return this._map.has(value); };\n                Set.prototype.add = function (value) { return this._map.set(value, value), this; };\n                Set.prototype.delete = function (value) { return this._map.delete(value); };\n                Set.prototype.clear = function () { this._map.clear(); };\n                Set.prototype.keys = function () { return this._map.keys(); };\n                Set.prototype.values = function () { return this._map.values(); };\n                Set.prototype.entries = function () { return this._map.entries(); };\n                Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\n                Set.prototype[iteratorSymbol] = function () { return this.keys(); };\n                return Set;\n            }());\n        }\n        // naive WeakMap shim\n        function CreateWeakMapPolyfill() {\n            var UUID_SIZE = 16;\n            var keys = HashMap.create();\n            var rootKey = CreateUniqueKey();\n            return /** @class */ (function () {\n                function WeakMap() {\n                    this._key = CreateUniqueKey();\n                }\n                WeakMap.prototype.has = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\n                };\n                WeakMap.prototype.get = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\n                };\n                WeakMap.prototype.set = function (target, value) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);\n                    table[this._key] = value;\n                    return this;\n                };\n                WeakMap.prototype.delete = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? delete table[this._key] : false;\n                };\n                WeakMap.prototype.clear = function () {\n                    // NOTE: not a real clear, just makes the previous data unreachable\n                    this._key = CreateUniqueKey();\n                };\n                return WeakMap;\n            }());\n            function CreateUniqueKey() {\n                var key;\n                do\n                    key = \"@@WeakMap@@\" + CreateUUID();\n                while (HashMap.has(keys, key));\n                keys[key] = true;\n                return key;\n            }\n            function GetOrCreateWeakMapTable(target, create) {\n                if (!hasOwn.call(target, rootKey)) {\n                    if (!create)\n                        return undefined;\n                    Object.defineProperty(target, rootKey, { value: HashMap.create() });\n                }\n                return target[rootKey];\n            }\n            function FillRandomBytes(buffer, size) {\n                for (var i = 0; i < size; ++i)\n                    buffer[i] = Math.random() * 0xff | 0;\n                return buffer;\n            }\n            function GenRandomBytes(size) {\n                if (typeof Uint8Array === \"function\") {\n                    if (typeof crypto !== \"undefined\")\n                        return crypto.getRandomValues(new Uint8Array(size));\n                    if (typeof msCrypto !== \"undefined\")\n                        return msCrypto.getRandomValues(new Uint8Array(size));\n                    return FillRandomBytes(new Uint8Array(size), size);\n                }\n                return FillRandomBytes(new Array(size), size);\n            }\n            function CreateUUID() {\n                var data = GenRandomBytes(UUID_SIZE);\n                // mark as random - RFC 4122 § 4.4\n                data[6] = data[6] & 0x4f | 0x40;\n                data[8] = data[8] & 0xbf | 0x80;\n                var result = \"\";\n                for (var offset = 0; offset < UUID_SIZE; ++offset) {\n                    var byte = data[offset];\n                    if (offset === 4 || offset === 6 || offset === 8)\n                        result += \"-\";\n                    if (byte < 16)\n                        result += \"0\";\n                    result += byte.toString(16).toLowerCase();\n                }\n                return result;\n            }\n        }\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n        function MakeDictionary(obj) {\n            obj.__ = undefined;\n            delete obj.__;\n            return obj;\n        }\n    });\n})(Reflect || (Reflect = {}));\n","/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined\n * in FIPS PUB 180-1\n * This source code is derived from sha1.js of the same repository.\n * The difference between SHA-0 and SHA-1 is just a bitwise rotate left\n * operation was added.\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0\n]\n\nvar W = new Array(80)\n\nfunction Sha () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha, Hash)\n\nSha.prototype.init = function () {\n  this._a = 0x67452301\n  this._b = 0xefcdab89\n  this._c = 0x98badcfe\n  this._d = 0x10325476\n  this._e = 0xc3d2e1f0\n\n  return this\n}\n\nfunction rotl5 (num) {\n  return (num << 5) | (num >>> 27)\n}\n\nfunction rotl30 (num) {\n  return (num << 30) | (num >>> 2)\n}\n\nfunction ft (s, b, c, d) {\n  if (s === 0) return (b & c) | ((~b) & d)\n  if (s === 2) return (b & c) | (b & d) | (c & d)\n  return b ^ c ^ d\n}\n\nSha.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n\n  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)\n  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]\n\n  for (var j = 0; j < 80; ++j) {\n    var s = ~~(j / 20)\n    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0\n\n    e = d\n    d = c\n    c = rotl30(b)\n    b = a\n    a = t\n  }\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n}\n\nSha.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(20)\n\n  H.writeInt32BE(this._a | 0, 0)\n  H.writeInt32BE(this._b | 0, 4)\n  H.writeInt32BE(this._c | 0, 8)\n  H.writeInt32BE(this._d | 0, 12)\n  H.writeInt32BE(this._e | 0, 16)\n\n  return H\n}\n\nmodule.exports = Sha\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0\n]\n\nvar W = new Array(80)\n\nfunction Sha1 () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha1, Hash)\n\nSha1.prototype.init = function () {\n  this._a = 0x67452301\n  this._b = 0xefcdab89\n  this._c = 0x98badcfe\n  this._d = 0x10325476\n  this._e = 0xc3d2e1f0\n\n  return this\n}\n\nfunction rotl1 (num) {\n  return (num << 1) | (num >>> 31)\n}\n\nfunction rotl5 (num) {\n  return (num << 5) | (num >>> 27)\n}\n\nfunction rotl30 (num) {\n  return (num << 30) | (num >>> 2)\n}\n\nfunction ft (s, b, c, d) {\n  if (s === 0) return (b & c) | ((~b) & d)\n  if (s === 2) return (b & c) | (b & d) | (c & d)\n  return b ^ c ^ d\n}\n\nSha1.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n\n  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)\n  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])\n\n  for (var j = 0; j < 80; ++j) {\n    var s = ~~(j / 20)\n    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0\n\n    e = d\n    d = c\n    c = rotl30(b)\n    b = a\n    a = t\n  }\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n}\n\nSha1.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(20)\n\n  H.writeInt32BE(this._a | 0, 0)\n  H.writeInt32BE(this._b | 0, 4)\n  H.writeInt32BE(this._c | 0, 8)\n  H.writeInt32BE(this._d | 0, 12)\n  H.writeInt32BE(this._e | 0, 16)\n\n  return H\n}\n\nmodule.exports = Sha1\n","/**\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n * in FIPS 180-2\n * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n *\n */\n\nvar inherits = require('inherits')\nvar Sha256 = require('./sha256')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar W = new Array(64)\n\nfunction Sha224 () {\n  this.init()\n\n  this._w = W // new Array(64)\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha224, Sha256)\n\nSha224.prototype.init = function () {\n  this._a = 0xc1059ed8\n  this._b = 0x367cd507\n  this._c = 0x3070dd17\n  this._d = 0xf70e5939\n  this._e = 0xffc00b31\n  this._f = 0x68581511\n  this._g = 0x64f98fa7\n  this._h = 0xbefa4fa4\n\n  return this\n}\n\nSha224.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(28)\n\n  H.writeInt32BE(this._a, 0)\n  H.writeInt32BE(this._b, 4)\n  H.writeInt32BE(this._c, 8)\n  H.writeInt32BE(this._d, 12)\n  H.writeInt32BE(this._e, 16)\n  H.writeInt32BE(this._f, 20)\n  H.writeInt32BE(this._g, 24)\n\n  return H\n}\n\nmodule.exports = Sha224\n","var inherits = require('inherits')\nvar SHA512 = require('./sha512')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar W = new Array(160)\n\nfunction Sha384 () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 128, 112)\n}\n\ninherits(Sha384, SHA512)\n\nSha384.prototype.init = function () {\n  this._ah = 0xcbbb9d5d\n  this._bh = 0x629a292a\n  this._ch = 0x9159015a\n  this._dh = 0x152fecd8\n  this._eh = 0x67332667\n  this._fh = 0x8eb44a87\n  this._gh = 0xdb0c2e0d\n  this._hh = 0x47b5481d\n\n  this._al = 0xc1059ed8\n  this._bl = 0x367cd507\n  this._cl = 0x3070dd17\n  this._dl = 0xf70e5939\n  this._el = 0xffc00b31\n  this._fl = 0x68581511\n  this._gl = 0x64f98fa7\n  this._hl = 0xbefa4fa4\n\n  return this\n}\n\nSha384.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(48)\n\n  function writeInt64BE (h, l, offset) {\n    H.writeInt32BE(h, offset)\n    H.writeInt32BE(l, offset + 4)\n  }\n\n  writeInt64BE(this._ah, this._al, 0)\n  writeInt64BE(this._bh, this._bl, 8)\n  writeInt64BE(this._ch, this._cl, 16)\n  writeInt64BE(this._dh, this._dl, 24)\n  writeInt64BE(this._eh, this._el, 32)\n  writeInt64BE(this._fh, this._fl, 40)\n\n  return H\n}\n\nmodule.exports = Sha384\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => enableOverride === null ? createDebug.enabled(namespace) : enableOverride,\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\nSymbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\nfunction z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n","/** @license React v17.0.1\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';require(\"object-assign\");var f=require(\"react\"),g=60103;exports.Fragment=60107;if(\"function\"===typeof Symbol&&Symbol.for){var h=Symbol.for;g=h(\"react.element\");exports.Fragment=h(\"react.fragment\")}var m=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,k){var b,d={},e=null,l=null;void 0!==k&&(e=\"\"+k);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(l=a.ref);for(b in a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q;exports.jsxs=q;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","module.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}