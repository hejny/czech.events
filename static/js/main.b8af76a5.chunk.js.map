{"version":3,"sources":["serviceWorker.ts","model/DateRange.ts","model/Event.ts","config.ts","utils/enumToArray.ts","utils/compareDates.ts","utils/fetchEvents.ts","components/ErrorComponent.tsx","components/Form.tsx","components/LoadingComponent.tsx","components/EventPrice.tsx","utils/translate.ts","components/EventCodeParagraph.tsx","components/EventComponent.tsx","utils/showDateAndTime.tsx","components/TalksPageEmail.tsx","utils/categorizeEvents.ts","components/TalksPage.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","DateRange","from","to","date","this","currentDate","Date","month","getMonth","year","getFullYear","ALL","CURRENT_MONTH","forMonth","FROM_CURRENT_MONTH","EventType","EventPriceCurrency","EVENTS_CSV_URL","ConfigChecker","get","url","required","value","enumToArray","enumerable","Object","keys","map","key","filter","v","Event","data","name","topic","city","day","days","time","priceAmount","priceCurrency","codeName","codePercent","type","web","inMail","topParagraph","topParagraphOrder","c","number","parseInt","split","trim","isNaN","Error","getDate","asType","includes","boolean","default","compareEventsbyDate","event1","event2","undefined","date1","date2","delta","error","console","warn","compareDates","fetchEvents","a","async","fetch","toString","cache","response","text","dataString","papaparse","parse","header","object","emptyKeysAsUndefined","decapitalize","isNotEmpty","t","message","sort","ErrorComponent","children","className","Form","action","method","target","onSubmit","event","preventDefault","form","body","FormData","json","result","status","reset","alert","placeholder","htmlFor","defaultValue","onFocus","id","LoadingComponent","EventPrice","price","isNullOrUndefined","Math","ceil","currency","CZK","EUR","translateCurrency","EventCodeParagraph","verbose","floor","EventComponent","href","rel","moment","locale","dateString","format","replace","substr","toUpperCase","showDate","showTime","TalksPageEmail","props","events","range","categorizedEvents","eventsCategorized","eventOrError","push","eventsCategorizedFiltered","eventType","length","categorizeEvents","isIn","e","b","i","HACKATHON","CONFERENCE","MEETUP","WORKSHOP","translateEventType","item","TalksPage","state","loadEvents","setState","React","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8af76a5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","export class DateRange {\r\n    constructor(public from?: Date, public to?: Date) {}\r\n\r\n    static ALL = new DateRange();\r\n    static CURRENT_MONTH = DateRange.forMonth();\r\n    static FROM_CURRENT_MONTH = new DateRange(DateRange.CURRENT_MONTH.from);\r\n\r\n    static forMonth(currentDate = new Date()): DateRange {\r\n        const month = currentDate.getMonth();\r\n        const year = currentDate.getFullYear();\r\n\r\n        const from = new Date(year, month, 1);\r\n        const to = new Date(year, month, 31 /*TODO: Better*/);\r\n\r\n        return new DateRange(from, to);\r\n    }\r\n\r\n    isIn(date: Date) {\r\n        if (this.from && this.from > date) {\r\n            return false;\r\n        }\r\n\r\n        if (this.to && this.to < date) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","import { ConfigChecker, IConfigSource } from 'configchecker';\r\nimport { enumToArray } from '../utils/enumToArray';\r\n\r\nexport enum EventType {\r\n    CONFERENCE = 'CONFERENCE',\r\n    MEETUP = 'MEETUP',\r\n    WORKSHOP = 'WORKSHOP',\r\n    HACKATHON = 'HACKATHON',\r\n}\r\n\r\nexport enum EventPriceCurrency {\r\n    CZK,\r\n    EUR,\r\n}\r\n\r\nexport class Event {\r\n    //TODO: readonly id: number;\r\n    public name: string;\r\n    public topic?: string;\r\n    public city?: string;\r\n    public year: number;\r\n    public month: number;\r\n    public day: number;\r\n    public days: string;\r\n    public date: Date;\r\n    public time?: string;\r\n    public priceAmount?: number;\r\n    public priceCurrency?: EventPriceCurrency;\r\n    public codeName?: string;\r\n    public codePercent?: number;\r\n    public type: EventType;\r\n    public web: URL;\r\n    public inMail: boolean;\r\n    public topParagraph?: string;\r\n    public topParagraphOrder: number;\r\n\r\n    constructor(data: IConfigSource) {\r\n        const c = ConfigChecker.from(data);\r\n\r\n        this.name = c.get('name').required().value;\r\n        this.topic = c.get('topic').value;\r\n        this.city = c.get('city').value;\r\n        this.year = c\r\n            .get('year')\r\n            .number()\r\n            .required().value;\r\n        this.month = c\r\n            .get('month')\r\n            .number()\r\n            .required().value;\r\n        this.days = c.get('days').required().value;\r\n        this.day = parseInt(this.days.split('-')[0].trim());\r\n\r\n        if (isNaN(this.day)) {\r\n            throw new Error(`Day parsed from \"${this.days}\" is NaN.`);\r\n        }\r\n\r\n        try {\r\n            this.date = new Date(this.year, this.month - 1, this.day);\r\n            if (isNaN(this.date.getDate())) throw new Error();\r\n        } catch {\r\n            throw new Error(`Cannot create a valie new Date(${this.year}, ${this.month} - 1, ${this.day});`);\r\n        }\r\n\r\n        this.time = c.get('time').value;\r\n        this.priceAmount = c.get('priceAmount').number().value; //.required()\r\n        // TODO: Configchecker should take number 0 as defined\r\n\r\n        this.priceCurrency = (c.get('priceCurrency').value as unknown) as EventPriceCurrency;\r\n        this.codeName = c.get('codeName').value;\r\n        this.codePercent = c.get('codePercent').number().value;\r\n\r\n        // TODO: Better\r\n        if (this.codePercent) this.codePercent = this.codePercent / 100;\r\n\r\n        this.type = c\r\n            .get('type')\r\n            .required()\r\n            .asType<EventType>().value;\r\n        // TODO: Configchecker native in asType\r\n        // TODO: Typescript Enum in Configchecker\r\n        if (!enumToArray(EventType).includes((this.type as unknown) as string)) {\r\n            throw new Error(`Wrong type \"${this.type}\".`);\r\n        }\r\n        this.web = c\r\n            .get('web')\r\n            .url()\r\n            .required().value;\r\n        this.inMail = c\r\n            .get('inMail')\r\n            .boolean()\r\n            .required().value;\r\n\r\n        this.topParagraph = c.get('topParagraph').value;\r\n\r\n        this.topParagraphOrder = c\r\n            .get('topParagraphOrder')\r\n            .number()\r\n            .default(999).value!;\r\n\r\n        //throw new Error(`Error test`);\r\n    }\r\n\r\n    /*static error(error: Error):Event{\r\n        return new Event();\r\n    }*/\r\n}\r\n","import { ConfigChecker } from 'configchecker';\r\n\r\n// TODO: Better\r\nconst config = ConfigChecker.from(\r\n    /*process.env*/\r\n    {\r\n        EVENTS_CSV_URL: `https://docs.google.com/spreadsheets/d/e/2PACX-1vRq0s15Wi8g4c61FOqIhpn0Lw4azPJdgQ3XmJ3uLDSCqQVs52nJa99YJjOGhl-XJZ713zCprzuYOpVu/pub?gid=0&single=true&output=csv`,\r\n    },\r\n);\r\n\r\n//export const PORT = config.get('PORT', 'Server port').number().default(3000).value;\r\nexport const EVENTS_CSV_URL = config\r\n    .get('EVENTS_CSV_URL')\r\n    .url()\r\n    .required().value; //TODO: use in all places that debugs something\r\n","export function enumToArray(enumerable: any): string[] {\r\n    let enumMembers: any[] = Object.keys(enumerable).map((key) => enumerable[key]);\r\n    let enumValues: string[] = enumMembers.filter((v) => typeof v === 'string');\r\n    return enumValues;\r\n}\r\n","import { Event } from '../model/Event';\r\n\r\ntype CompareResult = 1 | -1 | 0;\r\n\r\nexport function compareEventsbyDate(event1?: Event | string, event2?: Event | string): CompareResult {\r\n    if (typeof event1 === 'string') event1 = undefined;\r\n    if (typeof event2 === 'string') event2 = undefined;\r\n    return compareDates(event1 ? event1.date : undefined, event2 ? event2.date : undefined);\r\n}\r\n\r\nexport function compareDates(date1 = new Date(), date2 = new Date()): CompareResult {\r\n    try {\r\n        const delta = ((new Date(date2) as any) as number) - ((new Date(date1) as any) as number);\r\n\r\n        if (delta > 0) {\r\n            return -1;\r\n        } else if (delta < 0) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    } catch (error) {\r\n        console.warn(error);\r\n        return -1;\r\n    }\r\n}\r\n","import { EVENTS_CSV_URL } from './../config';\r\nimport { IConfigSource } from 'configchecker';\r\nimport { decapitalize, emptyKeysAsUndefined, isNotEmpty } from 'configchecker/lib/utils/object';\r\nimport papaparse from 'papaparse';\r\nimport { Event } from '../model/Event';\r\nimport { compareEventsbyDate } from './compareDates';\r\nimport { IEvents } from '../model/IEvents';\r\n\r\nexport async function fetchEvents(): Promise<IEvents> {\r\n    const response = await fetch(EVENTS_CSV_URL.toString(), { cache: 'reload' });\r\n    const dataString = await response.text();\r\n    const { data } = papaparse.parse(dataString, {\r\n        header: true,\r\n    });\r\n\r\n    //console.log('data', data);\r\n\r\n    return (data as IConfigSource[])\r\n        .map((object) =>\r\n            emptyKeysAsUndefined<string | undefined>(\r\n                object,\r\n                (value) => !['', 'write', 'NULL'].includes((value || '').trim()),\r\n            ),\r\n        )\r\n        .map(decapitalize)\r\n        .filter(isNotEmpty)\r\n        .filter((t) => t['inMail'])\r\n        .map((t) => {\r\n            try {\r\n                return new Event(t);\r\n            } catch (error) {\r\n                return error.message;\r\n                //return error as Error;//Event.error(error);\r\n            }\r\n        })\r\n        .sort(compareEventsbyDate);\r\n    //.filter(isEvent);\r\n}\r\n\r\n/*\r\nTODO: Remove or use\r\nfunction isEvent(t: any): t is Event {\r\n    return t instanceof Event;\r\n}\r\n*/\r\n","import * as React from 'react';\r\n\r\nexport function ErrorComponent({ children }: React.PropsWithChildren<{}>) {\r\n    return (\r\n        <>\r\n            <div className=\"error\">{children}</div>\r\n        </>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { IWPFromResponse } from '../model/IWPFromResponse';\r\n\r\nexport function Form() {\r\n    // TODO: To Config\r\n    return (\r\n        <>\r\n            <form\r\n                action=\"https://www.pavolhejny.com/wp-json/contact-form-7/v1/contact-forms/2466/feedback\"\r\n                method=\"post\"\r\n                target=\"_blank\"\r\n                onSubmit={async (event) => {\r\n                    event.preventDefault();\r\n                    const form = event.target as HTMLFormElement;\r\n\r\n                    try {\r\n                        const result = (await (\r\n                            await fetch(form.action, {\r\n                                method: 'POST',\r\n                                body: new FormData(form),\r\n                            })\r\n                        ).json()) as IWPFromResponse;\r\n\r\n                        if (result.status !== 'mail_sent') {\r\n                            throw new Error(result.message);\r\n                        }\r\n\r\n                        form.reset();\r\n                        alert(`Děkujeme, můžete se těšit na další email!`);\r\n                    } catch (error) {\r\n                        alert(error.message /*TODO: Better*/);\r\n                    }\r\n                }}\r\n            >\r\n                <input type=\"hidden\" name=\"source\" value={window.location.toString()} />\r\n\r\n                <div className=\"group\">\r\n                    <input type=\"text\" name=\"fullname\" placeholder=\"Jan Novák\" />\r\n                    <label htmlFor=\"name\">Vaše jméno:</label>\r\n                    <div className=\"bar\"></div>\r\n                </div>\r\n\r\n                <div className=\"group\">\r\n                    <input\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        required\r\n                        defaultValue=\"@\"\r\n                        onFocus={(event) => {\r\n                            /*console.log(event);\r\n                            const inputElement: HTMLInputElement = event.target as any;\r\n                            console.log(inputElement);\r\n                            console.log(inputElement.value);\r\n                            if (!inputElement.value) {\r\n                                inputElement.value = '@';\r\n                            }*/\r\n                        }}\r\n                    />\r\n                    <label htmlFor=\"email\">E-mail: *</label>\r\n                    <div className=\"bar\"></div>\r\n                </div>\r\n\r\n                {/* TODO: We need here some GDPR */}\r\n                <div className=\"center\">\r\n                    <input value=\"Přihlásit se \" type=\"submit\" id=\"submit\" name=\"submit\" className=\"button\" />\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n","import * as React from 'react';\r\n\r\nexport function LoadingComponent() {\r\n    return (\r\n        <>\r\n            <div className=\"loading\">Načítání...</div>\r\n        </>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { Event } from '../model/Event';\r\nimport { isNullOrUndefined } from 'util';\r\nimport { translateCurrency } from '../utils/translate';\r\n\r\ninterface IEventPriceProps {\r\n    event: Event;\r\n    price?: number;\r\n}\r\n\r\nexport function EventPrice({ event, price }: IEventPriceProps) {\r\n    if (!price) price = event.priceAmount;\r\n    if (isNullOrUndefined(price)) return <></>;\r\n    if (price === 0) return <>💸&nbsp;Zdarma</>;\r\n    return <>💸&nbsp;{`${Math.ceil(price * 100) / 100} ${translateCurrency(event.priceCurrency!)}`}</>;\r\n}\r\n","import { EventPriceCurrency, EventType } from './../model/Event';\r\n\r\nexport function translateCurrency(currency: EventPriceCurrency): string {\r\n    // TODO: Hardcoded\r\n    switch (currency) {\r\n        case 'CZK' as any:\r\n        case EventPriceCurrency.CZK:\r\n            return 'Kč';\r\n        case 'EUR' as any:\r\n        case EventPriceCurrency.EUR:\r\n            return '‎€';\r\n        default:\r\n            return currency;\r\n    }\r\n}\r\n\r\nexport function translateEventType(eventType: EventType): string {\r\n    // TODO: Plular\r\n    // TODO: Hardcoded\r\n    switch (eventType) {\r\n        case EventType.HACKATHON:\r\n            return 'Hackathony';\r\n        case EventType.CONFERENCE:\r\n            return '‎Konference';\r\n        case EventType.MEETUP:\r\n            return '‎Meetupy';\r\n        case EventType.WORKSHOP:\r\n            return '‎Workshopy';\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Event } from '../model/Event';\r\nimport { EventPrice } from './EventPrice';\r\n\r\ninterface IEventCodeParagraphProps {\r\n    event: Event;\r\n    verbose: boolean;\r\n}\r\n\r\nexport function EventCodeParagraph({ event, verbose }: IEventCodeParagraphProps) {\r\n    return (\r\n        <>\r\n            {event.codeName && event.codePercent && event.priceAmount && event.priceCurrency && (\r\n                <>\r\n                    <br />A s kódem <b>{event.codeName}</b> to budete mít o {Math.floor(event.codePercent * 100)}%\r\n                    levnější\r\n                    {verbose && (\r\n                        <>\r\n                            tzn. za <EventPrice {...{ event, price: event.priceAmount * (1 - event.codePercent) }} />\r\n                        </>\r\n                    )}\r\n                    .\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { Event } from '../model/Event';\r\nimport { EventPrice } from './EventPrice';\r\nimport { EventCodeParagraph } from './EventCodeParagraph';\r\nimport { showDate, showTime } from '../utils/showDateAndTime';\r\n\r\ninterface IEventComponentProps {\r\n    event: Event;\r\n}\r\n\r\nexport function EventComponent({ event }: IEventComponentProps) {\r\n    return (\r\n        <span className={event.date < new Date() ? 'past' : ''}>\r\n            {event.topParagraph ? '⭐' : ''}\r\n            <a href={event.web.toString()} target=\"_blank\" rel=\"nofolow noopener noreferrer\">\r\n                <b>{event.name}</b>\r\n                {event.topic ? ` – ${event.topic}` : ''}\r\n            </a>\r\n            <br />\r\n            <>🌆&nbsp;{event.city}</>\r\n            &nbsp;\r\n            <>📅&nbsp;{showDate(event.date)}</>\r\n            {event.time && (\r\n                <>\r\n                    &nbsp;\r\n                    <>⏱️&nbsp;{showTime(event.time)}</>\r\n                </>\r\n            )}\r\n            &nbsp;\r\n            <EventPrice {...{ event }} />\r\n            <EventCodeParagraph {...{ event, verbose: true }} />\r\n            {}\r\n            <br />\r\n            <br />\r\n            {}\r\n        </span>\r\n    );\r\n}\r\n","import moment from 'moment';\r\nimport 'moment/locale/cs';\r\n\r\nexport function showDate(date: Date): string {\r\n    try {\r\n        moment.locale('cs');\r\n        let dateString = moment(date).format('LLLL');\r\n        dateString = dateString.split('0:00')[0];\r\n        //TODO: More elegant way\r\n        dateString = dateString.replace('leden', 'Ledna');\r\n        dateString = dateString.replace('únor', 'Února');\r\n        dateString = dateString.replace('březen', 'Března');\r\n        dateString = dateString.replace('duben', 'Dubna');\r\n        dateString = dateString.replace('květen', 'Května');\r\n        dateString = dateString.replace('červen', 'Června');\r\n        dateString = dateString.replace('červenec', 'Července');\r\n        dateString = dateString.replace('srpen', 'Srpna');\r\n        dateString = dateString.replace('září', 'Září');\r\n        dateString = dateString.replace('říjen', 'Října');\r\n        dateString = dateString.replace('listopad', 'Listopadu');\r\n        dateString = dateString.replace('prosinec', 'Prosince');\r\n        dateString = dateString.substr(0, 1).toUpperCase() + dateString.substr(1);\r\n        return dateString;\r\n    } catch (error) {\r\n        throw new Error(`Problem when parsing moment('${date}').format('LLLL');`);\r\n    }\r\n}\r\nexport function showTime(time: string): string {\r\n    try {\r\n        moment.locale('cs');\r\n        let timeString = moment('2010-10-20 ' + time).format('LT');\r\n        return timeString;\r\n    } catch (error) {\r\n        throw new Error(`Problem when parsing moment('2010-10-20 ' + '${time}').format('LT');`);\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { DateRange } from '../model/DateRange';\r\nimport { Event } from '../model/Event';\r\nimport { IEvents } from '../model/IEvents';\r\nimport { categorizeEvents } from '../utils/categorizeEvents';\r\nimport { translateEventType } from '../utils/translate';\r\nimport { ErrorComponent } from './ErrorComponent';\r\nimport { EventComponent } from './EventComponent';\r\nimport { EventCodeParagraph } from './EventCodeParagraph';\r\n\r\ninterface ITalksPageEmailProps {\r\n    range: DateRange;\r\n    events: IEvents;\r\n}\r\n\r\nexport function TalksPageEmail(props: ITalksPageEmailProps) {\r\n    const { events, range } = props;\r\n\r\n    const filteredEvents = events.filter((event) => (event instanceof Event ? range.isIn(event.date) : true));\r\n\r\n    //console.log('filteredEvents', filteredEvents);\r\n    const categorizedEvents = categorizeEvents(filteredEvents);\r\n\r\n    return (\r\n        <>\r\n            <h2>{`📅 Konference / meetupy / hackathony – co se děje z IT / Startupové akce 🌆`}</h2>\r\n            Ahoj,\r\n            <br />\r\n            opět jsme dali dohromady seznam událostí, na které se vyplatí zajít:\r\n            <br />\r\n            {(events.filter((e) => e instanceof Event) as Event[])\r\n                .filter((e) => e.topParagraph)\r\n                .sort((a, b) => (a.topParagraphOrder > b.topParagraphOrder ? 1 : -1))\r\n                .map((event, i) => (\r\n                    <p key={i}>\r\n                        {event.topParagraph}\r\n                        <EventCodeParagraph {...{ event, verbose: false }} />\r\n                    </p>\r\n                ))}\r\n            {Object.keys(categorizedEvents).map((type) => (\r\n                <p key={type}>\r\n                    <h2>{translateEventType(type as any)}</h2>\r\n                    <span>\r\n                        {categorizedEvents![type].map((item, key) =>\r\n                            item instanceof Event ? (\r\n                                <EventComponent {...{ event: item, key }} />\r\n                            ) : (\r\n                                <ErrorComponent {...{ key }}>{item}</ErrorComponent>\r\n                            ),\r\n                        )}\r\n                    </span>\r\n                </p>\r\n            ))}\r\n            <br />\r\n            <i>\r\n                PS: <b>Budeme rádi za vaše návrhy a připomínky</b>, můžete <b>odpovědět rovnou na email</b>.\r\n            </i>\r\n            {/*\r\n            <br />\r\n            PPS: Pokud už nechcete dostat další email, klikněte sem pro jejich odhlášení.\r\n            */}\r\n            <br />\r\n            <br />\r\n            <a href=\"https://www.pavolhejny.com/\">Pavol</a>\r\n            &nbsp;&amp;&nbsp;\r\n            <a href=\"https://www.linkedin.com/in/tereza-texlova/\">Tereza</a>\r\n        </>\r\n    );\r\n}\r\n","import { EventType } from './../model/Event';\r\nimport { IEvents } from '../model/IEvents';\r\nimport { Event } from '../model/Event';\r\nimport { enumToArray } from './enumToArray';\r\nimport { IEventsCategorized } from '../model/IEventsCategorized';\r\n\r\nexport function categorizeEvents(events: IEvents): IEventsCategorized {\r\n    const eventsCategorized: IEventsCategorized = {};\r\n\r\n    for (const eventType of enumToArray(EventType)) {\r\n        eventsCategorized[eventType] = [];\r\n    }\r\n\r\n    for (const eventOrError of events) {\r\n        let type: string;\r\n        if (eventOrError instanceof Event) {\r\n            type = eventOrError.type;\r\n        } else {\r\n            type = 'errors';\r\n        }\r\n\r\n        eventsCategorized[type] = eventsCategorized[type] || [];\r\n        eventsCategorized[type].push(eventOrError);\r\n    }\r\n\r\n    const eventsCategorizedFiltered: IEventsCategorized = {};\r\n\r\n    for (const eventType of Object.keys(eventsCategorized)) {\r\n        if (eventsCategorized[eventType].length > 0) {\r\n            eventsCategorizedFiltered[eventType] = eventsCategorized[eventType];\r\n        }\r\n    }\r\n\r\n    return eventsCategorizedFiltered;\r\n}\r\n","import * as React from 'react';\r\nimport { DateRange } from '../model/DateRange';\r\nimport { IEvents } from '../model/IEvents';\r\nimport { fetchEvents } from '../utils/fetchEvents';\r\nimport { ErrorComponent } from './ErrorComponent';\r\nimport { Form } from './Form';\r\nimport { LoadingComponent } from './LoadingComponent';\r\nimport { TalksPageEmail } from './TalksPageEmail';\r\n\r\ninterface ITalksPageProps {}\r\n\r\ninterface ITalksPageState {\r\n    error: null | string;\r\n    range: DateRange;\r\n    events: null | IEvents;\r\n}\r\n\r\nexport class TalksPage extends React.Component<ITalksPageProps, ITalksPageState> {\r\n    state: ITalksPageState = {\r\n        error: null,\r\n        range: DateRange.FROM_CURRENT_MONTH,\r\n        events: null,\r\n    };\r\n\r\n    constructor(props: ITalksPageProps) {\r\n        super(props);\r\n        this.loadEvents();\r\n    }\r\n\r\n    private async loadEvents() {\r\n        try {\r\n            const events = await fetchEvents();\r\n            //console.log('events', events);\r\n            this.setState({ events });\r\n        } catch (error) {\r\n            this.setState({ error: error.message });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"content\">\r\n                    <div className=\"front black\">\r\n                        <div className=\"inner\">\r\n                            <h1>Máme přehled o nejzajímavějších událostech z IT &amp; startupového světa.</h1>\r\n                            <h2 className=\"font-light\">\r\n                                Dejte nám Vaší emailovou adresu a my Vám budeme pravidelně jednou za měsíc posílat co se\r\n                                děje:\r\n                            </h2>\r\n                            <Form />\r\n\r\n                            <h2 className=\"separator font-light\">\r\n                                A jak takový mail vypadá? Tady máte živou ukázku z rozpracovaného mailu na další měsíc:\r\n                            </h2>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"letter white\">\r\n                        {/*\r\n                        TODO: Or make tabs - see bellow\r\n                        <div className=\"tab\" onClick={() => this.setState({ range: DateRange.CURRENT_MONTH })}>\r\n                            Aktuání měsíc\r\n                        </div>\r\n                        <div className=\"tab\" onClick={() => this.setState({ range: DateRange.ALL })}>\r\n                            Vše\r\n                        </div>\r\n                         */}\r\n\r\n                        <div className=\"inner\">\r\n                            {/*\r\n                            TODO: Here can be a selecotr of the months but firstly we need to add backend and better DB so it is not priority now.\r\n                            \r\n                            TODO: Or maybe like this:\r\n                            <select>\r\n                                <option>Aktuální měsíc</option>\r\n                                <option>Budoucí události</option>\r\n                                <option>Budoucí události tento měsíc</option>\r\n                                <option>Vše</option>\r\n                            </select>\r\n\r\n                            */}\r\n\r\n                            {this.state.error ? (\r\n                                <ErrorComponent>\r\n                                    <pre>{this.state.error}</pre>\r\n                                </ErrorComponent>\r\n                            ) : !this.state.events ? (\r\n                                <LoadingComponent />\r\n                            ) : (\r\n                                <TalksPageEmail {...{ events: this.state.events, range: this.state.range }} />\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <footer className=\"footer black\">{/*TODO:*/}</footer>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { TalksPage } from './components/TalksPage';\r\n\r\nReactDOM.render(<TalksPage />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}